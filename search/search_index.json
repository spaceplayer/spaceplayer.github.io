{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\u65b0\u5fd7\u7684\u4e2a\u4eba\u5c0f\u7ad9 \u672c\u7ad9\u4e3b\u8981\u662f\u65b0\u5fd7\u7684\u4e2a\u4eba\u7b14\u8bb0\u53ca\u601d\u8003\uff0c\u7c7b\u76ee\u5982\u4e0b \u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784 \u63a8\u8350\u7cfb\u7edf \u81ea\u7136\u8bed\u8a00\u5904\u7406 \u673a\u5668\u5b66\u4e60 \u6df1\u5ea6\u5b66\u4e60 \u5f3a\u5316\u5b66\u4e60 \u5e38\u7528\u5de5\u5177 \u8bfb\u4e66\u7b14\u8bb0 \u968f\u7b14\u8bb0\u4e8b \u5e74\u5ea6\u8ba1\u5212","title":"\u65b0\u5fd7\u7684\u4e2a\u4eba\u5c0f\u7ad9"},{"location":"index.html#_1","text":"\u672c\u7ad9\u4e3b\u8981\u662f\u65b0\u5fd7\u7684\u4e2a\u4eba\u7b14\u8bb0\u53ca\u601d\u8003\uff0c\u7c7b\u76ee\u5982\u4e0b \u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784 \u63a8\u8350\u7cfb\u7edf \u81ea\u7136\u8bed\u8a00\u5904\u7406 \u673a\u5668\u5b66\u4e60 \u6df1\u5ea6\u5b66\u4e60 \u5f3a\u5316\u5b66\u4e60 \u5e38\u7528\u5de5\u5177 \u8bfb\u4e66\u7b14\u8bb0 \u968f\u7b14\u8bb0\u4e8b \u5e74\u5ea6\u8ba1\u5212","title":"\u65b0\u5fd7\u7684\u4e2a\u4eba\u5c0f\u7ad9"},{"location":"about.html","text":"Acernae Memnonis amore Recusat territus precor Lorem markdownum iterum lotos. Refert circumsona extrema, sciat, vesci quae verba antemnis, si dives. Placatoque Dorylas perque , ingemuit haut, obsita venit movit Astyages pendere sinumque: quoque. Secedere et oculos Cinyra perculit fit o fontibus iuvere proque illa . Est operique mutantur ferro Levatus his maxima Myrrha Aiax parebunt Tellus ista verbaque Caenea Iamque virgo quondam; vix vates de labori in a suoque nam illis, sed tamen, praemia solari Canentem. Genitorque proles. Et virus incalfacit, lateant discordia hostis lata illic, diu igni. Exercita differt Rogant tanta nece frustra saxea tellus Melaneus In equidem imagine igitur passis frondibus Iras maxima tibi Sigeia gentis mucrone exceptas Moles boum Fidesque flamma fateor et dolor Pars ipsa modulata candore Oliaros, bis doloris, enim nunc at materno! Iovis disiunxisse , aegide curam Iuppiter vocabula vestra? Ipse nostra forte invenies eo carbasa habent tunc fistula, et sucus quam sequantur nomen, deos. Verbis memor erat, quae fere ipse fontis egreditur, quem? Novit litore ante et casus illuc. Bello enim sunt exhausta ad cognoscenda si Patrio captat mirabile Non mea cum liquidas inhibere aurumque visus Mihi neque ea in, sit cumque oves artes, inmensum si pridem, ictus. Cui deos: utiliter animalia confundant sensimus grandia offensane et mihi bimembres poscit te togaque. Bifurcum se inpia , sapiente collo: ut imoque, auresque non Poeante edentem: ecce nomine digitos potestas. Vertice vipereos nostrae locorum est sua vestras nocte, ore cumulusque auctam ; Paphius quadriiugo tollite Tamasenum. E fallaci somnus exercita tum habet Glaucus pro Lacinia monstri naiadum, cetera utque. Rite dicta? Capacibus manat negaretur serta pars venit, medius paternos conlapsamque usquam colla sunt ipso est lyncum. Agricolam seraque. Pensas qui et quam simul carmine, est sed Phrygiae.b x Unda aequora satis remissurus aliis tumulum passus quondam tibi tam namque erat istis elusaque inpius indignis si sororem litus tempore . Iunctorum mariti , per taciturnus erepta leves concussit, recurvam palmis intempestiva.","title":"Acernae Memnonis amore"},{"location":"about.html#acernae-memnonis-amore","text":"","title":"Acernae Memnonis amore"},{"location":"about.html#recusat-territus-precor","text":"Lorem markdownum iterum lotos. Refert circumsona extrema, sciat, vesci quae verba antemnis, si dives. Placatoque Dorylas perque , ingemuit haut, obsita venit movit Astyages pendere sinumque: quoque. Secedere et oculos Cinyra perculit fit o fontibus iuvere proque illa . Est operique mutantur ferro Levatus his maxima Myrrha Aiax parebunt Tellus ista verbaque Caenea Iamque virgo quondam; vix vates de labori in a suoque nam illis, sed tamen, praemia solari Canentem. Genitorque proles. Et virus incalfacit, lateant discordia hostis lata illic, diu igni. Exercita differt Rogant tanta nece frustra saxea tellus Melaneus In equidem imagine igitur passis frondibus Iras maxima tibi Sigeia gentis mucrone exceptas Moles boum","title":"Recusat territus precor"},{"location":"about.html#fidesque-flamma-fateor-et-dolor","text":"Pars ipsa modulata candore Oliaros, bis doloris, enim nunc at materno! Iovis disiunxisse , aegide curam Iuppiter vocabula vestra? Ipse nostra forte invenies eo carbasa habent tunc fistula, et sucus quam sequantur nomen, deos. Verbis memor erat, quae fere ipse fontis egreditur, quem? Novit litore ante et casus illuc. Bello enim sunt exhausta ad cognoscenda si Patrio captat mirabile Non mea cum liquidas inhibere aurumque visus Mihi neque ea in, sit cumque oves artes, inmensum si pridem, ictus. Cui deos: utiliter animalia confundant sensimus grandia offensane et mihi bimembres poscit te togaque. Bifurcum se inpia , sapiente collo: ut imoque, auresque non Poeante edentem: ecce nomine digitos potestas. Vertice vipereos nostrae locorum est sua vestras nocte, ore cumulusque auctam ; Paphius quadriiugo tollite Tamasenum. E fallaci somnus exercita tum habet Glaucus pro Lacinia monstri naiadum, cetera utque. Rite dicta? Capacibus manat negaretur serta pars venit, medius paternos conlapsamque usquam colla sunt ipso est lyncum. Agricolam seraque. Pensas qui et quam simul carmine, est sed Phrygiae.b x Unda aequora satis remissurus aliis tumulum passus quondam tibi tam namque erat istis elusaque inpius indignis si sororem litus tempore . Iunctorum mariti , per taciturnus erepta leves concussit, recurvam palmis intempestiva.","title":"Fidesque flamma fateor et dolor"},{"location":"\u5176\u4ed6/CUDA\u521d\u7ea7\u6559\u7a0b[\u5468\u658c].html","text":"CUDA\u521d\u7ea7\u6559\u7a0b[\u5468\u658c] CPU\u90e8\u5206 GPU\u67b6\u6784 \u200b \u9996\u5148\u6211\u4eec\u8981\u660e\u786e\uff1aSP\uff08streaming Process\uff09\uff0cSM\uff08streaming multiprocessor\uff09\u662f\u786c\u4ef6\uff08GPU hardware\uff09\u6982\u5ff5\u3002\u800cthread\uff0cblock\uff0cgrid\uff0cwarp\u662f\u8f6f\u4ef6\u4e0a\u7684\uff08CUDA\uff09\u6982\u5ff5\u3002 \u786c\u4ef6 SP\uff08ALU)\uff1a\u6700\u57fa\u672c\u7684\u5904\u7406\u5355\u5143\uff0cstreaming processor\uff0c\u4e5f\u79f0\u4e3aCUDA core\u3002\u6700\u540e\u5177\u4f53\u7684\u6307\u4ee4\u548c\u4efb\u52a1\u90fd\u662f\u5728SP\u4e0a\u5904\u7406\u7684\u3002GPU\u8fdb\u884c\u5e76\u884c\u8ba1\u7b97\uff0c\u4e5f\u5c31\u662f\u5f88\u591a\u4e2aSP\u540c\u65f6\u505a\u5904\u7406\u3002 SM\uff1a\u591a\u4e2aSP\u52a0\u4e0a\u5176\u4ed6\u7684\u4e00\u4e9b\u8d44\u6e90\u7ec4\u6210\u4e00\u4e2astreaming multiprocessor\u3002\u4e5f\u53ebGPU\u5927\u6838\uff0c\u5176\u4ed6\u8d44\u6e90\u5982\uff1awarp scheduler\uff0cregister\uff0cshared memory\u7b49\u3002SM\u53ef\u4ee5\u770b\u505aGPU\u7684\u5fc3\u810f\uff08\u5bf9\u6bd4CPU\u6838\u5fc3\uff09\uff0cregister\u548cshared memory\u662fSM\u7684\u7a00\u7f3a\u8d44\u6e90\u3002CUDA\u5c06\u8fd9\u4e9b\u8d44\u6e90\u5206\u914d\u7ed9\u6240\u6709\u9a7b\u7559\u5728SM\u4e2d\u7684threads\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u6709\u9650\u7684\u8d44\u6e90\u5c31\u4f7f\u6bcf\u4e2aSM\u4e2dactive warps\u6709\u975e\u5e38\u4e25\u683c\u7684\u9650\u5236\uff0c\u4e5f\u5c31\u9650\u5236\u4e86\u5e76\u884c\u80fd\u529b\u3002 \u9700\u8981\u6307\u51fa\uff0c\u6bcf\u4e2aSM\u5305\u542b\u7684SP\u6570\u91cf\u4f9d\u636eGPU\u67b6\u6784\u800c\u4e0d\u540c\uff0cFermi\u67b6\u6784GF100\u662f32\u4e2a\uff0cGF10X\u662f48\u4e2a\uff0cKepler\u67b6\u6784\u90fd\u662f192\u4e2a\uff0cMaxwell\u90fd\u662f128\u4e2a\u3002\u76f8\u540c\u67b6\u6784\u7684GPU\u5305\u542b\u7684SM\u6570\u91cf\u5219\u6839\u636eGPU\u7684\u4e2d\u9ad8\u4f4e\u7aef\u6765\u5b9a\u3002\u4e0b\u56fe\u7ed9\u51faNvidia GTX980 \u7684\u4e00\u4e2aSM\u793a\u610f\u56fe\uff0c\u56fe\u4e2d\u6bcf\u4e2a\u7eff\u8272\u6846\u6846\u8868\u793a\u4e00\u4e2aSP\u3002\u6ce8\u610f\uff0c\u5728Maxwell\u67b6\u6784\u4e2d\uff0cNvidia\u5df2\u7ecf\u628aSM\u6539\u53ebSMM\u3002\u4e0b\u56fe\u8868\u793a\u7684\u4ec5\u4ec5\u662f\u4e00\u4e2aSMM\uff0c\u4e00\u4e2aGPU\u53ef\u4ee5\u6709\u591a\u4e2aSM\uff08\u6bd4\u598216\u4e2a\uff09\uff0c\u6700\u7ec8\u4e00\u4e2aGPU\u53ef\u80fd\u5305\u542b\u6709\u4e0a\u5343\u4e2aSP\u3002\u8fd9\u4e48\u591a\u6838\u5fc3\u201c\u540c\u65f6\u8fd0\u884c\u201d\uff0c\u901f\u5ea6\u53ef\u60f3\u800c\u77e5\uff0c\u8fd9\u4e2a\u5f15\u53f7\u53ea\u662f\u60f3\u8868\u660e\u5b9e\u9645\u4e0a\uff0c\u8f6f\u4ef6\u903b\u8f91\u4e0a\u662f\u6240\u6709SP\u662f\u5e76\u884c\u7684\uff0c\u4f46\u662f\u7269\u7406\u4e0a\u5e76\u4e0d\u662f\u6240\u6709SP\u90fd\u80fd\u540c\u65f6\u6267\u884c\u8ba1\u7b97(\u7531\u4e8e\u8d44\u6e90\u9650\u5236\uff0c\u8fd9\u5c31\u5f15\u51fa\u4e86warp\u6982\u5ff5)\uff0c\u56e0\u4e3a\u6709\u4e9b\u4f1a\u5904\u4e8e\u6302\u8d77\uff0c\u5c31\u7eea\u7b49\u5176\u4ed6\u72b6\u6001\uff0c\u8fd9\u6709\u5173GPU\u7684\u7ebf\u7a0b\u8c03\u5ea6\uff0c\u4ee5\u540e\u518d\u5199\u4e86\u3002 \u8f6f\u4ef6 \u200b thread\uff0cblock\uff0cgrid\uff0cwarp\u662fCUDA\u7f16\u7a0b\u4e0a\u7684\u6982\u5ff5\uff0c\u4ee5\u65b9\u4fbf\u7a0b\u5e8f\u5458\u8f6f\u4ef6\u8bbe\u8ba1\uff0c\u7ec4\u7ec7\u7ebf\u7a0b\uff0c\u540c\u6837\u7684\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u793a\u610f\u56fe\u6765\u8868\u793a\u3002 thread\uff1a\u4e00\u4e2aCUDA\u7684\u5e76\u884c\u7a0b\u5e8f\u4f1a\u88ab\u4ee5\u8bb8\u591a\u4e2athreads\u6765\u6267\u884c\u3002 block\uff1a\u6570\u4e2athreads\u4f1a\u88ab\u7fa4\u7ec4\u6210\u4e00\u4e2ablock\uff0c\u540c\u4e00\u4e2ablock\u4e2d\u7684threads\u53ef\u4ee5\u540c\u6b65\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7shared memory\u901a\u4fe1\u3002 grid\uff1a\u591a\u4e2ablocks\u5219\u4f1a\u518d\u6784\u6210grid\u3002 warp\uff1aGPU\u6267\u884c\u7a0b\u5e8f\u65f6\u7684\u8c03\u5ea6\u5355\u4f4d\uff0c\u76ee\u524dcuda\u7684warp\u7684\u5927\u5c0f\u4e3a32\uff0c\u540c\u5728\u4e00\u4e2awarp\u7684\u7ebf\u7a0b\uff0c\u4ee5\u4e0d\u540c\u6570\u636e\u8d44\u6e90\u6267\u884c\u76f8\u540c\u7684\u6307\u4ee4,\u8fd9\u5c31\u662f\u6240\u8c13 SIMT\u3002 \u5bf9\u5e94\u5173\u7cfb \u200b \u4ece\u8f6f\u4ef6\u4e0a\u770b\uff0cSM\u66f4\u50cf\u4e00\u4e2a\u72ec\u7acb\u7684CPU core\u3002SM\uff08Streaming Multiprocessors\uff09\u662fGPU\u67b6\u6784\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u90e8\u5206\uff0cGPU\u786c\u4ef6\u7684\u5e76\u884c\u6027\u5c31\u662f\u7531SM\u51b3\u5b9a\u7684\u3002\u4ee5Fermi\u67b6\u6784\u4e3a\u4f8b\uff0c\u5176\u5305\u542b\u4ee5\u4e0b\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\uff1a CUDA cores Shared Memory/L1Cache Register File Load/Store Units Special Function Units Warp Scheduler GPU\u4e2d\u6bcf\u4e2asm\u90fd\u8bbe\u8ba1\u6210\u652f\u6301\u6570\u4ee5\u767e\u8ba1\u7684\u7ebf\u7a0b\u5e76\u884c\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2aGPU\u90fd\u5305\u542b\u4e86\u5f88\u591a\u7684SM\uff0c\u6240\u4ee5GPU\u652f\u6301\u6210\u767e\u4e0a\u5343\u7684\u7ebf\u7a0b\u5e76\u884c\u6267\u884c\u3002\u5f53\u4e00\u4e2akernel\u542f\u52a8\u540e\uff0cthread\u4f1a\u88ab\u5206\u914d\u5230\u8fd9\u4e9bSM\u4e2d\u6267\u884c\u3002\u5927\u91cf\u7684thread\u53ef\u80fd\u4f1a\u88ab\u5206\u914d\u5230\u4e0d\u540c\u7684SM\uff0c\u540c\u4e00\u4e2ablock\u4e2d\u7684threads\u5fc5\u7136\u5728\u540c\u4e00\u4e2aSM\u4e2d\u5e76\u884c\uff08SIMT\uff09\u6267\u884c\u3002\u6bcf\u4e2athread\u62e5\u6709\u5b83\u81ea\u5df1\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u548c\u72b6\u6001\u5bc4\u5b58\u5668\uff0c\u5e76\u4e14\u7528\u8be5\u7ebf\u7a0b\u81ea\u5df1\u7684\u6570\u636e\u6267\u884c\u6307\u4ee4\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684Single Instruction Multiple Thread\u3002 \u4e00\u4e2aSP\u53ef\u4ee5\u6267\u884c\u4e00\u4e2athread\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u6240\u6709\u7684thread\u80fd\u591f\u5728\u540c\u4e00\u65f6\u523b\u6267\u884c\u3002Nvidia\u628a32\u4e2athreads\u7ec4\u6210\u4e00\u4e2awarp\uff0cwarp\u662f\u8c03\u5ea6\u548c\u8fd0\u884c\u7684\u57fa\u672c\u5355\u5143\u3002warp\u4e2d\u6240\u6709threads\u5e76\u884c\u7684\u6267\u884c\u76f8\u540c\u7684\u6307\u4ee4\u3002\u4e00\u4e2awarp\u9700\u8981\u5360\u7528\u4e00\u4e2aSM\u8fd0\u884c\uff0c\u591a\u4e2awarps\u9700\u8981\u8f6e\u6d41\u8fdb\u5165SM\u3002\u7531SM\u7684\u786c\u4ef6warp scheduler\u8d1f\u8d23\u8c03\u5ea6\u3002\u76ee\u524d\u6bcf\u4e2awarp\u5305\u542b32\u4e2athreads\uff08Nvidia\u4fdd\u7559\u4fee\u6539\u6570\u91cf\u7684\u6743\u5229\uff09\u3002\u6240\u4ee5\uff0c\u4e00\u4e2aGPU\u4e0aresident thread\u6700\u591a\u53ea\u6709 SM*warp\u4e2a\u3002 \u524d\u9762\u5df2\u7ecf\u8bf4block\u662f\u8f6f\u4ef6\u6982\u5ff5\uff0c\u4e00\u4e2ablock\u53ea\u4f1a\u7531\u4e00\u4e2asm\u8c03\u5ea6\uff0c\u7a0b\u5e8f\u5458\u5728\u5f00\u53d1\u65f6\uff0c\u901a\u8fc7\u8bbe\u5b9ablock\u7684\u5c5e\u6027\uff0c \u201c\u544a\u8bc9\u201d GPU\u786c\u4ef6\uff0c\u6211\u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u600e\u4e48\u7ec4\u7ec7\u3002\u800c\u5177\u4f53\u600e\u4e48\u8c03\u5ea6\u7531sm\u7684warps scheduler\u8d1f\u8d23\uff0cblock\u4e00\u65e6\u88ab\u5206\u914d\u597dSM\uff0c\u8be5block\u5c31\u4f1a\u4e00\u76f4\u9a7b\u7559\u5728\u8be5SM\u4e2d\uff0c\u76f4\u5230\u6267\u884c\u7ed3\u675f\u3002\u4e00\u4e2aSM\u53ef\u4ee5\u540c\u65f6\u62e5\u6709\u591a\u4e2ablocks\uff0c\u4f46\u9700\u8981\u5e8f\u5217\u6267\u884c\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u8f6f\u4ef6\u786c\u4ef6\u65b9\u9762\u7684\u672f\u8bed\u5bf9\u5e94\u5173\u7cfb\uff1a \u3000\u3000 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5927\u90e8\u5206threads\u53ea\u662f\u903b\u8f91\u4e0a\u5e76\u884c\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684thread\u53ef\u4ee5\u5728\u7269\u7406\u4e0a\u540c\u65f6\u6267\u884c\u3002\u4f8b\u5982\uff0c\u9047\u5230\u5206\u652f\u8bed\u53e5\uff08if else\uff0cwhile\uff0cfor\u7b49\uff09\u65f6\uff0c\u5404\u4e2athread\u7684\u6267\u884c\u6761\u4ef6\u4e0d\u4e00\u6837\u5fc5\u7136\u4ea7\u751f\u5206\u652f\u6267\u884c\uff0c\u8fd9\u5c31\u5bfc\u81f4\u540c\u4e00\u4e2ablock\u4e2d\u7684\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u6b65\u8c03\u3002\u53e6\u5916\uff0c\u5e76\u884cthread\u4e4b\u95f4\u7684\u5171\u4eab\u6570\u636e\u4f1a\u5bfc\u81f4\u7ade\u6001\uff1a\u591a\u4e2a\u7ebf\u7a0b\u8bf7\u6c42\u540c\u4e00\u4e2a\u6570\u636e\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002CUDA\u63d0\u4f9b\u4e86cudaThreadSynchronize()\u6765\u540c\u6b65\u540c\u4e00\u4e2ablock\u7684thread\u4ee5\u4fdd\u8bc1\u5728\u8fdb\u884c\u4e0b\u4e00\u6b65\u5904\u7406\u4e4b\u524d\uff0c\u6240\u6709thread\u90fd\u5230\u8fbe\u67d0\u4e2a\u65f6\u95f4\u70b9\u3002 \u540c\u4e00\u4e2awarp\u4e2d\u7684thread\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0cactive warps\u88absm\u8d44\u6e90\u9650\u5236\u3002\u5f53\u4e00\u4e2awarp\u7a7a\u95f2\u65f6\uff0cSM\u5c31\u53ef\u4ee5\u8c03\u5ea6\u9a7b\u7559\u5728\u8be5SM\u4e2d\u53e6\u4e00\u4e2a\u53ef\u7528warp\u3002\u5728\u5e76\u53d1\u7684warp\u4e4b\u95f4\u5207\u6362\u662f\u6ca1\u4ec0\u4e48\u6d88\u8017\u7684\uff0c\u56e0\u4e3a\u786c\u4ef6\u8d44\u6e90\u65e9\u5c31\u88ab\u5206\u914d\u5230\u6240\u6709thread\u548cblock\uff0c\u6240\u4ee5\u8be5\u65b0\u8c03\u5ea6\u7684warp\u7684\u72b6\u6001\u5df2\u7ecf\u5b58\u50a8\u5728SM\u4e2d\u4e86\u3002\u4e0d\u540c\u4e8eCPU\uff0cCPU\u5207\u6362\u7ebf\u7a0b\u9700\u8981\u4fdd\u5b58/\u8bfb\u53d6\u7ebf\u7a0b\u4e0a\u4e0b\u6587\uff08register\u5185\u5bb9\uff09\uff0c\u8fd9\u662f\u975e\u5e38\u8017\u65f6\u7684\uff0c\u800cGPU\u4e3a\u6bcf\u4e2athreads\u63d0\u4f9b\u7269\u7406register\uff0c\u65e0\u9700\u4fdd\u5b58/\u8bfb\u53d6\u4e0a\u4e0b\u6587\u3002","title":"CUDA\u521d\u7ea7\u6559\u7a0b[\u5468\u658c]"},{"location":"\u5176\u4ed6/CUDA\u521d\u7ea7\u6559\u7a0b[\u5468\u658c].html#cuda","text":"","title":"CUDA\u521d\u7ea7\u6559\u7a0b[\u5468\u658c]"},{"location":"\u5176\u4ed6/CUDA\u521d\u7ea7\u6559\u7a0b[\u5468\u658c].html#cpu","text":"","title":"CPU\u90e8\u5206"},{"location":"\u5176\u4ed6/CUDA\u521d\u7ea7\u6559\u7a0b[\u5468\u658c].html#gpu","text":"\u200b \u9996\u5148\u6211\u4eec\u8981\u660e\u786e\uff1aSP\uff08streaming Process\uff09\uff0cSM\uff08streaming multiprocessor\uff09\u662f\u786c\u4ef6\uff08GPU hardware\uff09\u6982\u5ff5\u3002\u800cthread\uff0cblock\uff0cgrid\uff0cwarp\u662f\u8f6f\u4ef6\u4e0a\u7684\uff08CUDA\uff09\u6982\u5ff5\u3002","title":"GPU\u67b6\u6784"},{"location":"\u5176\u4ed6/CUDA\u521d\u7ea7\u6559\u7a0b[\u5468\u658c].html#_1","text":"SP\uff08ALU)\uff1a\u6700\u57fa\u672c\u7684\u5904\u7406\u5355\u5143\uff0cstreaming processor\uff0c\u4e5f\u79f0\u4e3aCUDA core\u3002\u6700\u540e\u5177\u4f53\u7684\u6307\u4ee4\u548c\u4efb\u52a1\u90fd\u662f\u5728SP\u4e0a\u5904\u7406\u7684\u3002GPU\u8fdb\u884c\u5e76\u884c\u8ba1\u7b97\uff0c\u4e5f\u5c31\u662f\u5f88\u591a\u4e2aSP\u540c\u65f6\u505a\u5904\u7406\u3002 SM\uff1a\u591a\u4e2aSP\u52a0\u4e0a\u5176\u4ed6\u7684\u4e00\u4e9b\u8d44\u6e90\u7ec4\u6210\u4e00\u4e2astreaming multiprocessor\u3002\u4e5f\u53ebGPU\u5927\u6838\uff0c\u5176\u4ed6\u8d44\u6e90\u5982\uff1awarp scheduler\uff0cregister\uff0cshared memory\u7b49\u3002SM\u53ef\u4ee5\u770b\u505aGPU\u7684\u5fc3\u810f\uff08\u5bf9\u6bd4CPU\u6838\u5fc3\uff09\uff0cregister\u548cshared memory\u662fSM\u7684\u7a00\u7f3a\u8d44\u6e90\u3002CUDA\u5c06\u8fd9\u4e9b\u8d44\u6e90\u5206\u914d\u7ed9\u6240\u6709\u9a7b\u7559\u5728SM\u4e2d\u7684threads\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u6709\u9650\u7684\u8d44\u6e90\u5c31\u4f7f\u6bcf\u4e2aSM\u4e2dactive warps\u6709\u975e\u5e38\u4e25\u683c\u7684\u9650\u5236\uff0c\u4e5f\u5c31\u9650\u5236\u4e86\u5e76\u884c\u80fd\u529b\u3002 \u9700\u8981\u6307\u51fa\uff0c\u6bcf\u4e2aSM\u5305\u542b\u7684SP\u6570\u91cf\u4f9d\u636eGPU\u67b6\u6784\u800c\u4e0d\u540c\uff0cFermi\u67b6\u6784GF100\u662f32\u4e2a\uff0cGF10X\u662f48\u4e2a\uff0cKepler\u67b6\u6784\u90fd\u662f192\u4e2a\uff0cMaxwell\u90fd\u662f128\u4e2a\u3002\u76f8\u540c\u67b6\u6784\u7684GPU\u5305\u542b\u7684SM\u6570\u91cf\u5219\u6839\u636eGPU\u7684\u4e2d\u9ad8\u4f4e\u7aef\u6765\u5b9a\u3002\u4e0b\u56fe\u7ed9\u51faNvidia GTX980 \u7684\u4e00\u4e2aSM\u793a\u610f\u56fe\uff0c\u56fe\u4e2d\u6bcf\u4e2a\u7eff\u8272\u6846\u6846\u8868\u793a\u4e00\u4e2aSP\u3002\u6ce8\u610f\uff0c\u5728Maxwell\u67b6\u6784\u4e2d\uff0cNvidia\u5df2\u7ecf\u628aSM\u6539\u53ebSMM\u3002\u4e0b\u56fe\u8868\u793a\u7684\u4ec5\u4ec5\u662f\u4e00\u4e2aSMM\uff0c\u4e00\u4e2aGPU\u53ef\u4ee5\u6709\u591a\u4e2aSM\uff08\u6bd4\u598216\u4e2a\uff09\uff0c\u6700\u7ec8\u4e00\u4e2aGPU\u53ef\u80fd\u5305\u542b\u6709\u4e0a\u5343\u4e2aSP\u3002\u8fd9\u4e48\u591a\u6838\u5fc3\u201c\u540c\u65f6\u8fd0\u884c\u201d\uff0c\u901f\u5ea6\u53ef\u60f3\u800c\u77e5\uff0c\u8fd9\u4e2a\u5f15\u53f7\u53ea\u662f\u60f3\u8868\u660e\u5b9e\u9645\u4e0a\uff0c\u8f6f\u4ef6\u903b\u8f91\u4e0a\u662f\u6240\u6709SP\u662f\u5e76\u884c\u7684\uff0c\u4f46\u662f\u7269\u7406\u4e0a\u5e76\u4e0d\u662f\u6240\u6709SP\u90fd\u80fd\u540c\u65f6\u6267\u884c\u8ba1\u7b97(\u7531\u4e8e\u8d44\u6e90\u9650\u5236\uff0c\u8fd9\u5c31\u5f15\u51fa\u4e86warp\u6982\u5ff5)\uff0c\u56e0\u4e3a\u6709\u4e9b\u4f1a\u5904\u4e8e\u6302\u8d77\uff0c\u5c31\u7eea\u7b49\u5176\u4ed6\u72b6\u6001\uff0c\u8fd9\u6709\u5173GPU\u7684\u7ebf\u7a0b\u8c03\u5ea6\uff0c\u4ee5\u540e\u518d\u5199\u4e86\u3002","title":"\u786c\u4ef6"},{"location":"\u5176\u4ed6/CUDA\u521d\u7ea7\u6559\u7a0b[\u5468\u658c].html#_2","text":"\u200b thread\uff0cblock\uff0cgrid\uff0cwarp\u662fCUDA\u7f16\u7a0b\u4e0a\u7684\u6982\u5ff5\uff0c\u4ee5\u65b9\u4fbf\u7a0b\u5e8f\u5458\u8f6f\u4ef6\u8bbe\u8ba1\uff0c\u7ec4\u7ec7\u7ebf\u7a0b\uff0c\u540c\u6837\u7684\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u793a\u610f\u56fe\u6765\u8868\u793a\u3002 thread\uff1a\u4e00\u4e2aCUDA\u7684\u5e76\u884c\u7a0b\u5e8f\u4f1a\u88ab\u4ee5\u8bb8\u591a\u4e2athreads\u6765\u6267\u884c\u3002 block\uff1a\u6570\u4e2athreads\u4f1a\u88ab\u7fa4\u7ec4\u6210\u4e00\u4e2ablock\uff0c\u540c\u4e00\u4e2ablock\u4e2d\u7684threads\u53ef\u4ee5\u540c\u6b65\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7shared memory\u901a\u4fe1\u3002 grid\uff1a\u591a\u4e2ablocks\u5219\u4f1a\u518d\u6784\u6210grid\u3002 warp\uff1aGPU\u6267\u884c\u7a0b\u5e8f\u65f6\u7684\u8c03\u5ea6\u5355\u4f4d\uff0c\u76ee\u524dcuda\u7684warp\u7684\u5927\u5c0f\u4e3a32\uff0c\u540c\u5728\u4e00\u4e2awarp\u7684\u7ebf\u7a0b\uff0c\u4ee5\u4e0d\u540c\u6570\u636e\u8d44\u6e90\u6267\u884c\u76f8\u540c\u7684\u6307\u4ee4,\u8fd9\u5c31\u662f\u6240\u8c13 SIMT\u3002","title":"\u8f6f\u4ef6"},{"location":"\u5176\u4ed6/CUDA\u521d\u7ea7\u6559\u7a0b[\u5468\u658c].html#_3","text":"\u200b \u4ece\u8f6f\u4ef6\u4e0a\u770b\uff0cSM\u66f4\u50cf\u4e00\u4e2a\u72ec\u7acb\u7684CPU core\u3002SM\uff08Streaming Multiprocessors\uff09\u662fGPU\u67b6\u6784\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u90e8\u5206\uff0cGPU\u786c\u4ef6\u7684\u5e76\u884c\u6027\u5c31\u662f\u7531SM\u51b3\u5b9a\u7684\u3002\u4ee5Fermi\u67b6\u6784\u4e3a\u4f8b\uff0c\u5176\u5305\u542b\u4ee5\u4e0b\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\uff1a CUDA cores Shared Memory/L1Cache Register File Load/Store Units Special Function Units Warp Scheduler GPU\u4e2d\u6bcf\u4e2asm\u90fd\u8bbe\u8ba1\u6210\u652f\u6301\u6570\u4ee5\u767e\u8ba1\u7684\u7ebf\u7a0b\u5e76\u884c\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2aGPU\u90fd\u5305\u542b\u4e86\u5f88\u591a\u7684SM\uff0c\u6240\u4ee5GPU\u652f\u6301\u6210\u767e\u4e0a\u5343\u7684\u7ebf\u7a0b\u5e76\u884c\u6267\u884c\u3002\u5f53\u4e00\u4e2akernel\u542f\u52a8\u540e\uff0cthread\u4f1a\u88ab\u5206\u914d\u5230\u8fd9\u4e9bSM\u4e2d\u6267\u884c\u3002\u5927\u91cf\u7684thread\u53ef\u80fd\u4f1a\u88ab\u5206\u914d\u5230\u4e0d\u540c\u7684SM\uff0c\u540c\u4e00\u4e2ablock\u4e2d\u7684threads\u5fc5\u7136\u5728\u540c\u4e00\u4e2aSM\u4e2d\u5e76\u884c\uff08SIMT\uff09\u6267\u884c\u3002\u6bcf\u4e2athread\u62e5\u6709\u5b83\u81ea\u5df1\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u548c\u72b6\u6001\u5bc4\u5b58\u5668\uff0c\u5e76\u4e14\u7528\u8be5\u7ebf\u7a0b\u81ea\u5df1\u7684\u6570\u636e\u6267\u884c\u6307\u4ee4\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684Single Instruction Multiple Thread\u3002 \u4e00\u4e2aSP\u53ef\u4ee5\u6267\u884c\u4e00\u4e2athread\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u6240\u6709\u7684thread\u80fd\u591f\u5728\u540c\u4e00\u65f6\u523b\u6267\u884c\u3002Nvidia\u628a32\u4e2athreads\u7ec4\u6210\u4e00\u4e2awarp\uff0cwarp\u662f\u8c03\u5ea6\u548c\u8fd0\u884c\u7684\u57fa\u672c\u5355\u5143\u3002warp\u4e2d\u6240\u6709threads\u5e76\u884c\u7684\u6267\u884c\u76f8\u540c\u7684\u6307\u4ee4\u3002\u4e00\u4e2awarp\u9700\u8981\u5360\u7528\u4e00\u4e2aSM\u8fd0\u884c\uff0c\u591a\u4e2awarps\u9700\u8981\u8f6e\u6d41\u8fdb\u5165SM\u3002\u7531SM\u7684\u786c\u4ef6warp scheduler\u8d1f\u8d23\u8c03\u5ea6\u3002\u76ee\u524d\u6bcf\u4e2awarp\u5305\u542b32\u4e2athreads\uff08Nvidia\u4fdd\u7559\u4fee\u6539\u6570\u91cf\u7684\u6743\u5229\uff09\u3002\u6240\u4ee5\uff0c\u4e00\u4e2aGPU\u4e0aresident thread\u6700\u591a\u53ea\u6709 SM*warp\u4e2a\u3002 \u524d\u9762\u5df2\u7ecf\u8bf4block\u662f\u8f6f\u4ef6\u6982\u5ff5\uff0c\u4e00\u4e2ablock\u53ea\u4f1a\u7531\u4e00\u4e2asm\u8c03\u5ea6\uff0c\u7a0b\u5e8f\u5458\u5728\u5f00\u53d1\u65f6\uff0c\u901a\u8fc7\u8bbe\u5b9ablock\u7684\u5c5e\u6027\uff0c \u201c\u544a\u8bc9\u201d GPU\u786c\u4ef6\uff0c\u6211\u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u600e\u4e48\u7ec4\u7ec7\u3002\u800c\u5177\u4f53\u600e\u4e48\u8c03\u5ea6\u7531sm\u7684warps scheduler\u8d1f\u8d23\uff0cblock\u4e00\u65e6\u88ab\u5206\u914d\u597dSM\uff0c\u8be5block\u5c31\u4f1a\u4e00\u76f4\u9a7b\u7559\u5728\u8be5SM\u4e2d\uff0c\u76f4\u5230\u6267\u884c\u7ed3\u675f\u3002\u4e00\u4e2aSM\u53ef\u4ee5\u540c\u65f6\u62e5\u6709\u591a\u4e2ablocks\uff0c\u4f46\u9700\u8981\u5e8f\u5217\u6267\u884c\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u8f6f\u4ef6\u786c\u4ef6\u65b9\u9762\u7684\u672f\u8bed\u5bf9\u5e94\u5173\u7cfb\uff1a \u3000\u3000 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5927\u90e8\u5206threads\u53ea\u662f\u903b\u8f91\u4e0a\u5e76\u884c\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684thread\u53ef\u4ee5\u5728\u7269\u7406\u4e0a\u540c\u65f6\u6267\u884c\u3002\u4f8b\u5982\uff0c\u9047\u5230\u5206\u652f\u8bed\u53e5\uff08if else\uff0cwhile\uff0cfor\u7b49\uff09\u65f6\uff0c\u5404\u4e2athread\u7684\u6267\u884c\u6761\u4ef6\u4e0d\u4e00\u6837\u5fc5\u7136\u4ea7\u751f\u5206\u652f\u6267\u884c\uff0c\u8fd9\u5c31\u5bfc\u81f4\u540c\u4e00\u4e2ablock\u4e2d\u7684\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u6b65\u8c03\u3002\u53e6\u5916\uff0c\u5e76\u884cthread\u4e4b\u95f4\u7684\u5171\u4eab\u6570\u636e\u4f1a\u5bfc\u81f4\u7ade\u6001\uff1a\u591a\u4e2a\u7ebf\u7a0b\u8bf7\u6c42\u540c\u4e00\u4e2a\u6570\u636e\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002CUDA\u63d0\u4f9b\u4e86cudaThreadSynchronize()\u6765\u540c\u6b65\u540c\u4e00\u4e2ablock\u7684thread\u4ee5\u4fdd\u8bc1\u5728\u8fdb\u884c\u4e0b\u4e00\u6b65\u5904\u7406\u4e4b\u524d\uff0c\u6240\u6709thread\u90fd\u5230\u8fbe\u67d0\u4e2a\u65f6\u95f4\u70b9\u3002 \u540c\u4e00\u4e2awarp\u4e2d\u7684thread\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0cactive warps\u88absm\u8d44\u6e90\u9650\u5236\u3002\u5f53\u4e00\u4e2awarp\u7a7a\u95f2\u65f6\uff0cSM\u5c31\u53ef\u4ee5\u8c03\u5ea6\u9a7b\u7559\u5728\u8be5SM\u4e2d\u53e6\u4e00\u4e2a\u53ef\u7528warp\u3002\u5728\u5e76\u53d1\u7684warp\u4e4b\u95f4\u5207\u6362\u662f\u6ca1\u4ec0\u4e48\u6d88\u8017\u7684\uff0c\u56e0\u4e3a\u786c\u4ef6\u8d44\u6e90\u65e9\u5c31\u88ab\u5206\u914d\u5230\u6240\u6709thread\u548cblock\uff0c\u6240\u4ee5\u8be5\u65b0\u8c03\u5ea6\u7684warp\u7684\u72b6\u6001\u5df2\u7ecf\u5b58\u50a8\u5728SM\u4e2d\u4e86\u3002\u4e0d\u540c\u4e8eCPU\uff0cCPU\u5207\u6362\u7ebf\u7a0b\u9700\u8981\u4fdd\u5b58/\u8bfb\u53d6\u7ebf\u7a0b\u4e0a\u4e0b\u6587\uff08register\u5185\u5bb9\uff09\uff0c\u8fd9\u662f\u975e\u5e38\u8017\u65f6\u7684\uff0c\u800cGPU\u4e3a\u6bcf\u4e2athreads\u63d0\u4f9b\u7269\u7406register\uff0c\u65e0\u9700\u4fdd\u5b58/\u8bfb\u53d6\u4e0a\u4e0b\u6587\u3002","title":"\u5bf9\u5e94\u5173\u7cfb"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html","text":"Target\u7f16\u7801\u7684\u610f\u4e49 http://www.bewindoweb.com/217.html https://zhuanlan.zhihu.com/p/26308272 https://blog.csdn.net/guoyuhaoaaa/article/details/80510131 \u7b2c\u4e8c\u5c4a\u963f\u91cc\u5df4\u5df4\u5927\u6570\u636e\u667a\u80fd\u4e91\u4e0a\u7f16\u7a0b\u5927\u8d5b\u51a0\u519b\u65b9\u6848\u5206\u4eab 1 \u8d5b\u9898\u7b80\u4ecb 1.1 \u6bd4\u8d5b\u4efb\u52a1 \u4eba\u5c97\u5339\u914d\u95ee\u9898 \uff1a\u53c2\u8d5b\u8005\u6839\u636e\u667a\u8054\u62db\u8058\u62bd\u6837\u7684\u7ecf\u8fc7\u8131\u654f\u7684\u7528\u6237\u7b80\u5386\u3001\u804c\u4f4d\u4fe1\u606f\u548c\u884c\u4e3a\u6570\u636e\uff0c\u8bad\u7ec3\u6392\u5e8f\u6a21\u578b\uff0c\u5bf9\u6c42\u804c\u8005\u7684\u804c\u4f4d\u5019\u9009\u96c6\u8fdb\u884c\u6392\u5e8f\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528\u4eba\u5355\u4f4d\u548c\u6c42\u804c\u8005\u90fd\u6ee1\u610f\u7684\u804c\u4f4d\u88ab\u4f18\u5148\u63a8\u8350\u3002 \u5e94\u7528\u5f00\u53d1 \uff1a\u57fa\u4e8e\u8ba1\u7b97\u5e73\u53f0\u7684\u4ea7\u54c1\u81ea\u7531\u642d\u914d\u7ec4\u5408\uff0c\u5728\u4e91\u7aef\u642d\u5efa\u5e94\u7528\uff0c\u5c55\u793a\u6bd4\u8d5b\u6210\u679c\u3002 1.2 \u96be\u70b9\u5206\u6790 \u6c42\u804c\u8005\u66dd\u5149\u804c\u4f4d\u76f8\u4f3c\u6027\u9ad8\u3002\u56e0\u4e3a\u53ec\u56de\u8fc7\u6765\u7684\u804c\u4f4d\u672c\u8eab\u5c31\u6709\u4e00\u4e9b\u76f8\u4f3c\u6027\uff0c\u7ed9\u6211\u4eec\u7684\u6570\u636e\u53ef\u5229\u7528\u5b57\u6bb5\u8f83\u5c11\uff0c\u8fdb\u4e00\u6b65\u6392\u5e8f\u7684\u96be\u5ea6\u6bd4\u8f83\u5927\uff0c\u5f88\u5bb9\u6613\u4f1a\u6b20\u62df\u5408\u3002 \u7528\u6237\u884c\u4e3a\u7a00\u758f\u3002\u5728\u5b9e\u9645\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0\u5bf9\u6392\u5e8f\u8d21\u732e\u6bd4\u8f83\u5927\u7684\u662f\u4e00\u4e9b\u5386\u53f2\u884c\u4e3a\u6570\u636e\u7684\u7279\u5f81\u3002\u590d\u8d5b\u67096w\u5de6\u53f3\u7684\u7528\u6237\uff0c\u66dd\u5149\u4e86100w\u7684\u5c97\u4f4d\uff0c\u4f46\u662f\u6709\u8fc7\u6295\u9012\u6216\u8005\u6ee1\u610f\u53cd\u9988\u7684\u53ea\u670910w\u5de6\u53f3\uff0c\u4e5f\u5c31\u662f\u8bf4\u5927\u90e8\u5206\u5c97\u4f4d\u662f\u6ca1\u6709\u6b63\u53cd\u9988\u6570\u636e\u7684\u3002 \u6570\u636e\u5c40\u9650\u3002\u89c1\u4e0b\u56fe\uff0c\u6a2a\u5750\u6807\u662f\u7528\u6237\u66dd\u5149\u804c\u4f4d\u6570\uff0c\u7eb5\u5750\u6807\u662f\u7528\u6237\u6570\u3002 \u7528\u6237\u4eba\u5747\u66dd\u514960\u4e2a\u5c97\u4f4d\uff0c\u662f\u5f88\u591a\u7684\u4e86\u3002\u4f46\u662f\u6ca1\u6709\u63d0\u4f9b\u66dd\u5149\u4f4d\u7f6e\u548c\u66dd\u5149\u65f6\u957f\uff0c\u5f88\u591a\u66dd\u5149\u5176\u5b9e\u7528\u6237\u6839\u672c\u6ca1\u6709\u6ce8\u610f\u5230\uff0c\u628a\u8fd9\u4e9b\u6837\u672c\u89c6\u4e3a\u8d1f\u6837\u672c\u662f\u4e0d\u5408\u7406\u7684\uff0c\u4e5f\u4f1a\u5f71\u54cd\u6a21\u578b\u7684\u6548\u679c\u3002 \u90e8\u5206\u7528\u6237\u5b58\u5728\u591a\u6b21\u6c42\u804c\u8fc7\u7a0b\uff0c\u5e76\u672a\u63d0\u4f9b\u65f6\u95f4\u7ef4\u5ea6\u4fe1\u606f\u3002\u628a\u4e0d\u540c\u65f6\u671f\u770b\u8fc7\u7684\u7b80\u5386\u653e\u5728\u4e00\u8d77\u6bd4\u8f83\u662f\u4e0d\u5408\u7406\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u5c97\u4f4d\u7684\u53d1\u5e03\u65e5\u671f\u53bb\u5f97\u5230\u4e00\u4e9b\u65f6\u95f4\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u548c\u7528\u6237\u5b9e\u9645\u4ea7\u751f\u884c\u4e3a\u65f6\u95f4\u8fd8\u662f\u6709\u5f88\u5927\u5dee\u8ddd\u7684\u3002 2 \u7b97\u6cd5\u8bbe\u8ba1 2.1 \u6570\u636e\u9884\u5904\u7406 \u5220\u6389\u5355\u4e00\u503c \u7f3a\u5931\u503c \u6570\u503c/\u7c7b\u522b \u89c2\u5bdf\u5404\u7279\u5f81\u5206\u5e03 \u5f02\u5e38\u503c\u7b49 \u8fdb\u884c\u79bb\u6563\u5316 \u9ad8\u7ef4\u7c7b\u522b\u7279\u5f81\uff0c\u5982city_id\uff0cjd_type_id\u7b49\u8fdb\u884c\u5747\u503c\u7f16\u7801\uff08Target Encoding\uff09\u8f6c\u5316\u4e3a\u6570\u503c\u7279\u5f81\u3002 \u7279\u5f81\u79bb\u6563\u5316\u3001\u964d\u7ef4\u540e\u5bf9\u5f02\u5e38\u6570\u636e\u6709\u66f4\u5f3a\u7684\u9c81\u68d2\u6027\uff0c\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u4f1a\u66f4\u52a0\u7a33\u5b9a\u3002 2.2 \u7279\u5f81\u63d0\u53d6 User Feature \u57ce\u5e02\uff0c\u884c\u4e1a\uff0c\u804c\u4f4d\uff0c\u85aa\u6c34\uff0c\u5b66\u5386\uff0c\u5de5\u4f5c\u7ecf\u5386\uff0c\u66dd\u5149\u5c97\u4f4d\u6570\u53ca\u76f8\u5173\u7edf\u8ba1\u7279\u5f81\u7b49\uff0c\u9884\u5904\u7406\u8fc7\u540e\u76f4\u63a5\u8f93\u5165\u6a21\u578b\u3002 Item Feature \u57ce\u5e02\uff0c\u884c\u4e1a\uff0c\u804c\u4f4d\uff0c\u85aa\u6c34\uff0c\u5b66\u5386\uff0c\u5de5\u4f5c\u7ecf\u5386\uff0c\u5c97\u4f4d\u6ee1\u610f\u7387\u53ca\u76f8\u5173\u7edf\u8ba1\u7279\u5f81\u7b49\uff0c\u9884\u5904\u7406\u8fc7\u540e\u76f4\u63a5\u8f93\u5165\u6a21\u578b\u3002 User-Item feature \u4e24\u7c7b\u7279\u5f81\u7684\u4ea4\u53c9\u7279\u5f81\u53ca\u76f8\u5173\u7684\u7edf\u8ba1\u7279\u5f81\u3002\u53ea\u7528user\u548citem\u7279\u5f81\u7684\u8bdd\uff0c\u6392\u884c\u699c\u5206\u6570\u57280.29\u5de6\u53f3\u3002\u5982\u679c\u8981\u8fdb\u4e00\u6b65\u63d0\u9ad8\u6a21\u578b\u9884\u6d4b\u6548\u679c\u7684\u8bdd\uff0c\u5173\u952e\u662f\u8981\u5145\u5206\u5229\u7528\u4ea4\u53c9\u7279\u5f81\u3002 \u9ad8\u9636\u7279\u5f81\uff1a\u7ecf\u5178\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\uff08DeepFM\u3001DeepFFM\u3001Deep Interest Network\u7b49\uff09\u3002 \u672c\u6b21\u6bd4\u8d5b\u590d\u8d5b\u91c7\u7528\u4f20\u7edf\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u4ee5\u4eba\u5de5\u8bbe\u8ba1\u548c\u63d0\u53d6\u4ea4\u53c9\u7279\u5f81\uff08\u4e8c\u9636\uff09\u4e3a\u4e3b\uff0c\u4e3b\u8981\u964d\u7ef4\u624b\u6bb5\u662f\u5747\u503c\u7f16\u7801 \uff08Target Encoding\uff09\u3002 \u5747\u503c\u7f16\u7801\uff1ak\u6298\u4ea4\u53c9\u9a8c\u8bc1\uff08k-fold Cross Validation\uff09\u4e0e\u7559\u4e00\u6cd5\uff08Leave-One-Out\uff09\u3002 \u4ece\u8ba1\u7b97\u5f00\u9500\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u7559\u4e00\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u9ad8\uff0c\u5f53\u6211\u4eec\u8981\u63d0\u9ad8\u7ef4\u6216\u8005\u9ad8\u9636\u7279\u5f81\u7684\u65f6\u5019\uff0c\u65f6\u95f4\u6210\u672c\u4f1a\u5f88\u5927\uff0c\u6bd4\u5982\u5c06\u6587\u672c\u4fe1\u606f\u548c\u804c\u4f4d\u4fe1\u606f\u6216\u8005\u884c\u4e1a\u4fe1\u606f\u505a\u4ea4\u53c9\u7684\u65f6\u5019\u3002 \u66f4\u91cd\u8981\u7684\u4e00\u70b9\uff0c\u5bf9\u67d0\u4e00\u4e2a\u5c97\u4f4d\u5982\u679c\u6211\u4eec\u77e5\u9053\u8d8a\u591a\u6295\u9012\u548c\u6ee1\u610f\u8fd9\u4e24\u79cd\u53cd\u9988\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u63a8\u8350\u7684\u80af\u5b9a\u4f1a\u66f4\u51c6\u3002\u5982\u679c\u91c7\u7528\u7559\u4e00\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u8bad\u7ec3\u96c6\u77e5\u9053\u4e86\u6bd4\u6d4b\u8bd5\u96c6\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u4f1a\u4f4e\u4f30\u6d4b\u8bd5\u96c6\u7684\u9884\u6d4b\u96be\u5ea6\u3002\u76f8\u53cd\uff0c\u5982\u679c\u75285\u6298\u4ea4\u53c9\u7684\u8bdd\uff0c\u5219\u9ad8\u4f30\u4e86\u6d4b\u8bd5\u96c6\u7684\u9884\u6d4b\u96be\u5ea6\u3002\u6240\u4ee5\u4e3a\u4e86\u4fdd\u6301\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u7edf\u4e00\uff0c\u91c7\u752810\u6298\u4ea4\u53c9\u9a8c\u8bc1\u7684\u65b9\u5f0f\u8fdb\u884c\u5747\u503c\u7f16\u7801\u3002 \u4ea4\u53c9\u65b9\u5f0f \u6c42\u804c\u8005\u4e0e\u5c97\u4f4d\u7684\u57ce\u5e02\uff0c\u884c\u4e1a\uff0c\u804c\u4f4d\uff0c\u85aa\u6c34\uff0c\u5b66\u5386\uff0c\u5de5\u4f5c\u7ecf\u5386\uff0c\u804c\u4f4d\u63cf\u8ff0 \u7b49\u7279\u5f81\u8fdb\u884c\u4ea4\u53c9\u3002 \u6c42\u804c\u8005\u4e0e\u5c97\u4f4d\u5bf9\u5e94\u7684\u76f8\u4f3c\u7528\u6237\u96c6\u5408\u7684\u57ce\u5e02\uff0c\u884c\u4e1a\uff0c\u804c\u4f4d\uff0c\u85aa\u6c34\uff0c\u5b66\u5386\uff0c\u5de5\u4f5c \u7ecf\u5386\uff0c\u804c\u4f4d\u63cf\u8ff0\u7b49\u7279\u5f81\u8fdb\u884c\u4ea4\u53c9\u3002 \u76f8\u4f3c\u5c97\u4f4d\uff1auser-base \u534f\u540c\u8fc7\u6ee4 \u5b9e\u9645\u4f7f\u7528\uff0c\u524d\u4e24\u79cd\u7279\u5f81\u4ea4\u53c9\u65b9\u5f0f\u5bf9\u6a21\u578b\u9884\u6d4b\u6548\u679c\u63d0\u5347\u663e\u8457 \uff0c\u67091-2\u4e2a\u767e\u5206\u70b9\u7684\u63d0\u5347\uff0c \u7b2c\u4e09\u79cd\u4ea4\u53c9\u65b9\u5f0f\u63d0\u5347\u6bd4\u8f83\u5c0f \uff0c\u5dee\u4e0d\u591a0.2\u4e2a\u767e\u5206\u70b9\u3002\u5206\u6790\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u4e3a\u7528\u6237\u6b63\u53cd\u9988\u884c\u4e3a\u592a\u5c11\u4e86\uff0c\u901a\u8fc7\u534f\u540c\u8fc7\u6ee4\u627e\u5230\u7684\u76f8\u4f3c\u5c97\u4f4d\u4e0d\u662f\u90a3\u4e48\u51c6\u3002\u5982\u679c\u80fd\u5f97\u5230\u66f4\u591a\u7684\u6b63\u53cd\u9988\u6570\u636e\u6216\u8005\u8bbe\u8ba1\u66f4\u5408\u7406\u7684\u65b9\u5f0f\u53bb\u627e\u5230\u76f8\u4f3c\u5c97\u4f4d\u96c6\u5408\uff0c\u7b2c\u4e09\u79cd\u4ea4\u53c9\u7684\u63d0\u5347\u6548\u679c\u4f1a\u66f4\u660e\u663e\u3002 2.3 \u7279\u5f81\u9009\u62e9 \u6839\u636e\u7279\u5f81\u91cd\u8981\u6027\u6392\u5e8f\u8fdb\u884c\u622a\u53d6 2.4 \u6a21\u578b\u6784\u5efa \u4e09\u5206\u7c7b vs \u4e8c\u5206\u7c7b \u4e09\u5206\u7c7b 0\uff1a\u7528\u6237\u672a\u6295\u9012\uff0c1\uff1a\u7528\u6237\u6295\u9012HR\u4e0d\u6ee1\u610f\uff0c2\uff1a\u7528\u6237\u6295\u9012\u4e14HR\u6ee1\u610f\uff0c\u6700\u540e\u628a\u6a21\u578b\u9884\u6d4b\u7684\u6807\u7b7e\u4e3a1\u548c\u6807\u7b7e\u4e3a2\u7684\u9884\u6d4b\u503c\u53d6\u4e00\u4e2a\u52a0\u6743\u5e73\u5747\u5f97\u5230\u6700\u7ec8\u7684\u9884\u6d4b\u503c\uff0c\u6743\u91cd\u503c\u53ef\u4ee5\u6839\u636e\u4ea4\u53c9\u9a8c\u8bc1\u786e\u5b9a\u3002 \u4e8c\u5206\u7c7b 0\uff1aHR\u4e0d\u6ee1\u610f\uff0c1\uff1aHR\u6ee1\u610f\u3002\u76f4\u63a5\u6839\u636eHR\u6ee1\u610f\u7684\u6982\u7387\u6392\u5e8f\u3002 \u5b9e\u9645\u6548\u679c ps-smart\u4e09\u5206\u7c7b\uff0c\u7ebf\u4e0b0.340\uff0c\u7ebf\u4e0a0.314\u3002 ps-smart\u4e8c\u5206\u7c7b\uff0c\u7ebf\u4e0b0.336\uff0c\u7ebf\u4e0a0.309\u3002 stacking\u878d\u5408\uff0c\u91c7\u7528ps-smart\u4e09\u5206\u7c7b\u8fdb\u884c\u51b3\u7b56\u8f93\u51fa\uff0c\u6700\u7ec8\u7ebf\u4e0a\u6210\u7ee90.316\u3002 \u56e0\u4e3a\u8bc4\u4ef7\u51fd\u6570\u662f\u8ddf\u6295\u9012\u548c\u6ee1\u610f\u4e24\u79cd\u884c\u4e3a\u90fd\u6709\u5173\uff0c\u663e\u7136\u4e09\u5206\u7c7b\u4f1a\u66f4\u52a0\u5408\u7406\u3002\u4e8c\u5206\u7c7b\u6ca1\u6709\u8003\u8651\u5230\u5b58\u5728\u4e00\u4e9b\u5c97\u4f4d\u6295\u9012\u7387\u5f88\u9ad8\uff0c\u6ee1\u610f\u7387\u5f88\u4f4e\uff0c\u4e0d\u80fd\u628a\u4ed6\u4eec\u6392\u5230\u524d\u9762\u6765\u3002\u5b9e\u9645\u7684\u6548\u679c\u4e5f\u662f\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u731c\u60f3\u3002 \u6700\u540e\u7684\u6a21\u578b\u878d\u5408\uff0c\u91c7\u7528\u4e86stacking\u7684\u65b9\u5f0f\uff0c\u6839\u636e\u6a21\u578b\u95f4\u7684\u5dee\u5f02\uff0c\u8bad\u7ec3\u4e09\u5206\u7c7b\u548c\u4e8c\u5206\u7c7b\u4e24\u4e2a\u57fa\u5206\u7c7b\u5668\uff0c\u5229\u7528\u4e24\u4e2a\u57fa\u5206\u7c7b\u5668\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u518d\u8bad\u7ec3\u4e00\u4e2a\u4e09\u5206\u7c7b\u6a21\u578b\u8fdb\u884c\u51b3\u7b56\u8f93\u51fa\u3002 \u5e38\u89c1\u77e5\u8bc6\u70b9 \u51b3\u7b56\u6811\u4e2d\u7684\u7c7b\u522b\u7279\u5f81\u95ee\u9898 \u51b3\u7b56\u6811\u662f(\u4e3a\u6570\u4e0d\u591a\u7684)\u5929\u7136\u652f\u6301categorical feature\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5,\u4f46\u662f\u5982\u679c\u662fhigh cardinality\uff0c\u90a3\u4e48\u7406\u8bba\u4e0a\u6700\u4f18\u7684split\u8981\u904d\u5386\u6240\u6709\u4e8c\u5206\u7ec4\u5408\uff0c\u662f\u6307\u6570\u7ea7\u7684\u590d\u6742\u5ea6\uff0cPython\u7684implementation\u53ea\u89e3\u51b3\u6570\u503c\u578bfeature\uff0c\u628a\u8fd9\u4e2a\u96be\u9898\u4e22\u7ed9\u7528\u6237\u4e86\uff0cxgboost\u4e5f\u662f\u4e00\u6837. \u53ef\u80fd\u65e0\u6cd5\u5728\u8fd9\u4e2a\u7c7b\u522b\u7279\u5f81\u4e0a\u8fdb\u884c\u5207\u5206\u3002\u4f7f\u7528one-hot coding\u7684\u8bdd\uff0c\u610f\u5473\u7740\u5728\u6bcf\u4e00\u4e2a\u51b3\u7b56\u8282\u70b9\u4e0a\u53ea\u80fd\u7528 one-vs-rest (\u4f8b\u5982\u662f\u4e0d\u662f\u72d7\uff0c\u662f\u4e0d\u662f\u732b\uff0c\u7b49\u7b49) \u7684\u5207\u5206\u65b9\u5f0f\u3002\u5f53\u7279\u5f81\u7eac\u5ea6\u9ad8\u65f6\uff0c\u6bcf\u4e2a\u7c7b\u522b\u4e0a\u7684\u6570\u636e\u90fd\u4f1a\u6bd4\u8f83\u5c11\uff0c\u8fd9\u65f6\u5019\u4ea7\u751f\u7684\u5207\u5206\u4e0d\u5e73\u8861\uff0c\u5207\u5206\u589e\u76ca\uff08split gain\uff09\u4e5f\u4f1a\u5f88\u5c0f\uff08\u6bd4\u8f83\u76f4\u89c2\u7684\u7406\u89e3\u662f\uff0c\u4e0d\u5e73\u8861\u7684\u5207\u5206\u548c\u4e0d\u5207\u5206\u51e0\u4e4e\u6ca1\u6709\u533a\u522b\uff09\u3002 \u4f1a\u5f71\u54cd\u51b3\u7b56\u6811\u7684\u5b66\u4e60\u3002\u56e0\u4e3a\u5c31\u7b97\u53ef\u4ee5\u5728\u8fd9\u4e2a\u7c7b\u522b\u7279\u5f81\u8fdb\u884c\u5207\u5206\uff0c\u4e5f\u4f1a\u628a\u6570\u636e\u5207\u5206\u5230\u5f88\u591a\u96f6\u6563\u7684\u5c0f\u7a7a\u95f4\u4e0a\uff0c\u5982\u56fe1\u5de6\u6240\u793a\u3002\u800c\u51b3\u7b56\u6811\u5b66\u4e60\u65f6\u5229\u7528\u7684\u662f\u7edf\u8ba1\u4fe1\u606f\uff0c\u5728\u8fd9\u4e9b\u6570\u636e\u91cf\u5c0f\u7684\u7a7a\u95f4\u4e0a\uff0c\u7edf\u8ba1\u4fe1\u606f\u4e0d\u51c6\u786e\uff0c\u5b66\u4e60\u4f1a\u53d8\u5dee\u3002\u4f46\u5982\u679c\u4f7f\u7528\u56fe1\u53f3\u8fb9\u7684\u5207\u5206\u65b9\u6cd5\uff0c\u6570\u636e\u4f1a\u88ab\u5207\u5206\u5230\u4e24\u4e2a\u6bd4\u8f83\u5927\u7684\u7a7a\u95f4\uff0c\u8fdb\u4e00\u6b65\u7684\u5b66\u4e60\u4e5f\u4f1a\u66f4\u597d\u3002 Click-Through Rate Prediction https://mp.weixin.qq.com/s/kWY3n8fKlzf0k_qevkbKLA EDA https://mp.weixin.qq.com/s/PjJ0FTnFA7HTzwatqZK-jQ \u5f3a\u7279\u5f81 \u8fd9\u662f\u8fd9\u4e2a\u6bd4\u8d5b\u5b66\u4e60\u7684\u7b2c\u4e00\u90e8\u5206,\u5305\u62ec\u6570\u636eEDA\u4e2d\u5fc5\u770b\u7684\u8981\u7d20 & \u8bad\u7ec3\u96c6\u6d4b\u8bd5\u96c6\u7684\u5019\u9009\u96c6\u6784\u5efa & Baseline\u7684\u63d0\u4ea4\u3002\u7b2c\u4e8c\u90e8\u5206,\u6211\u4eec\u770b\u5982\u4f55\u901a\u8fc7\u7b80\u6613\u7684\u7279\u5f81\u5de5\u7a0b\u4ee5\u53ca\u7b97\u6cd5\u6280\u5de7\u63d0\u5347\u5230\u94f6\u724c\u65b9\u6848\u7684\u7b56\u7565\u3002 \u8baf\u98de\u53cd\u6b3a\u8bc8 3rd http://1024.iflytek.com/#banner \u793e\u56e2\u7684\u6982\u5ff5 Count\u7279\u5f81 Unique\u7279\u5f81 \u4f2a\u6807\u7b7e http://www.atyun.com/8381.html \u534a\u76d1\u7763\u5b66\u4e60 \u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b \u628a\u7ed3\u679c\u6700\u597d\u7684\u6837\u672c\u62ff\u51fa\u6765\u91cd\u65b0\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b \u9608\u503c\u5b9a\u4e3a 0.99\u548c0.01 2nd \u5a92\u4f53\u4fe1\u606f\u548c\u8bbe\u5907\u4fe1\u606f\u4ea4\u53c9 100\u591a\u4e2a\u4ea4\u53c9\u7279\u5f81 1st \u66f4\u7ec6\u81f4\u7684\u5207\u5206 imeimd5 \u6309\u5929\u5207\u5206 \u67d0\u5929\u4f5c\u5f0a\u4e4b\u540e\u4e5f\u90fd\u5927\u6982\u7387\u4f5c\u5f0a \u5f3a\u7279(\u89e3\u7801): \u524d8\u4f4d\u6548\u679c\u6700\u597d\u7684 imei8 catboost\u6bd4\u81ea\u5df1encode\u8981\u597d","title":"Target\u7f16\u7801\u7684\u610f\u4e49"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#target","text":"http://www.bewindoweb.com/217.html https://zhuanlan.zhihu.com/p/26308272 https://blog.csdn.net/guoyuhaoaaa/article/details/80510131","title":"Target\u7f16\u7801\u7684\u610f\u4e49"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#_1","text":"","title":"\u7b2c\u4e8c\u5c4a\u963f\u91cc\u5df4\u5df4\u5927\u6570\u636e\u667a\u80fd\u4e91\u4e0a\u7f16\u7a0b\u5927\u8d5b\u51a0\u519b\u65b9\u6848\u5206\u4eab"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#1","text":"","title":"1 \u8d5b\u9898\u7b80\u4ecb"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#11","text":"\u4eba\u5c97\u5339\u914d\u95ee\u9898 \uff1a\u53c2\u8d5b\u8005\u6839\u636e\u667a\u8054\u62db\u8058\u62bd\u6837\u7684\u7ecf\u8fc7\u8131\u654f\u7684\u7528\u6237\u7b80\u5386\u3001\u804c\u4f4d\u4fe1\u606f\u548c\u884c\u4e3a\u6570\u636e\uff0c\u8bad\u7ec3\u6392\u5e8f\u6a21\u578b\uff0c\u5bf9\u6c42\u804c\u8005\u7684\u804c\u4f4d\u5019\u9009\u96c6\u8fdb\u884c\u6392\u5e8f\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528\u4eba\u5355\u4f4d\u548c\u6c42\u804c\u8005\u90fd\u6ee1\u610f\u7684\u804c\u4f4d\u88ab\u4f18\u5148\u63a8\u8350\u3002 \u5e94\u7528\u5f00\u53d1 \uff1a\u57fa\u4e8e\u8ba1\u7b97\u5e73\u53f0\u7684\u4ea7\u54c1\u81ea\u7531\u642d\u914d\u7ec4\u5408\uff0c\u5728\u4e91\u7aef\u642d\u5efa\u5e94\u7528\uff0c\u5c55\u793a\u6bd4\u8d5b\u6210\u679c\u3002 1.2 \u96be\u70b9\u5206\u6790 \u6c42\u804c\u8005\u66dd\u5149\u804c\u4f4d\u76f8\u4f3c\u6027\u9ad8\u3002\u56e0\u4e3a\u53ec\u56de\u8fc7\u6765\u7684\u804c\u4f4d\u672c\u8eab\u5c31\u6709\u4e00\u4e9b\u76f8\u4f3c\u6027\uff0c\u7ed9\u6211\u4eec\u7684\u6570\u636e\u53ef\u5229\u7528\u5b57\u6bb5\u8f83\u5c11\uff0c\u8fdb\u4e00\u6b65\u6392\u5e8f\u7684\u96be\u5ea6\u6bd4\u8f83\u5927\uff0c\u5f88\u5bb9\u6613\u4f1a\u6b20\u62df\u5408\u3002 \u7528\u6237\u884c\u4e3a\u7a00\u758f\u3002\u5728\u5b9e\u9645\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0\u5bf9\u6392\u5e8f\u8d21\u732e\u6bd4\u8f83\u5927\u7684\u662f\u4e00\u4e9b\u5386\u53f2\u884c\u4e3a\u6570\u636e\u7684\u7279\u5f81\u3002\u590d\u8d5b\u67096w\u5de6\u53f3\u7684\u7528\u6237\uff0c\u66dd\u5149\u4e86100w\u7684\u5c97\u4f4d\uff0c\u4f46\u662f\u6709\u8fc7\u6295\u9012\u6216\u8005\u6ee1\u610f\u53cd\u9988\u7684\u53ea\u670910w\u5de6\u53f3\uff0c\u4e5f\u5c31\u662f\u8bf4\u5927\u90e8\u5206\u5c97\u4f4d\u662f\u6ca1\u6709\u6b63\u53cd\u9988\u6570\u636e\u7684\u3002 \u6570\u636e\u5c40\u9650\u3002\u89c1\u4e0b\u56fe\uff0c\u6a2a\u5750\u6807\u662f\u7528\u6237\u66dd\u5149\u804c\u4f4d\u6570\uff0c\u7eb5\u5750\u6807\u662f\u7528\u6237\u6570\u3002 \u7528\u6237\u4eba\u5747\u66dd\u514960\u4e2a\u5c97\u4f4d\uff0c\u662f\u5f88\u591a\u7684\u4e86\u3002\u4f46\u662f\u6ca1\u6709\u63d0\u4f9b\u66dd\u5149\u4f4d\u7f6e\u548c\u66dd\u5149\u65f6\u957f\uff0c\u5f88\u591a\u66dd\u5149\u5176\u5b9e\u7528\u6237\u6839\u672c\u6ca1\u6709\u6ce8\u610f\u5230\uff0c\u628a\u8fd9\u4e9b\u6837\u672c\u89c6\u4e3a\u8d1f\u6837\u672c\u662f\u4e0d\u5408\u7406\u7684\uff0c\u4e5f\u4f1a\u5f71\u54cd\u6a21\u578b\u7684\u6548\u679c\u3002 \u90e8\u5206\u7528\u6237\u5b58\u5728\u591a\u6b21\u6c42\u804c\u8fc7\u7a0b\uff0c\u5e76\u672a\u63d0\u4f9b\u65f6\u95f4\u7ef4\u5ea6\u4fe1\u606f\u3002\u628a\u4e0d\u540c\u65f6\u671f\u770b\u8fc7\u7684\u7b80\u5386\u653e\u5728\u4e00\u8d77\u6bd4\u8f83\u662f\u4e0d\u5408\u7406\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u5c97\u4f4d\u7684\u53d1\u5e03\u65e5\u671f\u53bb\u5f97\u5230\u4e00\u4e9b\u65f6\u95f4\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u548c\u7528\u6237\u5b9e\u9645\u4ea7\u751f\u884c\u4e3a\u65f6\u95f4\u8fd8\u662f\u6709\u5f88\u5927\u5dee\u8ddd\u7684\u3002","title":"1.1 \u6bd4\u8d5b\u4efb\u52a1"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#2","text":"","title":"2 \u7b97\u6cd5\u8bbe\u8ba1"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#21","text":"\u5220\u6389\u5355\u4e00\u503c \u7f3a\u5931\u503c \u6570\u503c/\u7c7b\u522b \u89c2\u5bdf\u5404\u7279\u5f81\u5206\u5e03 \u5f02\u5e38\u503c\u7b49 \u8fdb\u884c\u79bb\u6563\u5316 \u9ad8\u7ef4\u7c7b\u522b\u7279\u5f81\uff0c\u5982city_id\uff0cjd_type_id\u7b49\u8fdb\u884c\u5747\u503c\u7f16\u7801\uff08Target Encoding\uff09\u8f6c\u5316\u4e3a\u6570\u503c\u7279\u5f81\u3002 \u7279\u5f81\u79bb\u6563\u5316\u3001\u964d\u7ef4\u540e\u5bf9\u5f02\u5e38\u6570\u636e\u6709\u66f4\u5f3a\u7684\u9c81\u68d2\u6027\uff0c\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u4f1a\u66f4\u52a0\u7a33\u5b9a\u3002","title":"2.1 \u6570\u636e\u9884\u5904\u7406"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#22","text":"User Feature \u57ce\u5e02\uff0c\u884c\u4e1a\uff0c\u804c\u4f4d\uff0c\u85aa\u6c34\uff0c\u5b66\u5386\uff0c\u5de5\u4f5c\u7ecf\u5386\uff0c\u66dd\u5149\u5c97\u4f4d\u6570\u53ca\u76f8\u5173\u7edf\u8ba1\u7279\u5f81\u7b49\uff0c\u9884\u5904\u7406\u8fc7\u540e\u76f4\u63a5\u8f93\u5165\u6a21\u578b\u3002 Item Feature \u57ce\u5e02\uff0c\u884c\u4e1a\uff0c\u804c\u4f4d\uff0c\u85aa\u6c34\uff0c\u5b66\u5386\uff0c\u5de5\u4f5c\u7ecf\u5386\uff0c\u5c97\u4f4d\u6ee1\u610f\u7387\u53ca\u76f8\u5173\u7edf\u8ba1\u7279\u5f81\u7b49\uff0c\u9884\u5904\u7406\u8fc7\u540e\u76f4\u63a5\u8f93\u5165\u6a21\u578b\u3002 User-Item feature \u4e24\u7c7b\u7279\u5f81\u7684\u4ea4\u53c9\u7279\u5f81\u53ca\u76f8\u5173\u7684\u7edf\u8ba1\u7279\u5f81\u3002\u53ea\u7528user\u548citem\u7279\u5f81\u7684\u8bdd\uff0c\u6392\u884c\u699c\u5206\u6570\u57280.29\u5de6\u53f3\u3002\u5982\u679c\u8981\u8fdb\u4e00\u6b65\u63d0\u9ad8\u6a21\u578b\u9884\u6d4b\u6548\u679c\u7684\u8bdd\uff0c\u5173\u952e\u662f\u8981\u5145\u5206\u5229\u7528\u4ea4\u53c9\u7279\u5f81\u3002 \u9ad8\u9636\u7279\u5f81\uff1a\u7ecf\u5178\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\uff08DeepFM\u3001DeepFFM\u3001Deep Interest Network\u7b49\uff09\u3002 \u672c\u6b21\u6bd4\u8d5b\u590d\u8d5b\u91c7\u7528\u4f20\u7edf\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u4ee5\u4eba\u5de5\u8bbe\u8ba1\u548c\u63d0\u53d6\u4ea4\u53c9\u7279\u5f81\uff08\u4e8c\u9636\uff09\u4e3a\u4e3b\uff0c\u4e3b\u8981\u964d\u7ef4\u624b\u6bb5\u662f\u5747\u503c\u7f16\u7801 \uff08Target Encoding\uff09\u3002 \u5747\u503c\u7f16\u7801\uff1ak\u6298\u4ea4\u53c9\u9a8c\u8bc1\uff08k-fold Cross Validation\uff09\u4e0e\u7559\u4e00\u6cd5\uff08Leave-One-Out\uff09\u3002 \u4ece\u8ba1\u7b97\u5f00\u9500\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u7559\u4e00\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u9ad8\uff0c\u5f53\u6211\u4eec\u8981\u63d0\u9ad8\u7ef4\u6216\u8005\u9ad8\u9636\u7279\u5f81\u7684\u65f6\u5019\uff0c\u65f6\u95f4\u6210\u672c\u4f1a\u5f88\u5927\uff0c\u6bd4\u5982\u5c06\u6587\u672c\u4fe1\u606f\u548c\u804c\u4f4d\u4fe1\u606f\u6216\u8005\u884c\u4e1a\u4fe1\u606f\u505a\u4ea4\u53c9\u7684\u65f6\u5019\u3002 \u66f4\u91cd\u8981\u7684\u4e00\u70b9\uff0c\u5bf9\u67d0\u4e00\u4e2a\u5c97\u4f4d\u5982\u679c\u6211\u4eec\u77e5\u9053\u8d8a\u591a\u6295\u9012\u548c\u6ee1\u610f\u8fd9\u4e24\u79cd\u53cd\u9988\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u63a8\u8350\u7684\u80af\u5b9a\u4f1a\u66f4\u51c6\u3002\u5982\u679c\u91c7\u7528\u7559\u4e00\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u8bad\u7ec3\u96c6\u77e5\u9053\u4e86\u6bd4\u6d4b\u8bd5\u96c6\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u4f1a\u4f4e\u4f30\u6d4b\u8bd5\u96c6\u7684\u9884\u6d4b\u96be\u5ea6\u3002\u76f8\u53cd\uff0c\u5982\u679c\u75285\u6298\u4ea4\u53c9\u7684\u8bdd\uff0c\u5219\u9ad8\u4f30\u4e86\u6d4b\u8bd5\u96c6\u7684\u9884\u6d4b\u96be\u5ea6\u3002\u6240\u4ee5\u4e3a\u4e86\u4fdd\u6301\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u7edf\u4e00\uff0c\u91c7\u752810\u6298\u4ea4\u53c9\u9a8c\u8bc1\u7684\u65b9\u5f0f\u8fdb\u884c\u5747\u503c\u7f16\u7801\u3002 \u4ea4\u53c9\u65b9\u5f0f \u6c42\u804c\u8005\u4e0e\u5c97\u4f4d\u7684\u57ce\u5e02\uff0c\u884c\u4e1a\uff0c\u804c\u4f4d\uff0c\u85aa\u6c34\uff0c\u5b66\u5386\uff0c\u5de5\u4f5c\u7ecf\u5386\uff0c\u804c\u4f4d\u63cf\u8ff0 \u7b49\u7279\u5f81\u8fdb\u884c\u4ea4\u53c9\u3002 \u6c42\u804c\u8005\u4e0e\u5c97\u4f4d\u5bf9\u5e94\u7684\u76f8\u4f3c\u7528\u6237\u96c6\u5408\u7684\u57ce\u5e02\uff0c\u884c\u4e1a\uff0c\u804c\u4f4d\uff0c\u85aa\u6c34\uff0c\u5b66\u5386\uff0c\u5de5\u4f5c \u7ecf\u5386\uff0c\u804c\u4f4d\u63cf\u8ff0\u7b49\u7279\u5f81\u8fdb\u884c\u4ea4\u53c9\u3002 \u76f8\u4f3c\u5c97\u4f4d\uff1auser-base \u534f\u540c\u8fc7\u6ee4 \u5b9e\u9645\u4f7f\u7528\uff0c\u524d\u4e24\u79cd\u7279\u5f81\u4ea4\u53c9\u65b9\u5f0f\u5bf9\u6a21\u578b\u9884\u6d4b\u6548\u679c\u63d0\u5347\u663e\u8457 \uff0c\u67091-2\u4e2a\u767e\u5206\u70b9\u7684\u63d0\u5347\uff0c \u7b2c\u4e09\u79cd\u4ea4\u53c9\u65b9\u5f0f\u63d0\u5347\u6bd4\u8f83\u5c0f \uff0c\u5dee\u4e0d\u591a0.2\u4e2a\u767e\u5206\u70b9\u3002\u5206\u6790\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u4e3a\u7528\u6237\u6b63\u53cd\u9988\u884c\u4e3a\u592a\u5c11\u4e86\uff0c\u901a\u8fc7\u534f\u540c\u8fc7\u6ee4\u627e\u5230\u7684\u76f8\u4f3c\u5c97\u4f4d\u4e0d\u662f\u90a3\u4e48\u51c6\u3002\u5982\u679c\u80fd\u5f97\u5230\u66f4\u591a\u7684\u6b63\u53cd\u9988\u6570\u636e\u6216\u8005\u8bbe\u8ba1\u66f4\u5408\u7406\u7684\u65b9\u5f0f\u53bb\u627e\u5230\u76f8\u4f3c\u5c97\u4f4d\u96c6\u5408\uff0c\u7b2c\u4e09\u79cd\u4ea4\u53c9\u7684\u63d0\u5347\u6548\u679c\u4f1a\u66f4\u660e\u663e\u3002","title":"2.2 \u7279\u5f81\u63d0\u53d6"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#23","text":"\u6839\u636e\u7279\u5f81\u91cd\u8981\u6027\u6392\u5e8f\u8fdb\u884c\u622a\u53d6","title":"2.3 \u7279\u5f81\u9009\u62e9"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#24","text":"\u4e09\u5206\u7c7b vs \u4e8c\u5206\u7c7b \u4e09\u5206\u7c7b 0\uff1a\u7528\u6237\u672a\u6295\u9012\uff0c1\uff1a\u7528\u6237\u6295\u9012HR\u4e0d\u6ee1\u610f\uff0c2\uff1a\u7528\u6237\u6295\u9012\u4e14HR\u6ee1\u610f\uff0c\u6700\u540e\u628a\u6a21\u578b\u9884\u6d4b\u7684\u6807\u7b7e\u4e3a1\u548c\u6807\u7b7e\u4e3a2\u7684\u9884\u6d4b\u503c\u53d6\u4e00\u4e2a\u52a0\u6743\u5e73\u5747\u5f97\u5230\u6700\u7ec8\u7684\u9884\u6d4b\u503c\uff0c\u6743\u91cd\u503c\u53ef\u4ee5\u6839\u636e\u4ea4\u53c9\u9a8c\u8bc1\u786e\u5b9a\u3002 \u4e8c\u5206\u7c7b 0\uff1aHR\u4e0d\u6ee1\u610f\uff0c1\uff1aHR\u6ee1\u610f\u3002\u76f4\u63a5\u6839\u636eHR\u6ee1\u610f\u7684\u6982\u7387\u6392\u5e8f\u3002 \u5b9e\u9645\u6548\u679c ps-smart\u4e09\u5206\u7c7b\uff0c\u7ebf\u4e0b0.340\uff0c\u7ebf\u4e0a0.314\u3002 ps-smart\u4e8c\u5206\u7c7b\uff0c\u7ebf\u4e0b0.336\uff0c\u7ebf\u4e0a0.309\u3002 stacking\u878d\u5408\uff0c\u91c7\u7528ps-smart\u4e09\u5206\u7c7b\u8fdb\u884c\u51b3\u7b56\u8f93\u51fa\uff0c\u6700\u7ec8\u7ebf\u4e0a\u6210\u7ee90.316\u3002 \u56e0\u4e3a\u8bc4\u4ef7\u51fd\u6570\u662f\u8ddf\u6295\u9012\u548c\u6ee1\u610f\u4e24\u79cd\u884c\u4e3a\u90fd\u6709\u5173\uff0c\u663e\u7136\u4e09\u5206\u7c7b\u4f1a\u66f4\u52a0\u5408\u7406\u3002\u4e8c\u5206\u7c7b\u6ca1\u6709\u8003\u8651\u5230\u5b58\u5728\u4e00\u4e9b\u5c97\u4f4d\u6295\u9012\u7387\u5f88\u9ad8\uff0c\u6ee1\u610f\u7387\u5f88\u4f4e\uff0c\u4e0d\u80fd\u628a\u4ed6\u4eec\u6392\u5230\u524d\u9762\u6765\u3002\u5b9e\u9645\u7684\u6548\u679c\u4e5f\u662f\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u731c\u60f3\u3002 \u6700\u540e\u7684\u6a21\u578b\u878d\u5408\uff0c\u91c7\u7528\u4e86stacking\u7684\u65b9\u5f0f\uff0c\u6839\u636e\u6a21\u578b\u95f4\u7684\u5dee\u5f02\uff0c\u8bad\u7ec3\u4e09\u5206\u7c7b\u548c\u4e8c\u5206\u7c7b\u4e24\u4e2a\u57fa\u5206\u7c7b\u5668\uff0c\u5229\u7528\u4e24\u4e2a\u57fa\u5206\u7c7b\u5668\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u518d\u8bad\u7ec3\u4e00\u4e2a\u4e09\u5206\u7c7b\u6a21\u578b\u8fdb\u884c\u51b3\u7b56\u8f93\u51fa\u3002","title":"2.4 \u6a21\u578b\u6784\u5efa"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#_2","text":"","title":"\u5e38\u89c1\u77e5\u8bc6\u70b9"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#_3","text":"\u51b3\u7b56\u6811\u662f(\u4e3a\u6570\u4e0d\u591a\u7684)\u5929\u7136\u652f\u6301categorical feature\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5,\u4f46\u662f\u5982\u679c\u662fhigh cardinality\uff0c\u90a3\u4e48\u7406\u8bba\u4e0a\u6700\u4f18\u7684split\u8981\u904d\u5386\u6240\u6709\u4e8c\u5206\u7ec4\u5408\uff0c\u662f\u6307\u6570\u7ea7\u7684\u590d\u6742\u5ea6\uff0cPython\u7684implementation\u53ea\u89e3\u51b3\u6570\u503c\u578bfeature\uff0c\u628a\u8fd9\u4e2a\u96be\u9898\u4e22\u7ed9\u7528\u6237\u4e86\uff0cxgboost\u4e5f\u662f\u4e00\u6837. \u53ef\u80fd\u65e0\u6cd5\u5728\u8fd9\u4e2a\u7c7b\u522b\u7279\u5f81\u4e0a\u8fdb\u884c\u5207\u5206\u3002\u4f7f\u7528one-hot coding\u7684\u8bdd\uff0c\u610f\u5473\u7740\u5728\u6bcf\u4e00\u4e2a\u51b3\u7b56\u8282\u70b9\u4e0a\u53ea\u80fd\u7528 one-vs-rest (\u4f8b\u5982\u662f\u4e0d\u662f\u72d7\uff0c\u662f\u4e0d\u662f\u732b\uff0c\u7b49\u7b49) \u7684\u5207\u5206\u65b9\u5f0f\u3002\u5f53\u7279\u5f81\u7eac\u5ea6\u9ad8\u65f6\uff0c\u6bcf\u4e2a\u7c7b\u522b\u4e0a\u7684\u6570\u636e\u90fd\u4f1a\u6bd4\u8f83\u5c11\uff0c\u8fd9\u65f6\u5019\u4ea7\u751f\u7684\u5207\u5206\u4e0d\u5e73\u8861\uff0c\u5207\u5206\u589e\u76ca\uff08split gain\uff09\u4e5f\u4f1a\u5f88\u5c0f\uff08\u6bd4\u8f83\u76f4\u89c2\u7684\u7406\u89e3\u662f\uff0c\u4e0d\u5e73\u8861\u7684\u5207\u5206\u548c\u4e0d\u5207\u5206\u51e0\u4e4e\u6ca1\u6709\u533a\u522b\uff09\u3002 \u4f1a\u5f71\u54cd\u51b3\u7b56\u6811\u7684\u5b66\u4e60\u3002\u56e0\u4e3a\u5c31\u7b97\u53ef\u4ee5\u5728\u8fd9\u4e2a\u7c7b\u522b\u7279\u5f81\u8fdb\u884c\u5207\u5206\uff0c\u4e5f\u4f1a\u628a\u6570\u636e\u5207\u5206\u5230\u5f88\u591a\u96f6\u6563\u7684\u5c0f\u7a7a\u95f4\u4e0a\uff0c\u5982\u56fe1\u5de6\u6240\u793a\u3002\u800c\u51b3\u7b56\u6811\u5b66\u4e60\u65f6\u5229\u7528\u7684\u662f\u7edf\u8ba1\u4fe1\u606f\uff0c\u5728\u8fd9\u4e9b\u6570\u636e\u91cf\u5c0f\u7684\u7a7a\u95f4\u4e0a\uff0c\u7edf\u8ba1\u4fe1\u606f\u4e0d\u51c6\u786e\uff0c\u5b66\u4e60\u4f1a\u53d8\u5dee\u3002\u4f46\u5982\u679c\u4f7f\u7528\u56fe1\u53f3\u8fb9\u7684\u5207\u5206\u65b9\u6cd5\uff0c\u6570\u636e\u4f1a\u88ab\u5207\u5206\u5230\u4e24\u4e2a\u6bd4\u8f83\u5927\u7684\u7a7a\u95f4\uff0c\u8fdb\u4e00\u6b65\u7684\u5b66\u4e60\u4e5f\u4f1a\u66f4\u597d\u3002","title":"\u51b3\u7b56\u6811\u4e2d\u7684\u7c7b\u522b\u7279\u5f81\u95ee\u9898"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#click-through-rate-prediction","text":"https://mp.weixin.qq.com/s/kWY3n8fKlzf0k_qevkbKLA EDA https://mp.weixin.qq.com/s/PjJ0FTnFA7HTzwatqZK-jQ \u5f3a\u7279\u5f81 \u8fd9\u662f\u8fd9\u4e2a\u6bd4\u8d5b\u5b66\u4e60\u7684\u7b2c\u4e00\u90e8\u5206,\u5305\u62ec\u6570\u636eEDA\u4e2d\u5fc5\u770b\u7684\u8981\u7d20 & \u8bad\u7ec3\u96c6\u6d4b\u8bd5\u96c6\u7684\u5019\u9009\u96c6\u6784\u5efa & Baseline\u7684\u63d0\u4ea4\u3002\u7b2c\u4e8c\u90e8\u5206,\u6211\u4eec\u770b\u5982\u4f55\u901a\u8fc7\u7b80\u6613\u7684\u7279\u5f81\u5de5\u7a0b\u4ee5\u53ca\u7b97\u6cd5\u6280\u5de7\u63d0\u5347\u5230\u94f6\u724c\u65b9\u6848\u7684\u7b56\u7565\u3002","title":"Click-Through Rate Prediction"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#_4","text":"","title":"\u8baf\u98de\u53cd\u6b3a\u8bc8"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#3rd","text":"http://1024.iflytek.com/#banner","title":"3rd"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#_5","text":"","title":"\u793e\u56e2\u7684\u6982\u5ff5"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#count","text":"","title":"Count\u7279\u5f81"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#unique","text":"","title":"Unique\u7279\u5f81"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#_6","text":"http://www.atyun.com/8381.html \u534a\u76d1\u7763\u5b66\u4e60 \u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b \u628a\u7ed3\u679c\u6700\u597d\u7684\u6837\u672c\u62ff\u51fa\u6765\u91cd\u65b0\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b \u9608\u503c\u5b9a\u4e3a 0.99\u548c0.01","title":"\u4f2a\u6807\u7b7e"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#2nd","text":"\u5a92\u4f53\u4fe1\u606f\u548c\u8bbe\u5907\u4fe1\u606f\u4ea4\u53c9 100\u591a\u4e2a\u4ea4\u53c9\u7279\u5f81","title":"2nd"},{"location":"\u5176\u4ed6/\u7ade\u8d5b\u5206\u6848\u603b\u7ed3.html#1st","text":"\u66f4\u7ec6\u81f4\u7684\u5207\u5206 imeimd5 \u6309\u5929\u5207\u5206 \u67d0\u5929\u4f5c\u5f0a\u4e4b\u540e\u4e5f\u90fd\u5927\u6982\u7387\u4f5c\u5f0a \u5f3a\u7279(\u89e3\u7801): \u524d8\u4f4d\u6548\u679c\u6700\u597d\u7684 imei8 catboost\u6bd4\u81ea\u5df1encode\u8981\u597d","title":"1st"},{"location":"\u5de5\u5177/mac\u64cd\u4f5c\u6280\u5de7.html","text":"\u6548\u7387\u8f6f\u4ef6 \u642c\u6587\u5de5-\u53f3\u952e\u65b0\u5efa\u6587\u4ef6 Darkest Dungeon Gitbox","title":"\u6548\u7387\u8f6f\u4ef6"},{"location":"\u5de5\u5177/mac\u64cd\u4f5c\u6280\u5de7.html#_1","text":"","title":"\u6548\u7387\u8f6f\u4ef6"},{"location":"\u5de5\u5177/mac\u64cd\u4f5c\u6280\u5de7.html#-","text":"","title":"\u642c\u6587\u5de5-\u53f3\u952e\u65b0\u5efa\u6587\u4ef6"},{"location":"\u5de5\u5177/mac\u64cd\u4f5c\u6280\u5de7.html#darkest-dungeon","text":"Gitbox","title":"Darkest Dungeon"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html","text":"\u6784\u5efa\u81ea\u5df1\u7684\u4e2a\u4eba\u535a\u5ba2 \u4e3b\u8981\u6280\u672f \u200b GitHub Pages \u514d\u8d39\u7684\u9759\u6001\u7ad9\u70b9\uff0c\u4e09\u4e2a\u7279\u70b9\uff1a\u514d\u8d39\u6258\u7ba1\u3001\u81ea\u5e26\u4e3b\u9898\u3001\u652f\u6301\u81ea\u5236\u9875\u9762\u548cJekyll\u3002 \u200b MkDocs \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u9879\u76ee\u6587\u6863\u7684 \u5feb\u901f, \u7b80\u5355 , \u5b8c\u7f8e\u534e\u4e3d\u7684\u9759\u6001\u7ad9\u70b9\u751f\u6210\u5668. \u6587\u6863\u6e90\u7801\u4f7f\u7528 Markdown \u6765\u64b0\u5199, \u7528\u4e00\u4e2a YAML \u6587\u4ef6\u4f5c\u4e3a\u914d\u7f6e\u6587\u6863\u3002 \u200b Travis CI \uff0c\u662f\u4e00\u4e2a\u4e13\u95e8\u4e3a\u5f00\u6e90\u9879\u76ee\u6253\u9020\u7684\u6301\u7eed\u96c6\u6210\u73af\u5883\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u653e\u5728github\u4e0a\u7684\u5f00\u6e90\u9879\u76ee\uff0cTravis CI\u7b80\u76f4\u5c31\u662f\u4e00\u4e2a\u5b8c\u7f8e\u7684CI\u9009\u62e9\u3002 \u200b \u6e90\u7801\u5b58\u653e\u5904 https://github.com/spaceplayer/mkdocs_blog\u3002 \u200b \u9875\u9762\u5b58\u653e\u5904 https://github.com/spaceplayer/spaceplayer.github.io\u3002 \u200b \u901a\u8fc7 Travis CI \u90e8\u7f72\u7684 MkDocs \u73af\u5883\u5c06 mkdocs_blog \u6e90\u7801\u7f16\u8bd1\u6210\u9759\u6001\u9875\u9762\u5e76\u53d1\u5e03\u5230 spaceplayer.github.io \u3002 \u6b65\u9aa4 1.\u521b\u5efa\u4e00\u4e2aGitHub Pages \u200b \u7528\u6765\u5b58\u653eMkDocs\u751f\u6210\u7684\u9759\u6001\u9875\u9762\u3002 2. \u5efa\u7acb\u5b58\u653e\u6e90\u7801\u7684Repository\u5e76\u5173\u8054Travis CI 2.1 \u521b\u5efamkdocs_blog \u200b \u767b\u5f55GitHub\uff0c\u70b9\u51fb New repository \u65b0\u5efa\u5373\u53ef\u3002 2.2 \u751f\u6210Token \u200b \u5728GitHub\u8d26\u6237\u7684Settings\u91cc\u751f\u6210\u3002 3. Travis CI\u5de5\u7a0b\u7684Settings,\u6dfb\u52a0\u73af\u5883\u53d8\u91cf \u200b \u767b\u5f55 https://travis-ci.org/ \u70b9\u51fb Sign in with GitHub \u7528\u5b58\u653e\u6e90\u7801\u7684github\u8d26\u53f7\u767b\u5f55\u3002 \u200b \u6dfb\u52a0\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\uff0c\u547d\u540d\u4e3a GH_TOKEN \uff0c\u4e4b\u540e\u5c06\u521a\u521a\u751f\u6210\u7684Token\u590d\u5236\u8fdb\u53bb\uff0c\u8fd9\u5728\u4e4b\u540e\u4f1a\u7528\u5230\u3002 4. \u914d\u7f6e.travis.yml # \u8bed\u8a00 language: python python: - 3.6 branches: only: - master # \u4f55\u65f6\u53d1\u90ae\u4ef6: https://docs.travis-ci.com/user/notifications/ notifications: email: recipients: - zhangguohao/Desktop/typora_imgbs@gmail.com on_success: always # default: change on_failure: always # default: alway cache: directories: - build yarn: true before_install: - export TZ='Asia/Shanghai' # \u8bbe\u7f6e\u65f6\u533a install: - pip install -r blog.requirement # build \u751f\u6210\u7684\u6700\u7ec8\u7f51\u7ad9\u4f1a\u5728site\u76ee\u5f55\u5185\uff0c\u2013clean\u53c2\u6570\u4fdd\u8bc1\u6784\u5efa\u7684\u65f6\u5019site\u6587\u4ef6\u5939\u5185\u6ca1\u6709\u591a\u4f59\u6587\u4ef6 script: - mkdocs build -c # \u90e8\u7f72 after_script: - cd site/ - git init - git config user.name \"spaceplayer\" - git config user.email \"zhangguohao/Desktop/typora_imgbs@gmail.com\" - git add . - git commit -m \"Update sphinx By TravisCI With Build $TRAVIS_BUILD_NUMBER\" - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master # \u73af\u5883\u53d8\u91cf env: global: # Coding Pages - GH_REF: github.com/spaceplayer/spaceplayer.github.io MkDocs\u4f7f\u7528 \u200b \u7531\u914d\u7f6e\u6587\u4ef6 mkdocs.yml , \u548c\u4e00\u4e2a\u5305\u542b\u6587\u6863\u6e90\u7801\u7684 docs \u6587\u4ef6\u5939\u6784\u6210\u3002","title":"\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html#_1","text":"","title":"\u6784\u5efa\u81ea\u5df1\u7684\u4e2a\u4eba\u535a\u5ba2"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html#_2","text":"\u200b GitHub Pages \u514d\u8d39\u7684\u9759\u6001\u7ad9\u70b9\uff0c\u4e09\u4e2a\u7279\u70b9\uff1a\u514d\u8d39\u6258\u7ba1\u3001\u81ea\u5e26\u4e3b\u9898\u3001\u652f\u6301\u81ea\u5236\u9875\u9762\u548cJekyll\u3002 \u200b MkDocs \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u9879\u76ee\u6587\u6863\u7684 \u5feb\u901f, \u7b80\u5355 , \u5b8c\u7f8e\u534e\u4e3d\u7684\u9759\u6001\u7ad9\u70b9\u751f\u6210\u5668. \u6587\u6863\u6e90\u7801\u4f7f\u7528 Markdown \u6765\u64b0\u5199, \u7528\u4e00\u4e2a YAML \u6587\u4ef6\u4f5c\u4e3a\u914d\u7f6e\u6587\u6863\u3002 \u200b Travis CI \uff0c\u662f\u4e00\u4e2a\u4e13\u95e8\u4e3a\u5f00\u6e90\u9879\u76ee\u6253\u9020\u7684\u6301\u7eed\u96c6\u6210\u73af\u5883\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u653e\u5728github\u4e0a\u7684\u5f00\u6e90\u9879\u76ee\uff0cTravis CI\u7b80\u76f4\u5c31\u662f\u4e00\u4e2a\u5b8c\u7f8e\u7684CI\u9009\u62e9\u3002 \u200b \u6e90\u7801\u5b58\u653e\u5904 https://github.com/spaceplayer/mkdocs_blog\u3002 \u200b \u9875\u9762\u5b58\u653e\u5904 https://github.com/spaceplayer/spaceplayer.github.io\u3002 \u200b \u901a\u8fc7 Travis CI \u90e8\u7f72\u7684 MkDocs \u73af\u5883\u5c06 mkdocs_blog \u6e90\u7801\u7f16\u8bd1\u6210\u9759\u6001\u9875\u9762\u5e76\u53d1\u5e03\u5230 spaceplayer.github.io \u3002","title":"\u4e3b\u8981\u6280\u672f"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html#_3","text":"","title":"\u6b65\u9aa4"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html#1github-pages","text":"\u200b \u7528\u6765\u5b58\u653eMkDocs\u751f\u6210\u7684\u9759\u6001\u9875\u9762\u3002","title":"1.\u521b\u5efa\u4e00\u4e2aGitHub Pages"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html#2-repositorytravis-ci","text":"","title":"2. \u5efa\u7acb\u5b58\u653e\u6e90\u7801\u7684Repository\u5e76\u5173\u8054Travis CI"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html#21-mkdocs_blog","text":"\u200b \u767b\u5f55GitHub\uff0c\u70b9\u51fb New repository \u65b0\u5efa\u5373\u53ef\u3002","title":"2.1 \u521b\u5efamkdocs_blog"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html#22-token","text":"\u200b \u5728GitHub\u8d26\u6237\u7684Settings\u91cc\u751f\u6210\u3002","title":"2.2 \u751f\u6210Token"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html#3-travis-cisettings","text":"\u200b \u767b\u5f55 https://travis-ci.org/ \u70b9\u51fb Sign in with GitHub \u7528\u5b58\u653e\u6e90\u7801\u7684github\u8d26\u53f7\u767b\u5f55\u3002 \u200b \u6dfb\u52a0\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\uff0c\u547d\u540d\u4e3a GH_TOKEN \uff0c\u4e4b\u540e\u5c06\u521a\u521a\u751f\u6210\u7684Token\u590d\u5236\u8fdb\u53bb\uff0c\u8fd9\u5728\u4e4b\u540e\u4f1a\u7528\u5230\u3002","title":"3. Travis CI\u5de5\u7a0b\u7684Settings,\u6dfb\u52a0\u73af\u5883\u53d8\u91cf"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html#4-travisyml","text":"# \u8bed\u8a00 language: python python: - 3.6 branches: only: - master # \u4f55\u65f6\u53d1\u90ae\u4ef6: https://docs.travis-ci.com/user/notifications/ notifications: email: recipients: - zhangguohao/Desktop/typora_imgbs@gmail.com on_success: always # default: change on_failure: always # default: alway cache: directories: - build yarn: true before_install: - export TZ='Asia/Shanghai' # \u8bbe\u7f6e\u65f6\u533a install: - pip install -r blog.requirement # build \u751f\u6210\u7684\u6700\u7ec8\u7f51\u7ad9\u4f1a\u5728site\u76ee\u5f55\u5185\uff0c\u2013clean\u53c2\u6570\u4fdd\u8bc1\u6784\u5efa\u7684\u65f6\u5019site\u6587\u4ef6\u5939\u5185\u6ca1\u6709\u591a\u4f59\u6587\u4ef6 script: - mkdocs build -c # \u90e8\u7f72 after_script: - cd site/ - git init - git config user.name \"spaceplayer\" - git config user.email \"zhangguohao/Desktop/typora_imgbs@gmail.com\" - git add . - git commit -m \"Update sphinx By TravisCI With Build $TRAVIS_BUILD_NUMBER\" - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master # \u73af\u5883\u53d8\u91cf env: global: # Coding Pages - GH_REF: github.com/spaceplayer/spaceplayer.github.io","title":"4. \u914d\u7f6e.travis.yml"},{"location":"\u5de5\u5177/\u5982\u4f55\u6784\u5efa\u81ea\u5df1\u7684\u535a\u5ba2.html#mkdocs","text":"\u200b \u7531\u914d\u7f6e\u6587\u4ef6 mkdocs.yml , \u548c\u4e00\u4e2a\u5305\u542b\u6587\u6863\u6e90\u7801\u7684 docs \u6587\u4ef6\u5939\u6784\u6210\u3002","title":"MkDocs\u4f7f\u7528"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html","text":"Linux\u7b80\u4ecb 1.6.1 man page Linux\u4e0b\u67099\u4e2aman\u6587\u4ef6\u79cd\u7c7b, \u4f7f\u7528man -f xxx\u6765\u5224\u65ad\u5c5e\u4e8e\u90a3\u4e00\u79cd\u7c7b 1.6.2 info page info\u662f\u4e00\u4e2a\u57fa\u4e8e\u83dc\u5355\u7684\u8d85\u6587\u672c\u7cfb\u7edf \u7a7a\u683c\u5411\u4e0a\u7ffb\u9875, \u6309\u4e0a\u4e0b\u952e\u7ffb\u9875, \u6309q\u9000\u51fa 1.6.3 RedHat\u5b98\u65b9\u6587\u6863 \u4e92\u8054\u7f51\u641c\u7d22\u5f15\u64ce /usr/share/doc Linux\u7528\u6237\u7ba1\u7406 Linux\u6587\u4ef6\u7ba1\u7406 Linux\u6587\u4ef6\u7cfb\u7edf \u5b57\u7b26\u5904\u7406 \u7f51\u7edc\u7ba1\u7406 \u8fdb\u7a0b\u7ba1\u7406 Linux\u4e0b\u7684\u8f6f\u4ef6\u5b89\u88c5 vi\u548cvim\u7f16\u8f91\u5668 \u6b63\u5219\u8868\u8fbe\u5f0f Shell\u7f16\u7a0b\u6982\u8ff0 Bash Shell\u7684\u5b89\u88c5 Shell\u7f16\u7a0b\u57fa\u7840 \u6d4b\u8bd5\u548c\u5224\u65ad \u5faa\u73af \u51fd\u6570 \u91cd\u5b9a\u5411 \u811a\u672c\u8303\u4f8b","title":"\u5e38\u7528Linux\u547d\u4ee4"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#linux","text":"1.6.1 man page Linux\u4e0b\u67099\u4e2aman\u6587\u4ef6\u79cd\u7c7b, \u4f7f\u7528man -f xxx\u6765\u5224\u65ad\u5c5e\u4e8e\u90a3\u4e00\u79cd\u7c7b 1.6.2 info page info\u662f\u4e00\u4e2a\u57fa\u4e8e\u83dc\u5355\u7684\u8d85\u6587\u672c\u7cfb\u7edf \u7a7a\u683c\u5411\u4e0a\u7ffb\u9875, \u6309\u4e0a\u4e0b\u952e\u7ffb\u9875, \u6309q\u9000\u51fa 1.6.3 RedHat\u5b98\u65b9\u6587\u6863 \u4e92\u8054\u7f51\u641c\u7d22\u5f15\u64ce /usr/share/doc","title":"Linux\u7b80\u4ecb"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#linux_1","text":"","title":"Linux\u7528\u6237\u7ba1\u7406"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#linux_2","text":"","title":"Linux\u6587\u4ef6\u7ba1\u7406"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#linux_3","text":"","title":"Linux\u6587\u4ef6\u7cfb\u7edf"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#_1","text":"","title":"\u5b57\u7b26\u5904\u7406"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#_2","text":"","title":"\u7f51\u7edc\u7ba1\u7406"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#_3","text":"","title":"\u8fdb\u7a0b\u7ba1\u7406"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#linux_4","text":"","title":"Linux\u4e0b\u7684\u8f6f\u4ef6\u5b89\u88c5"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#vivim","text":"","title":"vi\u548cvim\u7f16\u8f91\u5668"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#_4","text":"","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#shell","text":"","title":"Shell\u7f16\u7a0b\u6982\u8ff0"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#bash-shell","text":"","title":"Bash Shell\u7684\u5b89\u88c5"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#shell_1","text":"","title":"Shell\u7f16\u7a0b\u57fa\u7840"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#_5","text":"","title":"\u6d4b\u8bd5\u548c\u5224\u65ad"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#_6","text":"","title":"\u5faa\u73af"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#_7","text":"","title":"\u51fd\u6570"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#_8","text":"","title":"\u91cd\u5b9a\u5411"},{"location":"\u5de5\u5177/\u5e38\u7528Linux\u547d\u4ee4.html#_9","text":"","title":"\u811a\u672c\u8303\u4f8b"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html","text":"FM\u7b97\u6cd5\u6c47\u603b one-hot \u5c40\u9650 category \u7279\u5f81\u9700\u8981\u8fdb\u884c one-hot \u5904\u7406\uff0c\u5f15\u8d77\u4e24\u4e2a\u95ee\u9898\uff1a \u7a00\u758f \u7279\u5f81\u7a7a\u95f4\u53d8\u5f97\u5de8\u5927 FM \u56e0\u5f0f\u5206\u89e3\u673a(fm)\u7ed3\u5408\u4e86SVM\u548c\u56e0\u5f0f\u5206\u89e3\u6a21\u578b\u4e8c\u8005\u7684\u4f18\u52bf \u76f8\u6bd4SVM\u7684\u4e8c\u9636\u591a\u9879\u5f0f\u6838\u800c\u8a00\uff0cFM\u5728\u6837\u672c\u7a00\u758f\u7684\u60c5\u51b5\u4e0b\u662f\u6709\u4f18\u52bf\u7684\uff1b\u800c\u4e14\uff0cFM\u7684\u8bad\u7ec3/\u9884\u6d4b\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\uff0c\u800c\u4e8c\u9879\u591a\u9879\u5f0f\u6838SVM\u9700\u8981\u8ba1\u7b97\u6838\u77e9\u9635\uff0c\u6838\u77e9\u9635\u590d\u6742\u5ea6\u5c31\u662fN\u5e73\u65b9\u3002 FM\u53ef\u4ee5\u50cfSVM\u4e00\u6837\u5904\u7406real value \u7279\u5f81\uff0c\u4e8c\u8005FM\u8fd8\u53ef\u4ee5\u5904\u7406\u7a00\u758f\u7684\u6570\u636e\uff0c\u800c\u8fd9\u91ccSVM\u5374 \u662f\u5931\u8d25\u4e86\u7684\uff0cFM\u5904\u7406\u7a00\u758f\u6570\u636e\u4e3b\u8981\u673a\u5236\u662f\uff1a\u56e0\u5f0f\u5206\u89e3\u53c2\u6570\u53ef\u4ee5\u5bf9\u4efb\u4f55\u4e24\u4e2a\u7279\u5f81\u76f4\u63a5\u505a\u7ec4\u5408\u3002 FFM\u4e8c\u6b21\u9879\u5e76\u4e0d\u80fd\u591f\u5316\u7b80\uff0c\u5176\u9884\u6d4b\u590d\u6742\u5ea6\u662f O(kn2)O(kn2)\u3002 \u7ec4\u5408\u7279\u5f81\u6570\u91cf $\\frac{n(n-1)}{2}$\uff0c\u7531\u4e8eone-hot\u5bfc\u81f4\u7684\u9ad8\u7a00\u758f\u5bfc\u81f4\u540c\u65f6\u4e24\u4e2a\u7279\u5f81\u4e3a1\u7684\u6570\u91cf\u6781\u4f4e\uff0c\u96be\u4ee5\u901a\u8fc7\u8bad\u7ec3\u5b66\u4e60$w_{ij}$ \u4e3a\u4e86\u6c42\u51fa$\u03c9_{ij}$\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u7279\u5f81\u5206\u91cf$x_{i}$\u5f15\u5165\u8f85\u52a9\u5411\u91cfVi=(vi1,vi2,\u22ef,vik)\u3002\u7136\u540e\uff0c\u5229\u7528$v_iv_j^T$\u5bf9$\u03c9_{ij}$\u8fdb\u884c\u6c42\u89e3 \u8981\u6c42\u51fa$ $\uff0c\u4e3b\u8981\u662f\u91c7\u7528\u4e86\u5982\u516c\u5f0f$((a+b+c)^2\u2212a^2\u2212b^2\u2212c^2$\u6c42\u51fa\u4ea4\u53c9\u9879\u3002\u5177\u4f53\u8fc7\u7a0b\u5982\u4e0b $\\hat{y} = w_0 + \\sum_1^nw_ix_i + \\sum_{i=1}^n\\sum_{j=i+1}^nw_{ij}x_ix_j$ $\\hat{y} = w_0 + \\sum_1^nw_ix_i + \\sum_{i=1}^n\\sum_{j=i+1}^n x_ix_j$ $\\hat{y} = w_0 + \\sum_1^nw_ix_i + \\sum_i^n\\sum_{j=i+1}^n x_ix_jI{x_ix_j \\in{keep_set}}$ n\u4ee3\u8868\u6837\u672c\u603b\u6570\u91cf $w_0 $\u548c$w_i$\u5747\u4e3a\u8be5\u516c\u5f0f\u7ebf\u6027\u90e8\u5206\uff08\u524d\u4e24\u9879\uff09\u7684\u6743\u91cd\u56e0\u5b50 $ $\u4ee3\u8868\u7684\u7ec4\u5408\u7279\u5f81\u7684\u6743\u91cd\u56e0\u5b50\uff0c\u7531$v_i$\u548c$v_j$\u7684\u70b9\u79ef\u6c42\u5f97 $\\hat{y}$\u4ee3\u8868\u9884\u6d4b\u7684\u7ed3\u679c $x_i$\u4ee3\u8868\u8f93\u5165\u6837\u672c\u7684\u5404\u4e2a\u7279\u5f81 $x_ix_j $\u4ee3\u8868\u7ec4\u5408\u7279\u5f81 $I{x_ix_j \\in{keep_set}}$\u662f\u793a\u6027\u51fd\u6570\uff0c\u5f53\u5927\u62ec\u53f7\u5185\u90e8\u4e3a''\u771f''\u65f6\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a1\uff0c\u5426\u5219\u8fd4\u56de0 keep_set \u4ee3\u8868\u901a\u8fc7\u9010\u6b65\u56de\u5f52\u7b5b\u9009\u8fc7\u540e\u7684\u7ec4\u5408\u7279\u5f81\u5b50\u96c6 FFM \u4e4d\u4e00\u770bFFM\u7684embedding\u65b9\u6cd5\u4f3c\u4e4e\u901f\u5ea6\u8981\u6bd4FM\u7684embedding\u65b9\u6cd5\u6162\u4e00\u4e2a\u91cf\u7ea7\uff0c\u4f46\u662f\u5728gpu\u7684\u8ba1\u7b97\u73af\u5883\u4e0b\uff0c\u5229\u7528\u5e76\u884c\u5316\u7684\u601d\u60f3\uff0c\u53ef\u4ee5\u5c06FFM\u7684embedding\u65b9\u6cd5\u7684\u8ba1\u7b97\u65f6\u95f4\u4f18\u5316\u5230\u4e0eFM\u7684embedding\u65b9\u6cd5\u51e0\u4e4e\u4e00\u6837\u3002\u53ea\u662fembedding\u77e9\u9635\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u6ca1\u6709\u529e\u6cd5\u518d\u4f18\u5316\u4e86 DeepFM https://zhuanlan.zhihu.com/p/38443751 DeepFFM NFFM\uff08\u817e\u8baf\u7b97\u6cd5\u5927\u8d5brank6\uff09 https://zhuanlan.zhihu.com/p/38443751 deepffm\u662f\u6d45\u5c42\u90e8\u5206\u4e3affm\uff0c\u6df1\u5ea6\u90e8\u5206\u662fembedding\u540e\u7684\u5411\u91cf\u62fc\u63a5\u6210\u4e00\u4e2a\u5411\u91cf\u4f5c\u4e3a\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u5165\u3002\u800cnffm\u5219\u662f\u6d45\u5c42\u90e8\u5206\u662fLR\uff0c\u6df1\u5ea6\u90e8\u5206\u662f\u7279\u5f81\u4ea4\u53c9\u540e\u7684\u5411\u91cf\u4f5c\u4e3a\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u5165\u3002 FM \u5b9e\u73b0 csr\u7a00\u758f\u8868\u793a Deep FM FM \u5b9e\u9645\u4e0a\u56e0\u4e3a\u8ba1\u7b97\u590d\u6742\u5ea6\u7684\u539f\u56e0\u4e00\u822c\u90fd\u53ea\u7528\u5230\u4e86\u4e8c\u9636\u7279\u5f81\u7ec4\u5408 \u9ad8\u9636\u7ec4\u5408\u4f7f\u7528DNN DeepFM\u662f\u4e00\u4e2a\u96c6\u6210\u4e86FM\u548cDNN\u7684\u795e\u7ecf\u7f51\u7edc\u6846\u67b6\uff0c\u601d\u8def\u548cGoogle\u7684Wide&Deep\u76f8\u4f3c\uff0c\u90fd\u5305\u62ecwide\u548cdeep\u4e24\u90e8\u5206\u3002W&D\u6a21\u578b\u7684wide\u90e8\u5206\u662f\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\uff0cDeepFM\u7684wide\u90e8\u5206\u5219\u662fFM\u6a21\u578b\uff0c\u4e24\u8005\u7684deep\u90e8\u5206\u90fd\u662f\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u3002DeepFM\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff0c\u9690\u542b\u5c42\u7684\u6fc0\u6d3b\u51fd\u6570\u7528ReLu\u548cTanh\u505a\u4fe1\u53f7\u975e\u7ebf\u6027\u6620\u5c04\uff0cSigmoid\u51fd\u6570\u505aCTR\u9884\u4f30\u7684\u8f93\u51fa\u51fd\u6570\u3002 #### \u76f8\u5173\u5de5\u4f5c FTRL\u7b97\u6cd5 \uff08McMahan et al. 2013\uff09\uff0cgeneralized linear model\u867d\u7136\u7b80\u5355\uff0c\u4f46\u5b9e\u8df5\u4e2d\u5f88\u6709\u6548\u679c\u3002\u4f46\u8fd9\u7c7b\u7ebf\u6027\u6a21\u578b\u96be\u4ee5\u5b66\u4e60\u7ec4\u5408\u7279\u5f81\uff0c\u4e00\u822c\u9700\u8981\u624b\u52a8\u6784\u5efa\u7279\u5f81\u5411\u91cf\uff0c\u96be\u4ee5\u5904\u7406\u9ad8\u9636\u7ec4\u5408\u6216\u8005\u6ca1\u6709\u51fa\u73b0\u5728\u8bad\u7ec3\u6570\u636e\u4e2d\u7684\u7ec4\u5408\u3002 Factorization Machine\u6a21\u578b \uff08Rendle 2010\uff09\uff0c\u5bf9\u7279\u5f81\u4e4b\u95f4\u8fdb\u884c\u5411\u91cf\u5185\u79ef\uff0c\u5b9e\u73b0\u7279\u5f81\u4eec\u7684\u9010\u5bf9\u7ec4\u5408pairwise interactions\u3002\u7406\u8bba\u4e0aFM\u53ef\u4ee5\u5bf9\u9ad8\u9636\u7279\u5f81\u7ec4\u5408\u5efa\u6a21\uff0c\u4f46\u5b9e\u8df5\u4e2d\u53ea\u7528order-2\u7279\u5f81\u56e0\u4e3a\u5176\u9ad8\u590d\u6742\u5ea6\u3002 DNN \u5728\u7279\u5f81\u8868\u793a\u5b66\u4e60\u4e2d\u5f88\u6709\u6548\u679c\uff0c\u53ef\u4ee5\u7528\u6765\u5b66\u4e60\u7ec4\u5408\u7279\u5f81\u3002\uff08Liu et al., 2015\uff09\u548c\uff08Zhang et al., 2014\uff09\u6269\u5c55CNN\u548cRNN\u7528\u4e8eCTR\u9884\u4f30\uff0c\u4f46CNN-based\u6a21\u578b\u5bf9\u9886\u57df\u7279\u5f81\u6709\u504fbiased\uff0cRNN-based\u6a21\u578b\u9002\u5408\u7528\u5728\u6709\u65f6\u5e8f\u4f9d\u8d56\u7684\u70b9\u51fb\u6570\u636e\u3002Factorization-machine supported Neural Network\uff08 FNN \uff09\uff08Zhang et al., 2016\uff09\uff0c\u5728\u4f7f\u7528DNN\u524d\u9884\u8bad\u7ec3FM\uff0c\u56e0\u6b64\u9650\u5236\u4e86FM\u7684\u80fd\u529b\u3002Product-based Neural Network\uff08 PNN \uff09\uff08Qu et al., 2016\uff09\u5728DNN\u7684embedding\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u4e4b\u95f4\u5f15\u5165product\u5c42\uff0c\u6765\u7814\u7a76feature interactions\u3002 Wide & Deep\u6a21\u578b (Cheng et al., 2016)\u8ba4\u4e3a\uff0cPNN/FNN\u548c\u5176\u4ed6Deep\u6a21\u578b\u63d0\u53d6\u5f88\u5c11low-order\u7684feature interactions\uff0c\u63d0\u51fa\u7684W&D\u6a21\u578b\u53ef\u4ee5\u540c\u65f6\u5bf9low-order\u548chigh-order\u5efa\u6a21\uff0c\u4f46\u8981\u5bf9wide\u548cdeep\u90e8\u5206\u6a21\u578b\u5206\u522b\u8f93\u5165\uff0c\u5176\u4e2dwide\u90e8\u5206\u8fd8\u9700\u8981\u4eba\u5de5\u7279\u5f81\u5de5\u7a0b\u3002 NFM $\\hat{y} = sigmoid(y_{FM} + y_{DNN})$ $y = -1.509x_1 + 0.132x_2 + 4.807x_4 + 654.584$","title":"FM\u7b97\u6cd5\u6c47\u603b"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#fm","text":"","title":"FM\u7b97\u6cd5\u6c47\u603b"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#one-hot","text":"category \u7279\u5f81\u9700\u8981\u8fdb\u884c one-hot \u5904\u7406\uff0c\u5f15\u8d77\u4e24\u4e2a\u95ee\u9898\uff1a \u7a00\u758f \u7279\u5f81\u7a7a\u95f4\u53d8\u5f97\u5de8\u5927","title":"one-hot \u5c40\u9650"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#fm_1","text":"\u56e0\u5f0f\u5206\u89e3\u673a(fm)\u7ed3\u5408\u4e86SVM\u548c\u56e0\u5f0f\u5206\u89e3\u6a21\u578b\u4e8c\u8005\u7684\u4f18\u52bf \u76f8\u6bd4SVM\u7684\u4e8c\u9636\u591a\u9879\u5f0f\u6838\u800c\u8a00\uff0cFM\u5728\u6837\u672c\u7a00\u758f\u7684\u60c5\u51b5\u4e0b\u662f\u6709\u4f18\u52bf\u7684\uff1b\u800c\u4e14\uff0cFM\u7684\u8bad\u7ec3/\u9884\u6d4b\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\uff0c\u800c\u4e8c\u9879\u591a\u9879\u5f0f\u6838SVM\u9700\u8981\u8ba1\u7b97\u6838\u77e9\u9635\uff0c\u6838\u77e9\u9635\u590d\u6742\u5ea6\u5c31\u662fN\u5e73\u65b9\u3002 FM\u53ef\u4ee5\u50cfSVM\u4e00\u6837\u5904\u7406real value \u7279\u5f81\uff0c\u4e8c\u8005FM\u8fd8\u53ef\u4ee5\u5904\u7406\u7a00\u758f\u7684\u6570\u636e\uff0c\u800c\u8fd9\u91ccSVM\u5374 \u662f\u5931\u8d25\u4e86\u7684\uff0cFM\u5904\u7406\u7a00\u758f\u6570\u636e\u4e3b\u8981\u673a\u5236\u662f\uff1a\u56e0\u5f0f\u5206\u89e3\u53c2\u6570\u53ef\u4ee5\u5bf9\u4efb\u4f55\u4e24\u4e2a\u7279\u5f81\u76f4\u63a5\u505a\u7ec4\u5408\u3002 FFM\u4e8c\u6b21\u9879\u5e76\u4e0d\u80fd\u591f\u5316\u7b80\uff0c\u5176\u9884\u6d4b\u590d\u6742\u5ea6\u662f O(kn2)O(kn2)\u3002 \u7ec4\u5408\u7279\u5f81\u6570\u91cf $\\frac{n(n-1)}{2}$\uff0c\u7531\u4e8eone-hot\u5bfc\u81f4\u7684\u9ad8\u7a00\u758f\u5bfc\u81f4\u540c\u65f6\u4e24\u4e2a\u7279\u5f81\u4e3a1\u7684\u6570\u91cf\u6781\u4f4e\uff0c\u96be\u4ee5\u901a\u8fc7\u8bad\u7ec3\u5b66\u4e60$w_{ij}$ \u4e3a\u4e86\u6c42\u51fa$\u03c9_{ij}$\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u7279\u5f81\u5206\u91cf$x_{i}$\u5f15\u5165\u8f85\u52a9\u5411\u91cfVi=(vi1,vi2,\u22ef,vik)\u3002\u7136\u540e\uff0c\u5229\u7528$v_iv_j^T$\u5bf9$\u03c9_{ij}$\u8fdb\u884c\u6c42\u89e3 \u8981\u6c42\u51fa$ $\uff0c\u4e3b\u8981\u662f\u91c7\u7528\u4e86\u5982\u516c\u5f0f$((a+b+c)^2\u2212a^2\u2212b^2\u2212c^2$\u6c42\u51fa\u4ea4\u53c9\u9879\u3002\u5177\u4f53\u8fc7\u7a0b\u5982\u4e0b $\\hat{y} = w_0 + \\sum_1^nw_ix_i + \\sum_{i=1}^n\\sum_{j=i+1}^nw_{ij}x_ix_j$ $\\hat{y} = w_0 + \\sum_1^nw_ix_i + \\sum_{i=1}^n\\sum_{j=i+1}^n x_ix_j$ $\\hat{y} = w_0 + \\sum_1^nw_ix_i + \\sum_i^n\\sum_{j=i+1}^n x_ix_jI{x_ix_j \\in{keep_set}}$ n\u4ee3\u8868\u6837\u672c\u603b\u6570\u91cf $w_0 $\u548c$w_i$\u5747\u4e3a\u8be5\u516c\u5f0f\u7ebf\u6027\u90e8\u5206\uff08\u524d\u4e24\u9879\uff09\u7684\u6743\u91cd\u56e0\u5b50 $ $\u4ee3\u8868\u7684\u7ec4\u5408\u7279\u5f81\u7684\u6743\u91cd\u56e0\u5b50\uff0c\u7531$v_i$\u548c$v_j$\u7684\u70b9\u79ef\u6c42\u5f97 $\\hat{y}$\u4ee3\u8868\u9884\u6d4b\u7684\u7ed3\u679c $x_i$\u4ee3\u8868\u8f93\u5165\u6837\u672c\u7684\u5404\u4e2a\u7279\u5f81 $x_ix_j $\u4ee3\u8868\u7ec4\u5408\u7279\u5f81 $I{x_ix_j \\in{keep_set}}$\u662f\u793a\u6027\u51fd\u6570\uff0c\u5f53\u5927\u62ec\u53f7\u5185\u90e8\u4e3a''\u771f''\u65f6\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a1\uff0c\u5426\u5219\u8fd4\u56de0 keep_set \u4ee3\u8868\u901a\u8fc7\u9010\u6b65\u56de\u5f52\u7b5b\u9009\u8fc7\u540e\u7684\u7ec4\u5408\u7279\u5f81\u5b50\u96c6","title":"FM"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#ffm","text":"\u4e4d\u4e00\u770bFFM\u7684embedding\u65b9\u6cd5\u4f3c\u4e4e\u901f\u5ea6\u8981\u6bd4FM\u7684embedding\u65b9\u6cd5\u6162\u4e00\u4e2a\u91cf\u7ea7\uff0c\u4f46\u662f\u5728gpu\u7684\u8ba1\u7b97\u73af\u5883\u4e0b\uff0c\u5229\u7528\u5e76\u884c\u5316\u7684\u601d\u60f3\uff0c\u53ef\u4ee5\u5c06FFM\u7684embedding\u65b9\u6cd5\u7684\u8ba1\u7b97\u65f6\u95f4\u4f18\u5316\u5230\u4e0eFM\u7684embedding\u65b9\u6cd5\u51e0\u4e4e\u4e00\u6837\u3002\u53ea\u662fembedding\u77e9\u9635\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u6ca1\u6709\u529e\u6cd5\u518d\u4f18\u5316\u4e86","title":"FFM"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#deepfm","text":"https://zhuanlan.zhihu.com/p/38443751","title":"DeepFM"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#deepffm","text":"","title":"DeepFFM"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#nffmrank6","text":"https://zhuanlan.zhihu.com/p/38443751 deepffm\u662f\u6d45\u5c42\u90e8\u5206\u4e3affm\uff0c\u6df1\u5ea6\u90e8\u5206\u662fembedding\u540e\u7684\u5411\u91cf\u62fc\u63a5\u6210\u4e00\u4e2a\u5411\u91cf\u4f5c\u4e3a\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u5165\u3002\u800cnffm\u5219\u662f\u6d45\u5c42\u90e8\u5206\u662fLR\uff0c\u6df1\u5ea6\u90e8\u5206\u662f\u7279\u5f81\u4ea4\u53c9\u540e\u7684\u5411\u91cf\u4f5c\u4e3a\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u5165\u3002","title":"NFFM\uff08\u817e\u8baf\u7b97\u6cd5\u5927\u8d5brank6\uff09"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#fm_2","text":"","title":"FM \u5b9e\u73b0"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#csr","text":"","title":"csr\u7a00\u758f\u8868\u793a"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#deep-fm","text":"FM \u5b9e\u9645\u4e0a\u56e0\u4e3a\u8ba1\u7b97\u590d\u6742\u5ea6\u7684\u539f\u56e0\u4e00\u822c\u90fd\u53ea\u7528\u5230\u4e86\u4e8c\u9636\u7279\u5f81\u7ec4\u5408 \u9ad8\u9636\u7ec4\u5408\u4f7f\u7528DNN DeepFM\u662f\u4e00\u4e2a\u96c6\u6210\u4e86FM\u548cDNN\u7684\u795e\u7ecf\u7f51\u7edc\u6846\u67b6\uff0c\u601d\u8def\u548cGoogle\u7684Wide&Deep\u76f8\u4f3c\uff0c\u90fd\u5305\u62ecwide\u548cdeep\u4e24\u90e8\u5206\u3002W&D\u6a21\u578b\u7684wide\u90e8\u5206\u662f\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\uff0cDeepFM\u7684wide\u90e8\u5206\u5219\u662fFM\u6a21\u578b\uff0c\u4e24\u8005\u7684deep\u90e8\u5206\u90fd\u662f\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u3002DeepFM\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff0c\u9690\u542b\u5c42\u7684\u6fc0\u6d3b\u51fd\u6570\u7528ReLu\u548cTanh\u505a\u4fe1\u53f7\u975e\u7ebf\u6027\u6620\u5c04\uff0cSigmoid\u51fd\u6570\u505aCTR\u9884\u4f30\u7684\u8f93\u51fa\u51fd\u6570\u3002 #### \u76f8\u5173\u5de5\u4f5c FTRL\u7b97\u6cd5 \uff08McMahan et al. 2013\uff09\uff0cgeneralized linear model\u867d\u7136\u7b80\u5355\uff0c\u4f46\u5b9e\u8df5\u4e2d\u5f88\u6709\u6548\u679c\u3002\u4f46\u8fd9\u7c7b\u7ebf\u6027\u6a21\u578b\u96be\u4ee5\u5b66\u4e60\u7ec4\u5408\u7279\u5f81\uff0c\u4e00\u822c\u9700\u8981\u624b\u52a8\u6784\u5efa\u7279\u5f81\u5411\u91cf\uff0c\u96be\u4ee5\u5904\u7406\u9ad8\u9636\u7ec4\u5408\u6216\u8005\u6ca1\u6709\u51fa\u73b0\u5728\u8bad\u7ec3\u6570\u636e\u4e2d\u7684\u7ec4\u5408\u3002 Factorization Machine\u6a21\u578b \uff08Rendle 2010\uff09\uff0c\u5bf9\u7279\u5f81\u4e4b\u95f4\u8fdb\u884c\u5411\u91cf\u5185\u79ef\uff0c\u5b9e\u73b0\u7279\u5f81\u4eec\u7684\u9010\u5bf9\u7ec4\u5408pairwise interactions\u3002\u7406\u8bba\u4e0aFM\u53ef\u4ee5\u5bf9\u9ad8\u9636\u7279\u5f81\u7ec4\u5408\u5efa\u6a21\uff0c\u4f46\u5b9e\u8df5\u4e2d\u53ea\u7528order-2\u7279\u5f81\u56e0\u4e3a\u5176\u9ad8\u590d\u6742\u5ea6\u3002 DNN \u5728\u7279\u5f81\u8868\u793a\u5b66\u4e60\u4e2d\u5f88\u6709\u6548\u679c\uff0c\u53ef\u4ee5\u7528\u6765\u5b66\u4e60\u7ec4\u5408\u7279\u5f81\u3002\uff08Liu et al., 2015\uff09\u548c\uff08Zhang et al., 2014\uff09\u6269\u5c55CNN\u548cRNN\u7528\u4e8eCTR\u9884\u4f30\uff0c\u4f46CNN-based\u6a21\u578b\u5bf9\u9886\u57df\u7279\u5f81\u6709\u504fbiased\uff0cRNN-based\u6a21\u578b\u9002\u5408\u7528\u5728\u6709\u65f6\u5e8f\u4f9d\u8d56\u7684\u70b9\u51fb\u6570\u636e\u3002Factorization-machine supported Neural Network\uff08 FNN \uff09\uff08Zhang et al., 2016\uff09\uff0c\u5728\u4f7f\u7528DNN\u524d\u9884\u8bad\u7ec3FM\uff0c\u56e0\u6b64\u9650\u5236\u4e86FM\u7684\u80fd\u529b\u3002Product-based Neural Network\uff08 PNN \uff09\uff08Qu et al., 2016\uff09\u5728DNN\u7684embedding\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u4e4b\u95f4\u5f15\u5165product\u5c42\uff0c\u6765\u7814\u7a76feature interactions\u3002 Wide & Deep\u6a21\u578b (Cheng et al., 2016)\u8ba4\u4e3a\uff0cPNN/FNN\u548c\u5176\u4ed6Deep\u6a21\u578b\u63d0\u53d6\u5f88\u5c11low-order\u7684feature interactions\uff0c\u63d0\u51fa\u7684W&D\u6a21\u578b\u53ef\u4ee5\u540c\u65f6\u5bf9low-order\u548chigh-order\u5efa\u6a21\uff0c\u4f46\u8981\u5bf9wide\u548cdeep\u90e8\u5206\u6a21\u578b\u5206\u522b\u8f93\u5165\uff0c\u5176\u4e2dwide\u90e8\u5206\u8fd8\u9700\u8981\u4eba\u5de5\u7279\u5f81\u5de5\u7a0b\u3002","title":"Deep FM"},{"location":"\u63a8\u8350\u7cfb\u7edf/FM\u7b97\u6cd5\u6c47\u603b.html#nfm","text":"$\\hat{y} = sigmoid(y_{FM} + y_{DNN})$ $y = -1.509x_1 + 0.132x_2 + 4.807x_4 + 654.584$","title":"NFM"},{"location":"\u63a8\u8350\u7cfb\u7edf/\u6df1\u5ea6\u5b66\u4e60\u53ec\u56de\u6a21\u578b.html","text":"","title":"\u6df1\u5ea6\u5b66\u4e60\u53ec\u56de\u6a21\u578b"},{"location":"\u7b97\u6cd5/ACM.html","text":"\u5bf9\u6570\u5668 \u6b65\u9aa4 \u5f85\u6d4b\u65b9\u6cd5a \u5b9e\u73b0\u4e00\u4e2a\u7edd\u5bf9\u6b63\u786e\u4f46\u662f\u590d\u6742\u5ea6\u4e0d\u597d\u7684\u65b9\u6cd5b, \u5b9e\u73b0\u4e00\u4e2a\u968f\u673a\u6837\u672c\u4ea7\u751f\u5668generateRandomArray \u5b9e\u73b0\u6bd4\u5bf9\u7684\u65b9\u6cd5 \u5982\u679c\u6709\u4e00\u4e2a\u6837\u672c\u4f7f\u5f97\u6bd4\u5bf9\u51fa\u9519,\u6253\u5370\u6837\u672c\u5206\u6790\u662f\u54ea\u4e2a\u65b9\u6cd5\u51fa \u9519 \u6ce8\u610f 1.\u968f\u673a\u6837\u672c\u4ea7\u751f\u5668\u6839\u636e\u9898\u76ee\u8981\u6c42(\u4e0d\u540c\u957f\u5ea6, \u6b63\u8d1f\u6837\u672c 0) 2.\u5f00\u59cb\u6d4b\u8bd5\u9009\u62e9\u751f\u6210\u77ed\u6570\u7ec4\u6216\u7b80\u5355\u6570\u7ec4 3.\u51c6\u5907 \u4e8c\u53c9\u6811\u751f\u6210\u5668\u6a21\u677f + \u6570\u7ec4\u751f\u6210\u5668\u6a21\u677f \u5b9e\u73b0 Java\u5b9e\u73b0 public static int[] generateRandomArray(int maxSize, int maxValue) { // maxSize: \u6570\u7ec4\u6700\u5927\u8303\u56f4 maxValue: \u6570\u7ec4\u6700\u5927\u503c // \u9ed8\u8ba4\u751f\u6210\u6570\u7ec4\u5305\u542b\u8d1f\u6570 int[] arr = new int[(int) ((maxSize + 1) * Math.random())]; for (int i = 0; i < arr.length; i++) { arr[i] = (int) ((maxValue + 1) * Math.random()) - (int) (maxValue * Math.random()); } return arr; } // for test public static int[] copyArray(int[] arr) { if (arr == null) { return null; } int[] res = new int[arr.length]; for (int i = 0; i < arr.length; i++) { res[i] = arr[i]; } return res; } // for test public static boolean isEqual(int[] arr1, int[] arr2) { if ((arr1 == null && arr2 != null) || (arr1 != null && arr2 == null)) { return false; } if (arr1 == null && arr2 == null) { return true; } if (arr1.length != arr2.length) { return false; } for (int i = 0; i < arr1.length; i++) { if (arr1[i] != arr2[i]) { return false; } } return true; } public static void main(String[] args) { int testTime = 500; int maxSize = 100; int maxValue = 100; boolean succeed = true; for (int i = 0; i < testTime; i++) { int[] arr1 = generateRandomArray(maxSize, maxValue); int[] arr2 = copyArray(arr1); bubbleSort(arr1); // right and slow func comparator(arr2); if (!isEqual(arr1, arr2)) { // \u6253\u5370\u51fa\u9519\u7684\u6570\u7ec4 printArray(arr1); printArray(arr2); succeed = false; break; } } System.out.println(succeed ? \"Nice!\" : \"Fucking fucked!\"); int[] arr = generateRandomArray(maxSize, maxValue); printArray(arr); bubbleSort(arr); printArray(arr); } \u6392\u5e8f \u5feb\u901f\u6392\u5e8f \u6539\u8fdb\u7248 \u8377\u5170\u56fd\u65d7 def partition(arr, L, R): \"\"\" \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u53ca\u76f8\u7b49\u5143\u7d20\u7684\u5de6\u53f3\u8fb9\u754c \"\"\" less = L - 1 # \u5f85\u6bd4\u8f83\u5143\u7d20\u7d22\u5f15 more = R while L < more: if arr[L] < arr{R}: less += 1 arr[less], arr[L] = arr[L], arr[less] L += 1 elif arr[L] > arr[R]: more -= 1 arr[more], arr[L] = arr[L], arr[more] else: L += 1 arr[more], arr[R] = arr[R], arr[more] return less + 1, more def quicksort(arr, L, R): if L < R: l, r = partition(arr, L, R): quicksort(arr, L, l - 1) quicksort(arr, r + 1, R) \u5806\u6392\u5e8f def heapify(data, index, size): left = index * 2 + 1 while left < size: largest = left + 1 if left + 1 < size and data[left + 1] > data[left] else left largest = largest if data[largest] > data[index] else index if largest == index: break data[largest], data[index] = data[index], data[largest] index = largest left = largest * 2 + 1 def heap_sort(data): if not data or len(data) < 2: return data n = len(data) # \u521b\u5efa\u5806 for i in range((n - 1)//2, -1, -1): heapify(data, i, n) # \u5806\u6392\u5e8f for i in range(n-1, -1, -1): # \u4ece\u5927\u5230\u5c0f data[0], data[i] = data[i], data[0] # \u5c06\u6700\u540e\u4e00\u4e2a\u503c\u4e0e\u7236\u8282\u70b9\u4ea4\u4e92\u4f4d\u7f6e heapify(data, 0, i) li = list(range(10)) random.shuffle(li) print(li) heap_sort(li) print(li) public class Code_03_HeapSort { public static void heapSort(int[] arr) { if (arr == null || arr.length < 2) { return; } for (int i = (arr.length - 1) / 2; i >= 0; i--){ heapify(arr, i, n); } int size = arr.length; swap(arr, 0, --size); while (size > 0) { heapify(arr, 0, size); swap(arr, 0, --size); } } public static void heapInsert(int[] arr, int index) { while (arr[index] > arr[(index - 1) / 2]) { swap(arr, index, (index - 1) / 2); index = (index - 1) / 2; } } public static void heapify(int[] arr, int index, int size) { int left = index * 2 + 1; while (left < size) { int largest = left + 1 < size && arr[left + 1] > arr[left] ? left + 1 : left; largest = arr[largest] > arr[index] ? largest : index; if (largest == index) { break; } swap(arr, largest, index); index = largest; left = index * 2 + 1; } } public static void swap(int[] arr, int i, int j) { int tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } \u6876\u6392\u5e8f (\u8ba1\u6570\u6392\u5e8f) def bucketSort(arr): if not arr or len(arr) < 2: return arr # 1.\u6700\u5927\u503c maxV = max(arr) # 2.\u8bcd\u9891\u8868 bucket = [0] * (maxV + 1) for i in range(len(arr)): bucket[arr[i]] += 1 # 3.\u6839\u636e\u8bcd\u9891\u8868\u6392\u5e8f i = 0 for j in range(len(bucket)): while bucket[j] > 0: arr[i] = j i += 1 bucket[j] -= 1 import java.util.Arrays; class test { public static void bucketSort(int[] arr){ if (arr == null || arr.length < 2){ return; } // 1.\u6700\u5927\u503c int max = Integer.MIN_VALUE; for(int i = 0; i < arr.length; i++){ max = Math.max(max, arr[i]); } // 2.\u8bcd\u9891\u8868 int[] bucket = new int[max + 1]; for (int i = 0; i < arr.length; i++){ bucket[arr[i]]++; } // 3.\u6839\u636e\u8bcd\u9891\u8868\u8fdb\u884c\u5b89\u7f6e\u6392\u5e8f int i = 0; for(int j = 0; j < bucket.length; j++){ while(bucket[j]-- > 0){ arr[i++] = j; } } } \u70ed\u95e8\u9898\u76ee \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4,\u6c42\u5982\u679c\u6392\u5e8f\u4e4b\u540e,\u76f8\u90bb\u4e24\u6570\u7684\u6700\u5927\u5dee\u503c,\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea60(N),\u4e14\u8981\u6c42\u4e0d\u80fd\u7528\u975e\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u3002 \u601d\u8def 1.\u627e\u5230\u6700\u5927\u503c\u6700\u5c0f\u503c, \u6784\u5efa N + 1\u4e2a\u6876, \u628a\u6700\u5c0f\u503c\u653e\u5165\u7b2c\u4e00\u4e2a\u6876, \u6700\u5927\u503c\u653e\u5165\u6700\u540e\u4e00\u4e2a\u6876 2.\u5269\u4f59N - 1\u4e2a\u6876, \u628a\u6700\u5927\u503c\u6700\u5c0f\u503c\u7684\u5dee\u503c (N - 1) \u7b49\u5206 3.\u904d\u5386\u6570\u7ec4, \u628a\u503c\u653e\u5165\u4e0d\u540c\u7684\u8303\u56f4(\u6876), N \u4e2a\u6570\u653e\u5165 N + 1\u4e2a\u6876\u4e00\u5b9a\u4f1a\u7a7a\u4f59\u4e00\u4e2a\u6876 4.\u6700\u5927\u5dee\u503c\u4e00\u5b9a\u5728\u8fd9\u4e2a\u7a7a\u6876\u7684\u524d\u4e00\u4e2a\u6876\u6700\u5927\u503c\u548c\u540e\u4e00\u4e2a\u6876\u6700\u5c0f\u503c [\u6ce8\u610f]\u6bcf\u4e2a\u6876\u53ea\u66f4\u65b0\u8fdb\u5165\u8fd9\u4e2a\u6876\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c, \u5e76\u7ef4\u62a4\u4e00\u4e2a\u662f\u5426\u662f\u7a7a\u6876\u7684\u6807\u8bb0 public static int maxGap(int[] nums) { if (nums == null || nums.length < 2) { return 0; } int len = nums.length; int min = Integer.MAX_VALUE; int max = Integer.MIN_VALUE; for (int i = 0; i < len; i++) { min = Math.min(min, nums[i]); max = Math.max(max, nums[i]); } if (min == max) { return 0; } boolean[] hasNum = new boolean[len + 1]; int[] maxs = new int[len + 1]; int[] mins = new int[len + 1]; int bid = 0; for (int i = 0; i < len; i++) { bid = bucket(nums[i], len, min, max); mins[bid] = hasNum[bid] ? Math.min(mins[bid], nums[i]) : nums[i]; maxs[bid] = hasNum[bid] ? Math.max(maxs[bid], nums[i]) : nums[i]; hasNum[bid] = true; } int res = 0; int lastMax = maxs[0]; int i = 1; for (; i <= len; i++) { if (hasNum[i]) { res = Math.max(res, mins[i] - lastMax); lastMax = maxs[i]; } } return res; } public static int bucket(long num, long len, long min, long max) { // key: \u5224\u65adnum\u5c5e\u4e8e\u54ea\u4e2abucket // (num-min)/(max-min)\u5c31\u662f\u5360\u6240\u6709\u7684\u6bd4\u4f8b return (int) ((num - min) * len / (max - min)); } \u961f\u5217\u548c\u6808 \u7528\u6570\u7ec4\u7ed3\u6784\u5b9e\u73b0\u5927\u5c0f\u56fa\u5b9a\u7684\u961f\u5217\u548c\u6808 key: \u7ef4\u62a4\u4e00\u4e2a\u7d22\u5f15 package class_03; public class Code_01_Array_To_Stack_Queue { public static class ArrayStack { private Integer[] arr; private Integer size; public ArrayStack(int initSize) { if (initSize < 0) { throw new IllegalArgumentException(\"The init size is less than 0\"); } arr = new Integer[initSize]; size = 0; } public Integer peek() { if (size == 0) { return null; } return arr[size - 1]; } public void push(int obj) { if (size == arr.length) { throw new ArrayIndexOutOfBoundsException(\"The queue is full\"); } arr[size++] = obj; } public Integer pop() { if (size == 0) { throw new ArrayIndexOutOfBoundsException(\"The queue is empty\"); } return arr[--size]; } } public static class ArrayQueue { private Integer[] arr; private Integer size; private Integer first; private Integer last; public ArrayQueue(int initSize) { if (initSize < 0) { throw new IllegalArgumentException(\"The init size is less than 0\"); } arr = new Integer[initSize]; size = 0; first = 0; last = 0; } public Integer peek() { if (size == 0) { return null; } return arr[first]; } public void push(int obj) { if (size == arr.length) { throw new ArrayIndexOutOfBoundsException(\"The queue is full\"); } size++; arr[last] = obj; last = last == arr.length - 1 ? 0 : last + 1; } public Integer poll() { if (size == 0) { throw new ArrayIndexOutOfBoundsException(\"The queue is empty\"); } size--; int tmp = first; first = first == arr.length - 1 ? 0 : first + 1; return arr[tmp]; } } public static void main(String[] args) { } } \u732b\u72d7\u961f\u5217 \u5b9e\u73b0\u4e00\u79cd\u72d7\u732b\u961f\u5217\u7684\u7ed3\u6784,\u8981\u6c42\u5982\u4e0b:\u7528\u6237\u53ef\u4ee5\u8c03\u7528add\u65b9\u6cd5\u5c06cat\u7c7b\u6216dog\u7c7b\u7684\u5b9e\u4f8b\u653e\u5165\u961f\u5217\u4e2d;\u7528\u6237\u53ef\u4ee5\u8c03\u7528pollAll\u65b9\u6cd5,\u5c06\u961f\u5217\u4e2d\u6240\u6709\u7684\u5b9e\u4f8b\u6309\u7167\u8fdb\u961f\u5217\u7684\u5148\u540e\u987a\u5e8f\u4f9d\u6b21\u5f39\u51fa;\u7528\u6237\u53ef\u4ee5\u8c03\u7528 pol l Dog\u65b9\u6cd5,\u5c06\u961f\u5217\u4e2ddog\u7c7b\u7684\u5b9e\u4f8b\u6309\u7167\u8fdb\u961f\u5217\u7684\u5148\u540e\u987a\u5e8f\u4f9d\u6b21\u5f39\u51fa;\u7528\u6237\u53ef\u4ee5\u8c03\u7528 pol ICat\u65b9\u6cd5,\u5c06\u961f\u5217\u4e2dcat\u7c7b\u7684\u5b9e\u4f8b\u6309\u7167\u8fdb\u961f\u5217\u7684\u5148\u540e\u987a\u5e8f\u4f9d\u6b21\u5f39\u51fa;\u7528\u6237\u53ef\u4ee5\u8c03\u7528 isEmpty\u65b9\u6cd5,\u68c0\u67e5\u961f\u5217\u4e2d\u662f\u5426\u8fd8\u6709dog\u6216cat\u7684\u5b9e\u4f8b;\u7528\u6237\u53ef\u4ee5\u8c03\u7528 isDogEmpty\u65b9\u6cd5,\u68c0\u67e5\u961f\u5217\u4e2d\u662f\u5426\u6709dog\u7c7b\u7684\u5b9e\u4f8b;\u7528\u6237\u53ef\u4ee5\u8c03\u7528 i sCatEmpty\u65b9\u6cd5,\u68c0\u67e5\u961f\u5217\u4e2d\u662f\u5426\u6709cat\u7c7b\u7684\u5b9e\u4f8b\u3002 \u601d\u8def dog \u961f\u5217 cat \u961f\u5217 \u65f6\u95f4\u6233 \u94fe\u8868\u9898\u76ee \u5224\u65ad\u94fe\u8868\u662f\u5426\u56de\u6587, TO(N), SO(1) \u5feb\u6162\u6307\u9488 \u627e\u5230\u4e2d\u70b9\u540e\u628a\u540e\u534a\u90e8\u5206\u9006\u5e8f \u5c06\u5355\u5411\u94fe\u8868\u6309\u67d0\u503c\u5212\u5206\u6210\u5de6\u8fb9\u5c0f\u3001\u4e2d\u95f4\u76f8\u7b49\u3001\u53f3\u8fb9\u5927\u7684\u5f62\u5f0f \u6784\u5efa\u6307\u9488 less eq more less_p eq_p more_p \u91cd\u70b9\u8003\u8651\u8fb9\u754c\u6761\u4ef6: \u67d0\u533a\u57df\u4e3a\u7a7a \u590d\u5236\u542b\u6709\u968f\u673a\u6307\u9488\u8282\u70b9\u7684\u94fe\u8868 \u53ccHash \u4e0d\u7528Hash \u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u6709\u73af \u5feb\u6162\u6307\u9488 set (\u989d\u5916\u7a7a\u95f4) \u4e24\u5355\u94fe\u8868\u76f8\u4ea4 set\u6cd5: \u5148\u628ahead1\u6240\u6709\u7684\u7ed3\u70b9\u653e\u5165set, \u904d\u5386head2\u662f\u5426\u5728set\u4e2d\u5b58\u5728 \u957f\u5ea6\u6cd5: \u8bb0\u5f55head1\u548chead2\u957f\u5ea6, \u8f83\u957f\u7684\u94fe\u8868\u5148\u8d70|len(head1) - len(head2) | \u4e4b\u540e\u4e24\u94fe\u8868\u4e00\u8d77\u8d70 [\u6ce8]\u5173\u4e8e\u73af: \u4e00\u4e2a\u6709\u73af\u4e00\u4e2a\u65e0\u73af\u4e0d\u76f8\u4ea4, \u4e24\u4e2a\u73af\u4e0d\u4e00\u6837\u4e0d\u76f8\u4ea4 , \u6709\u4e00\u4e2a\u76f8\u540c\u7684\u73af\u76f8\u4ea4(\u540c\u4e00\u4e2a\u5165\u53e3, \u4e24\u4e2a\u5165\u53e3) public static class Node { public int value; public Node next; public Node(int data) { this.value = data; } } public static Node getIntersectNode(Node head1, Node head2) { if (head1 == null || head2 == null) { return null; } Node loop1 = getLoopNode(head1); Node loop2 = getLoopNode(head2); if (loop1 == null && loop2 == null) { return noLoop(head1, head2); } if (loop1 != null && loop2 != null) { return bothLoop(head1, loop1, head2, loop2); } return null; } public static Node getLoopNode(Node head) { if (head == null || head.next == null || head.next.next == null) { return null; } Node n1 = head.next; // n1 -> slow Node n2 = head.next.next; // n2 -> fast while (n1 != n2) { if (n2.next == null || n2.next.next == null) { return null; } n2 = n2.next.next; n1 = n1.next; } n2 = head; // n2 -> walk again from head while (n1 != n2) { n1 = n1.next; n2 = n2.next; } return n1; } public static Node noLoop(Node head1, Node head2) { if (head1 == null || head2 == null) { return null; } Node cur1 = head1; Node cur2 = head2; int n = 0; while (cur1.next != null) { n++; cur1 = cur1.next; } while (cur2.next != null) { n--; cur2 = cur2.next; } if (cur1 != cur2) { return null; } cur1 = n > 0 ? head1 : head2; cur2 = cur1 == head1 ? head2 : head1; n = Math.abs(n); while (n != 0) { n--; cur1 = cur1.next; } while (cur1 != cur2) { cur1 = cur1.next; cur2 = cur2.next; } return cur1; } public static Node bothLoop(Node head1, Node loop1, Node head2, Node loop2) { Node cur1 = null; Node cur2 = null; if (loop1 == loop2) { cur1 = head1; cur2 = head2; int n = 0; while (cur1 != loop1) { n++; cur1 = cur1.next; } while (cur2 != loop2) { n--; cur2 = cur2.next; } cur1 = n > 0 ? head1 : head2; cur2 = cur1 == head1 ? head2 : head1; n = Math.abs(n); while (n != 0) { n--; cur1 = cur1.next; } while (cur1 != cur2) { cur1 = cur1.next; cur2 = cur2.next; } return cur1; } else { cur1 = loop1.next; while (cur1 != loop1) { if (cur1 == loop2) { return loop1; } cur1 = cur1.next; } return null; } } \u4e8c\u53c9\u6811\u9898\u76ee \u524d\u5e8f\u4e2d\u5e8f\u540e\u5e8f public static class Node { public int value; public Node left; public Node right; public Node(int data) { this.value = data; } } public static void preOrderRecur(Node head) { if (head == null) { return; } System.out.print(head.value + \" \"); preOrderRecur(head.left); preOrderRecur(head.right); } public static void inOrderRecur(Node head) { if (head == null) { return; } inOrderRecur(head.left); System.out.print(head.value + \" \"); inOrderRecur(head.right); } public static void posOrderRecur(Node head) { if (head == null) { return; } posOrderRecur(head.left); posOrderRecur(head.right); System.out.print(head.value + \" \"); } public static void preOrderUnRecur(Node head) { System.out.print(\"pre-order: \"); if (head != null) { Stack<Node> stack = new Stack<Node>(); stack.add(head); while (!stack.isEmpty()) { head = stack.pop(); System.out.print(head.value + \" \"); if (head.right != null) { stack.push(head.right); } if (head.left != null) { stack.push(head.left); } } } System.out.println(); } public static void inOrderUnRecur(Node head) { System.out.print(\"in-order: \"); if (head != null) { Stack<Node> stack = new Stack<Node>(); while (!stack.isEmpty() || head != null) { if (head != null) { stack.push(head); head = head.left; } else { head = stack.pop(); System.out.print(head.value + \" \"); head = head.right; } } } System.out.println(); } public static void posOrderUnRecur1(Node head) { System.out.print(\"pos-order: \"); if (head != null) { Stack<Node> s1 = new Stack<Node>(); Stack<Node> s2 = new Stack<Node>(); s1.push(head); while (!s1.isEmpty()) { head = s1.pop(); s2.push(head); if (head.left != null) { s1.push(head.left); } if (head.right != null) { s1.push(head.right); } } while (!s2.isEmpty()) { System.out.print(s2.pop().value + \" \"); } } System.out.println(); } public static void posOrderUnRecur1(Node head) { if (head == null){ return; } Stack<Node> stack = new Stack<Node>(); stack.push(head) Stack<Node> revRes = new Stack<Node>(); // MRL \u524d\u5e8f\u53d8\u79cd while (!stack.isEmpty()){ head = stack.pop(); revRes.push(head); if (head.left != null){ stack.push(head.left); } if (head.right != null){ stack.push(head.right); } } while (!revRes.isEmpty()){ System.out.print(revRes.pop().value + \" \"); } } public static void posOrderUnRecur2(Node h) { System.out.print(\"pos-order: \"); if (h != null) { Stack<Node> stack = new Stack<Node>(); stack.push(h); Node c = null; while (!stack.isEmpty()) { c = stack.peek(); if (c.left != null && h != c.left && h != c.right) { stack.push(c.left); } else if (c.right != null && h != c.right) { stack.push(c.right); } else { System.out.print(stack.pop().value + \" \"); h = c; } } } System.out.println(); } [\u798f\u5229\u51fd\u6570] \u5982\u4f55\u76f4\u89c2\u7684\u6253\u5370\u4e8c\u53c9\u6811 \u5237\u9898\u65f6\u89c2\u5bdf\u6811\u7684\u7ed3\u6784 package class_04; public class Code_02_PrintBinaryTree { public static class Node { public int value; public Node left; public Node right; public Node(int data) { this.value = data; } } public static void printTree(Node head) { System.out.println(\"Binary Tree:\"); printInOrder(head, 0, \"H\", 17); System.out.println(); } public static void printInOrder(Node head, int height, String to, int len) { if (head == null) { return; } printInOrder(head.right, height + 1, \"v\", len); String val = to + head.value + to; int lenM = val.length(); int lenL = (len - lenM) / 2; int lenR = len - lenM - lenL; val = getSpace(lenL) + val + getSpace(lenR); System.out.println(getSpace(height * len) + val); printInOrder(head.left, height + 1, \"^\", len); } public static String getSpace(int num) { String space = \" \"; StringBuffer buf = new StringBuffer(\"\"); for (int i = 0; i < num; i++) { buf.append(space); } return buf.toString(); } \u5728\u4e8c\u53c9\u6811\u4e2d\u627e\u5230\u4e00\u4e2a\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9 \u5982\u679c\u8be5\u7ed3\u70b9\u6709\u53f3\u5b50\u6811,\u90a3\u4e48\u540e\u7ee7\u7ed3\u70b9\u662f\u5b83\u7684\u53f3\u5b50\u6811\u7684\u6700\u5de6\u7ed3\u70b9 \u5982\u679c\u8be5\u7ed3\u70b9\u6ca1\u6709\u53f3\u5b50\u6811, \u90a3\u4e48\u5411\u4e0a\u67e5\u627e\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u6839\u8282\u70b9: \u8be5\u7ed3\u70b9\u662f\u5728\u8fd9\u4e2a\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e0a, \u8fd9\u4e2a\u70b9\u5c31\u662f\u540e\u7ee7\u7ed3\u70b9 public static class Node { public int value; public Node left; public Node right; public Node parent; public Node(int data) { this.value = data; } } public static Node getSuccessorNode(Node node) { if (node == null) { return node; } if (node.right != null) { return getLeftMost(node.right); } else { Node parent = node.parent; while (parent != null && parent.left != node) { node = parent; parent = node.parent; } return parent; } } public static Node getLeftMost(Node node) { if (node == null) { return node; } while (node.left != null) { node = node.left; } return node; } \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 \u5148\u5e8f\u5e8f\u5217\u5316(null\u7ed3\u70b9\u4e5f\u5e8f\u5217\u5316, \u7528#\u8868\u793a) public static class Node { public int value; public Node left; public Node right; public Node(int data) { this.value = data; } } public static String serialByPre(Node head) { if (head == null) { return \"#!\"; } String res = head.value + \"!\"; res += serialByPre(head.left); res += serialByPre(head.right); return res; } def serialByPre(root): if not root: return '#_' res = root.val + \"_\" res += serialByPre(root.left) res += serialByPre(root.right) return res def reconByPreString(preStr): values = preStr.split(\"_\") # \u9006\u5e8f\u76ee\u7684\u65b9\u4fbf\u53d6\u51fa stack = valueOf[::-1] return _reconPreOrder(stack); def _reconPreOrder(stack): val = stack.pop() if val == '#': return root = Node(int(val)) root.left = _reconPreOrder(stack) root.right = _reconPreOrder(stack) return root \u5c42\u6b21\u904d\u5386\u5e8f\u5217\u5316\u53ca\u53cd\u5e8f\u5217\u5316 public static String serialByLevel(Node head) { if (head == null) { return \"#!\"; } String res = head.value + \"!\"; Queue<Node> queue = new LinkedList<Node>(); queue.offer(head); while (!queue.isEmpty()) { head = queue.poll(); if (head.left != null) { res += head.left.value + \"!\"; queue.offer(head.left); } else { res += \"#!\"; } if (head.right != null) { res += head.right.value + \"!\"; queue.offer(head.right); } else { res += \"#!\"; } } return res; } public static Node reconByLevelString(String levelStr) { String[] values = levelStr.split(\"!\"); int index = 0; Node head = generateNodeByString(values[index++]); Queue<Node> queue = new LinkedList<Node>(); if (head != null) { queue.offer(head); } Node node = null; while (!queue.isEmpty()) { node = queue.poll(); node.left = generateNodeByString(values[index++]); node.right = generateNodeByString(values[index++]); if (node.left != null) { queue.offer(node.left); } if (node.right != null) { queue.offer(node.right); } } return head; } public static Node generateNodeByString(String val) { if (val.equals(\"#\")) { return null; } return new Node(Integer.valueOf(val)); } def serialByLevel(root): if not root: return \"#_\" res = root.val que = queue.Queue() que.put(root) while queue: root = queue.poll() if head.left: res += root.left.val + \"_\" else: res += \"#_\" if head.right: res += root.right.val + \"_\" else: res += \"#_\" return res def generateNodeByString(val): if val == '#': return return Node(int(val)) def _reconByLevelString(levelStr): values = levelStr.split(\"_\") index = 0 root = generateNodeByString(valueOf[index]) index += 1 que = queue() if root: queue.put(root) node = None while !que.empty(): node = que.get() node.left = _reconByLevelString(values[index]) index += 1 node.right = _reconByLevelString(values[index]) index += 1 if node.left: que.put(node.left) if node.right: que.put(node.right) return root \u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811 \u81ea\u5e95\u5411\u4e0a helper\u8fd4\u56de\u6df1\u5ea6 \u5224\u65ad\u4e00\u9897\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5b8c\u5168\u4e8c\u53c9\u6811 \u82e5\u5de6\u7ed3\u70b9\u6709\u7a7a\u6709\u8282\u70b9\u4e0d\u4e3a\u7a7a\u8fd4\u56defalse then \u5982\u679c\u5de6\u7ed3\u70b9\u4e0d\u7a7a\u53f3\u7ed3\u70b9\u7a7a\u6216\u5de6\u53f3\u5747\u4e3a\u7a7a\u90a3\u4e48\u540e\u9762\u5fc5\u987b\u5747\u662f\u53f6\u8282\u70b9(\u5c42\u6b21\u904d\u5386) public static boolean isCBT(Node head) { if (head == null) { return true; } Queue<Node> queue = new LinkedList<Node>(); boolean leaf = false; Node l = null; Node r = null; queue.offer(head); while (!queue.isEmpty()) { head = queue.poll(); l = head.left; r = head.right; if ((leaf && (l != null || r != null)) || (l == null && r != null)) { return false; } if (l != null) { queue.offer(l); } if (r != null) { queue.offer(r); } else { leaf = true; } } return true; } \u5df2\u77e5\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811,\u6c42\u5176\u8282\u70b9\u7684\u4e2a\u6570 \u8981\u6c42:\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e\u4e8e0(N),N\u4e3a\u8fd9\u68f5\u6811\u7684\u8282\u70b9\u4e2a\u6570 \u4f4e\u4e8eO(N) \u4e0d\u80fd\u904d\u5386\u6c42\u7ed3\u70b9\u4e2a\u6570 1.\u904d\u5386\u5de6\u7ed3\u70b9 \u8ba1\u7b97\u9ad8\u5ea6 mostLeftLevel 2.\u904d\u5386\u53f3\u5b50\u6811\u7684\u5de6\u7ed3\u70b9\u5224\u65ad\u662f\u5426\u5230\u8fbe\u6700\u5e95\u5c42 \u200b 2.1\u5982\u679c\u5230\u8fbe\u6700\u5e95\u5c42, \u5de6\u5b50\u6811\u662f\u6ee1\u4e8c\u53c9\u6811, \u9012\u5f52\u8c03\u7528\u53f3\u5b50\u6811 \u200b 2.2\u5982\u679c\u6ca1\u5230\u5230\u6700\u5e95\u5c42,\u53f3\u5b50\u6811\u662f\u6ee1\u4e8c\u53c9\u6811, \u9012\u5f52\u8c03\u7528\u5de6\u5b50\u6811 public static int nodeNum(Node head) { if (head == null) { return 0; } return bs(head, 1, mostLeftLevel(head, 1)); } public static int bs(Node node, int l, int h) { if (l == h) { return 1; } if (mostLeftLevel(node.right, l + 1) == h) { return (1 << (h - l)) + bs(node.right, l + 1, h); } else { return (1 << (h - l - 1)) + bs(node.left, l + 1, h); } } public static int mostLeftLevel(Node node, int level) { while (node != null) { level++; node = node.left; } return level - 1; }","title":"ACM"},{"location":"\u7b97\u6cd5/ACM.html#_1","text":"","title":"\u5bf9\u6570\u5668"},{"location":"\u7b97\u6cd5/ACM.html#_2","text":"\u5f85\u6d4b\u65b9\u6cd5a \u5b9e\u73b0\u4e00\u4e2a\u7edd\u5bf9\u6b63\u786e\u4f46\u662f\u590d\u6742\u5ea6\u4e0d\u597d\u7684\u65b9\u6cd5b, \u5b9e\u73b0\u4e00\u4e2a\u968f\u673a\u6837\u672c\u4ea7\u751f\u5668generateRandomArray \u5b9e\u73b0\u6bd4\u5bf9\u7684\u65b9\u6cd5 \u5982\u679c\u6709\u4e00\u4e2a\u6837\u672c\u4f7f\u5f97\u6bd4\u5bf9\u51fa\u9519,\u6253\u5370\u6837\u672c\u5206\u6790\u662f\u54ea\u4e2a\u65b9\u6cd5\u51fa \u9519","title":"\u6b65\u9aa4"},{"location":"\u7b97\u6cd5/ACM.html#_3","text":"1.\u968f\u673a\u6837\u672c\u4ea7\u751f\u5668\u6839\u636e\u9898\u76ee\u8981\u6c42(\u4e0d\u540c\u957f\u5ea6, \u6b63\u8d1f\u6837\u672c 0) 2.\u5f00\u59cb\u6d4b\u8bd5\u9009\u62e9\u751f\u6210\u77ed\u6570\u7ec4\u6216\u7b80\u5355\u6570\u7ec4 3.\u51c6\u5907 \u4e8c\u53c9\u6811\u751f\u6210\u5668\u6a21\u677f + \u6570\u7ec4\u751f\u6210\u5668\u6a21\u677f","title":"\u6ce8\u610f"},{"location":"\u7b97\u6cd5/ACM.html#_4","text":"","title":"\u5b9e\u73b0"},{"location":"\u7b97\u6cd5/ACM.html#java","text":"public static int[] generateRandomArray(int maxSize, int maxValue) { // maxSize: \u6570\u7ec4\u6700\u5927\u8303\u56f4 maxValue: \u6570\u7ec4\u6700\u5927\u503c // \u9ed8\u8ba4\u751f\u6210\u6570\u7ec4\u5305\u542b\u8d1f\u6570 int[] arr = new int[(int) ((maxSize + 1) * Math.random())]; for (int i = 0; i < arr.length; i++) { arr[i] = (int) ((maxValue + 1) * Math.random()) - (int) (maxValue * Math.random()); } return arr; } // for test public static int[] copyArray(int[] arr) { if (arr == null) { return null; } int[] res = new int[arr.length]; for (int i = 0; i < arr.length; i++) { res[i] = arr[i]; } return res; } // for test public static boolean isEqual(int[] arr1, int[] arr2) { if ((arr1 == null && arr2 != null) || (arr1 != null && arr2 == null)) { return false; } if (arr1 == null && arr2 == null) { return true; } if (arr1.length != arr2.length) { return false; } for (int i = 0; i < arr1.length; i++) { if (arr1[i] != arr2[i]) { return false; } } return true; } public static void main(String[] args) { int testTime = 500; int maxSize = 100; int maxValue = 100; boolean succeed = true; for (int i = 0; i < testTime; i++) { int[] arr1 = generateRandomArray(maxSize, maxValue); int[] arr2 = copyArray(arr1); bubbleSort(arr1); // right and slow func comparator(arr2); if (!isEqual(arr1, arr2)) { // \u6253\u5370\u51fa\u9519\u7684\u6570\u7ec4 printArray(arr1); printArray(arr2); succeed = false; break; } } System.out.println(succeed ? \"Nice!\" : \"Fucking fucked!\"); int[] arr = generateRandomArray(maxSize, maxValue); printArray(arr); bubbleSort(arr); printArray(arr); }","title":"Java\u5b9e\u73b0"},{"location":"\u7b97\u6cd5/ACM.html#_5","text":"","title":"\u6392\u5e8f"},{"location":"\u7b97\u6cd5/ACM.html#_6","text":"def partition(arr, L, R): \"\"\" \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u53ca\u76f8\u7b49\u5143\u7d20\u7684\u5de6\u53f3\u8fb9\u754c \"\"\" less = L - 1 # \u5f85\u6bd4\u8f83\u5143\u7d20\u7d22\u5f15 more = R while L < more: if arr[L] < arr{R}: less += 1 arr[less], arr[L] = arr[L], arr[less] L += 1 elif arr[L] > arr[R]: more -= 1 arr[more], arr[L] = arr[L], arr[more] else: L += 1 arr[more], arr[R] = arr[R], arr[more] return less + 1, more def quicksort(arr, L, R): if L < R: l, r = partition(arr, L, R): quicksort(arr, L, l - 1) quicksort(arr, r + 1, R)","title":"\u5feb\u901f\u6392\u5e8f \u6539\u8fdb\u7248 \u8377\u5170\u56fd\u65d7"},{"location":"\u7b97\u6cd5/ACM.html#_7","text":"def heapify(data, index, size): left = index * 2 + 1 while left < size: largest = left + 1 if left + 1 < size and data[left + 1] > data[left] else left largest = largest if data[largest] > data[index] else index if largest == index: break data[largest], data[index] = data[index], data[largest] index = largest left = largest * 2 + 1 def heap_sort(data): if not data or len(data) < 2: return data n = len(data) # \u521b\u5efa\u5806 for i in range((n - 1)//2, -1, -1): heapify(data, i, n) # \u5806\u6392\u5e8f for i in range(n-1, -1, -1): # \u4ece\u5927\u5230\u5c0f data[0], data[i] = data[i], data[0] # \u5c06\u6700\u540e\u4e00\u4e2a\u503c\u4e0e\u7236\u8282\u70b9\u4ea4\u4e92\u4f4d\u7f6e heapify(data, 0, i) li = list(range(10)) random.shuffle(li) print(li) heap_sort(li) print(li) public class Code_03_HeapSort { public static void heapSort(int[] arr) { if (arr == null || arr.length < 2) { return; } for (int i = (arr.length - 1) / 2; i >= 0; i--){ heapify(arr, i, n); } int size = arr.length; swap(arr, 0, --size); while (size > 0) { heapify(arr, 0, size); swap(arr, 0, --size); } } public static void heapInsert(int[] arr, int index) { while (arr[index] > arr[(index - 1) / 2]) { swap(arr, index, (index - 1) / 2); index = (index - 1) / 2; } } public static void heapify(int[] arr, int index, int size) { int left = index * 2 + 1; while (left < size) { int largest = left + 1 < size && arr[left + 1] > arr[left] ? left + 1 : left; largest = arr[largest] > arr[index] ? largest : index; if (largest == index) { break; } swap(arr, largest, index); index = largest; left = index * 2 + 1; } } public static void swap(int[] arr, int i, int j) { int tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; }","title":"\u5806\u6392\u5e8f"},{"location":"\u7b97\u6cd5/ACM.html#_8","text":"def bucketSort(arr): if not arr or len(arr) < 2: return arr # 1.\u6700\u5927\u503c maxV = max(arr) # 2.\u8bcd\u9891\u8868 bucket = [0] * (maxV + 1) for i in range(len(arr)): bucket[arr[i]] += 1 # 3.\u6839\u636e\u8bcd\u9891\u8868\u6392\u5e8f i = 0 for j in range(len(bucket)): while bucket[j] > 0: arr[i] = j i += 1 bucket[j] -= 1 import java.util.Arrays; class test { public static void bucketSort(int[] arr){ if (arr == null || arr.length < 2){ return; } // 1.\u6700\u5927\u503c int max = Integer.MIN_VALUE; for(int i = 0; i < arr.length; i++){ max = Math.max(max, arr[i]); } // 2.\u8bcd\u9891\u8868 int[] bucket = new int[max + 1]; for (int i = 0; i < arr.length; i++){ bucket[arr[i]]++; } // 3.\u6839\u636e\u8bcd\u9891\u8868\u8fdb\u884c\u5b89\u7f6e\u6392\u5e8f int i = 0; for(int j = 0; j < bucket.length; j++){ while(bucket[j]-- > 0){ arr[i++] = j; } } }","title":"\u6876\u6392\u5e8f  (\u8ba1\u6570\u6392\u5e8f)"},{"location":"\u7b97\u6cd5/ACM.html#_9","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4,\u6c42\u5982\u679c\u6392\u5e8f\u4e4b\u540e,\u76f8\u90bb\u4e24\u6570\u7684\u6700\u5927\u5dee\u503c,\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea60(N),\u4e14\u8981\u6c42\u4e0d\u80fd\u7528\u975e\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u3002","title":"\u70ed\u95e8\u9898\u76ee"},{"location":"\u7b97\u6cd5/ACM.html#_10","text":"1.\u627e\u5230\u6700\u5927\u503c\u6700\u5c0f\u503c, \u6784\u5efa N + 1\u4e2a\u6876, \u628a\u6700\u5c0f\u503c\u653e\u5165\u7b2c\u4e00\u4e2a\u6876, \u6700\u5927\u503c\u653e\u5165\u6700\u540e\u4e00\u4e2a\u6876 2.\u5269\u4f59N - 1\u4e2a\u6876, \u628a\u6700\u5927\u503c\u6700\u5c0f\u503c\u7684\u5dee\u503c (N - 1) \u7b49\u5206 3.\u904d\u5386\u6570\u7ec4, \u628a\u503c\u653e\u5165\u4e0d\u540c\u7684\u8303\u56f4(\u6876), N \u4e2a\u6570\u653e\u5165 N + 1\u4e2a\u6876\u4e00\u5b9a\u4f1a\u7a7a\u4f59\u4e00\u4e2a\u6876 4.\u6700\u5927\u5dee\u503c\u4e00\u5b9a\u5728\u8fd9\u4e2a\u7a7a\u6876\u7684\u524d\u4e00\u4e2a\u6876\u6700\u5927\u503c\u548c\u540e\u4e00\u4e2a\u6876\u6700\u5c0f\u503c [\u6ce8\u610f]\u6bcf\u4e2a\u6876\u53ea\u66f4\u65b0\u8fdb\u5165\u8fd9\u4e2a\u6876\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c, \u5e76\u7ef4\u62a4\u4e00\u4e2a\u662f\u5426\u662f\u7a7a\u6876\u7684\u6807\u8bb0 public static int maxGap(int[] nums) { if (nums == null || nums.length < 2) { return 0; } int len = nums.length; int min = Integer.MAX_VALUE; int max = Integer.MIN_VALUE; for (int i = 0; i < len; i++) { min = Math.min(min, nums[i]); max = Math.max(max, nums[i]); } if (min == max) { return 0; } boolean[] hasNum = new boolean[len + 1]; int[] maxs = new int[len + 1]; int[] mins = new int[len + 1]; int bid = 0; for (int i = 0; i < len; i++) { bid = bucket(nums[i], len, min, max); mins[bid] = hasNum[bid] ? Math.min(mins[bid], nums[i]) : nums[i]; maxs[bid] = hasNum[bid] ? Math.max(maxs[bid], nums[i]) : nums[i]; hasNum[bid] = true; } int res = 0; int lastMax = maxs[0]; int i = 1; for (; i <= len; i++) { if (hasNum[i]) { res = Math.max(res, mins[i] - lastMax); lastMax = maxs[i]; } } return res; } public static int bucket(long num, long len, long min, long max) { // key: \u5224\u65adnum\u5c5e\u4e8e\u54ea\u4e2abucket // (num-min)/(max-min)\u5c31\u662f\u5360\u6240\u6709\u7684\u6bd4\u4f8b return (int) ((num - min) * len / (max - min)); }","title":"\u601d\u8def"},{"location":"\u7b97\u6cd5/ACM.html#_11","text":"","title":"\u961f\u5217\u548c\u6808"},{"location":"\u7b97\u6cd5/ACM.html#_12","text":"key: \u7ef4\u62a4\u4e00\u4e2a\u7d22\u5f15 package class_03; public class Code_01_Array_To_Stack_Queue { public static class ArrayStack { private Integer[] arr; private Integer size; public ArrayStack(int initSize) { if (initSize < 0) { throw new IllegalArgumentException(\"The init size is less than 0\"); } arr = new Integer[initSize]; size = 0; } public Integer peek() { if (size == 0) { return null; } return arr[size - 1]; } public void push(int obj) { if (size == arr.length) { throw new ArrayIndexOutOfBoundsException(\"The queue is full\"); } arr[size++] = obj; } public Integer pop() { if (size == 0) { throw new ArrayIndexOutOfBoundsException(\"The queue is empty\"); } return arr[--size]; } } public static class ArrayQueue { private Integer[] arr; private Integer size; private Integer first; private Integer last; public ArrayQueue(int initSize) { if (initSize < 0) { throw new IllegalArgumentException(\"The init size is less than 0\"); } arr = new Integer[initSize]; size = 0; first = 0; last = 0; } public Integer peek() { if (size == 0) { return null; } return arr[first]; } public void push(int obj) { if (size == arr.length) { throw new ArrayIndexOutOfBoundsException(\"The queue is full\"); } size++; arr[last] = obj; last = last == arr.length - 1 ? 0 : last + 1; } public Integer poll() { if (size == 0) { throw new ArrayIndexOutOfBoundsException(\"The queue is empty\"); } size--; int tmp = first; first = first == arr.length - 1 ? 0 : first + 1; return arr[tmp]; } } public static void main(String[] args) { } }","title":"\u7528\u6570\u7ec4\u7ed3\u6784\u5b9e\u73b0\u5927\u5c0f\u56fa\u5b9a\u7684\u961f\u5217\u548c\u6808"},{"location":"\u7b97\u6cd5/ACM.html#_13","text":"\u5b9e\u73b0\u4e00\u79cd\u72d7\u732b\u961f\u5217\u7684\u7ed3\u6784,\u8981\u6c42\u5982\u4e0b:\u7528\u6237\u53ef\u4ee5\u8c03\u7528add\u65b9\u6cd5\u5c06cat\u7c7b\u6216dog\u7c7b\u7684\u5b9e\u4f8b\u653e\u5165\u961f\u5217\u4e2d;\u7528\u6237\u53ef\u4ee5\u8c03\u7528pollAll\u65b9\u6cd5,\u5c06\u961f\u5217\u4e2d\u6240\u6709\u7684\u5b9e\u4f8b\u6309\u7167\u8fdb\u961f\u5217\u7684\u5148\u540e\u987a\u5e8f\u4f9d\u6b21\u5f39\u51fa;\u7528\u6237\u53ef\u4ee5\u8c03\u7528 pol l Dog\u65b9\u6cd5,\u5c06\u961f\u5217\u4e2ddog\u7c7b\u7684\u5b9e\u4f8b\u6309\u7167\u8fdb\u961f\u5217\u7684\u5148\u540e\u987a\u5e8f\u4f9d\u6b21\u5f39\u51fa;\u7528\u6237\u53ef\u4ee5\u8c03\u7528 pol ICat\u65b9\u6cd5,\u5c06\u961f\u5217\u4e2dcat\u7c7b\u7684\u5b9e\u4f8b\u6309\u7167\u8fdb\u961f\u5217\u7684\u5148\u540e\u987a\u5e8f\u4f9d\u6b21\u5f39\u51fa;\u7528\u6237\u53ef\u4ee5\u8c03\u7528 isEmpty\u65b9\u6cd5,\u68c0\u67e5\u961f\u5217\u4e2d\u662f\u5426\u8fd8\u6709dog\u6216cat\u7684\u5b9e\u4f8b;\u7528\u6237\u53ef\u4ee5\u8c03\u7528 isDogEmpty\u65b9\u6cd5,\u68c0\u67e5\u961f\u5217\u4e2d\u662f\u5426\u6709dog\u7c7b\u7684\u5b9e\u4f8b;\u7528\u6237\u53ef\u4ee5\u8c03\u7528 i sCatEmpty\u65b9\u6cd5,\u68c0\u67e5\u961f\u5217\u4e2d\u662f\u5426\u6709cat\u7c7b\u7684\u5b9e\u4f8b\u3002","title":"\u732b\u72d7\u961f\u5217"},{"location":"\u7b97\u6cd5/ACM.html#_14","text":"dog \u961f\u5217 cat \u961f\u5217 \u65f6\u95f4\u6233","title":"\u601d\u8def"},{"location":"\u7b97\u6cd5/ACM.html#_15","text":"","title":"\u94fe\u8868\u9898\u76ee"},{"location":"\u7b97\u6cd5/ACM.html#ton-so1","text":"\u5feb\u6162\u6307\u9488 \u627e\u5230\u4e2d\u70b9\u540e\u628a\u540e\u534a\u90e8\u5206\u9006\u5e8f","title":"\u5224\u65ad\u94fe\u8868\u662f\u5426\u56de\u6587, TO(N), SO(1)"},{"location":"\u7b97\u6cd5/ACM.html#_16","text":"\u6784\u5efa\u6307\u9488 less eq more less_p eq_p more_p \u91cd\u70b9\u8003\u8651\u8fb9\u754c\u6761\u4ef6: \u67d0\u533a\u57df\u4e3a\u7a7a","title":"\u5c06\u5355\u5411\u94fe\u8868\u6309\u67d0\u503c\u5212\u5206\u6210\u5de6\u8fb9\u5c0f\u3001\u4e2d\u95f4\u76f8\u7b49\u3001\u53f3\u8fb9\u5927\u7684\u5f62\u5f0f"},{"location":"\u7b97\u6cd5/ACM.html#_17","text":"","title":"\u590d\u5236\u542b\u6709\u968f\u673a\u6307\u9488\u8282\u70b9\u7684\u94fe\u8868"},{"location":"\u7b97\u6cd5/ACM.html#hash","text":"\u4e0d\u7528Hash","title":"\u53ccHash"},{"location":"\u7b97\u6cd5/ACM.html#_18","text":"\u5feb\u6162\u6307\u9488 set (\u989d\u5916\u7a7a\u95f4)","title":"\u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u6709\u73af"},{"location":"\u7b97\u6cd5/ACM.html#_19","text":"set\u6cd5: \u5148\u628ahead1\u6240\u6709\u7684\u7ed3\u70b9\u653e\u5165set, \u904d\u5386head2\u662f\u5426\u5728set\u4e2d\u5b58\u5728 \u957f\u5ea6\u6cd5: \u8bb0\u5f55head1\u548chead2\u957f\u5ea6, \u8f83\u957f\u7684\u94fe\u8868\u5148\u8d70|len(head1) - len(head2) | \u4e4b\u540e\u4e24\u94fe\u8868\u4e00\u8d77\u8d70 [\u6ce8]\u5173\u4e8e\u73af: \u4e00\u4e2a\u6709\u73af\u4e00\u4e2a\u65e0\u73af\u4e0d\u76f8\u4ea4, \u4e24\u4e2a\u73af\u4e0d\u4e00\u6837\u4e0d\u76f8\u4ea4 , \u6709\u4e00\u4e2a\u76f8\u540c\u7684\u73af\u76f8\u4ea4(\u540c\u4e00\u4e2a\u5165\u53e3, \u4e24\u4e2a\u5165\u53e3) public static class Node { public int value; public Node next; public Node(int data) { this.value = data; } } public static Node getIntersectNode(Node head1, Node head2) { if (head1 == null || head2 == null) { return null; } Node loop1 = getLoopNode(head1); Node loop2 = getLoopNode(head2); if (loop1 == null && loop2 == null) { return noLoop(head1, head2); } if (loop1 != null && loop2 != null) { return bothLoop(head1, loop1, head2, loop2); } return null; } public static Node getLoopNode(Node head) { if (head == null || head.next == null || head.next.next == null) { return null; } Node n1 = head.next; // n1 -> slow Node n2 = head.next.next; // n2 -> fast while (n1 != n2) { if (n2.next == null || n2.next.next == null) { return null; } n2 = n2.next.next; n1 = n1.next; } n2 = head; // n2 -> walk again from head while (n1 != n2) { n1 = n1.next; n2 = n2.next; } return n1; } public static Node noLoop(Node head1, Node head2) { if (head1 == null || head2 == null) { return null; } Node cur1 = head1; Node cur2 = head2; int n = 0; while (cur1.next != null) { n++; cur1 = cur1.next; } while (cur2.next != null) { n--; cur2 = cur2.next; } if (cur1 != cur2) { return null; } cur1 = n > 0 ? head1 : head2; cur2 = cur1 == head1 ? head2 : head1; n = Math.abs(n); while (n != 0) { n--; cur1 = cur1.next; } while (cur1 != cur2) { cur1 = cur1.next; cur2 = cur2.next; } return cur1; } public static Node bothLoop(Node head1, Node loop1, Node head2, Node loop2) { Node cur1 = null; Node cur2 = null; if (loop1 == loop2) { cur1 = head1; cur2 = head2; int n = 0; while (cur1 != loop1) { n++; cur1 = cur1.next; } while (cur2 != loop2) { n--; cur2 = cur2.next; } cur1 = n > 0 ? head1 : head2; cur2 = cur1 == head1 ? head2 : head1; n = Math.abs(n); while (n != 0) { n--; cur1 = cur1.next; } while (cur1 != cur2) { cur1 = cur1.next; cur2 = cur2.next; } return cur1; } else { cur1 = loop1.next; while (cur1 != loop1) { if (cur1 == loop2) { return loop1; } cur1 = cur1.next; } return null; } }","title":"\u4e24\u5355\u94fe\u8868\u76f8\u4ea4"},{"location":"\u7b97\u6cd5/ACM.html#_20","text":"\u524d\u5e8f\u4e2d\u5e8f\u540e\u5e8f public static class Node { public int value; public Node left; public Node right; public Node(int data) { this.value = data; } } public static void preOrderRecur(Node head) { if (head == null) { return; } System.out.print(head.value + \" \"); preOrderRecur(head.left); preOrderRecur(head.right); } public static void inOrderRecur(Node head) { if (head == null) { return; } inOrderRecur(head.left); System.out.print(head.value + \" \"); inOrderRecur(head.right); } public static void posOrderRecur(Node head) { if (head == null) { return; } posOrderRecur(head.left); posOrderRecur(head.right); System.out.print(head.value + \" \"); } public static void preOrderUnRecur(Node head) { System.out.print(\"pre-order: \"); if (head != null) { Stack<Node> stack = new Stack<Node>(); stack.add(head); while (!stack.isEmpty()) { head = stack.pop(); System.out.print(head.value + \" \"); if (head.right != null) { stack.push(head.right); } if (head.left != null) { stack.push(head.left); } } } System.out.println(); } public static void inOrderUnRecur(Node head) { System.out.print(\"in-order: \"); if (head != null) { Stack<Node> stack = new Stack<Node>(); while (!stack.isEmpty() || head != null) { if (head != null) { stack.push(head); head = head.left; } else { head = stack.pop(); System.out.print(head.value + \" \"); head = head.right; } } } System.out.println(); } public static void posOrderUnRecur1(Node head) { System.out.print(\"pos-order: \"); if (head != null) { Stack<Node> s1 = new Stack<Node>(); Stack<Node> s2 = new Stack<Node>(); s1.push(head); while (!s1.isEmpty()) { head = s1.pop(); s2.push(head); if (head.left != null) { s1.push(head.left); } if (head.right != null) { s1.push(head.right); } } while (!s2.isEmpty()) { System.out.print(s2.pop().value + \" \"); } } System.out.println(); } public static void posOrderUnRecur1(Node head) { if (head == null){ return; } Stack<Node> stack = new Stack<Node>(); stack.push(head) Stack<Node> revRes = new Stack<Node>(); // MRL \u524d\u5e8f\u53d8\u79cd while (!stack.isEmpty()){ head = stack.pop(); revRes.push(head); if (head.left != null){ stack.push(head.left); } if (head.right != null){ stack.push(head.right); } } while (!revRes.isEmpty()){ System.out.print(revRes.pop().value + \" \"); } } public static void posOrderUnRecur2(Node h) { System.out.print(\"pos-order: \"); if (h != null) { Stack<Node> stack = new Stack<Node>(); stack.push(h); Node c = null; while (!stack.isEmpty()) { c = stack.peek(); if (c.left != null && h != c.left && h != c.right) { stack.push(c.left); } else if (c.right != null && h != c.right) { stack.push(c.right); } else { System.out.print(stack.pop().value + \" \"); h = c; } } } System.out.println(); }","title":"\u4e8c\u53c9\u6811\u9898\u76ee"},{"location":"\u7b97\u6cd5/ACM.html#_21","text":"\u5237\u9898\u65f6\u89c2\u5bdf\u6811\u7684\u7ed3\u6784 package class_04; public class Code_02_PrintBinaryTree { public static class Node { public int value; public Node left; public Node right; public Node(int data) { this.value = data; } } public static void printTree(Node head) { System.out.println(\"Binary Tree:\"); printInOrder(head, 0, \"H\", 17); System.out.println(); } public static void printInOrder(Node head, int height, String to, int len) { if (head == null) { return; } printInOrder(head.right, height + 1, \"v\", len); String val = to + head.value + to; int lenM = val.length(); int lenL = (len - lenM) / 2; int lenR = len - lenM - lenL; val = getSpace(lenL) + val + getSpace(lenR); System.out.println(getSpace(height * len) + val); printInOrder(head.left, height + 1, \"^\", len); } public static String getSpace(int num) { String space = \" \"; StringBuffer buf = new StringBuffer(\"\"); for (int i = 0; i < num; i++) { buf.append(space); } return buf.toString(); }","title":"[\u798f\u5229\u51fd\u6570] \u5982\u4f55\u76f4\u89c2\u7684\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/ACM.html#_22","text":"\u5982\u679c\u8be5\u7ed3\u70b9\u6709\u53f3\u5b50\u6811,\u90a3\u4e48\u540e\u7ee7\u7ed3\u70b9\u662f\u5b83\u7684\u53f3\u5b50\u6811\u7684\u6700\u5de6\u7ed3\u70b9 \u5982\u679c\u8be5\u7ed3\u70b9\u6ca1\u6709\u53f3\u5b50\u6811, \u90a3\u4e48\u5411\u4e0a\u67e5\u627e\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u6839\u8282\u70b9: \u8be5\u7ed3\u70b9\u662f\u5728\u8fd9\u4e2a\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e0a, \u8fd9\u4e2a\u70b9\u5c31\u662f\u540e\u7ee7\u7ed3\u70b9 public static class Node { public int value; public Node left; public Node right; public Node parent; public Node(int data) { this.value = data; } } public static Node getSuccessorNode(Node node) { if (node == null) { return node; } if (node.right != null) { return getLeftMost(node.right); } else { Node parent = node.parent; while (parent != null && parent.left != node) { node = parent; parent = node.parent; } return parent; } } public static Node getLeftMost(Node node) { if (node == null) { return node; } while (node.left != null) { node = node.left; } return node; }","title":"\u5728\u4e8c\u53c9\u6811\u4e2d\u627e\u5230\u4e00\u4e2a\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9"},{"location":"\u7b97\u6cd5/ACM.html#_23","text":"","title":"\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316"},{"location":"\u7b97\u6cd5/ACM.html#null","text":"public static class Node { public int value; public Node left; public Node right; public Node(int data) { this.value = data; } } public static String serialByPre(Node head) { if (head == null) { return \"#!\"; } String res = head.value + \"!\"; res += serialByPre(head.left); res += serialByPre(head.right); return res; } def serialByPre(root): if not root: return '#_' res = root.val + \"_\" res += serialByPre(root.left) res += serialByPre(root.right) return res def reconByPreString(preStr): values = preStr.split(\"_\") # \u9006\u5e8f\u76ee\u7684\u65b9\u4fbf\u53d6\u51fa stack = valueOf[::-1] return _reconPreOrder(stack); def _reconPreOrder(stack): val = stack.pop() if val == '#': return root = Node(int(val)) root.left = _reconPreOrder(stack) root.right = _reconPreOrder(stack) return root","title":"\u5148\u5e8f\u5e8f\u5217\u5316(null\u7ed3\u70b9\u4e5f\u5e8f\u5217\u5316, \u7528#\u8868\u793a)"},{"location":"\u7b97\u6cd5/ACM.html#_24","text":"public static String serialByLevel(Node head) { if (head == null) { return \"#!\"; } String res = head.value + \"!\"; Queue<Node> queue = new LinkedList<Node>(); queue.offer(head); while (!queue.isEmpty()) { head = queue.poll(); if (head.left != null) { res += head.left.value + \"!\"; queue.offer(head.left); } else { res += \"#!\"; } if (head.right != null) { res += head.right.value + \"!\"; queue.offer(head.right); } else { res += \"#!\"; } } return res; } public static Node reconByLevelString(String levelStr) { String[] values = levelStr.split(\"!\"); int index = 0; Node head = generateNodeByString(values[index++]); Queue<Node> queue = new LinkedList<Node>(); if (head != null) { queue.offer(head); } Node node = null; while (!queue.isEmpty()) { node = queue.poll(); node.left = generateNodeByString(values[index++]); node.right = generateNodeByString(values[index++]); if (node.left != null) { queue.offer(node.left); } if (node.right != null) { queue.offer(node.right); } } return head; } public static Node generateNodeByString(String val) { if (val.equals(\"#\")) { return null; } return new Node(Integer.valueOf(val)); } def serialByLevel(root): if not root: return \"#_\" res = root.val que = queue.Queue() que.put(root) while queue: root = queue.poll() if head.left: res += root.left.val + \"_\" else: res += \"#_\" if head.right: res += root.right.val + \"_\" else: res += \"#_\" return res def generateNodeByString(val): if val == '#': return return Node(int(val)) def _reconByLevelString(levelStr): values = levelStr.split(\"_\") index = 0 root = generateNodeByString(valueOf[index]) index += 1 que = queue() if root: queue.put(root) node = None while !que.empty(): node = que.get() node.left = _reconByLevelString(values[index]) index += 1 node.right = _reconByLevelString(values[index]) index += 1 if node.left: que.put(node.left) if node.right: que.put(node.right) return root","title":"\u5c42\u6b21\u904d\u5386\u5e8f\u5217\u5316\u53ca\u53cd\u5e8f\u5217\u5316"},{"location":"\u7b97\u6cd5/ACM.html#_25","text":"\u81ea\u5e95\u5411\u4e0a helper\u8fd4\u56de\u6df1\u5ea6","title":"\u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/ACM.html#_26","text":"\u82e5\u5de6\u7ed3\u70b9\u6709\u7a7a\u6709\u8282\u70b9\u4e0d\u4e3a\u7a7a\u8fd4\u56defalse then \u5982\u679c\u5de6\u7ed3\u70b9\u4e0d\u7a7a\u53f3\u7ed3\u70b9\u7a7a\u6216\u5de6\u53f3\u5747\u4e3a\u7a7a\u90a3\u4e48\u540e\u9762\u5fc5\u987b\u5747\u662f\u53f6\u8282\u70b9(\u5c42\u6b21\u904d\u5386) public static boolean isCBT(Node head) { if (head == null) { return true; } Queue<Node> queue = new LinkedList<Node>(); boolean leaf = false; Node l = null; Node r = null; queue.offer(head); while (!queue.isEmpty()) { head = queue.poll(); l = head.left; r = head.right; if ((leaf && (l != null || r != null)) || (l == null && r != null)) { return false; } if (l != null) { queue.offer(l); } if (r != null) { queue.offer(r); } else { leaf = true; } } return true; }","title":"\u5224\u65ad\u4e00\u9897\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5b8c\u5168\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/ACM.html#_27","text":"\u8981\u6c42:\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e\u4e8e0(N),N\u4e3a\u8fd9\u68f5\u6811\u7684\u8282\u70b9\u4e2a\u6570 \u4f4e\u4e8eO(N) \u4e0d\u80fd\u904d\u5386\u6c42\u7ed3\u70b9\u4e2a\u6570 1.\u904d\u5386\u5de6\u7ed3\u70b9 \u8ba1\u7b97\u9ad8\u5ea6 mostLeftLevel 2.\u904d\u5386\u53f3\u5b50\u6811\u7684\u5de6\u7ed3\u70b9\u5224\u65ad\u662f\u5426\u5230\u8fbe\u6700\u5e95\u5c42 \u200b 2.1\u5982\u679c\u5230\u8fbe\u6700\u5e95\u5c42, \u5de6\u5b50\u6811\u662f\u6ee1\u4e8c\u53c9\u6811, \u9012\u5f52\u8c03\u7528\u53f3\u5b50\u6811 \u200b 2.2\u5982\u679c\u6ca1\u5230\u5230\u6700\u5e95\u5c42,\u53f3\u5b50\u6811\u662f\u6ee1\u4e8c\u53c9\u6811, \u9012\u5f52\u8c03\u7528\u5de6\u5b50\u6811 public static int nodeNum(Node head) { if (head == null) { return 0; } return bs(head, 1, mostLeftLevel(head, 1)); } public static int bs(Node node, int l, int h) { if (l == h) { return 1; } if (mostLeftLevel(node.right, l + 1) == h) { return (1 << (h - l)) + bs(node.right, l + 1, h); } else { return (1 << (h - l - 1)) + bs(node.left, l + 1, h); } } public static int mostLeftLevel(Node node, int level) { while (node != null) { level++; node = node.left; } return level - 1; }","title":"\u5df2\u77e5\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811,\u6c42\u5176\u8282\u70b9\u7684\u4e2a\u6570"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html","text":"KickStart 2019 \u6280\u5de7 0.\u524d250\u5dee\u4e0d\u591a\u53ef\u4ee5\u901a\u8fc7Google\u5728\u7ebf\u7b14\u8bd5 \u5404\u8f6e\u6b21\u53bb\u91cd\u540e700\u4eba \u6700\u7ec8\u62db\u4e8620\u4eba + 30\u5b9e\u4e60\u751f = 50\u4eba\u5de6\u53f3 1.\u4e0d\u80fd\u5f15\u7528numpy 12.\u6570\u7ec4 \u524d\u7f00\u548c \u524d\u7f00\u79ef \u6280\u5de7 \u524d\u7f00\u548c\u3001\u524d\u7f00\u79ef\u4e5f\u79f0\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u524d\u7f00\u79ef\u6570\u7ec4\u3002 \u7ed9\u4e00\u6570\u7ec4A\uff0c \u524d\u7f00\u548c\uff1a\u65b0\u5efa\u4e00\u6570\u7ec4B\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e00\u9879B[i]\u4fdd\u5b58A\u4e2d[0\u2026i]\u7684\u548c\uff1b \u540e\u7f00\u548c\uff1a\u65b0\u5efa\u4e00\u6570\u7ec4B\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e00\u9879B[i]\u4fdd\u5b58A\u4e2d[i\u2026n-1]\u7684\u548c\uff1b \u524d\u7f00\u79ef\uff1a\u65b0\u5efa\u4e00\u6570\u7ec4B\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e00\u9879B[i]\u4fdd\u5b58A\u4e2d[0\u2026i]\u7684\u79ef\uff1b \u540e\u7f00\u79ef\uff1a\u65b0\u5efa\u4e00\u6570\u7ec4B\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e00\u9879B[i]\u4fdd\u5b58A\u4e2d[i\u2026n-1]\u7684\u79ef\uff1b \u6570\u7ec4\u7c7b\u95ee\u9898 \u53ef\u4ee5\u5c1d\u8bd5 \u5148\u6392\u5e8f \u540e\u63d0\u524d\u7b97\u6cd5\u7d2f\u52a0\u7d2f\u4e58 O(1)\u7684\u8c03\u7528\u4e0a\u9762\u7ed3\u679c 3.\u6700\u5c0f\u503c\u6700\u5927\u5316\u95ee\u9898 \u6700\u5927\u503c\u6700\u5c0f\u5316\u95ee\u9898 \u4e8c\u5206\u7b54\u6848\u6cd5 \u7ecf\u5e38\u6709\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u6c42xxx\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\uff0c\u5373\u6c42\u7b26\u5408\u6761\u4ef6\u7684\u503c\u91cc\u7684\u6700\u5927\u503c\uff0c\u8fd9\u79cd\u95ee\u9898\u6709\u4e2a\u89e3\u6cd5\u53eb\u4e8c\u5206\u7b54\u6848\u6cd5\u3002\u4e00\u542c\uff0c\u4ec0\u4e48\uff0c\u4e0d\u77e5\u9053\u7684\u7b54\u6848\u4e5f\u80fd\u4e8c\u5206\uff1f\u55ef\u6ca1\u9519\uff0c\u5173\u952e\u5728\u4e8e\u8fd9\u4e2a\u7b54\u6848\u662f\u53ef\u4ee5\u5224\u65ad\u662f\u4e0d\u662f\u7b26\u5408\u6761\u4ef6\u7684\u3002 \u5c06\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u51b3\u7b56\u95ee\u9898 \u7b97\u6cd5\u601d\u60f3 \u4ee5\u6c42\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\uff08\u6700\u5c0f\u503c\u6700\u5927\u5316\uff09\u4e3a\u4f8b\uff0c\u5c1d\u8bd5\u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\uff0c\u5982\u679c\u8fd9\u4e2a\u7b54\u6848\u7b26\u5408\u9898\u76ee\u6761\u4ef6\uff0c\u90a3\u4e48\u5b83\u80af\u5b9a\u662f\u201c\u6700\u5c0f\u201d\uff08\u53ef\u884c\u89e3\uff09\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f\u201c\u6700\u5927\u201d\uff08\u6700\u4f18\u89e3\uff09\uff0c\u7136\u540e\u6211\u4eec\u6362\u4e2a\u66f4\u5927\u7684\u53ef\u80fd\u7b54\u6848\uff0c\u5982\u679c\u4e5f\u7b26\u5408\u6761\u4ef6\uff0c\u90a3\u8fd9\u4e2a\u65b0\u53ef\u884c\u89e3\u5c31\u66f4\u4f18\uff0c\u4e0d\u65ad\u91cd\u590d\u5373\u53ef\u3002\u600e\u4e48\u627e\u5462\uff1f\u8fd9\u65f6\u5c31\u8be5\u4e8c\u5206\u4e0a\u573a\u4e86\u3002 \u4e8c\u5206\u524d\u63d0 1.\u7b54\u6848\u533a\u95f4\u4e0a\u4e0b\u9650\u786e\u5b9a\uff0c\u5373\u6700\u7ec8\u7b54\u6848\u5728\u54ea\u4e2a\u8303\u56f4\u662f\u5bb9\u6613\u77e5\u9053\u7684\u3002 2.\u68c0\u9a8c\u67d0\u503c\u662f\u5426\u53ef\u884c\u662f\u4e2a\u7b80\u5355\u6d3b\uff0c\u5373\u7ed9\u4f60\u4e2a\u503c\uff0c\u4f60\u80fd\u5f88\u5bb9\u6613\u7684\u5224\u65ad\u662f\u4e0d\u662f\u7b26\u5408\u9898\u76ee\u8981\u6c42\u3002 3.\u53ef\u884c\u89e3\u6ee1\u8db3\u533a\u95f4\u5355\u8c03\u6027\uff0c\u5373\u82e5x\u662f\u53ef\u884c\u89e3\uff0c\u5219\u5728\u7b54\u6848\u533a\u95f4\u5185x+1\uff08\u4e5f\u53ef\u80fd\u662fx-1\uff09\u4e5f\u53ef\u884c\u3002 \u4e24\u79cd\u60c5\u51b5 \u4e0b\u56fe\u4e2dL,R\u4e3a\u5f53\u524d\u7b54\u6848\u533a\u95f4\uff0cM\u4e3a\u4e2d\u5fc3\u70b9\uff0c\u6839\u636e\u4e8c\u5206\u601d\u60f3\u5224\u65adM\u662f\u5426\u7b26\u5408\u6761\u4ef6\uff0c\u518d\u79fb\u52a8L\u6216R\uff0c\u53d8\u6210L'\uff0cR'\uff0c\u56fe\u4e2d\u7684T\u548cF\u8868\u793a\u662f\u5426\u7b26\u5408\u6761\u4ef6\u3002 1.\u6700\u5c0f\u503c\u6700\u5927\u5316 int l = min_ans, r = max_ans; while (l < r) { int mid = (l + r + 1) / 2; //+1\u907f\u514d r == l + 1 \u65f6mid\u4e00\u76f4\u7b49\u4e8el\uff0c\u4ece\u800c\u6b7b\u5faa\u73af if (ok(mid)) //\u7b26\u5408\u6761\u4ef6\u8fd4\u56deTrue l = mid; else r = mid - 1; } \u5e0c\u671b\u7b54\u6848\u5c3d\u53ef\u80fd\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5de6\u533a\u95f4L\u70b9\u7b26\u5408\u9898\u76ee\u6761\u4ef6\uff08\u6700\u5c0f\uff09\uff0c\u81f3\u4e8eR\u662f\u5426\u7b26\u5408\u6761\u4ef6\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u9996\u5148\u5224\u65adM\u70b9\u7b26\u5408\u4e0e\u5426\uff0c\u7b26\u5408\u5219\u5c06L\u79fb\u5230M\u70b9\uff0c\u7ef4\u6301\u4e86L\u7684True\u5c5e\u6027\uff0c\u4e5f\u589e\u5927\u4e86\u6240\u8981\u7684\u6700\u5c0f\u503c\u6240\u5728\u533a\u95f4\uff0c\u5982\u679c\u4e0d\u7b26\u5408\uff0c\u6ca1\u529e\u6cd5\u5728\u4fdd\u6301L\u7684True\u5c5e\u6027\u60c5\u51b5\u4e0b\u79fb\u52a8L\uff0c\u90a3\u5c31\u79fb\u52a8R\u3002 2.\u6700\u5927\u503c\u6700\u5c0f\u5316 int l = min_ans, r = max_ans; while (l < r) { int mid = (l + r) / 2; if (ok(mid)) //\u7b26\u5408\u6761\u4ef6\u8fd4\u56deTrue r = mid; else l = mid + 1; } \u6309\u540c\u6837\u9053\u7406\u5206\u6790\uff0c\u7ef4\u6301R\u7684True\u5c5e\u6027\u5373\u53ef\u3002\u8fd9\u91cc\u7684mid\u5c31\u4e0d\u9700\u8981\u52a01\u4e86\uff0c\u56e0\u4e3a mid \u8ddf l \u91cd\u5408\u65f6\uff0cl = mid + 1;\u4f1a\u81ea\u589e\uff0c\u800c\u5f53 mid \u548c r \u91cd\u5408\u65f6 l \u4e5f\u8ddf r \u91cd\u5408\uff0c\u7ed3\u675f\u5faa\u73af\u4e86\u3002 \u6ce8\u610f\u70b9 \\1. \u6bcf\u6b21\u5faa\u73af\u90fd\u8981\u786e\u4fddL\u548cR\u6709\u4e00\u4e2a\u88ab\u66f4\u65b0\uff0c\u5426\u5219\u6b7b\u5faa\u73af\u5c31\u5475\u5475\u4e86\u3002 \\2. \u7b54\u6848\u662f\u6d6e\u70b9\u6570\u7684\u60c5\u51b5\uff1a\u533a\u95f4\u66f4\u65b0\u4e0d\u80fd\u52a01\uff0c\u8fd9\u6837\u53d8\u52a8\u592a\u5927\uff0c\u76f4\u63a5 l = mid; r = mid; 4.\u4e09\u5206\u6cd5 \u5f53\u4e8c\u5206\u7684\u51fd\u6570\u503c\u4e0d\u662f\u9012\u589e/\u51cf\uff0c\u800c\u662f\u5148\u589e\u540e\u51cf\u6216\u8005\u5148\u51cf\u540e\u589e\u65f6\u4e8c\u5206\u5c31\u6302\u4e86\u3002\u6b64\u65f6\u9700\u8981\u4e09\u5206\u6cd5\uff0c\u8fd9\u91cc\u76f4\u63a5\u76d7\u7528 hihocoder Problem 1142 \u7684\u56fe \u5982\u56fe\u8fd9\u79cd\u60c5\u51b5\u5148\u51cf\u540e\u589e\u6709\u6781\u5c0f\uff0c\u82e5lm\u6bd4rm\u4f4e\uff08\u5373lm\u5bf9\u5e94\u7684\u51fd\u6570\u503c < rm\u51fd\u6570\u503c\uff09\u5219\u6781\u5c0f\u70b9\uff08\u56fe\u4e2d\u6700\u4f4e\u70b9\uff09\u80af\u5b9a\u5728[ left, rm ] \uff0c\u53cd\u4e4b\u5728[ lm, right ]\uff0c\u5269\u4e0b\u5c31\u8ddf\u4e8c\u5206\u4e00\u6837\u6839\u636e\u5927\u5c0f\u5173\u7cfb\u8c03\u6574\u533a\u95f4\u5c31\u884c\u4e86\u3002\u90a3lm\u548crm\u53d6\u503c\u591a\u5c11\uff1f\u4e00\u4e2a\u4e0d\u9519\u7684\u53d6\u503c\u662flm\u4e3a\u6574\u4e2a\u533a\u95f4\u76841/3\u70b9\uff0crm\u4e3a2/3\u70b9\uff0c\u5373 lmid = l + (r - l)/3; rmid = r - (r - l)/3; \u55ef\u4e09\u5206\u5c31\u8fd9\u6837\u5b8c\u4e86\u3002 \u7136\u540e\u53e6\u5916\u4e00\u79cd\u60c5\u51b5\uff0c\u5148\u589e\u540e\u51cf\u6709\u6781\u5927\uff1a HDU 2899 Strange fuction hihocoder 1142 5.\u6570\u7ec4 \u504f\u79fb\u91cf\u5411\u91cf N\u7687\u540e // \u4e0a\u53f3\u4e0b\u5de6 \u949f\u8868\u5e8f // dx\u4ee3\u8868\u5217 dy\u4ee3\u8868\u884c int dx[4] = {-1, 0, 1, 0}; int dy[4] = {0, 1, 0, -1}; 6.\u7ebf\u6bb5\u6811 7.sweep line algorithm \u626b\u63cf\u7ebf\u7b97\u6cd5 8.\u8d2a\u5fc3\u662f\u6700\u96be\u7684\u9898\u76ee \u60f3\u8bc1\u660e\u592a\u96be \u601d\u8def\u5f88\u96be \u4f46\u5bb9\u6613\u8499\u5bf9 \u53ef\u4ee5\u91c7\u7528\u6a21\u62dfcase\u7684\u529e\u6cd5 C++\u8bed\u6cd5 1.vector map set 2.c++ 1s\u53ef\u8ba1\u7b9710E7 ~10E8\u7684\u8ba1\u7b97\u91cf 3.int \u6700\u5927\u503c#include INT_MAX 4.#include \\ sort 5.\u521d\u59cb\u5316\u51fd\u6570 memset ( void * ptr, int value, size_t num ); memset(dist, -1, sizeof dist) 6.#include 7.queue #include \\ front access the first element (public member function) back access the last element (public member function) Capacity empty checks whether the underlying container is empty (public member function) size returns the number of elements (public member function) Modifiers push inserts element at the end (public member function) emplace (C++11) constructs element in-place at the end (public member function) pop \u8fd4\u56deNone removes the first element (public member function) swap swaps the contents (public member function) 8.stack #include \\ s.push(item); //\u5c06item\u538b\u5165\u6808\u9876 s.pop(); //\u5220\u9664\u6808\u9876\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u4f1a\u8fd4\u56de s.top(); //\u8fd4\u56de\u6808\u9876\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u4f1a\u5220\u9664 s.size(); //\u8fd4\u56de\u6808\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 s.empty(); //\u68c0\u67e5\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse 8.pair \u6784\u5efa\u6cd51: {i, j} \u6784\u5efa\u6cd52: make_pair(i, j) member variable definition first The first value in the pair second The second value in the pair 9.template \u8fd9\u4e2a\u662fC++\u4e2d\u7684\u6a21\u677f..template \u8fd9\u4e2a\u662f\u5b9a\u4e49\u6a21\u677f\u7684\u56fa\u5b9a\u683c\u5f0f,\u89c4\u5b9a\u4e86\u7684..\u6a21\u677f\u5e94\u8be5\u53ef\u4ee5\u7406\u89e3\u5230\u5b83\u7684\u610f\u601d\u5427.. \u6bd4\u5982\u4f60\u60f3\u6c422\u4e2aint float \u6216double\u578b\u53d8\u91cf\u7684\u503c,\u53ea\u9700\u8981\u5b9a\u4e49\u8fd9\u4e48\u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u4e86,\u5047\u5982\u4e0d\u7528\u6a21\u677f\u7684\u8bdd,\u4f60\u5c31\u5fc5\u987b\u9488\u5bf9\u6bcf\u79cd\u7c7b\u578b\u90fd\u5b9a\u4e49\u4e00\u4e2a sum\u51fd\u6570 ..int sum(int, int);float sum(float, float);double sum(double, double); 10.\u4f18\u5148\u7ea7 11.int\u7684\u8303\u56f42.1**(10E9) 12.\u6570\u636e\u8303\u56f4 abs(INT_MIN) == INT_MIN (\u6ea2\u51fa) Value of INT_MAX is +2147483647. Value of INT_MIN is -2147483648. -- -- char 8 -2^7 ~ 2^7-1 %c %c\u3001%d\u3001%u signed -- char 8 -2^7 ~ 2^7-1 %c %c\u3001%d\u3001%u unsigned -- char 8 0 ~ 2^8-1 %c %c\u3001%d\u3001%u [signed] short [int] 16 -2^15 ~ 2^15-1 %hd unsigned short [int] 16 0 ~ 2^16-1 %hu\u3001%ho\u3001%hx [signed] -- int 32 -2^31 ~ 2^31-1 %d -2147483648 \uff5e 2147483647 unsigned -- [int] 32 0 ~ 2^32-1 %u\u3001%o\u3001%x [signed] long [int] 32 -2^31 ~ 2^31-1 %ld unsigned long [int] 32 0 ~ 2^32-1 %lu\u3001%lo\u3001%lx [signed] long long [int] 64 -2^63 ~ 2^63-1 %I64d unsigned long long [int] 64 0 ~ 2^64-1 %I64u\u3001%I64o\u3001%I64x -- -- float 32 +/- 3.40282e+038 %f\u3001%e\u3001%g -- -- double 64 +/- 1.79769e+308 %lf\u3001%le\u3001%lg %f\u3001%e\u3001%g -- long double 96 +/- 1.79769e+308 %Lf\u3001%Le\u3001%Lg Round A Training \u516c\u5e73\u8db3\u7403\u961f \u4f5c\u4e3a\u5f53\u5730\u5b66\u6821\u7684\u8db3\u7403\u6559\u7ec3\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u6311\u9009\u4e00\u652f\u5b8c\u5168\u7531P\u5b66\u751f\u7ec4\u6210\u7684\u56e2\u961f\u4ee3\u8868\u4f60\u7684\u5b66\u6821\u3002\u6709N\u540d\u5b66\u751f\u4f9b\u60a8\u9009\u62e9\u3002\u7b2ci\u540d\u5b66\u751f\u7684\u6280\u80fd\u7b49\u7ea7\u4e3aSi\uff0c\u8fd9\u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u4ed6\u4eec\u7684\u6280\u672f\u6c34\u5e73\u3002 \u5982\u679c\u5b83\u6709P\u4e2a\u5b66\u751f\uff0c\u5e76\u4e14\u4ed6\u4eec\u90fd\u5177\u6709\u76f8\u540c\u7684\u6280\u80fd\u7b49\u7ea7\uff0c\u4f60\u53ef\u4ee5\u786e\u5b9a\u8fd9\u4e2a\u56e2\u961f\u662f\u516c\u5e73\u7684\u3002\u6700\u521d\uff0c\u53ef\u80fd\u65e0\u6cd5\u9009\u62e9\u4e00\u4e2a\u516c\u5e73\u7684\u56e2\u961f\uff0c\u56e0\u6b64\u60a8\u5c06\u4e3a\u4e00\u4e9b\u5b66\u751f\u63d0\u4f9b\u4e00\u5bf9\u4e00\u7684\u8f85\u5bfc\u3002\u9700\u8981\u4e00\u4e2a\u5c0f\u65f6\u7684\u8f85\u5bfc\u624d\u80fd\u5c06\u4efb\u4f55\u5b66\u751f\u7684\u6280\u80fd\u7b49\u7ea7\u63d0\u9ad81\u3002 \u6bd4\u8d5b\u5b63\u5f88\u5feb\u5c31\u5f00\u59cb\u4e86\uff08\u4e8b\u5b9e\u4e0a\uff0c\u7b2c\u4e00\u573a\u6bd4\u8d5b\u5df2\u7ecf\u5f00\u59cb\u4e86\uff01\uff09\uff0c\u6240\u4ee5\u4f60\u60f3\u627e\u5230\u4f60\u9700\u8981\u63d0\u4f9b\u7684\u6700\u5c11\u8bad\u7ec3\u5c0f\u65f6\u6570\u624d\u80fd\u9009\u51fa\u4e00\u652f\u516c\u5e73\u7684\u7403\u961f\u3002 \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u91cf\uff0cT\u3002T\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\u3002\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u5206\u522b\u4ee5\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u548cP\uff0c\u5b66\u751f\u6570\u548c\u60a8\u9700\u8981\u9009\u62e9\u7684\u5b66\u751f\u6570\u7684\u884c\u5f00\u5934\u3002\u7136\u540e\uff0c\u53e6\u4e00\u884c\u5305\u542bN\u4e2a\u6574\u6570Si;\u8fd9\u4e9b\u4e2d\u7684\u7b2ci\u4e2a\u662f\u7b2ci\u4e2a\u5b66\u751f\u7684\u6280\u80fd\u3002 \u4ea7\u91cf \u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\u5305\u542bCase #x\uff1ay\uff0c\u5176\u4e2dx\u662f\u6d4b\u8bd5\u7528\u4f8b\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0cy\u662f\u6240\u9700\u7684\u6700\u5c0f\u6559\u7ec3\u5c0f\u65f6\u6570\uff0c\u7136\u540e\u624d\u80fd\u9009\u62e9\u4e00\u4e2a\u516c\u5e73\u7684P\u5b66\u751f\u56e2\u961f\u3002 \u8303\u56f4 \u65f6\u95f4\u9650\u5236\uff1a\u6bcf\u4e2a\u6d4b\u8bd5\u96c615\u79d2\u3002 \u5185\u5b58\u9650\u5236\uff1a1 GB\u3002 1\u2264T\u2264100\u3002 \u5bf9\u4e8e\u6240\u6709i\uff0c1\u2264Si\u226410000\u3002 2\u2264P\u2264N\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 2\u2264N\u22641000\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 2\u2264N\u2264105\u3002 \u6837\u54c1 \u8f93\u5165 \u4ea7\u91cf 3 4 3 3 1 9 100 6 2 5 5 1 2 3 4 5 5 7 7 1 7 7 \u6848\u4f8b\uff031\uff1a14 \u6848\u4f8b\uff032\uff1a0 \u6848\u4f8b\uff033\uff1a6 \u5728\u6837\u672c\u6848\u4f8b\uff031\u4e2d\uff0c\u60a8\u53ef\u4ee5\u82b1\u8d39\u603b\u51716\u4e2a\u5c0f\u65f6\u8bad\u7ec3\u7b2c\u4e00\u4e2a\u5b66\u751f\uff0c8\u4e2a\u5c0f\u65f6\u8bad\u7ec3\u7b2c\u4e8c\u4e2a\u5b66\u751f\u3002\u8fd9\u4f7f\u5f97\u7b2c\u4e00\uff0c\u7b2c\u4e8c\u548c\u7b2c\u4e09\u5b66\u751f\u7684\u6280\u80fd\u6c34\u5e73\u4e3a9.\u8fd9\u662f\u60a8\u53ef\u4ee5\u82b1\u8d39\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u56e0\u6b64\u7b54\u6848\u662f14\u3002 \u5728\u793a\u4f8b\u6848\u4f8b\uff032\u4e2d\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u516c\u5e73\u7684\u56e2\u961f\uff08\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u5b66\u751f\uff09\u800c\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u6307\u5bfc\uff0c\u56e0\u6b64\u7b54\u6848\u4e3a0\u3002 \u5728\u793a\u4f8b\u6848\u4f8b\uff033\u4e2d\uff0cP = N\uff0c\u56e0\u6b64\u6bcf\u4e2a\u5b66\u751f\u90fd\u5c06\u52a0\u5165\u60a8\u7684\u56e2\u961f\u3002\u4f60\u5fc5\u987b\u82b16\u4e2a\u5c0f\u65f6\u8bad\u7ec3\u7b2c\u4e09\u4e2a\u5b66\u751f\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u50cf\u5176\u4ed6\u4eba\u4e00\u6837\u62e5\u67097\u7ea7\u6280\u80fd\u3002\u8fd9\u662f\u60a8\u53ef\u4ee5\u82b1\u8d39\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u6240\u4ee5\u7b54\u6848\u662f6\u3002 \u89e3\u6cd5 \u89e3\u6cd51 \u2705 + TLE time O(TPN) T = int(input().strip()) for i in range(1, T + 1): N, P = map(int, input().strip().split()) team = map(int, input().strip().split()) team = sorted(team) min_val = float('inf') for j in range(N-P+1): val = team[j+P-1]*P - sum(team[j: j+P]) min_val = min(val, min_val) print(\"Case #{}: {}\".format(i, min_val)) \u89e3\u6cd52 \u2705 + \u2705 \u524d\u7f00\u548c\u6cd5 time O(NlogN) T = int(input().strip()) for i in range(1, T + 1): N, P = map(int, input().strip().split()) team = map(int, input().strip().split()) team = sorted(team) # key: cumsum \u8ba1\u7b97 \u8282\u7701\u4e86\u65f6\u95f4\u590d\u6742\u5ea6 cumsum_team = [0] for x in team: cumsum_team.append(cumsum_team[-1] + x) min_val = float('inf') for j in range(N-P+1): val = team[j+P-1]*P - (cumsum_team[j+P] - cumsum_team[j]) min_val = min(val, min_val) print(\"Case #{}: {}\".format(i, min_val)) #include <iostream> #include <algorithm> #include <limits.h> using namespace std; // \u9898\u76ee\u6570\u636e\u8303\u56f410^5 \u591a10\u4e2a\u9632\u6b62\u8d8a\u754c const int N = 100010; int n, p; int skill[N], sum[N]; int main() { int T; cin >> T; for(int i = 1; i <= T; i++){ cin >> n >> p; // \u4ece1\u5f00\u59cb for(int i = 1; i <= n; i++) cin >> skill[i]; // algorithm::sort sort(skill + 1, skill + 1 + n); // \u524d\u7f00\u548c for(int i = 1; i <= n; i++) sum[i] = sum[i-1] + skill[i]; int res = INT_MAX; for(int i = p; i <= n; i++){ res = min(res, p * skill[i] - (sum[i] - sum[i-p])); } // \u8f93\u51fa\u7ed3\u679c cout << \"Case #%d: %d\\n\" << endl; } return 0; } Analysis \u4e3a\u4e86\u5efa\u7acb\u4e00\u4e2a\u516c\u5e73\u7684\u56e2\u961f\uff0c\u6211\u4eec\u5fc5\u987b\u57f9\u8bad\u56e2\u961f\u6210\u5458\uff0c\u4f7f\u5176\u8fbe\u5230\u4e0e\u56e2\u961f\u4e2d\u6700\u719f\u7ec3\u7684\u6210\u5458\u76f8\u540c\u7684\u6280\u80fd\u6c34\u5e73\u3002 \u5bf9\u4e8e\u6211\u4eec\u9009\u62e9\u7684\u4efb\u4f55P\u5b66\u751f\uff0c\u7ec4\u5efa\u516c\u5e73\u56e2\u961f\u6240\u9700\u7684\u65f6\u95f4\u662f=\u03a3\uff08max\uff08Si\uff0cSi + 1 ... SP\uff09 - Si\uff09\uff0c\u5bf9\u4e8e\u56e2\u961f\u4e2d\u6240\u6709\u5b66\u751fi = 1\u5230P.\u6211\u4eec\u7684\u76ee\u6807\u662f\u5c3d\u91cf\u51cf\u5c11\u8fd9\u4e2a\u4ef7\u503c\u3002 \u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6cd5\u662f\u4ece\u7ed9\u5b9a\u7684N\u4e2a\u5b66\u751f\u4e2d\u67e5\u770bP\u5b66\u751f\u7684\u6240\u6709\u53ef\u80fd\u5b50\u96c6\u3002\u4f46\u662f\u5b58\u5728NCP\u8fd9\u6837\u7684\u5b50\u96c6\uff08\u8fd9\u91cc\u7b26\u53f7C\u8868\u793a\u7ec4\u5408\uff09\u3002\u8fd9\u4e9b\u5b50\u96c6\u7684\u6570\u91cf\u5c06\u6309\u56e0\u5b50\uff08N\uff09\u7684\u987a\u5e8f\u6392\u5217\uff0c\u56e0\u6b64\u6240\u6709\u8fd9\u4e9b\u5b50\u96c6\u7684\u679a\u4e3e\u90fd\u4e0d\u7b26\u5408\u65f6\u9650\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 \u6211\u4eec\u53ef\u4ee5\u4ece\u89c2\u5bdf\u5f00\u59cb\uff0c\u4e00\u65e6\u6211\u4eec\u786e\u5b9a\u4e86\u5177\u6709\u6700\u9ad8\u6280\u80fd\u6c34\u5e73x\u7684\u5b66\u751f\uff0c\u4e3a\u4e86\u6700\u5c0f\u5316\u6211\u4eec\u7684\u76ee\u6807\uff0c\u6211\u4eec\u5e94\u8be5\u603b\u662f\u9009\u62e9\u5177\u6709\u5c3d\u53ef\u80fd\u9ad8\u4f46\u662f\u5c0f\u4e8e\u6216\u7b49\u4e8ex\u7684\u6280\u80fd\u7684\u5b66\u751f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u964d\u5e8f\u6392\u5217\u6280\u80fd\u6c34\u5e73\u5bf9\u5b66\u751f\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u5047\u8bbe\u4ed6\u4eec\u62e5\u6709\u56e2\u961f\u4e2d\u6700\u9ad8\u7684\u6280\u80fd\u6c34\u5e73\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u5b66\u751f\u8fdb\u884c\u8fed\u4ee3\u3002\u6bd4\u5982\u8bf4\uff0c\u8fd9\u540d\u5b66\u751f\u5904\u4e8e\u6392\u5e8f\u987a\u5e8f\u7684\u7b2ci\u4f4d\u7f6e;\u8be5\u56e2\u961f\u5c06\u7531\u4f4d\u7f6ei\uff0ci + 1\uff0c...\uff0ci + P-1\uff08\u5373\u5927\u5c0f\u4e3aP\u7684\u8fde\u7eed\u5b50\u9635\u5217\uff09\u7684\u5b66\u751f\u7ec4\u6210\u3002 \u5bf9\u4e8e\u6392\u5e8f\u6570\u7ec4\u4e2d\u6bcf\u4e2aP\u5927\u5c0f\u7684\u5b50\u9635\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u516c\u5f0f\u8ba1\u7b97\u5efa\u7acb\u516c\u5e73\u56e2\u961f\u6240\u9700\u7684\u8bad\u7ec3\u65f6\u95f4\u3002\u5b58\u5728\u5927\u5c0f\u4e3aP\u7684N-P + 1\u4e2a\u5b50\u9635\u5217\uff0c\u5e76\u4e14\u8ba1\u7b97\u5b50\u9635\u5217\u5927\u5c0fP\u7684\u8bad\u7ec3\u65f6\u95f4\u7684\u590d\u6742\u5ea6\u4e3aO\uff08P\uff09\u3002\u56e0\u6b64\uff0c\u8be5\u65b9\u6cd5\u7684\u603b\u4f53\u590d\u6742\u5ea6\u4e3aO\uff08N\u00d7P\uff09\uff0c\u8fd9\u5bf9\u4e8e\u6d4b\u8bd5\u96c61\u662f\u8db3\u591f\u7684\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 \u6211\u4eec\u9700\u8981\u7ecf\u5386\u6240\u6709\u5b50\u9635\u5217\uff0c\u4f46\u662f\u6211\u4eec\u80fd\u5426\u66f4\u5feb\u5730\u8ba1\u7b97\u51fa\u5b50\u9635\u5217\u7684\u8bad\u7ec3\u65f6\u95f4\uff1f \u8ba9\u6211\u4eec\u5047\u8bbe\u6570\u7ec4\u6309\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\u3002\u4ece\u4f4d\u7f6ei\u5f00\u59cb\u7684\u5b50\u9635\u5217\u7684\u8bad\u7ec3\u65f6\u95f4\u516c\u5f0f\u662f =\u03a3\uff08S [i] - S [j]\uff09\u5176\u4e2dj = i\u81f3i + P -1 = P\u00d7S [i] - \u03a3\uff08S [j]\uff09\u5176\u4e2dj = i\u81f3i + P-1 \u7531\u4e8e\u6211\u4eec\u603b\u662f\u9700\u8981\u4e00\u4e2a\u8fde\u7eed\u5b50\u9635\u5217\u7684\u603b\u548c\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5148\u8ba1\u7b97\u6574\u4e2a\u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u5e76\u5728O\uff081\uff09\u65f6\u95f4\u5185\u5f97\u5230\u4efb\u4f55\u5b50\u9635\u5217\u7684\u603b\u548c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba1\u7b97\u8bad\u7ec3\u65f6\u95f4O\uff081\uff09 \u3002 \u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u603b\u4f53\u590d\u6742\u6027\u662fO\uff08NlogN\uff09\u3002 \u5feb\u9012\u516c\u53f8\u6700\u5927\u8ddd\u79bb\u6700\u5c0f\u503c \u60a8\u6700\u8fd1\u88ab\u8058\u4e3a\u7740\u540d\u5305\u88f9\u6295\u9012\u516c\u53f8\u7684\u9996\u5e2d\u51b3\u7b56\u8005\uff08CDM\uff09\uff0c\u606d\u559c\uff01\u5ba2\u6237\u559c\u6b22\u5feb\u901f\u4ea4\u4ed8\u5305\u88f9\uff0c\u60a8\u51b3\u5b9a\u51cf\u5c11\u5728\u5168\u7403\u8303\u56f4\u5185\u4ea4\u4ed8\u5305\u88f9\u4ee5\u8d62\u5f97\u5ba2\u6237\u6240\u9700\u7684\u65f6\u95f4\u3002\u4f60\u5df2\u7ecf\u5411\u5f53\u5c40\u4ecb\u7ecd\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u4ed6\u4eec\u5df2\u7ecf\u4e3a\u4f60\u5206\u914d\u4e86\u8db3\u591f\u7684\u9884\u7b97\u6765\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\u3002 \u4e16\u754c\u53ef\u4ee5\u5206\u4e3aR\u00d7C\u65b9\u683c\u3002\u6bcf\u4e2a\u5e7f\u573a\u90fd\u5305\u542b\u4e00\u4e2a\u9001\u8d27\u529e\u516c\u5ba4\uff0c\u6216\u8005\u6ca1\u6709\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u5c1a\u672a\u5305\u542b\u4ea4\u4ed8\u529e\u516c\u5ba4\u7684\u7f51\u683c\u5e7f\u573a\uff0c\u5e76\u5728\u90a3\u91cc\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\u3002 \u5982\u679c\u8be5\u6b63\u65b9\u5f62\u5305\u542b\u4ea4\u4ed8\u5c40\uff0c\u5219\u5305\u88f9\u5230\u6b63\u65b9\u5f62\u7684\u4ea4\u8d27\u65f6\u95f4\u4e3a0\u3002\u5426\u5219\uff0c\u5b83\u88ab\u5b9a\u4e49\u4e3a\u8be5\u5e7f\u573a\u4e0e\u5305\u542b\u4ea4\u4ed8\u5c40\u7684\u4efb\u4f55\u5176\u4ed6\u5e7f\u573a\u4e4b\u95f4\u7684\u6700\u5c0f\u66fc\u54c8\u987f\u8ddd\u79bb\u3002**\u603b\u4ea4\u8d27\u65f6\u95f4\u662f\u6240\u6709\u65b9\u683c\u7684\u4ea4\u8d27\u65f6\u95f4\u7684\u6700\u5927\u503c**\u3002\u60a8\u6700\u591a\u53ef\u4ee5\u901a\u8fc7\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\u83b7\u5f97\u7684\u6700\u77ed\u603b\u4ea4\u8d27\u65f6\u95f4\u662f\u591a\u5c11\uff1f\u3010\u6240\u6709\u653e\u4e2a\u4ea4\u8d27\u65f6\u95f4\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u65f6\u95f4\u3011 \u6ce8\u610f\uff1a\u4e24\u4e2a\u6b63\u65b9\u5f62\uff08r1\uff0cc1\uff09\u548c\uff08r2\uff0cc2\uff09\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u5b9a\u4e49\u4e3a| r1 - r2 | + | c1 - c2 |\uff0c\u5176\u4e2d| * |\u8fd0\u7b97\u7b26\u8868\u793a\u7edd\u5bf9\u503c\u3002 \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u91cf\uff0cT\u3002T\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\u3002\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u7b2c\u4e00\u884c\u5305\u542b\u884c\u6570R\u548c\u7f51\u683c\u5217\u6570C.\u63a5\u4e0b\u6765\u7684R\u884c\u4e2d\u7684\u6bcf\u4e00\u884c\u5305\u542b\u4ece\u96c6\u5408{0,1}\u4e2d\u9009\u62e9\u7684C\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d0\u8868\u793a\u6ca1\u6709\u9012\u9001\u529e\u516c\u5ba4\uff0c1\u8868\u793a\u5728\u5e7f\u573a\u4e2d\u5b58\u5728\u9012\u9001\u529e\u516c\u5ba4\u3002 \u4ea7\u91cf \u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\u5305\u542bCase #x\uff1ay\uff0c\u5176\u4e2dx\u662f\u6d4b\u8bd5\u7528\u4f8b\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0cy\u662f\u5728\u6700\u591a\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u9012\u9001\u529e\u516c\u5ba4\u540e\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5c0f\u603b\u4ea4\u4ed8\u65f6\u95f4\u3002 \u8303\u56f4 \u65f6\u95f4\u9650\u5236\uff1a\u6bcf\u4e2a\u6d4b\u8bd5\u96c615\u79d2\u3002 \u5185\u5b58\u9650\u5236\uff1a1GB\u3002 1\u2264T\u2264100\u3002 \u521d\u59cb\u7f51\u683c\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u4ea4\u4ed8\u5c40\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 1\u2264R\u226410\u3002 1\u2264C\u226410\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 1\u2264R\u2264250\u3002 1\u2264C\u2264250\u3002 \u6837\u54c1 \u8f93\u5165 \u4ea7\u91cf 3 3 3 101 000 101 1 2 11 5 5 10001 00000 00000 00000 10001 \u6848\u4f8b\uff031\uff1a1 \u6848\u4f8b\uff032\uff1a0 \u6848\u4f8b\uff033\uff1a2 \u5728\u6837\u672c\u6848\u4f8b\uff031\u4e2d\uff0c\u901a\u8fc7\u5728\u6ca1\u6709\u4ea4\u4ed8\u529e\u516c\u5ba4\u7684\u4e94\u4e2a\u65b9\u5757\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e2d\u5efa\u7acb\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u6700\u5c0f\u7684\u603b\u4ea4\u4ed8\u65f6\u95f41\u3002 \u5728\u793a\u4f8b\u6848\u4f8b\uff032\u4e2d\uff0c\u6240\u6709\u6b63\u65b9\u5f62\u90fd\u5df2\u7ecf\u6709\u4e00\u4e2a\u4ea4\u4ed8\u529e\u516c\u5ba4\uff0c\u56e0\u6b64\u6700\u5c0f\u603b\u4ea4\u4ed8\u65f6\u95f4\u4e3a0.\u8bf7\u6ce8\u610f\uff0c\u60a8\u5fc5\u987b\u6dfb\u52a0\u6700\u591a\u4e00\u4e2a\u4ea4\u4ed8\u529e\u516c\u5ba4\u3002 \u5728\u6837\u672c\u6848\u4f8b\uff033\u4e2d\uff0c\u8981\u83b7\u5f97\u6700\u5c0f\u7684\u603b\u4ea4\u4ed8\u65f6\u95f42\uff0c\u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4efb\u4f55\u65b9\u683c\u4e2d\u5efa\u7acb\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\uff1a\uff082,3\uff09\uff0c\uff083,2\uff09\uff0c\uff083,3\uff09\uff0c\uff083\uff0c 4\uff09\uff0c\u6216\uff084,3\uff09\u3002\u4efb\u4f55\u5176\u4ed6\u53ef\u80fd\u6027\u5bfc\u81f4\u603b\u4ea4\u4ed8\u65f6\u95f4\u6bd42\u66f4\u9ad8\u3002 Analysis \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 \u5bf9\u4e8e\u6d4b\u8bd5\u88c5\u7f6e1\uff0c\u6211\u4eec\u80fd\u591f\u68c0\u67e5\u65b0\u914d\u9001\u529e\u516c\u5ba4\u7684\u6240\u6709\u53ef\u80fd\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u627e\u5230\u6700\u5c0f\u5316\u4ea4\u8d27\u65f6\u95f4\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u5c06\u5206\u4e24\u4e2a\u9636\u6bb5\u5b8c\u6210\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6839\u636e\u73b0\u6709\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\u8ba1\u7b97\u6bcf\u4e2a\u5e7f\u573a\u7684\u4ea4\u4ed8\u65f6\u95f4\u3002\u5176\u6b21\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u65b0\u529e\u516c\u5ba4\u7684\u6240\u6709\u53ef\u80fd\u4f4d\u7f6e\u3002\u7b2c\u4e00\u90e8\u5206\u4e2d\u7684\u9884\u8ba1\u7b97\u5c06\u5141\u8bb8\u6211\u4eec\u66f4\u6709\u6548\u5730\u5728\u7b2c\u4e8c\u90e8\u5206\u4e2d\u627e\u5230\u4ea4\u8d27\u65f6\u95f4\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u901a\u8fc7\u8fed\u4ee3\u6574\u4e2a\u7f51\u683c\u5e76\u627e\u5230\u5230\u5177\u6709\u4ea4\u4ed8\u5c40\u7684\u6b63\u65b9\u5f62\u7684\u6700\u5c0f\u66fc\u54c8\u987f\u8ddd\u79bb\u6765\u8ba1\u7b97\u6b63\u65b9\u5f62\u7684\u4ea4\u4ed8\u65f6\u95f4\u3002\u5bf9\u4e8eO\uff08\uff08RC\uff092\uff09\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fd9\u5177\u6709\u6bcf\u5e73\u65b9O\uff08RC\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5bf9\u4e8e\u7b2c\u4e8c\u9636\u6bb5\uff0c\u6211\u4eec\u904d\u5386\u65b0\u4ea4\u4ed8\u5c40\u548c\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6240\u6709\u53ef\u80fd\u4f4d\u7f6e\uff0c\u5728\u6574\u4e2a\u7f51\u683c\u4e2d\u641c\u7d22\u5177\u6709\u6700\u5927\u65b0\u4ea4\u4ed8\u65f6\u95f4\u7684\u65b9\u5757\u3002\u65b0\u7684\u4ea4\u8d27\u65f6\u95f4\u662f\u5728\u7b2c\u4e00\u90e8\u5206\u8ba1\u7b97\u7684\u4ea4\u8d27\u65f6\u95f4\u548c\u5230\u65b0\u4ea4\u8d27\u529e\u4e8b\u5904\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u3002\u5bf9\u4e8e\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08\uff08RC\uff092\uff09\uff0c\u8fd9\u4e5f\u5177\u6709\u6bcf\u4e2a\u4f20\u9001\u4f4d\u7f6e\u7684O\uff08RC\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fd9\u5bf9\u4e8e\u6d4b\u8bd5\u88c5\u7f6e1\u662f\u8db3\u591f\u7684\u3002 \u6216\u8005\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u66f4\u5feb\u7684\u65b9\u5f0f\u8ba1\u7b97\u6bcf\u4e2a\u65b9\u683c\u7684\u4ea4\u4ed8\u65f6\u95f4\uff08\u4f8b\u5982\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u8df3\u8fc7\u7b2c\u4e00\u9636\u6bb5\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u4e00\u8282\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 \u6700\u5927\u95ee\u9898\u6700\u5c0f\u5316 \u4e8c\u5206\u7b54\u6848\u6cd5+BFS \u6211\u4eec\u53ef\u4ee5\u5bf9\u6d4b\u8bd5\u96c62\u4f7f\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u4e00\u79cd\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u65b0\u4ea4\u4ed8\u5730\u70b9\u7684\u6700\u5927\u4ea4\u4ed8\u65f6\u95f4\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u89e3\u51b3\u4ee5\u4e0b\u5b50\u95ee\u9898\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a\u7ed9\u5b9aK\u503c\uff0c\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u6dfb\u52a0\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\uff0c\u4ee5\u4fbf\u6700\u5927\u4ea4\u4ed8\u65f6\u95f4\u6700\u591a\u4e3aK\uff1f\u8be5\u5b50\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u4e0e\u6d4b\u8bd5\u96c61\u7c7b\u4f3c\uff0c\u4f46\u662f\u76ee\u6807\u503c\u4e3aK\u5141\u8bb8\u6211\u4eec\u786e\u5207\u5730\u786e\u5b9a\u65b0\u4ea4\u4ed8\u5c40\u9700\u8981\u4e3a\u54ea\u4e9b\u65b9\u5757\u63d0\u4f9b\u670d\u52a1\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u79cd\u5dee\u5f02\u6765\u521b\u5efa\u66f4\u5feb\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u5bf9\u539f\u59cb\u95ee\u9898\u7684\u7b54\u6848\u4e3aK\uff0c\u5219\u5bf9\u4e8e[K\uff0c1]\u8303\u56f4\u5185\u7684\u503c\uff0c\u6211\u4eec\u7684\u5b50\u95ee\u9898\u7684\u7b54\u6848\u4e3a\u201c\u5426\u201d\uff0c\u5bf9\u4e8e[K\uff0c\u65e0\u7a77\u5927]\u8303\u56f4\u5185\u7684\u503c\uff0c\u7b54\u6848\u4e3a\u201c\u662f\u201d\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u7c7b\u578b\u7684\u5b50\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\uff1a\u5982\u679c\u7ed9\u5b9a\u7684\u503c\u6709\u6548\uff0c\u5219\u5b83\u662f\u7b54\u6848\u7684\u4e0a\u9650;\u5426\u5219\u5b83\u662f\u7b54\u6848\u7684\u4e25\u683c\u4e0b\u9650\u3002\u56e0\u6b64\uff0c\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u5b50\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u6765\u89e3\u51b3\u539f\u59cb\u95ee\u9898\u3002\u8fd9\u662f\u5c06\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u4e3a\u51b3\u7b56\u95ee\u9898\u7684\u5e38\u7528\u6280\u672f\u3002 \u9996\u5148\uff0c\u6211\u4eec\u901a\u8fc7\u53cd\u8f6c\u95ee\u9898\u6709\u6548\u5730\u8ba1\u7b97\u6bcf\u4e2a\u5e7f\u573a\u7684\u73b0\u6709\u4ea4\u8d27\u65f6\u95f4\uff1a\u6211\u4eec\u627e\u5230\u6bcf\u4e2a\u5e7f\u573a\u5230\u8fbe\u6bcf\u4e2a\u5e7f\u573a\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u800c\u4e0d\u662f\u627e\u5230\u6bcf\u4e2a\u5e7f\u573a\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u8fd9\u53ef\u4ee5\u4f7f\u7528\u4ece\u6240\u6709\u4ea4\u4ed8\u529e\u516c\u5ba4\u5f00\u59cb\u7684\u591a\u6e90\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6765\u5b8c\u6210\u3002\u591a\u6e90BFS\u4e0e\u5e38\u89c4BFS\u76f8\u540c\uff0c\u53ea\u662f\u60a8\u4f7f\u7528\u591a\u4e2a\u8d77\u59cb\u4f4d\u7f6e\u800c\u4e0d\u662f\u4e00\u4e2a\u3002\u6b64\u641c\u7d22\u6700\u591a\u8bbf\u95ee\u6bcf\u4e2a\u65b9\u5757\u4e00\u6b21\uff0c\u8fd9\u7ed9\u4e86\u6211\u4eecO\uff08RC\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u8bc6\u522b\u6240\u6709\u5177\u6709\u5927\u4e8eK\u7684\u4f20\u9012\u65f6\u95f4\u7684\u6b63\u65b9\u5f62\uff0c\u7136\u540e\u786e\u5b9a\u662f\u5426\u5b58\u5728\u4e0e\u8fd9\u4e9b\u6b63\u65b9\u5f62\u4e2d\u7684\u6bcf\u4e00\u4e2a\u76f8\u8dddK\u7684\u8ddd\u79bb\u5185\u7684\u4f4d\u7f6e\u3002\u4e3a\u4e86\u6709\u6548\u5730\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u66fc\u54c8\u987f\u8ddd\u79bb\u5177\u6709\u76f8\u540c\u7684\u516c\u5f0f\uff1a dist\uff08\uff08x1\uff0cy1\uff09\uff0c\uff08x2\uff0cy2\uff09\uff09= max\uff08abs\uff08x1 + y1 - \uff08x2 + y2\uff09\uff09\uff0cabs\uff08x1 - y1 - \uff08x2 - y2\uff09\uff09\uff09 \u8be5\u516c\u5f0f\u57fa\u4e8e\u4ee5\u4e0b\u4e8b\u5b9e\uff1a\u5bf9\u4e8e\u4efb\u4f55\u70b9\uff0c\u66fc\u54c8\u987f\u8ddd\u79bbK\u5185\u7684\u70b9\u96c6\u5f62\u6210\u65cb\u8f6c45\u5ea6\u7684\u6b63\u65b9\u5f62\u3002\u8fd9\u4e2a\u516c\u5f0f\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u6211\u4eec\u4fee\u6b63\uff08x2\uff0cy2\uff09\uff0c\u5f53x1 + y1\u548cx1-y1\u6700\u5927\u5316\u6216\u6700\u5c0f\u5316\u65f6\uff0c\u8ddd\u79bb\u5c06\u6700\u5927\u5316\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u4ea4\u4ed8\u65f6\u95f4\u5927\u4e8eK\u7684\u6240\u6709\u65b9\u683c\u8ba1\u7b97x1 + y1\u548cx1-y1\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u65b0\u4ea4\u4ed8\u5c40\u7684\u6240\u6709\u53ef\u80fd\u4f4d\u7f6e\uff0c\u5e76\u68c0\u67e5\u6700\u5927\u8ddd\u79bb\u662f\u5426\u4e3a\u5f53\u524d\u4ea4\u8d27\u65f6\u95f4\u5927\u4e8eK\u7684\u6b63\u65b9\u5f62\u7684\u4f4d\u7f6e\u5728\u6052\u5b9a\u65f6\u95f4\u5185\u81f3\u591a\u4e3aK.\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u7b54\u6848\u662f\u5426\u6700\u591a\u4e3aK\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08RC\uff09\u3002 \u4f7f\u7528\u4e8c\u8fdb\u5236\u641c\u7d22\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3aO\uff08RClog\uff08R + C\uff09\uff09\uff0c\u8fd9\u5bf9\u4e8e\u6d4b\u8bd5\u96c6\u6765\u8bf4\u5df2\u8db3\u591f\u3002\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u5728\u7f51\u683c\u4e0a\u5355\u6b21\u901a\u8fc7\u8ba1\u7b97\u4e0a\u8ff0\u6240\u6709\u53ef\u80fdK\u7684\u6700\u5c0f/\u6700\u5927\u503c\uff0c\u7136\u540e\u4f7f\u7528\u4e2a\u6848\u5de5\u4f5c\u6765\u786e\u5b9a\u6bcf\u4e2aK\u662f\u5426\u5b58\u5728\u53ef\u884c\u7684\u65b0\u4ea4\u4ed8\u529e\u516c\u5730\u70b9\uff0c\u4ece\u800c\u5c06\u5176\u63d0\u9ad8\u5230O\uff08RC\uff09\u65f6\u95f4\uff0c\u4f46\u8fd9\u79cd\u4f18\u5316\u662f\u4e0d\u5fc5\u8981\u7684 \u89e3\u6cd5 \u89e3\u6cd5\u4e8c BFS + \u4e8c\u5206\u7b54\u6848\u7b54\u6848\u6cd5\uff08\u6700\u5927\u95ee\u9898\u6700\u5c0f\u5316\uff09 \u5c06\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u4e3a\u51b3\u7b56\u95ee\u9898 1.\u9009\u53d6K\u4f5c\u4e3a\u7b54\u6848\u5224\u65ad\u662f\u5426\u662f\u6700\u5927\u95ee\u9898\u7684\u7ed3\u679c\uff08\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u7ed3\u679c\uff09 2.\u7531\u4e8e\u6c42\u95ee\u9898\u7684\u6700\u5c0f\u5316\u7ed3\u679c\uff0c\u5219[1, K)\u7b54\u6848\u4e3aNo\uff0c[K, R+C]\u7b54\u6848Yes 3.\u6700\u5927\u503c\u6700\u5c0f\u5316\u4e8c\u4efd\u7b54\u6848\u6cd5\uff0c O\uff08log\uff08R+C\uff09\uff09 int l = min_ans, r = max_ans; while (l < r) { int mid = (l + r) / 2; if (ok(mid)) //\u7b26\u5408\u6761\u4ef6\u8fd4\u56deTrue r = mid; else l = mid + 1; } 4.ok\u51fd\u6570 \u7528bfs\uff0c \u5373\u4ece\u6240\u67091\u51fa\u53d1 \u904d\u5386K\u5c42\uff0c O(RC) 5.\u66fc\u54c8\u987f\u8ddd\u79bb\u6027\u8d28 dist((x1\uff0cy1)\uff0c(x2\uff0cy2))= max(abs((x1 + y1) - \uff08x2 + y2))\uff0cabs((x1 - y1) - (x2 - y2))) 6.\u627e\u5230\u4e00\u4e2a(x_k, y_k)\u70b9\u6ee1\u8db3\u6240\u6709\u672a\u904d\u5386\u8fc7\u7684\u70b9\u7684\u8ddd\u79bb\u5747\u5c0f\u4e8e\u7b49\u4e8eK\uff0c\u5373dist((x1, y1), (x_k, y_k)) <= K O(RC) \uff0c\u53ef\u63a8\u51fa\uff08\u6027\u8d28\uff09 x + y de min max x - y de min max \u5f53x1 + y1\u548cx1-y1\u6700\u5927\u5316\u6216\u6700\u5c0f\u5316\u65f6\uff0c\u8ddd\u79bb\u5c06\u6700\u5927\u5316\u3002(\u8fb9\u754c\u70b9) \u56e0\u4e3a\u5982\u679c\u904d\u5386\u6240\u6709k\u70b9\u8981O(RC)\uff0c\u800c\u56fa\u5b9aK\u70b9\u8ba1\u7b97\u672a\u904d\u5386\u70b9\u4e5f\u8981O(RC), \u5171O(R^2C^2)\uff0c\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u6211\u4eec\u627e\u8fb9\u754c\u70b9\u5373\u4e0a\u9762\u56db\u4e2a\u6570 7.\u8ba1\u7b97\u6240\u6709\u53ef\u80fd\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\u5230\u51e0\u4e2a\u8fb9\u754c\u70b9\u7684\u8ddd\u79bb\uff0c\u627e\u5230\u6700\u5c0f\u7684 O(RC)** O(RC*log(R+C)) #include <iostream> #include <stdio.h> #include <algorithm> #include <limits.h> #include <string.h> #include <queue> using namespace std; // \u9898\u76ee\u6570\u636e\u8303\u56f4250 \u591a5\u4e2a\u9632\u6b62\u8d8a\u754c const int N = 255; // r c int n, m; // g \u6574\u4e2a\u5730\u56fe string g[N]; // dist \u6bcf\u4e2a\u7a7a\u5730\u5230\u8fbe\u8865\u7ed9\u7ad9\u7684\u8ddd\u79bb int dist[N][N]; // \u591a\u6e90\u70b9bfs int bfs(int k){ // \u4ece\u6240\u67091\u51fa\u53d1\uff0c\u628a\u6240\u6709K\u6b65\u4ee5\u5185\u80fd\u904d\u5386\u5230\u7684\u70b9\u5168\u90e8mark\u4e00\u904d, \u5177\u4f53\u7684\u8ddd\u79bb\u6570\u503c\u53ef\u4ee5\u4e0d\u7528\u7cbe\u786e \u5373\u539f\u5148\u70b9\u6807\u8bb0\u8fc7\u7684K\u6b65\u5185\u70b9\u53ef\u5ffd\u7565 \u56e0\u4e3a\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e86 queue<pair<int, int>> q; // \u521d\u59cb\u5316\u4e3a-1 memset(dist, -1, sizeof dist); // \u7528\u6240\u67091\u7684\u70b9\u521d\u59cb\u5316queue for(int i = 0; i < n; i++){ for(int j = 0; j < m; j++){ if(g[i][j] == '1'){ dist[i][j] = 0; q.push({i, j}); } } } // \u4e0a\u53f3\u4e0b\u5de6 \u949f\u8868\u5e8f // dx\u4ee3\u8868\u5217 dy\u4ee3\u8868\u884c int dx[4] = {-1, 0, 1, 0}; int dy[4] = {0, 1, 0, -1}; while(q.size()){ auto t = q.front(); q.pop(); int x = t.first, y = t.second; int distance = dist[x][y]; // \u82e5\u5f53\u524d\u5df2\u7ecf\u662f\u7b2ck\u5c42\uff0c\u4e0d\u53ef\u4ee5\u8fd9\u4e2a\u70b9\u7ee7\u7eed\u6269\u6563 if(distance == k){ continue; } // \u679a\u4e3e\u56db\u4e2a\u65b9\u5411 for(int i = 0; i < 4; i++){ int a = x + dx[i]; int b = y + dy[i]; // \u5750\u6807\u4e0d\u8981\u51fa\u754c\u4e14\u8be5\u5355\u5143\u672a\u904d\u5386\u8fc7 if(a >= 0 && a < n && b >= 0 && b < m && dist[a][b] == -1){ dist[a][b] = distance + 1; q.push({a, b}); } } } } bool check(int k){ bfs(k); // bfs\u540e dist\u91cc\u6240\u6709-1\u7684\u70b9\u90fd\u662f\u672a\u904d\u5386\u7684\u70b9, \u5373\u5230\u6700\u8fd11\u7684\u70b9\u5927\u4e8eK // min(x + y)\u5b9a\u4e49\u4e3amin_sum \u4ee5\u6b64\u7c7b\u63a8 int min_sum = INT_MAX, max_sum = INT_MIN; int min_sub = INT_MAX, max_sub = INT_MIN; for(int i = 0; i < n; i++){ for(int j = 0; j < m; j++){ if(dist[i][j] == -1){ min_sum = min(min_sum, i + j); max_sum = max(max_sum, i + j); min_sub = min(min_sub, i - j); max_sub = max(max_sub, i - j); } } } // \u82e5\u6240\u6709\u70b9\u90fd\u88ab\u6807\u8bb0\u8fc7 \u7b26\u5408\u7ed3\u679c\u8981\u6c42 \u8fd4\u56detrue if(min_sum == INT_MAX) return true; for(int i = 0; i < n; i++){ for(int j = 0; j < m; j++){ if(g[i][j] == '0'){ // \u66fc\u54c8\u987f\u8ddd\u79bb\u7684 \u7279\u70b9dist((x1\uff0cy1)\uff0c(x2\uff0cy2))= max(abs((x1 + y1) - \uff08x2 + y2))\uff0cabs((x1 - y1) - (x2 - y2))) int sum = max(abs(i + j - min_sum), abs(i + j - max_sum)); int sub = max(abs(i - j - min_sub), abs(i - j - max_sub)); if(max(sum, sub) <= k){ return true; } } } } return false; } int main(){ int T; cin >> T; for(int c = 1; c <= T; c++){ cin >> n >> m; for(int i = 0; i < n; i++) cin >> g[i]; // \u4e8c\u5206\u7b54\u6848\u6cd5 int l = 0, r = n + m; while(l < r){ int mid = (l + r) >> 1; if(check(mid)){ r = mid; }else{ l = mid + 1; } } printf(\"Case #%d: %d\\n\", c, r); } return 0; } \u7535\u5f71\u7968\u95e8\u7968\u9884\u5b9a \u60a8\u6b63\u5728\u51fa\u552e\u7535\u5f71\u9662\u524d\u6392\u5ea7\u4f4d\u7684\u95e8\u7968\u3002\u524d\u6392\u6709N\u4e2a\u5ea7\u4f4d\uff0c\u4ece\u5de6\u5230\u53f3\u7f16\u53f7\u4e3a1\u5230N.\u4f60\u4e0a\u5468\u79bb\u5f00\u4e86\u529e\u516c\u5ba4\uff0c\u56de\u6765\u540e\uff0cQ\u5ea7\u4f4d\u9884\u8ba2\u5df2\u7ecf\u5806\u79ef\uff01\u7b2ci\u4e2a\u9884\u8ba2\u8981\u6c42\u4eceLi\u5230Ri\u7684\u6240\u6709\u5ea7\u4f4d\u3002\u60a8\u73b0\u5728\u65e0\u804a\u5730\u5c06\u6bcf\u4e2a\u9884\u8ba2\u8f93\u5165\u7cfb\u7edf\uff0c\u4e00\u6b21\u4e00\u4e2a\u3002 \u7531\u4e8e\u67d0\u4e9b\u9884\u8ba2\u53ef\u80fd\u4f1a\u91cd\u53e0\uff0c\u56e0\u6b64\u7cfb\u7edf\u53ef\u80fd\u65e0\u6cd5\u5b8c\u5168\u6ee1\u8db3\u6bcf\u4e2a\u9884\u8ba2\u3002\u5f53\u60a8\u5728\u7cfb\u7edf\u4e2d\u8f93\u5165\u9884\u8ba2\u65f6\uff0c\u5b83\u4f1a\u5c06\u9884\u8ba2\u6240\u8bf7\u6c42\u7684\u672a\u88ab\u5206\u914d\u7684\u5ea7\u4f4d\u5206\u914d\u51fa\u53bb \u6700\u5927\u6574\u6570k\u662f\u5404\u4e2a\u8ba2\u5355\u5206\u914d\u7684\u6700\u5c0f\u5ea7\u4f4d\u6570\uff0c\u9898\u76ee\u8981\u6c42k\u7684\u6700\u5927\u503c \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u91cf\uff0cT\u3002T\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\u3002\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u90fd\u4ee5\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u548cQ\uff0c\u5ea7\u4f4d\u6570\u548c\u9884\u8ba2\u6570\u91cf\u7684\u884c\u5f00\u5934\u3002\u7136\u540e\uff0c\u8fd8\u6709Q\u884c\uff0c\u5176\u4e2d\u7b2ci\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570Li\u548cRi\uff0c\u8868\u793a\u7b2ci\u4e2a\u9884\u8ba2\u60f3\u8981\u9884\u8ba2\u4eceLi\u5230Ri\u7684\u6240\u6709\u5ea7\u4f4d\uff0c\u5305\u62ec\u5728\u5185\u3002 \u4ea7\u91cf \u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\u5305\u542bCase #x\uff1ay\uff0c\u5176\u4e2dx\u662f\u6d4b\u8bd5\u7528\u4f8b\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0cy\u662f\u6700\u5927\u503ck\uff0c\u5982\u4e0a\u6240\u8ff0\u3002 \u8303\u56f4 \u65f6\u95f4\u9650\u5236\uff1a\u6bcf\u4e2a\u6d4b\u8bd5\u96c630\u79d2\u3002 \u5185\u5b58\u9650\u5236\uff1a1GB\u3002 T = 100\u3002 1\u2264N\u2264106\u3002 1\u2264Li\u2264Ri\u2264N\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 1\u2264Q\u2264300\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 1\u2264Q\u226430000\u3002 \u5bf9\u4e8e\u81f3\u5c1185\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0cQ\u22643000\u3002 \u6837\u54c1 \u8f93\u5165 \u4ea7\u91cf 3 5 3 1 2 3 4 2 5 30 3 10 11 10 10 11 11 10 4 1 8 4 5 3 6 2 7 \u6848\u4f8b\uff031\uff1a1 \u6848\u4f8b\uff032\uff1a0 \u6848\u4f8b\uff033\uff1a2 \u5728\u6837\u672c\u6848\u4f8b\uff031\u4e2d\uff0c\u6709N = 5\u4e2a\u5e2d\u4f4d\u548cQ = 3\u4e2a\u9884\u8ba2\u3002\u4e00\u4e2a\u53ef\u80fd\u7684\u987a\u5e8f\u662f\uff1a \u5728\u7b2c\u4e8c\u6b21\u9884\u8ba2\u4e2d\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff083\u548c4\uff09\u3002 \u5728\u7b2c\u4e00\u6b21\u9884\u8ba2\u4e2d\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff081\u548c2\uff09\u3002 \u5728\u7b2c\u4e09\u6b21\u9884\u8ba2\u4e2d\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba21\u4e2a\u5ea7\u4f4d\uff08\u4ec5\u9650\u5ea7\u4f4d5\uff0c\u56e0\u4e3a\u5ea7\u4f4d1,2,3\u548c4\u5df2\u7ecf\u9884\u8ba2\uff09\u3002 \u6bcf\u4e2a\u9884\u8ba2\u81f3\u5c11\u5206\u914d1\u4e2a\u5ea7\u4f4d\uff0c\u5e76\u4e14\u6ca1\u6709\u8ba2\u5355\u4e3a\u6bcf\u4e2a\u9884\u8ba2\u5206\u914d\u81f3\u5c112\u4e2a\u5ea7\u4f4d\uff0c\u56e0\u6b64\u7b54\u6848\u662f1\u3002 \u5728\u6837\u672c\u6848\u4f8b\uff032\u4e2d\uff0c\u6709N = 30\u4e2a\u5e2d\u4f4d\u4e14Q = 3\u4e2a\u9884\u8ba2\u3002\u65e0\u8bba\u60a8\u5206\u914d\u7684\u5ea7\u4f4d\u662f\u4ec0\u4e48\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u9884\u8ba2\u5c06\u6ca1\u6709\u5206\u914d\u5ea7\u4f4d\u3002\u6240\u4ee5\u7b54\u6848\u662f0.\u8bf7\u6ce8\u610f\uff0c\u53ef\u4ee5\u6709\u5ea7\u4f4d\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u9884\u8ba2\uff01 \u5728\u6837\u672c\u6848\u4f8b\uff033\u4e2d\uff0c\u6709N = 10\u4e2a\u5e2d\u4f4d\u4e14Q = 4\u4e2a\u9884\u8ba2\u3002\u4e00\u4e2a\u53ef\u80fd\u7684\u987a\u5e8f\u662f\uff1a \u5728\u7b2c\u4e8c\u6b21\u9884\u8ba2\u4e2d\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff084\u548c5\uff09\u3002 \u5728\u7b2c\u4e09\u6b21\u9884\u8ba2\u4e2d\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff083\u548c6\uff0c\u56e0\u4e3a4\u548c5\u5df2\u7ecf\u9884\u8ba2\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u9884\u8ba2\u7684\u5ea7\u4f4d\u4e0d\u4e00\u5b9a\u5f7c\u6b64\u76f8\u90bb\u3002 \u8fdb\u5165\u7b2c\u56db\u6b21\u9884\u8ba2\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff082\u548c7\uff09\u3002 \u5728\u7b2c\u4e00\u6b21\u9884\u8ba2\u65f6\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff081\u548c8\uff09\u3002 \u6bcf\u4e2a\u9884\u8ba2\u81f3\u5c11\u5206\u914d2\u4e2a\u5ea7\u4f4d\uff0c\u5e76\u4e14\u6ca1\u6709\u8ba2\u5355\u4e3a\u6bcf\u4e2a\u9884\u8ba2\u5206\u914d\u81f3\u5c113\u4e2a\u5ea7\u4f4d\uff0c\u56e0\u6b64\u7b54\u6848\u662f2\u3002 \u6ce8\u610f\uff1a\u6211\u4eec\u4e0d\u5efa\u8bae\u5bf9\u6b64\u95ee\u9898\u7684Large\u6570\u636e\u96c6\u4f7f\u7528\u89e3\u91ca/\u6162\u901f\u8bed\u8a00 Analysis \u4e00\u822c\u6700\u5927\u95ee\u9898\u6700\u5c0f\u5316\uff08\u6700\u5c0f\u95ee\u9898\u6700\u5927\u5316\uff09\u7528\u4e8c\u5206\u7b54\u6848\u6cd5 \u5206\u6790 \u8bf7\u6c42\u7684\u53ef\u80fd\u6392\u5e8f\u6570\u91cf\u662fFactorial(Q),\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u6d4b\u8bd5\u96c6\u90fd\u4e0d\u591f\u5feb\u3002\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u5bf9\u4e8e\u6240\u9009\u62e9\u7684\u8bf7\u6c42\u6392\u5e8f\uff0c\u7cfb\u7edf\u5728\u4e0a\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u9884\u8ba2\u7684\u5e2d\u4f4d\u6570\u91cf\u4e0d\u4f9d\u8d56\u4e8e\u5148\u524dQ-1\u8bf7\u6c42\u7684\u6392\u5e8f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u627e\u5230\u6700\u540e\u5904\u7406\u7684\u8bf7\u6c42\u5f00\u59cb\uff0c\u7136\u540e\u5411\u540e\u79fb\u5411\u5148\u524d\u7684\u8bf7\u6c42\u3002\u7b54\u6848\u662fQ\u6b65\u9aa4\u4e2d\u9884\u8ba2\u7684\u6700\u4f4e\u5ea7\u4f4d\u6570\u3002 \u53e6\u4e00\u4e2a\u89c2\u5bdf\u662f\uff0c\u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u53ef\u4ee5\u4ece\u5269\u4f59\u7684\u96c6\u5408\u4e2d\u8d2a\u5fc3\u5730\u9009\u62e9\u6700\u540e\u4e00\u4e2a\u8bf7\u6c42\uff1a\u6211\u4eec\u53ef\u4ee5\u9884\u8ba2\u6700\u5927\u5ea7\u4f4d\u6570\u3002\u4e00\u4e2a\u76f4\u89c2\u7684\u8bc1\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ea4\u6362\u53c2\u6570\u6765\u8bc1\u660e\u8fd9\u4e00\u89c2\u5bdf\u7ed3\u679c\uff0c\u56e0\u4e3a\u9009\u62e9\u9884\u8ba2\u8f83\u5c11\u5ea7\u4f4d\u7684\u8bf7\u6c42\u4e0d\u4f1a\u7ed9\u6211\u4eec\u66f4\u597d\u7684\u7b54\u6848\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 \u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0\u5c06\u662fO\uff08N\u00d7Q\uff09\u7684\u987a\u5e8f\uff0c\u5176\u4e2d\u6211\u4eec\u4f7f\u7528\u9488\u5bf9\u6bcf\u4e2aQ\u6b65\u9aa4\u7684\u626b\u63cf\u7ebf\u7b97\u6cd5sweep line algorithm \u91cd\u65b0\u8ba1\u7b97O\uff08N\uff09\u4e2d\u7684\u5269\u4f59\u8bf7\u6c42\u7684\u5ea7\u4f4d\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53e6\u4e00\u4e2a\u89c2\u5bdf\u6765\u52a0\u5feb\u901f\u5ea6\uff1a\u8bf7\u6c42\u8986\u76d6\u7684\u552f\u4e00\u8303\u56f4\u7684\u6570\u91cf\u6700\u5927\u4e3a2 * Q\uff0c\u8fd9\u5c06\u4f7f\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684O\uff08Q2\uff09\u4e2d\u8fd0\u884c\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 \u8d2a\u5fc3 + \u7ebf\u6bb5\u6811 \u8ba9\u6211\u4eec\u5c1d\u8bd5\u52a0\u5feb\u91cd\u65b0\u8ba1\u7b97\u6bcf\u4e2a\u6b65\u9aa4\u53ef\u4ee5\u9884\u8ba2\u7684\u5ea7\u4f4d\u6570\u91cf\u7684\u7f13\u6162\u8fc7\u7a0b\u5bf9\u4e8e\u6bcf\u4e2a\u5ea7\u4f4d\uff0c\u8ba9\u6211\u4eec\u5c06\u5ea7\u4f4d\u7684\u4ef7\u503c\u8868\u793a\u4e3a\u8bd5\u56fe\u9884\u8ba2\u6b64\u5ea7\u4f4d\u7684\u5269\u4f59\u8bf7\u6c42\u6570\u91cf\u3002\u6bcf\u5f53\u5ea7\u4f4d\u7684\u4ef7\u503c\u964d\u81f31\u65f6\uff0c\u6211\u4eec\u4f1a\u589e\u52a0\u6211\u4eec\u53ef\u4ee5\u4e3a\u5305\u542b\u6b64\u5ea7\u4f4d\u9884\u8ba2\u7684\u76f8\u5e94\u8bf7\u6c42\u9884\u8ba2\u7684\u5ea7\u4f4d\u6570\u3002 \u7531\u4e8e\u8bf7\u6c42\u7531\u95f4\u9694\u8868\u793a\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u95f4\u9694\u6811\u6765\u652f\u6301\u5728\u6811\u7684\u521d\u59cb\u6784\u9020\u4e4b\u540e\u79fb\u9664\u95f4\u9694\u7684\u64cd\u4f5c\u3002\u533a\u95f4\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5b58\u50a8\u8986\u76d6\u5b83\u7684\u95f4\u9694\u96c6\uff0c\u4ee5\u53ca\u5176\u8303\u56f4\u5185\u4efb\u4f55\u5ea7\u4f4d\u7684\u6700\u5c0f\u503c\u3002\u6bcf\u5f53\u79fb\u9664\u64cd\u4f5c\u4f7f\u6700\u5c0f\u503c\u53d8\u4e3a1\u65f6\uff0c\u6211\u4eec\u6cbf\u6811\u5411\u4e0b\u8d70\uff0c\u627e\u5230\u6210\u4e3a\u4e00\u4e2a\u7684\u5ea7\u4f4d\uff0c\u7136\u540e\u5411\u4e0a\u8d70\u56de\u6811\uff0c\u627e\u51fa\u54ea\u4e2a\u95f4\u9694\u662f\u73b0\u5728\u8986\u76d6\u8be5\u5ea7\u4f4d\u7684\u552f\u4e00\u95f4\u9694\u3002\u6211\u4eec\u73b0\u5728\u5c06\u5ea7\u4f4d\u7684\u503c\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927\uff0c\u4ee5\u4fbf\u6211\u4eec\u4e0d\u518d\u5904\u7406\u5b83\u3002\u6bcf\u4e2a\u5ea7\u4f4d\u53ea\u53d1\u751f\u4e00\u6b21\uff0c\u603b\u644a\u8fd8\u6210\u672c\u4e3aO\uff08NlogN\uff09\u3002\u603b\u7684\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e00\u4e2a\u6052\u5b9a\u7684\u65f6\u95f4\u96c6\uff08\u6bd4\u5982\u4e00\u4e2ahashset\uff09\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u662fO\uff08Nlog\uff08Q + N\uff09\uff09\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u8d2a\u5fc3 + \u7ebf\u6bb5\u6811 1.\u7531\u4e8e\u7cfb\u7edf\u5728\u7b2cQ\u4e2a\u8ba2\u5355\u9884\u5b9a\u7684\u5e2d\u4f4d\u6570\u4e0d\u4f9d\u8d56\u4e8e\u524dQ-1\u4e2a\u8ba2\u5355\u7684\u6392\u5e8f\uff0c\u53ea\u53d6\u51b3\u4e8e\u54ea\u4e9b\u5ea7\u4f4d\u88ab\u5360\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u9006\u5e8f\u5904\u7406 2.\u53ef\u7528\u8d2a\u5fc3\u7b56\u7565\u627e\u51fa\u7b2cQ\u4e2a\u8ba2\u5355\uff0c\u5373\u7b2cQ\u4e2a\u8ba2\u5355\u76f8\u6bd4\u4e8e\u5176\u4ed6\u7684\u8ba2\u5355\uff08\u5373\u524d\u9762\u7684Q-1\u4e2a\u8ba2\u5355\uff09\u6ca1\u6709\u88ab\u524d\u9762\u8ba2\u5355\u8986\u76d6\u7684\u6700\u591a\u7684\u8ba2\u5355 3. \u89e3\u6cd5\u4e8c \u4e8c\u5206\u7b54\u6848\u6cd5 \u6700\u5c0f\u95ee\u9898\u6700\u5927\u5316 [todo] \u4e8c\u5206\u3002 \u91cd\u70b9\u5728\u4e8e\u5224\u65ad\u662f\u5426\u53ef\u884c\u9636\u6bb5\u3002 \u9996\u5148\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u9884\u5b9a\uff0c\u5b83\u4eec\u53ea\u6709\u4e24\u79cd\u6267\u884c\u987a\u5e8f\uff0ca\u5148b\u540e\uff0c\u6216b\u5148a\u540e\u3002 \u73b0\u5728\u5224\u65ad\u7684\u601d\u8def\u662f\uff0c \u9996\u5148\u6839\u636e\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u7b2c\u4e00\u5173\u952e\u5b57\u4e3a\u8d77\u59cb\u70b9\uff0c\u7b2c\u4e8c\u5173\u952e\u5b57\u4e3a\u2212 -\u2212\u7ec8\u6b62\u70b9\uff0c \u8981\u4f7f\u5f97\u8fd9\u4e9b\u9884\u5b9a\u5c3d\u53ef\u80fd\u6ee1\u8db3\u6700\u5c0f\u503ck\u7684\u9700\u6c42\uff0c\u6bcf\u6b21\u6c42\u5f97\u7b2ci \u4e2a\u533a\u95f4\u6ee1\u8db3\u9700\u6c42\u540e\uff0c\u6700\u540e\u4e00\u4e2a\u5ea7\u4f4d\u540e\u4e00\u4e2a\u5ea7\u4f4d\uff0c\u8bbe\u4e3aed \u5bf9\u4e8e\u4e24\u4e2a\u533a\u95f4\uff0c\u8fdb\u884c\u4ee5\u4e0b\u8ba8\u8bba\uff1a \u4e24\u4e2a\u533a\u95f4\u76f8\u79bb\uff0c\u65e0\u9700\u8981\u8fdb\u884c\u7279\u522b\u8ba8\u8bba\uff1b \u4e24\u4e2a\u533a\u95f4\u76f8\u4ea4\uff0c \u5982\u679c\u540e\u4e00\u4e2a\u533a\u95f4\u8d77\u59cb\u70b9\u5728ed \u4e4b\u540e\uff0c\u90a3\u4e48\u5219\u53ef\u4ee5\u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u8ba9\u540e\u8005\u5148\u6267\u884c\uff1b \u5982\u679c\u540e\u4e00\u4e2a\u533a\u95f4\u8d77\u59cb\u70b9\u5728ed\u4e4b\u524d\uff0c\u90a3\u4e48\u53ea\u80fd\u5148\u5c06\u540e\u8005\u8d77\u59cb\u70b9\u504f\u79fb\u5230ri+1\uff0c\u5426\u5219\u7b2ci \u4e2a\u533a\u95f4\u5c31\u6ee1\u8db3\u4e0d\u4e86\u4e86\uff1b \u5982\u679c\u524d\u8005\u5305\u542b\u4e86\u540e\u8005\uff0c\u90a3\u4e48\uff0c\u540e\u8005\u5fc5\u987b\u5148\u6267\u884c\uff0c\u56e0\u6b64\u5728\u8ba1\u7b97\u524d\u8005\u6709\u6548\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u9700\u8981\u8df3\u8fc7\u540e\u8005\uff1b \u6839\u636e\u4e0a\u8ff0\u89c4\u5219\uff0c\u53ef\u4ee5\u5728O(Q2)\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5224\u65ad\uff0c\u7b97\u6cd5\u603b\u590d\u6742\u5ea6\u4e3aO(Q2logN) \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u5bf9\u4e8e\u4e00\u4e2a booking \u6765\u8bf4\uff0c\u5982\u679c\u5b83\u653e\u5728\u6700\u540e\uff0c\u90a3\u4e48\u5b83\u80fd\u786e\u5b9a\u7684seat \u6570\u76ee\u4e00\u5b9a\u662f\u56fa\u5b9a\u7684\uff0c\u4e0e\u524d\u9762 booking \u7684\u987a\u5e8f\u65e0\u5173\u3002 \u540c\u65f6\u6211\u4eec \u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u4e00\u4e2a \u8d2a\u5fc3\u7684\u505a\u6cd5 \u4e00\u5b9a\u662f\u6b63\u786e\u7684: \u5012\u7740\u786e\u5b9abooking \u7684\u987a\u5e8f\uff0c\u6bcf\u6b21\u53d6\u80fdbooking \u5230\u7684seat \u6700\u591a\u7684\u53bb\u6389\uff0c\u7136\u540e\u5728\u5269\u4f59\u96c6\u5408\u4e2d\u5982\u6cd5\u70ae\u5236 // In the name of God #include <iostream> #include <algorithm> #include <fstream> #include <vector> #include <deque> #include <assert.h> #include <queue> #include <stack> #include <set> #include <map> #include <stdio.h> #include <string.h> #include <utility> #include <math.h> #include <bitset> #include <iomanip> #include <complex> using namespace std; #define rep(i, a, b) for (int i = (a), i##_end_ = (b); i < i##_end_; ++i) #define debug(...) fprintf(stderr, __VA_ARGS__) #define mp make_pair #define x first #define y second #define pb push_back #define SZ(x) (int((x).size())) #define ALL(x) (x).begin(), (x).end() template<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; } template<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; } template<typename T> inline bool smin(T &a, const T &b) { return a > b ? a = b : a; } template<typename T> inline bool smax(T &a, const T &b) { return a < b ? a = b : a; } typedef long long LL; const int N = (int) 1e6 + 6, mod = (int) 0; int n, q, xl[N], xr[N], mvl[N]; pair<int, int> sr[N]; int check(int k) { for (int j = 0; j < q; ++j) xl[j] = sr[j].first, xr[j] = -sr[j].second, mvl[j] = xl[j]; for (int j = 0; j < q; ++j) { int l = xl[j], r = xr[j]; int st = mvl[j]; int allowed_after = r; int cnt = 0; for (int i = j + 1; i < q; ++i) { if (xr[i] <= r) { if (xl[i] <= st) { st = max(st, xr[i]); } else { cnt += xl[i] - st; st = max(st, xr[i]); if (cnt >= k) { allowed_after = xl[i] - (cnt - k); break; } } } } if (cnt < k) { cnt += r - st; if (cnt < k) return 0; allowed_after = r - (cnt - k); } for (int i = j + 1; i < q; ++i) { if (xl[i] >= allowed_after) break; if (xr[i] > r) { mvl[i] = max(mvl[i], r); } } } return 1; } int main() { int tc; cin >> tc; for (int tt = 1; tt <= tc; ++tt) { cout << \"Case #\" << tt << \": \"; cin >> n >> q; for (int j = 0; j < q; ++j) { cin >> xl[j] >> xr[j], --xl[j]; sr[j] = mp(xl[j], -xr[j]); } sort(sr, sr + q); int bl = 0, br = n + 1; while (bl < br - 1) { int bm = bl + br >> 1; if (check(bm)) { bl = bm; } else { br = bm; } } cout << bl << '\\n'; } } Round C Wiggle Walk \u95ee\u9898\u63cf\u8ff0 \u95ee\u9898 Banny\u521a\u4e70\u4e86\u4e00\u53f0\u65b0\u7684\u53ef\u7f16\u7a0b\u673a\u5668\u4eba\u3002\u4e3a\u4e86\u6d4b\u8bd5\u4ed6\u7684\u7f16\u7801\u6280\u80fd\uff0c\u4ed6\u5c06\u673a\u5668\u4eba\u653e\u7f6e\u5728\u4e00\u4e2a\u6b63\u65b9\u5f62\u7f51\u683c\u4e2d\uff0c\u5176\u4e2dR\u884c\uff08\u4ece\u5317\u5230\u5357\u7f16\u53f7\u4e3a1\u5230R\uff09\u548cC\u5217\uff08\u4ece\u897f\u5230\u4e1c\u7f16\u53f7\u4e3a1\u5230C\uff09\u3002\u884cr\u548c\u5217c\u4e2d\u7684\u65b9\u5757\u8868\u793a\u4e3a\uff08r\uff0cc\uff09\u3002 \u6700\u521d\u673a\u5668\u4eba\u5728\u65b9\u5757\uff08SR\uff0cSC\uff09\u5f00\u59cb\u3002\u73ed\u5c3c\u5c06\u7ed9\u4e88\u673a\u5668\u4ebaN\u6307\u4ee4\u3002\u6bcf\u6761\u6307\u4ee4\u662fN\uff0cS\uff0cE\u6216W\u4e2d\u7684\u4e00\u6761\uff0c\u6307\u793a\u673a\u5668\u4eba\u5206\u522b\u5411\u5317\uff0c\u5411\u5357\uff0c\u5411\u4e1c\u6216\u5411\u897f\u79fb\u52a8\u4e00\u4e2a\u65b9\u683c\u3002 \u5982\u679c\u673a\u5668\u4eba\u79fb\u52a8\u5230\u4e4b\u524d\u6240\u5904\u7684\u65b9\u5757\uff0c\u673a\u5668\u4eba\u5c06\u7ee7\u7eed\u6cbf\u540c\u4e00\u65b9\u5411\u79fb\u52a8\uff0c\u76f4\u5230\u5b83\u5230\u8fbe\u4e4b\u524d\u672a\u66fe\u8fdb\u5165\u8fc7\u7684\u65b9\u5757\u3002 Banny\u6c38\u8fdc\u4e0d\u4f1a\u7ed9\u673a\u5668\u4eba\u4e00\u4e2a\u6307\u4ee4\uff0c\u4f7f\u5b83\u79fb\u51fa\u7f51\u683c\u3002 \u4f60\u53ef\u4ee5\u5e2e\u52a9Banny\u6309\u7167N\u6307\u4ee4\u786e\u5b9a\u673a\u5668\u4eba\u5c06\u5b8c\u6210\u54ea\u4e2a\u65b9\u683c\uff1f \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u91cf\uff0cT\u3002T\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\u3002\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4ee5\u5305\u542b\u4e94\u4e2a\u6574\u6570N\uff0cR\uff0cC\uff0cSR\u548cSC\uff0c\u6307\u4ee4\u6570\uff0c\u884c\u6570\uff0c\u5217\u6570\uff0c\u673a\u5668\u4eba\u7684\u8d77\u59cb\u884c\u548c\u8d77\u59cb\u5217\u7684\u884c\u5f00\u59cb\u3002 \u7136\u540e\uff0c\u53e6\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u5305\u542bN\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32;\u8fd9\u4e9b\u5b57\u7b26\u4e2d\u7684\u7b2ci\u4e2a\u662fBanny\u7ed9\u673a\u5668\u4eba\uff08N\uff0cS\uff0cE\u6216W\u4e2d\u7684\u4e00\u4e2a\uff0c\u5982\u4e0a\u6240\u8ff0\uff09\u7684\u7b2ci\u4e2a\u6307\u4ee4\u3002 \u4ea7\u91cf \u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\u5305\u542bCase #x\uff1ar c\uff0c\u5176\u4e2dx\u662f\u6d4b\u8bd5\u7528\u4f8b\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0cr\u662f\u673a\u5668\u4eba\u5b8c\u6210\u7684\u884c\uff0cc\u662f\u673a\u5668\u4eba\u5b8c\u6210\u7684\u5217\u3002 \u8303\u56f4 \u5185\u5b58\u9650\u5236\uff1a1GB\u3002 1\u2264T\u2264100\u3002 1\u2264R\u22645\u00d7104\u3002 1\u2264C\u22645\u00d7104\u3002 1\u2264SR\u2264R 1\u2264SC\u2264C \u8bf4\u660e\u4e0d\u4f1a\u5bfc\u81f4\u673a\u5668\u4eba\u79fb\u51fa\u7f51\u683c\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 \u65f6\u95f4\u9650\u5236\uff1a20\u79d2\u3002 1\u2264N\u2264100\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 \u65f6\u95f4\u9650\u5236\uff1a60\u79d2\u3002 1\u2264N\u22645\u00d7104\u3002 \u6837\u54c1 \u8f93\u5165 \u4ea7\u91cf Input 3 5 3 6 2 3 EEWNS 4 3 3 1 1 SESE 11 5 8 3 4 NEESSWWNESE \u6848\u4f8b\uff031\uff1a3 2 \u6848\u4f8b\uff032\uff1a3 3 \u6848\u4f8b\uff033\uff1a3 7 \u6837\u672c\u6848\u4f8b\uff031\u5bf9\u5e94\u4e8e\u5de6\u4e0a\u56fe\uff0c\u6837\u672c\u6848\u4f8b\uff032\u5bf9\u5e94\u4e8e\u53f3\u4e0a\u56fe\uff0c\u6837\u672c\u6848\u4f8b\uff033\u5bf9\u5e94\u4e8e\u4e0b\u56fe\u3002\u5728\u6bcf\u4e2a\u56fe\u4e2d\uff0c\u9ec4\u8272\u65b9\u5757\u662f\u673a\u5668\u4eba\u5f00\u59cb\u7684\u65b9\u683c\uff0c\u800c\u7eff\u8272\u65b9\u5757\u662f\u673a\u5668\u4eba\u5b8c\u6210\u7684\u65b9\u683c\u3002 \u89e3\u6cd5 bruce \u6a21\u62df\u6cd5 O(n^2) \"\"\" small dataset \"\"\" def getPos(N, R, C, SR, SC, instructions): iset = {(SR, SC)} for c in instructions: if c == 'N': while((SR - 1, SC) in iset): SR -= 1 SR -= 1 elif c == 'S': while((SR + 1, SC) in iset): SR += 1 SR += 1 elif c == 'W': while((SR, SC - 1) in iset): SC -= 1 SC -= 1 elif c == 'E': while((SR, SC + 1) in iset): SC += 1 SC += 1 iset = iset | {(SR, SC)} return SR, SC T = int(input().strip()) for i in range(1, T + 1): N, R, C, SR, SC = map(int, input().strip().split()) instructions = map(str, input()) ans1, ans2 = getPos(N, R,W C, SR, SC, instructions) print(\"Case #{}: {} {}\".format(i, ans1, ans2)) \u95f4\u9694\u96c6 O(nlogn) \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 \u4eba\u4eec\u53ef\u80fd\u8bd5\u56fe\u7b80\u5355\u5730\u6a21\u62df\u95ee\u9898\u9648\u8ff0\u4e2d\u63d0\u5230\u7684\u5185\u5bb9\uff0c\u5373\u7ee7\u7eed\u6cbf\u6307\u5b9a\u65b9\u5411\u79fb\u52a8\u673a\u5668\u4eba\u76f4\u5230\u5b83\u5230\u8fbe\u672a\u8bbf\u95ee\u7684\u65b9\u683c\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c06\u5177\u6709O\uff08N2\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5c3d\u7ba1\u5bf9\u4e8e\u6d4b\u8bd5\u96c61\u6765\u8bf4\u8db3\u591f\u597d\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 \u4e0a\u8ff0\u65b9\u6cd5\u7684\u95ee\u9898\u5728\u4e8e\u5b83\u8bbf\u95ee\u4e86\u8bb8\u591a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u65b9\u5757\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u65b9\u5757\u5c06\u662f\u6240\u6709\u5148\u524d\u8bbf\u95ee\u8fc7\u7684\u65b9\u5757\uff08\u8003\u8651\u8f93\u5165\uff0c\u5728\u6574\u4e2a\u533a\u57df\u4e2d\u7ed9\u51fa\u4ea4\u66ff\u7684E\u548cW\uff09\u3002\u5982\u679c\u6211\u4eec\u4ee5\u67d0\u79cd\u65b9\u5f0f\u66f4\u5feb\u5730\u5230\u8fbe\u6bcf\u4e2a\u6307\u4ee4\u7684\u76ee\u6807\u65b9\u5757\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u964d\u4f4e\u590d\u6742\u6027\u3002 Let's say the robot is in some row r and received an instruction W. Now, all the already visited squares (if any) it will pass before reaching an unvisited square have to form a contiguous interval in row r. This suggests that we may use intervals to represent all the visited squares in the same row. \u5047\u8bbe\u673a\u5668\u4eba\u5728\u67d0\u884cr\u4e2d\u5e76\u4e14\u63a5\u6536\u5230\u6307\u4ee4W.\u73b0\u5728\uff0c\u5728\u5230\u8fbe\u672a\u8bbf\u95ee\u7684\u6b63\u65b9\u5f62\u4e4b\u524d\u5b83\u5c06\u901a\u8fc7\u7684\u6240\u6709\u5df2\u7ecf\u8bbf\u95ee\u7684\u6b63\u65b9\u5f62\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u5fc5\u987b\u5728\u884cr\u4e2d\u5f62\u6210\u8fde\u7eed\u7684\u95f4\u9694\u3002\u8fd9\u8868\u660e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u533a\u95f4\u6765\u8868\u793a\u540c\u4e00\u884c\u4e2d\u7684\u6240\u6709\u8bbf\u95ee\u8fc7\u7684\u65b9\u5757\u3002 \u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u8003\u8651\u6211\u4eec\u4e3a\u7f51\u683c\u7684\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u90fd\u6709\u4e00\u7ec4\u95f4\u9694\u6765\u8868\u793a\u5728\u8be5\u7279\u5b9a\u884c\u6216\u5217\u4e2d\u8bbf\u95ee\u4e86\u54ea\u4e9b\u5355\u5143\u683c\uff0c\u8ba9\u6211\u4eec\u79f0\u5b83\u4eec\u4e3a\u95f4\u9694\u96c6\u3002\u6700\u521d\uff0c\u9664\u4e86\u5bf9\u5e94\u4e8e\u5177\u6709\u5355\u4e2a\u95f4\u9694\uff08SC\uff0cSC\uff09\u7684\u884cSR\u7684\u96c6\u5408\u4ee5\u53ca\u5bf9\u5e94\u4e8e\u5177\u6709\u5355\u4e2a\u95f4\u9694\uff08SR\uff0cSR\uff09\u7684\u5217SC\u7684\u96c6\u5408\u4e4b\u5916\uff0c\u6240\u6709\u8fd9\u4e9b\u96c6\u5408\u90fd\u662f\u7a7a\u7684\u3002 \u73b0\u5728\uff0c\u4f7f\u7528\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8ba9\u6211\u4eec\u5c1d\u8bd5\u627e\u5230\u673a\u5668\u4eba\u7684\u76ee\u6807\u65b9\u5757\u3002\u5047\u8bbe\u5b83\u5728\u65b9\u5f62\uff08r\uff0cc\uff09\u5e76\u5f97\u5230\u6307\u4ee4W.\u4e3a\u6b64\uff0c\u9996\u5148\u6211\u4eec\u641c\u7d22\u5bf9\u5e94\u4e8e\u884cr\u7684\u533a\u95f4\u96c6\u3002\u6211\u4eec\u5c06\u5c1d\u8bd5\u627e\u51fa\u6b64\u96c6\u5408\u4e2d\u7684\u54ea\u4e2a\u533a\u95f4\u5305\u542bc\uff08\u5fc5\u987b\u786e\u5b9a\u4e3a\u4e00\u4e2a\uff01\uff09\u3002\u4e00\u65e6\u6211\u4eec\u627e\u5230\u5b83\uff0c\u6211\u4eec\u7acb\u5373\u77e5\u9053\u4ec0\u4e48\u662f\u673a\u5668\u4eba\u7684\u65b0\u4f4d\u7f6e\uff01\u5f88\u660e\u663e\uff0c\u540c\u6837\u7684\u65b9\u6cd5\u4e5f\u9002\u7528\u4e8e\u6240\u6709\u5176\u4ed6\u65b9\u5411\u3002 \u73b0\u5728\u5269\u4e0b\u7684\u5c31\u662f\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\u6765\u9002\u5f53\u5730\u66f4\u65b0\u6211\u4eec\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4fbf\u5305\u62ec\u65b0\u8bbf\u95ee\u7684\u5e7f\u573a\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u5728\u4e24\u8005\u4e2d\u627e\u5230\u8be5\u65b9\u5757\u7684\u76f8\u90bb\u95f4\u9694\uff0c\u76f8\u5e94\u7684\u5217\u95f4\u9694\u96c6\u548c\u76f8\u5e94\u7684\u884c\u95f4\u9694\u96c6\u6765\u4ee5\u975e\u5e38\u6807\u51c6\u7684\u65b9\u5f0f\u5b8c\u6210\uff0c\u7136\u540e\u901a\u8fc7\u6269\u5c55\u5176\u4e2d\u4e00\u4e2a\u95f4\u9694\u6216\u5408\u5e76\u5b83\u4eec\u6216\u6dfb\u52a0\u5b83\u4eec\u6765\u66f4\u65b0\u5b83\u4eec\u4e00\u4e2a\u65b0\u76841\u957f\u5ea6\u95f4\u9694\u3002 \u7531\u4e8e\u6211\u4eec\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\u6700\u591a\u6dfb\u52a0\u4e00\u4e2a\u95f4\u9694\uff0c\u56e0\u6b64\u95f4\u9694\u7684\u6570\u91cf\u662fO\uff08N\uff09\u3002\u7531\u4e8e\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u5173\u4e8e\u67e5\u627e/\u63d2\u5165/\u5220\u9664\u5355\u4e2a\u95f4\u9694\uff0c\u56e0\u6b64\u6240\u6709\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u53ef\u4ee5\u5728O\uff08log\uff08N\uff09\uff09\u65f6\u95f4\u5185\u8f7b\u677e\u5904\u7406\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u6240\u6709\u8fd0\u884c\u65f6\u95f4\u90fd\u662fO\uff08Nlog\uff08N\uff09\uff09\u3002\u4f7f\u7528\u54c8\u5e0c\u8868\u4e5f\u5b58\u5728\u9488\u5bf9\u6b64\u95ee\u9898\u7684O\uff08N\uff09\u89e3\u51b3\u65b9\u6848\u3002\u5b83\u7559\u7ed9\u8bfb\u8005\u7ec3\u4e60\u3002 Round D X or what \u5f02\u6216\u95ee\u9898 \u95ee\u9898\u63cf\u8ff0 Steven has an array of N non-negative integers. The i-th integer (indexed starting from 0) in the array is Ai. Steven really likes subintervals of A that are xor-even. Formally, a subinterval of A is a pair of indices (L, R), denoting the elements AL, AL+1, ..., AR-1, AR. The xor-sum of this subinterval is AL xor AL+1 xor ... xor AR-1 xor AR, where xor is the bitwise exclusive or. A subinterval is xor-even if its xor-sum has an even number of set bits in its binary representation. Steven would like to make Q modifications to the array. The i-th modification changes the Pi-th (indexed from 0) element to Vi. Steven would like to know, what is the size of the xor-even subinterval of A with the most elements after each modification? Input The first line of the input gives the number of test cases, T. T test cases follow. Each test case starts with a line containing two integers N and Q, denoting the number of elements in Steven's array and the number of modifications, respectively. The second line contains N integers. The i-th of them gives Ai indicating the i-th integer in Steven's array. Then, Q lines follow, describing the modifications. The i-th line contains Pi and Vi, The i-th modification changes the Pi-th element to Vi. indicating that the i-th modification changes the Pi-th (indexed from 0) element to Vi. Output For each test case, output one line containing Case #x: y_1 y_2 ... y_Q, where x is the test case number (starting from 1) and y_i is the number of elements in the largest xor-even subinterval of A after the i-th modification. If there are no xor-even subintervals, then output 0. Limits Time limit: 40 seconds per test set. Memory limit: 1GB. 1 \u2264 T \u2264 100. 0 \u2264 Ai < 1024. 0 \u2264 Pi < N. 0 \u2264 Vi < 1024. Test set 1 (Visible) 1 \u2264 N \u2264 100. 1 \u2264 Q \u2264 100. Test set 2 (Hidden) 1 \u2264 N \u2264 105. 1 \u2264 Q \u2264 105. Sample Input Output 2 4 3 10 21 3 7 1 13 0 32 2 22 5 1 14 1 15 20 26 4 26 Case #1: 4 3 4 Case #2: 4 In Sample Case 1, N = 4 and Q = 3. After the 1st modification, A is [10, 13, 3, 7]. The subinterval (0, 3) has xor-sum 10 xor 13 xor 3 xor 7 = 3. In binary, the xor-sum is 112, which has an even number of 1 bits, so the subinterval is xor-even. This is the largest subinterval possible, so the answer is 4. After the 2nd modification, A is [32, 13, 3, 7]. The largest xor-even subinterval is (0, 2), which has xor-sum 32 xor 13 xor 3 = 46. In binary, this is 1011102. After the 3rd modification, A is [32, 13, 22, 7]. The largest xor-even subinterval is (0, 3) again, which has xor-sum 32 xor 13 xor 22 xor 7 = 60. In binary, this is 1111002. In Sample Case 2, N = 5 and Q = 1. After the 1st modification, A is [14, 1, 15, 20, 26]. The largest xor-even subinterval is (1, 4), which has xor sum 1 xor 15 xor 20 xor 26 = 0. In binary, this is 02. \u53f2\u8482\u6587\u6709\u4e00\u7ec4N\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u7ec4\u4e2d\u7684\u7b2ci\u4e2a\u6574\u6570\uff08\u4ece0\u5f00\u59cb\u7d22\u5f15\uff09\u662fAi\u3002 \u53f2\u8482\u6587\u771f\u7684\u5f88\u559c\u6b22A\u7684\u5b50\u533a\u95f4\u3002\u5f62\u5f0f\u4e0a\uff0cA\u7684\u5b50\u533a\u95f4\u662f\u4e00\u5bf9\u7d22\u5f15\uff08L\uff0cR\uff09\uff0c\u8868\u793a\u5143\u7d20AL\uff0cAL + 1\uff0c...\uff0cAR-1\uff0cAR\u3002\u8be5\u5b50\u533a\u95f4\u7684xor-sum\u662fAL xor AL + 1 xor ... xor AR-1 xor AR\uff0c\u5176\u4e2dxor\u662f\u6309\u4f4d\u5f02\u6216\u3002 \u5b50\u533a\u95f4\u7684xor-even\u8868\u793a\u5b50\u533a\u95f4xor-sum\u5728\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u5177\u6709\u5076\u6570\u4e2a1\u3002 \u53f2\u8482\u6587\u60f3\u5bf9\u9635\u5217\u8fdb\u884cQ\u4fee\u6539\u3002\u7b2ci\u6b21\u4fee\u6539\u5c06Pi-th\uff08\u7d22\u5f15\u81ea0\uff09\u5143\u7d20\u66f4\u6539\u4e3aVi\u3002 Steven\u60f3\u77e5\u9053\uff0c\u6bcf\u6b21\u4fee\u6539\u540e\uff0cA\u7684xor-even\u5b50\u533a\u95f4\u7684\u6700\u5927\u8303\u56f4\u5927\u5c0f\u662f\u591a\u5c11\uff1f \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u91cf\uff0cT\u3002T\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\u3002 \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4ee5\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u548cQ\u7684\u884c\u5f00\u59cb\uff0c\u5206\u522b\u8868\u793aSteven\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6570\u548c\u4fee\u6539\u6570\u3002 \u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6574\u6570\u3002\u5176\u4e2d\u7684\u7b2ci\u4e2a\u7ed9\u51faAi\u8868\u793aSteven\u9635\u5217\u4e2d\u7684\u7b2ci\u4e2a\u6574\u6570\u3002 \u7136\u540e\uff0cQ\u884c\u8ddf\u968f\uff0c\u63cf\u8ff0\u4fee\u6539\u3002\u7b2ci\u884c\u5305\u542bPi\u548cVi\uff0c\u7b2ci\u6b21\u4fee\u6539\u5c06\u7b2cPi\u4e2a\u5143\u7d20\u66f4\u6539\u4e3aVi\u3002\u6307\u793a\u7b2ci\u4e2a\u4fee\u6539\u5c06Pi-th\uff08\u4ece0\u7d22\u5f15\uff09\u5143\u7d20\u6539\u53d8\u4e3aVi\u3002 \u4ea7\u91cf \u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\u5305\u542bCase #x\uff1ay_1 y_2 ... y_Q\uff0c\u5176\u4e2dx\u662f\u6d4b\u8bd5\u7528\u4f8b\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0cy_i\u662fA\u4e4b\u540e\u7684\u6700\u5927xor-even\u5b50\u533a\u95f4\u4e2d\u7684\u5143\u7d20\u6570\u3002\u7b2ci\u6b21\u4fee\u6539\u3002\u5982\u679c\u6ca1\u6709xor-even\u5b50\u533a\u95f4\uff0c\u5219\u8f93\u51fa0\u3002 \u8303\u56f4 \u65f6\u95f4\u9650\u5236\uff1a\u6bcf\u4e2a\u6d4b\u8bd5\u96c640\u79d2\u3002 \u5185\u5b58\u9650\u5236\uff1a1GB\u3002 1\u2264T\u2264100\u3002 0\u2264Ai<1024\u3002 0\u2264Pi<N\u3002 0\u2264Vi<1024\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 1\u2264N\u2264100\u3002 1\u2264Q\u2264100\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 1\u2264N\u2264105\u3002 1\u2264Q\u2264105\u3002 \u6837\u54c1 \u8f93\u5165 \u4ea7\u91cf 2 4 3 10 21 3 7 1 13 0 32 2 22 5 1 14 1 15 20 26 4 26 \u6848\u4f8b\uff031\uff1a4 3 4 \u6848\u4f8b\uff032\uff1a4 \u5728\u6837\u672c\u6848\u4f8b1\u4e2d\uff0cN = 4\u4e14Q = 3\u3002 \u5728\u7b2c\u4e00\u6b21\u4fee\u6539\u540e\uff0cA\u662f[10,13,3,7]\u3002\u5b50\u533a\u95f4\uff080,3\uff09\u5177\u6709xor-sum 10 x\u621613 xor 3 xor 7 = 3.\u5728\u4e8c\u8fdb\u5236\u4e2d\uff0cxor-sum\u4e3a112\uff0c\u5176\u5076\u6570\u4e3a1\u4f4d\uff0c\u56e0\u6b64\u5b50\u533a\u95f4\u4e3axor-even\u3002\u8fd9\u662f\u6700\u5927\u7684\u5b50\u533a\u95f4\uff0c\u6240\u4ee5\u7b54\u6848\u662f4\u3002 \u5728\u7b2c\u4e8c\u6b21\u4fee\u6539\u540e\uff0cA\u662f[32,13,3,7]\u3002\u6700\u5927\u7684xor-even\u5b50\u533a\u95f4\u662f\uff080,2\uff09\uff0c\u5176xor-sum\u4e3a32 xor 13 xor 3 = 46.\u5728\u4e8c\u8fdb\u5236\u4e2d\uff0c\u8fd9\u662f1011102\u3002 \u5728\u7b2c3\u6b21\u4fee\u6539\u540e\uff0cA\u662f[32,13,22,7]\u3002\u6700\u5927\u7684xor-even\u5b50\u533a\u95f4\u518d\u6b21\u4e3a\uff080,3\uff09\uff0c\u5176xor-sum\u4e3a32 xor 13 xor 22 xor 7 = 60.\u4e8c\u8fdb\u5236\u4e2d\uff0c\u8fd9\u662f1111002\u3002 \u5728\u6837\u672c\u60c5\u51b52\u4e2d\uff0cN = 5\u4e14Q = 1.\u5728\u7b2c\u4e00\u6b21\u4fee\u6539\u4e4b\u540e\uff0cA\u662f[14,1,15,20,26]\u3002\u6700\u5927\u7684xor-even\u5b50\u533a\u95f4\u662f\uff081,4\uff09\uff0c\u5176xor\u548c1 x\u621615 x\u621620 xor 26 = 0.\u5728\u4e8c\u8fdb\u5236\u4e2d\uff0c\u8fd9\u662f02\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5229\u7528\u5f02\u6216\u7684\u6027\u8d28 + \u9010\u5143\u7d20 xor \u5c0f\u6570\u636e\u96c6pass # \u6c42\u4e8c\u8fdb\u52361\u7684\u4e2a\u6570 O(c) def _count1(n): c = 0 while n: n &= (n - 1) c += 1 return c # \u4e8c\u8fdb\u5236\u6570\u4e2d\u76841\u7684\u4e2a\u6570\u7684\u5947\u5076\u6027: \u5982\u679c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e2d\u76841\u7684\u4e2a\u6570\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u8fd4\u56de1\uff1b\u5982\u679c\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u8fd4\u56de0\u3002 # k+y-(x-k)=2*k+y-x def get_numbers(A, Ch): # \u4e8c\u8fdb\u5236\u4e2a\u6570\u6570\u7ec4 # Bi = [] # for i, num in enumerate(A): # # \u5076\u6570\u4f4d\u4e3a\u6b63 \u5947\u6570\u4f4d\u4f4d\u8d1f # Bi.append(_count1(num) if i & 1 == 0 else -_count1(num)) forward = [0] for i, num in enumerate(A): forward.append(forward[-1] + _count1(num) * (1 if i & 1 == 0 else -1)) ans = [] for i, (Pi, Vi) in enumerate(Ch): ori = forward[Pi + 1] - forward[Pi] diff = _count1(Vi) * (1 if Pi & 1 == 0 else -1) - ori for j in range(Pi + 1, len(forward)): forward[j] += diff # \u8ba1\u7b97\u7b2c\u4e00\u4e2a\u5947\u6570 \u7b2c\u4e00\u4e2a\u5076\u6570 \u6700\u540e\u4e00\u4e2a\u5947\u6570 \u6700\u540e\u4e00\u4e2a\u5076\u6570 first_odd = -1 first_even = 0 last_odd = -1 last_even = -1 for j in range(len(forward)): if forward[j] & 1 == 1: first_odd = j break # if forward[j] & 1 == 0 and first_even == -1: # first_even = j # if first_odd != -1 and first_even != -1: # break for j in range(len(forward) - 1, -1, -1): if forward[j] & 1 == 1 and last_odd == -1: last_odd = j if forward[j] & 1 == 0 and last_even == -1: last_even = j if last_odd != -1 and last_even != -1: break print((first_even, first_odd, last_even, last_odd)) temp = max(last_odd - first_odd, last_even - first_even) temp = temp if temp > 0 else 0 ans.append(str(temp)) return ans T = int(input().strip()) for i in range(1, T + 1): N, Q = map(int, input().strip().split()) A = list(map(int, input().strip().split())) Ch = [] for _ in range(Q): fix = tuple(map(int, input().strip().split())) Ch.append(fix) print(\"Case #{}: \".format(i) + \" \".join(get_numbers(A, Ch))) \u89e3\u6cd5\u4e8c \u5229\u7528set\u7684\u503c\u6709\u5e8f\u6027 + \u5947\u6570\u76f8\u51cf\u4e3a\u5076\u6570 set\u6309\u503c\u6709\u5e8f #include <cstdio> #include <cstring> #include <algorithm> #include <iostream> #include <set> using namespace std; const int maxn = 1e5 + 5; int N, Q; int a[maxn]; set<int> s; int main(){ int T; int cas = 0; cin >> T; while(T--){ printf(\"Case #%d:\", ++cas); cin >> N >> Q; s.clear(); for(int i = 0;i < N;i++){ scanf(\"%d\", a + i); if(__builtin_popcount(a[i]) & 1){ s.insert(i); } } for(int i = 0;i < Q;i++){ int p, v; scanf(\"%d%d\", &p, &v); if(__builtin_popcount(v) & 1){ s.insert(p); }else{ s.erase(p); } if(s.size() & 1){ int ans = min(*s.begin() + 1, N - *s.rbegin()); printf(\" %d\", N - ans); }else{ printf(\" %d\", N); } } puts(\"\"); } return 0; } Round G Book Reading \u9898\u76ee\u63cf\u8ff0 Supervin is a librarian handling an ancient book with N pages, numbered from 1 to N . Since the book is too old, unfortunately M pages are torn out: page number P1 , P2 , ..., PM . Today, there are Q lazy readers who are interested in reading the ancient book. Since they are lazy, each reader will not necessarily read all the pages. Instead, the i-th reader will only read the pages that are numbered multiples of Ri and not torn out. Supervin would like to know the sum of the number of pages read by each reader. Input The first line of the input gives the number of test cases, T . T test cases follow. Each test case begins with a line containing the three integers N , M , and Q , the number of pages in the book, the number of torn out pages in the book, and the number of readers, respectively. The second line contains M integers, the i-th of which is Pi . The third line contains Q integers, the i-th of which is Ri . Output For each test case, output one line containing Case #x: y , where x is the test case number (starting from 1) and y is the total number of pages that will be read by all readers. Limits Time limit: 40 seconds per test set. Memory limit: 1GB. 1 \u2264 T \u2264 100. 1 \u2264 P1 < P2 < ... < PM \u2264 N . 1 \u2264 Ri \u2264 N , for all i. Test set 1 (Visible) 1 \u2264 M \u2264 N \u2264 1000. 1 \u2264 Q \u2264 1000. Test set 2 (Hidden) 1 \u2264 M \u2264 N \u2264 105. 1 \u2264 Q \u2264 105. Sample Input Output 3 11 1 2 8 2 3 11 11 11 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 11 1000 6 1 4 8 15 16 23 42 1 Case #1: 7 Case #2: 0 Case #3: 994 In sample case #1, the first reader will read the pages numbered 2, 4, 6, and 10. Note that the page numbered 8 will not be read since it is torn out. The second reader will read the pages numbered 3, 6, and 9. Therefore, the total number of pages that will be read by all readers is 4 + 3 = 7. In sample case #2, all pages are torn out so all readers will read 0 pages. In sample case #3, the first reader will read all the pages other than the six given pages. \u89e3\u6cd5 \u89e3\u6cd5\u4e00 T = int(input().strip()) for i in range(1, T + 1): N, M, Q = map(int, input().strip().split()) torns = set(map(int, input().strip().split())) persons = map(int, input().strip().split()) if len(torns) == N: print(\"Case #{}: {}\".format(i, 0)) continue res = 0 # key: \u901a\u8fc7\u5927\u6570\u636e\u96c6\u7684\u5173\u952e\u662f\u52a0\u4e0a\u8bb0\u5fc6\u5316 : C++\u76f4\u63a5\u8fc7 momo = dict() for p in persons: if p in momo: res += momo[p] else: temp = sum([1 if i * p not in torns else 0 for i in range(1, N // p + 1) ]) momo[p] = temp res += momo[p] print(\"Case #{}: {}\".format(i, res)) \u89e3\u6cd5\u4e8c KickStart 2018 Round A Even Digits \u5076\u6570 Determine the minimum number of button presses to make with no odd digits. a button press can increase the number by 1 or decrease the number by 1 EXamples 42=>0(42 has no odd digits) 11=>3(11-3=8) 1=>1(1-1=00r1+1=2) 2018=>2(2018+2=2020 Limits o Small dataset:1\u2264N\u2264105 o Large dataset:1sN$106 Round C 74 Planet Distance \u95ee\u9898\u63cf\u8ff0 There are n planets and N tubes through which you can travel from one planet toanother. The tubes are bidirectional, and no two tubes connect the same pair ofplanets. You can travel from any planet to any other planet using tubes. There exists exactly one cycle in the universe Your task is to find the minimum distance(in terms of the number of vacuumtubes)between each planet and a planet that is part of the cycle. Planets that are part of the cycle are assumed to be at distance 0 \u6709n\u4e2a\u884c\u661f\u548cN\u4e2a\u7ba1\u9053\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u4ece\u4e00\u4e2a\u884c\u661f\u5230\u53e6\u4e00\u4e2a\u884c\u661f\u3002\u8fd9\u4e9b\u7ba1\u9053\u662f\u53cc\u5411\u7684\uff0c\u6ca1\u6709\u4e24\u4e2a\u7ba1\u9053\u8fde\u63a5\u540c\u4e00\u884c\u661f\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u7ba1\u9053\u4ece\u4efb\u4f55\u884c\u661f\u5230\u4efb\u4f55\u5176\u4ed6\u884c\u661f\u3002 \u5b87\u5b99\u4e2d\u5b58\u5728\u4e00\u4e2a\u5faa\u73af \u60a8\u7684\u4efb\u52a1\u662f\u627e\u5230\u6bcf\u4e2a\u884c\u661f\u4e0e\u4f5c\u4e3a\u73af\u7684\u884c\u661f\u4e4b\u95f4\u7684\u6700\u5c0f\u8ddd\u79bb\uff08\u5c31\u771f\u7a7a\u7ba1\u7684\u6570\u91cf\u800c\u8a00\uff09\u3002\u4f5c\u4e3a\u73af\u4e00\u90e8\u5206\u7684\u884c\u661f\u88ab\u5047\u5b9a\u4e3a\u8ddd\u79bb0 \u89e3\u6cd5 1.\u65e0\u5411\u56fe\u62d3\u6251\u6392\u5e8f\u627e\u5230\u8fd9\u4e2a\u73af 2.\u4ece\u8fd9\u4e2a\u73af\u51fa\u53d1BFS\u627e\u5230\u8ddd\u79bb import queue class Graph: def __init__(self, N): \"\"\" \u65e0\u5411\u56fe\u7684\u7c7b\u62d3\u6251\u6392\u5e8f V: \u9876\u70b9\u6570 node_list: \u90bb\u63a5\u8868 que: \u5ea6\u4e3a1\u7684\u9876\u70b9\u7684\u96c6\u5408 degree: \u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u7684\u5ea6 \"\"\" self.V = N self.adj_list = [[] for _ in range(N)] self.que = queue.Queue() self.degree = [0] * N self.visited = set() self.not_visited = set() def addEdge(self, s, t): self.adj_list[s].append(t) self.adj_list[t].append(s) self.degree[s] += 1 self.degree[t] += 1 # O(n + e) def topological_sort(self): # 1.\u5c06\u6240\u6709\u5165\u5ea6\u4e3a1\u7684\u70b9\u5165\u961f for i in range(self.V): if self.degree[i] == 1: self.que.put(i) # 2.\u8ba1\u6570\uff0c\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u8f93\u51fa\u7684\u9876\u70b9\u6570 count = 0 self.visited = set() while not self.que.empty(): v = self.que.get() self.visited.add(v) count += 1 # 2.1 \u5c06\u6240\u6709v\u6307\u5411\u7684\u9876\u70b9\u5ea6\u51cf\u4e00\uff0c\u540c\u65f6\u628a\u5ea6\u4e3a1\u7684\u70b9\u5165\u961f\u5217 for adj_v in self.adj_list[v]: self.degree[adj_v] -= 1 if self.degree[adj_v] == 1: self.que.put(adj_v) # 3.\u672a\u6d4f\u89c8\u8fc7\u7684\u7ed3\u70b9\u662f\u73af\u4e2d\u7ed3\u70b9 self.not_visited = set(range(self.V)) - self.visited # 4.\u5982\u679c\u6ca1\u6709\u5168\u90e8\u8f93\u51fa\u9876\u70b9\uff0c\u4ee3\u8868\u56fe\u4e2d\u6709\u73af\u8def if count < self.V: return False else: return True # O(n + e) def bfs(g, cycle_set, ans): que = queue.Queue() for v in cycle_set: que.put((v, 0)) while not que.empty(): v, dist = que.get() for adj_v in g.adj_list[v]: if ans[adj_v] != 0 or adj_v in cycle_set: continue ans[adj_v] = dist + 1 que.put((adj_v, ans[adj_v])) def solve(N, paths): # 1.\u6784\u5efa\u56fe\u548c\u5ea6\u5b57\u5178 \u4ee51\u5f00\u59cb g = Graph(N) for s, t in paths: g.addEdge(s - 1, t - 1) # 2.\u62d3\u6251\u6392\u5e8f + bfs ans = [0] * N if not g.topological_sort(): cycle_set = g.not_visited bfs(g, cycle_set, ans) return ans path = 'A-large-practice.in' fw = open('result_a_samll.out', 'w') with open(path, 'r') as f: T = int(f.readline().strip()) for i in range(1, T + 1): N = int(f.readline().strip()) paths = [] for _ in range(N): paths.append(map(int, f.readline().strip().split())) ans = solve(N, paths) print(\"Case #{}: {}\".format(i, ans)) fw.close() #include <iostream> #include <vector> #include <queue> #define MAX_N 1005 using namespace std; int main() { int T; cin >> T; for (int tc = 1; tc <= T; tc++){ int N; cin >> N; // 1.\u6784\u5efa\u56fe\uff08\u90bb\u63a5\u8868\uff09 vector<int> G[MAX_N]; for (int i = 0; i < N; i++){ int x, y; cin >> x >> y; G[x].push_back(y); G[y].push_back(x); } // 2.\u8ba1\u7b97\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5ea6 queue<int> q; vector<int> degree(N + 1); for(int i = 1; i <= N; i++){ degree[i] = G[i].size(); if (degree[i] == 1){ q.push(i); } } // 3.\u62d3\u6251\u6392\u5e8f vector<int> dis(N + 1); while (! q.empty()){ int v = q.front(); q.pop(); dis[v] = -1; for(int i = 0; i < G[v].size(); i++){ int adj_v = G[v][i]; degree[adj_v]--; if (degree[adj_v] == 1){ q.push(adj_v); } } } // 4.\u628a\u73af\u4e2d\u7ed3\u70b9\u653e\u5165\u961f\u5217 for (int i = 1; i <= N; i++){ if (dis[i] == 0){ q.push(i); } } // 5.BFS while (! q.empty()) { int v = q.front(); q.pop(); for (int i = 0; i < G[v].size(); i++) { int adj_v = G[v][i]; if (dis[adj_v] == -1) { dis[adj_v] = dis[v] + 1; q.push(adj_v); } } } cout << \"Case #\" << tc << \": \"; for (int i = 1; i <= N; i++){ cout << dis[i] << \" \"; } cout << endl; } return 0; } Kickstart Alarm \u95ee\u9898\u63cf\u8ff0 Use a Parameter Array A,, A2,..., An to compute an Alarm Array P,, P2,.,PK P: is just the summation of the i-th exponential-power of all the contiguous subarrays of the Parameter Array. The i-th exponential-power of subarray Aj, Aj+1 \u2026, A_h is defined as Our task is to calculate(P, +P,+.+Pk) modulo 1000000007 \u89e3\u6cd5 \u5feb\u901f\u5e42 + \u8d39\u9a6c\u5c0f\u5b9a\u7406 #include <iostream> #include <math.h> #define MAX_N 1000000 using namespace std; const long long MOD = 1000000007; long long fast_pow(long long x, long long n, long long MOD){ // \u8ba1\u7b97 x ** n O(log n) long long ans = 1; x = x % MOD; while (n > 0){ if (n & 1){ ans = ans * x % MOD; } n = n / 2; x = x * x % MOD; } return ans; } int main(){ long long A[MAX_N + 2]; int tcase; cin >> tcase; for (int tc = 1; tc <= tcase; tc++){ long long N, K, x, y, C, D, E1, E2, F; cin >> N >> K >> x >> y >> C >> D >> E1 >> E2 >> F; A[1] = (x + y) % F; for (int i = 2; i <= N; i++){ int x_t = x, y_t = y; x = (C * x_t + D * y_t + E1) % F; y = (D * x_t + C * y_t + E2) % F; A[i] = (x + y) % F; } long long result = 0; long long last_sum = 0; for(int i = 1; i <= N; i++){ if (i == 1){ last_sum += K; } else{ // \u7b49\u6bd4\u6570\u5217 \u5feb\u901f\u5e42 + \u8d39\u9a6c\u5c0f\u5b9a\u7406 last_sum += i * (fast_pow(i, K, MOD) - 1) % MOD * fast_pow(i - 1, MOD - 2, MOD) % MOD; } last_sum %= MOD; long long temp = last_sum * (N - i + 1) % MOD; result += temp * A[i] % MOD; result %= MOD; } cout << \"Case #\" << tc << \": \" << result << endl; } } Round D 48 Candies \u9898\u76ee\u63cf\u8ff0","title":"KickStart 2019"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#kickstart-2019","text":"","title":"KickStart 2019"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_1","text":"","title":"\u6280\u5de7"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#0250google-700-20-30-50","text":"","title":"0.\u524d250\u5dee\u4e0d\u591a\u53ef\u4ee5\u901a\u8fc7Google\u5728\u7ebf\u7b14\u8bd5 \u5404\u8f6e\u6b21\u53bb\u91cd\u540e700\u4eba \u6700\u7ec8\u62db\u4e8620\u4eba + 30\u5b9e\u4e60\u751f = 50\u4eba\u5de6\u53f3"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#1numpy","text":"","title":"1.\u4e0d\u80fd\u5f15\u7528numpy"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#12","text":"\u524d\u7f00\u548c\u3001\u524d\u7f00\u79ef\u4e5f\u79f0\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u524d\u7f00\u79ef\u6570\u7ec4\u3002 \u7ed9\u4e00\u6570\u7ec4A\uff0c \u524d\u7f00\u548c\uff1a\u65b0\u5efa\u4e00\u6570\u7ec4B\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e00\u9879B[i]\u4fdd\u5b58A\u4e2d[0\u2026i]\u7684\u548c\uff1b \u540e\u7f00\u548c\uff1a\u65b0\u5efa\u4e00\u6570\u7ec4B\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e00\u9879B[i]\u4fdd\u5b58A\u4e2d[i\u2026n-1]\u7684\u548c\uff1b \u524d\u7f00\u79ef\uff1a\u65b0\u5efa\u4e00\u6570\u7ec4B\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e00\u9879B[i]\u4fdd\u5b58A\u4e2d[0\u2026i]\u7684\u79ef\uff1b \u540e\u7f00\u79ef\uff1a\u65b0\u5efa\u4e00\u6570\u7ec4B\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e00\u9879B[i]\u4fdd\u5b58A\u4e2d[i\u2026n-1]\u7684\u79ef\uff1b \u6570\u7ec4\u7c7b\u95ee\u9898 \u53ef\u4ee5\u5c1d\u8bd5 \u5148\u6392\u5e8f \u540e\u63d0\u524d\u7b97\u6cd5\u7d2f\u52a0\u7d2f\u4e58 O(1)\u7684\u8c03\u7528\u4e0a\u9762\u7ed3\u679c","title":"12.\u6570\u7ec4 \u524d\u7f00\u548c \u524d\u7f00\u79ef \u6280\u5de7"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#3","text":"\u7ecf\u5e38\u6709\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u6c42xxx\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\uff0c\u5373\u6c42\u7b26\u5408\u6761\u4ef6\u7684\u503c\u91cc\u7684\u6700\u5927\u503c\uff0c\u8fd9\u79cd\u95ee\u9898\u6709\u4e2a\u89e3\u6cd5\u53eb\u4e8c\u5206\u7b54\u6848\u6cd5\u3002\u4e00\u542c\uff0c\u4ec0\u4e48\uff0c\u4e0d\u77e5\u9053\u7684\u7b54\u6848\u4e5f\u80fd\u4e8c\u5206\uff1f\u55ef\u6ca1\u9519\uff0c\u5173\u952e\u5728\u4e8e\u8fd9\u4e2a\u7b54\u6848\u662f\u53ef\u4ee5\u5224\u65ad\u662f\u4e0d\u662f\u7b26\u5408\u6761\u4ef6\u7684\u3002 \u5c06\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u51b3\u7b56\u95ee\u9898","title":"3.\u6700\u5c0f\u503c\u6700\u5927\u5316\u95ee\u9898 \u6700\u5927\u503c\u6700\u5c0f\u5316\u95ee\u9898 \u4e8c\u5206\u7b54\u6848\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_2","text":"\u4ee5\u6c42\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\uff08\u6700\u5c0f\u503c\u6700\u5927\u5316\uff09\u4e3a\u4f8b\uff0c\u5c1d\u8bd5\u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\uff0c\u5982\u679c\u8fd9\u4e2a\u7b54\u6848\u7b26\u5408\u9898\u76ee\u6761\u4ef6\uff0c\u90a3\u4e48\u5b83\u80af\u5b9a\u662f\u201c\u6700\u5c0f\u201d\uff08\u53ef\u884c\u89e3\uff09\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f\u201c\u6700\u5927\u201d\uff08\u6700\u4f18\u89e3\uff09\uff0c\u7136\u540e\u6211\u4eec\u6362\u4e2a\u66f4\u5927\u7684\u53ef\u80fd\u7b54\u6848\uff0c\u5982\u679c\u4e5f\u7b26\u5408\u6761\u4ef6\uff0c\u90a3\u8fd9\u4e2a\u65b0\u53ef\u884c\u89e3\u5c31\u66f4\u4f18\uff0c\u4e0d\u65ad\u91cd\u590d\u5373\u53ef\u3002\u600e\u4e48\u627e\u5462\uff1f\u8fd9\u65f6\u5c31\u8be5\u4e8c\u5206\u4e0a\u573a\u4e86\u3002","title":"\u7b97\u6cd5\u601d\u60f3"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_3","text":"1.\u7b54\u6848\u533a\u95f4\u4e0a\u4e0b\u9650\u786e\u5b9a\uff0c\u5373\u6700\u7ec8\u7b54\u6848\u5728\u54ea\u4e2a\u8303\u56f4\u662f\u5bb9\u6613\u77e5\u9053\u7684\u3002 2.\u68c0\u9a8c\u67d0\u503c\u662f\u5426\u53ef\u884c\u662f\u4e2a\u7b80\u5355\u6d3b\uff0c\u5373\u7ed9\u4f60\u4e2a\u503c\uff0c\u4f60\u80fd\u5f88\u5bb9\u6613\u7684\u5224\u65ad\u662f\u4e0d\u662f\u7b26\u5408\u9898\u76ee\u8981\u6c42\u3002 3.\u53ef\u884c\u89e3\u6ee1\u8db3\u533a\u95f4\u5355\u8c03\u6027\uff0c\u5373\u82e5x\u662f\u53ef\u884c\u89e3\uff0c\u5219\u5728\u7b54\u6848\u533a\u95f4\u5185x+1\uff08\u4e5f\u53ef\u80fd\u662fx-1\uff09\u4e5f\u53ef\u884c\u3002","title":"\u4e8c\u5206\u524d\u63d0"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_4","text":"\u4e0b\u56fe\u4e2dL,R\u4e3a\u5f53\u524d\u7b54\u6848\u533a\u95f4\uff0cM\u4e3a\u4e2d\u5fc3\u70b9\uff0c\u6839\u636e\u4e8c\u5206\u601d\u60f3\u5224\u65adM\u662f\u5426\u7b26\u5408\u6761\u4ef6\uff0c\u518d\u79fb\u52a8L\u6216R\uff0c\u53d8\u6210L'\uff0cR'\uff0c\u56fe\u4e2d\u7684T\u548cF\u8868\u793a\u662f\u5426\u7b26\u5408\u6761\u4ef6\u3002","title":"\u4e24\u79cd\u60c5\u51b5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#1","text":"int l = min_ans, r = max_ans; while (l < r) { int mid = (l + r + 1) / 2; //+1\u907f\u514d r == l + 1 \u65f6mid\u4e00\u76f4\u7b49\u4e8el\uff0c\u4ece\u800c\u6b7b\u5faa\u73af if (ok(mid)) //\u7b26\u5408\u6761\u4ef6\u8fd4\u56deTrue l = mid; else r = mid - 1; } \u5e0c\u671b\u7b54\u6848\u5c3d\u53ef\u80fd\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5de6\u533a\u95f4L\u70b9\u7b26\u5408\u9898\u76ee\u6761\u4ef6\uff08\u6700\u5c0f\uff09\uff0c\u81f3\u4e8eR\u662f\u5426\u7b26\u5408\u6761\u4ef6\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u9996\u5148\u5224\u65adM\u70b9\u7b26\u5408\u4e0e\u5426\uff0c\u7b26\u5408\u5219\u5c06L\u79fb\u5230M\u70b9\uff0c\u7ef4\u6301\u4e86L\u7684True\u5c5e\u6027\uff0c\u4e5f\u589e\u5927\u4e86\u6240\u8981\u7684\u6700\u5c0f\u503c\u6240\u5728\u533a\u95f4\uff0c\u5982\u679c\u4e0d\u7b26\u5408\uff0c\u6ca1\u529e\u6cd5\u5728\u4fdd\u6301L\u7684True\u5c5e\u6027\u60c5\u51b5\u4e0b\u79fb\u52a8L\uff0c\u90a3\u5c31\u79fb\u52a8R\u3002","title":"1.\u6700\u5c0f\u503c\u6700\u5927\u5316"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#2","text":"int l = min_ans, r = max_ans; while (l < r) { int mid = (l + r) / 2; if (ok(mid)) //\u7b26\u5408\u6761\u4ef6\u8fd4\u56deTrue r = mid; else l = mid + 1; } \u6309\u540c\u6837\u9053\u7406\u5206\u6790\uff0c\u7ef4\u6301R\u7684True\u5c5e\u6027\u5373\u53ef\u3002\u8fd9\u91cc\u7684mid\u5c31\u4e0d\u9700\u8981\u52a01\u4e86\uff0c\u56e0\u4e3a mid \u8ddf l \u91cd\u5408\u65f6\uff0cl = mid + 1;\u4f1a\u81ea\u589e\uff0c\u800c\u5f53 mid \u548c r \u91cd\u5408\u65f6 l \u4e5f\u8ddf r \u91cd\u5408\uff0c\u7ed3\u675f\u5faa\u73af\u4e86\u3002","title":"2.\u6700\u5927\u503c\u6700\u5c0f\u5316"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_5","text":"\\1. \u6bcf\u6b21\u5faa\u73af\u90fd\u8981\u786e\u4fddL\u548cR\u6709\u4e00\u4e2a\u88ab\u66f4\u65b0\uff0c\u5426\u5219\u6b7b\u5faa\u73af\u5c31\u5475\u5475\u4e86\u3002 \\2. \u7b54\u6848\u662f\u6d6e\u70b9\u6570\u7684\u60c5\u51b5\uff1a\u533a\u95f4\u66f4\u65b0\u4e0d\u80fd\u52a01\uff0c\u8fd9\u6837\u53d8\u52a8\u592a\u5927\uff0c\u76f4\u63a5 l = mid; r = mid;","title":"\u6ce8\u610f\u70b9"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#4","text":"\u5f53\u4e8c\u5206\u7684\u51fd\u6570\u503c\u4e0d\u662f\u9012\u589e/\u51cf\uff0c\u800c\u662f\u5148\u589e\u540e\u51cf\u6216\u8005\u5148\u51cf\u540e\u589e\u65f6\u4e8c\u5206\u5c31\u6302\u4e86\u3002\u6b64\u65f6\u9700\u8981\u4e09\u5206\u6cd5\uff0c\u8fd9\u91cc\u76f4\u63a5\u76d7\u7528 hihocoder Problem 1142 \u7684\u56fe \u5982\u56fe\u8fd9\u79cd\u60c5\u51b5\u5148\u51cf\u540e\u589e\u6709\u6781\u5c0f\uff0c\u82e5lm\u6bd4rm\u4f4e\uff08\u5373lm\u5bf9\u5e94\u7684\u51fd\u6570\u503c < rm\u51fd\u6570\u503c\uff09\u5219\u6781\u5c0f\u70b9\uff08\u56fe\u4e2d\u6700\u4f4e\u70b9\uff09\u80af\u5b9a\u5728[ left, rm ] \uff0c\u53cd\u4e4b\u5728[ lm, right ]\uff0c\u5269\u4e0b\u5c31\u8ddf\u4e8c\u5206\u4e00\u6837\u6839\u636e\u5927\u5c0f\u5173\u7cfb\u8c03\u6574\u533a\u95f4\u5c31\u884c\u4e86\u3002\u90a3lm\u548crm\u53d6\u503c\u591a\u5c11\uff1f\u4e00\u4e2a\u4e0d\u9519\u7684\u53d6\u503c\u662flm\u4e3a\u6574\u4e2a\u533a\u95f4\u76841/3\u70b9\uff0crm\u4e3a2/3\u70b9\uff0c\u5373 lmid = l + (r - l)/3; rmid = r - (r - l)/3; \u55ef\u4e09\u5206\u5c31\u8fd9\u6837\u5b8c\u4e86\u3002 \u7136\u540e\u53e6\u5916\u4e00\u79cd\u60c5\u51b5\uff0c\u5148\u589e\u540e\u51cf\u6709\u6781\u5927\uff1a","title":"4.\u4e09\u5206\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#hdu-2899-strange-fuction","text":"","title":"HDU 2899 Strange fuction"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#hihocoder-1142","text":"","title":"hihocoder 1142"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#5-n","text":"// \u4e0a\u53f3\u4e0b\u5de6 \u949f\u8868\u5e8f // dx\u4ee3\u8868\u5217 dy\u4ee3\u8868\u884c int dx[4] = {-1, 0, 1, 0}; int dy[4] = {0, 1, 0, -1};","title":"5.\u6570\u7ec4 \u504f\u79fb\u91cf\u5411\u91cf N\u7687\u540e"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#6","text":"","title":"6.\u7ebf\u6bb5\u6811"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#7sweep-line-algorithm","text":"","title":"7.sweep line algorithm \u626b\u63cf\u7ebf\u7b97\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#8","text":"\u60f3\u8bc1\u660e\u592a\u96be \u601d\u8def\u5f88\u96be \u4f46\u5bb9\u6613\u8499\u5bf9 \u53ef\u4ee5\u91c7\u7528\u6a21\u62dfcase\u7684\u529e\u6cd5","title":"8.\u8d2a\u5fc3\u662f\u6700\u96be\u7684\u9898\u76ee"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#c","text":"","title":"C++\u8bed\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#1vector-map-set","text":"","title":"1.vector map set"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#2c-1s10e7-10e8","text":"","title":"2.c++ 1s\u53ef\u8ba1\u7b9710E7 ~10E8\u7684\u8ba1\u7b97\u91cf"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#3int-include-int_max","text":"","title":"3.int \u6700\u5927\u503c#include  INT_MAX"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#4include-sort","text":"","title":"4.#include \\ sort"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#5-memset-void-ptr-int-value-size_t-num","text":"memset(dist, -1, sizeof dist)","title":"5.\u521d\u59cb\u5316\u51fd\u6570 memset ( void * ptr, int value, size_t num );"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#6include","text":"","title":"6.#include "},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#7queue-include","text":"front access the first element (public member function) back access the last element (public member function) Capacity empty checks whether the underlying container is empty (public member function) size returns the number of elements (public member function) Modifiers push inserts element at the end (public member function) emplace (C++11) constructs element in-place at the end (public member function) pop \u8fd4\u56deNone removes the first element (public member function) swap swaps the contents (public member function)","title":"7.queue #include \\"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#8stack-include","text":"s.push(item); //\u5c06item\u538b\u5165\u6808\u9876 s.pop(); //\u5220\u9664\u6808\u9876\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u4f1a\u8fd4\u56de s.top(); //\u8fd4\u56de\u6808\u9876\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u4f1a\u5220\u9664 s.size(); //\u8fd4\u56de\u6808\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 s.empty(); //\u68c0\u67e5\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse","title":"8.stack #include \\"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#8pair","text":"\u6784\u5efa\u6cd51: {i, j} \u6784\u5efa\u6cd52: make_pair(i, j) member variable definition first The first value in the pair second The second value in the pair","title":"8.pair"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#9template","text":"\u8fd9\u4e2a\u662fC++\u4e2d\u7684\u6a21\u677f..template \u8fd9\u4e2a\u662f\u5b9a\u4e49\u6a21\u677f\u7684\u56fa\u5b9a\u683c\u5f0f,\u89c4\u5b9a\u4e86\u7684..\u6a21\u677f\u5e94\u8be5\u53ef\u4ee5\u7406\u89e3\u5230\u5b83\u7684\u610f\u601d\u5427.. \u6bd4\u5982\u4f60\u60f3\u6c422\u4e2aint float \u6216double\u578b\u53d8\u91cf\u7684\u503c,\u53ea\u9700\u8981\u5b9a\u4e49\u8fd9\u4e48\u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u4e86,\u5047\u5982\u4e0d\u7528\u6a21\u677f\u7684\u8bdd,\u4f60\u5c31\u5fc5\u987b\u9488\u5bf9\u6bcf\u79cd\u7c7b\u578b\u90fd\u5b9a\u4e49\u4e00\u4e2a sum\u51fd\u6570 ..int sum(int, int);float sum(float, float);double sum(double, double);","title":"9.template"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#10","text":"","title":"10.\u4f18\u5148\u7ea7"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#11int2110e9","text":"","title":"11.int\u7684\u8303\u56f42.1**(10E9)"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#12_1","text":"abs(INT_MIN) == INT_MIN (\u6ea2\u51fa) Value of INT_MAX is +2147483647. Value of INT_MIN is -2147483648. -- -- char 8 -2^7 ~ 2^7-1 %c %c\u3001%d\u3001%u signed -- char 8 -2^7 ~ 2^7-1 %c %c\u3001%d\u3001%u unsigned -- char 8 0 ~ 2^8-1 %c %c\u3001%d\u3001%u [signed] short [int] 16 -2^15 ~ 2^15-1 %hd unsigned short [int] 16 0 ~ 2^16-1 %hu\u3001%ho\u3001%hx [signed] -- int 32 -2^31 ~ 2^31-1 %d -2147483648 \uff5e 2147483647 unsigned -- [int] 32 0 ~ 2^32-1 %u\u3001%o\u3001%x [signed] long [int] 32 -2^31 ~ 2^31-1 %ld unsigned long [int] 32 0 ~ 2^32-1 %lu\u3001%lo\u3001%lx [signed] long long [int] 64 -2^63 ~ 2^63-1 %I64d unsigned long long [int] 64 0 ~ 2^64-1 %I64u\u3001%I64o\u3001%I64x -- -- float 32 +/- 3.40282e+038 %f\u3001%e\u3001%g -- -- double 64 +/- 1.79769e+308 %lf\u3001%le\u3001%lg %f\u3001%e\u3001%g -- long double 96 +/- 1.79769e+308 %Lf\u3001%Le\u3001%Lg","title":"12.\u6570\u636e\u8303\u56f4"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#round-a","text":"","title":"Round A"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#training","text":"\u4f5c\u4e3a\u5f53\u5730\u5b66\u6821\u7684\u8db3\u7403\u6559\u7ec3\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u6311\u9009\u4e00\u652f\u5b8c\u5168\u7531P\u5b66\u751f\u7ec4\u6210\u7684\u56e2\u961f\u4ee3\u8868\u4f60\u7684\u5b66\u6821\u3002\u6709N\u540d\u5b66\u751f\u4f9b\u60a8\u9009\u62e9\u3002\u7b2ci\u540d\u5b66\u751f\u7684\u6280\u80fd\u7b49\u7ea7\u4e3aSi\uff0c\u8fd9\u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u4ed6\u4eec\u7684\u6280\u672f\u6c34\u5e73\u3002 \u5982\u679c\u5b83\u6709P\u4e2a\u5b66\u751f\uff0c\u5e76\u4e14\u4ed6\u4eec\u90fd\u5177\u6709\u76f8\u540c\u7684\u6280\u80fd\u7b49\u7ea7\uff0c\u4f60\u53ef\u4ee5\u786e\u5b9a\u8fd9\u4e2a\u56e2\u961f\u662f\u516c\u5e73\u7684\u3002\u6700\u521d\uff0c\u53ef\u80fd\u65e0\u6cd5\u9009\u62e9\u4e00\u4e2a\u516c\u5e73\u7684\u56e2\u961f\uff0c\u56e0\u6b64\u60a8\u5c06\u4e3a\u4e00\u4e9b\u5b66\u751f\u63d0\u4f9b\u4e00\u5bf9\u4e00\u7684\u8f85\u5bfc\u3002\u9700\u8981\u4e00\u4e2a\u5c0f\u65f6\u7684\u8f85\u5bfc\u624d\u80fd\u5c06\u4efb\u4f55\u5b66\u751f\u7684\u6280\u80fd\u7b49\u7ea7\u63d0\u9ad81\u3002 \u6bd4\u8d5b\u5b63\u5f88\u5feb\u5c31\u5f00\u59cb\u4e86\uff08\u4e8b\u5b9e\u4e0a\uff0c\u7b2c\u4e00\u573a\u6bd4\u8d5b\u5df2\u7ecf\u5f00\u59cb\u4e86\uff01\uff09\uff0c\u6240\u4ee5\u4f60\u60f3\u627e\u5230\u4f60\u9700\u8981\u63d0\u4f9b\u7684\u6700\u5c11\u8bad\u7ec3\u5c0f\u65f6\u6570\u624d\u80fd\u9009\u51fa\u4e00\u652f\u516c\u5e73\u7684\u7403\u961f\u3002 \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u91cf\uff0cT\u3002T\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\u3002\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u5206\u522b\u4ee5\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u548cP\uff0c\u5b66\u751f\u6570\u548c\u60a8\u9700\u8981\u9009\u62e9\u7684\u5b66\u751f\u6570\u7684\u884c\u5f00\u5934\u3002\u7136\u540e\uff0c\u53e6\u4e00\u884c\u5305\u542bN\u4e2a\u6574\u6570Si;\u8fd9\u4e9b\u4e2d\u7684\u7b2ci\u4e2a\u662f\u7b2ci\u4e2a\u5b66\u751f\u7684\u6280\u80fd\u3002 \u4ea7\u91cf \u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\u5305\u542bCase #x\uff1ay\uff0c\u5176\u4e2dx\u662f\u6d4b\u8bd5\u7528\u4f8b\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0cy\u662f\u6240\u9700\u7684\u6700\u5c0f\u6559\u7ec3\u5c0f\u65f6\u6570\uff0c\u7136\u540e\u624d\u80fd\u9009\u62e9\u4e00\u4e2a\u516c\u5e73\u7684P\u5b66\u751f\u56e2\u961f\u3002 \u8303\u56f4 \u65f6\u95f4\u9650\u5236\uff1a\u6bcf\u4e2a\u6d4b\u8bd5\u96c615\u79d2\u3002 \u5185\u5b58\u9650\u5236\uff1a1 GB\u3002 1\u2264T\u2264100\u3002 \u5bf9\u4e8e\u6240\u6709i\uff0c1\u2264Si\u226410000\u3002 2\u2264P\u2264N\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 2\u2264N\u22641000\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 2\u2264N\u2264105\u3002 \u6837\u54c1 \u8f93\u5165 \u4ea7\u91cf 3 4 3 3 1 9 100 6 2 5 5 1 2 3 4 5 5 7 7 1 7 7 \u6848\u4f8b\uff031\uff1a14 \u6848\u4f8b\uff032\uff1a0 \u6848\u4f8b\uff033\uff1a6 \u5728\u6837\u672c\u6848\u4f8b\uff031\u4e2d\uff0c\u60a8\u53ef\u4ee5\u82b1\u8d39\u603b\u51716\u4e2a\u5c0f\u65f6\u8bad\u7ec3\u7b2c\u4e00\u4e2a\u5b66\u751f\uff0c8\u4e2a\u5c0f\u65f6\u8bad\u7ec3\u7b2c\u4e8c\u4e2a\u5b66\u751f\u3002\u8fd9\u4f7f\u5f97\u7b2c\u4e00\uff0c\u7b2c\u4e8c\u548c\u7b2c\u4e09\u5b66\u751f\u7684\u6280\u80fd\u6c34\u5e73\u4e3a9.\u8fd9\u662f\u60a8\u53ef\u4ee5\u82b1\u8d39\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u56e0\u6b64\u7b54\u6848\u662f14\u3002 \u5728\u793a\u4f8b\u6848\u4f8b\uff032\u4e2d\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u516c\u5e73\u7684\u56e2\u961f\uff08\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u5b66\u751f\uff09\u800c\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u6307\u5bfc\uff0c\u56e0\u6b64\u7b54\u6848\u4e3a0\u3002 \u5728\u793a\u4f8b\u6848\u4f8b\uff033\u4e2d\uff0cP = N\uff0c\u56e0\u6b64\u6bcf\u4e2a\u5b66\u751f\u90fd\u5c06\u52a0\u5165\u60a8\u7684\u56e2\u961f\u3002\u4f60\u5fc5\u987b\u82b16\u4e2a\u5c0f\u65f6\u8bad\u7ec3\u7b2c\u4e09\u4e2a\u5b66\u751f\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u50cf\u5176\u4ed6\u4eba\u4e00\u6837\u62e5\u67097\u7ea7\u6280\u80fd\u3002\u8fd9\u662f\u60a8\u53ef\u4ee5\u82b1\u8d39\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u6240\u4ee5\u7b54\u6848\u662f6\u3002","title":"Training \u516c\u5e73\u8db3\u7403\u961f"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_6","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#1-tle","text":"time O(TPN) T = int(input().strip()) for i in range(1, T + 1): N, P = map(int, input().strip().split()) team = map(int, input().strip().split()) team = sorted(team) min_val = float('inf') for j in range(N-P+1): val = team[j+P-1]*P - sum(team[j: j+P]) min_val = min(val, min_val) print(\"Case #{}: {}\".format(i, min_val))","title":"\u89e3\u6cd51  \u2705 + TLE"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#2_1","text":"time O(NlogN) T = int(input().strip()) for i in range(1, T + 1): N, P = map(int, input().strip().split()) team = map(int, input().strip().split()) team = sorted(team) # key: cumsum \u8ba1\u7b97 \u8282\u7701\u4e86\u65f6\u95f4\u590d\u6742\u5ea6 cumsum_team = [0] for x in team: cumsum_team.append(cumsum_team[-1] + x) min_val = float('inf') for j in range(N-P+1): val = team[j+P-1]*P - (cumsum_team[j+P] - cumsum_team[j]) min_val = min(val, min_val) print(\"Case #{}: {}\".format(i, min_val)) #include <iostream> #include <algorithm> #include <limits.h> using namespace std; // \u9898\u76ee\u6570\u636e\u8303\u56f410^5 \u591a10\u4e2a\u9632\u6b62\u8d8a\u754c const int N = 100010; int n, p; int skill[N], sum[N]; int main() { int T; cin >> T; for(int i = 1; i <= T; i++){ cin >> n >> p; // \u4ece1\u5f00\u59cb for(int i = 1; i <= n; i++) cin >> skill[i]; // algorithm::sort sort(skill + 1, skill + 1 + n); // \u524d\u7f00\u548c for(int i = 1; i <= n; i++) sum[i] = sum[i-1] + skill[i]; int res = INT_MAX; for(int i = p; i <= n; i++){ res = min(res, p * skill[i] - (sum[i] - sum[i-p])); } // \u8f93\u51fa\u7ed3\u679c cout << \"Case #%d: %d\\n\" << endl; } return 0; }","title":"\u89e3\u6cd52 \u2705 + \u2705 \u524d\u7f00\u548c\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#analysis","text":"\u4e3a\u4e86\u5efa\u7acb\u4e00\u4e2a\u516c\u5e73\u7684\u56e2\u961f\uff0c\u6211\u4eec\u5fc5\u987b\u57f9\u8bad\u56e2\u961f\u6210\u5458\uff0c\u4f7f\u5176\u8fbe\u5230\u4e0e\u56e2\u961f\u4e2d\u6700\u719f\u7ec3\u7684\u6210\u5458\u76f8\u540c\u7684\u6280\u80fd\u6c34\u5e73\u3002 \u5bf9\u4e8e\u6211\u4eec\u9009\u62e9\u7684\u4efb\u4f55P\u5b66\u751f\uff0c\u7ec4\u5efa\u516c\u5e73\u56e2\u961f\u6240\u9700\u7684\u65f6\u95f4\u662f=\u03a3\uff08max\uff08Si\uff0cSi + 1 ... SP\uff09 - Si\uff09\uff0c\u5bf9\u4e8e\u56e2\u961f\u4e2d\u6240\u6709\u5b66\u751fi = 1\u5230P.\u6211\u4eec\u7684\u76ee\u6807\u662f\u5c3d\u91cf\u51cf\u5c11\u8fd9\u4e2a\u4ef7\u503c\u3002 \u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6cd5\u662f\u4ece\u7ed9\u5b9a\u7684N\u4e2a\u5b66\u751f\u4e2d\u67e5\u770bP\u5b66\u751f\u7684\u6240\u6709\u53ef\u80fd\u5b50\u96c6\u3002\u4f46\u662f\u5b58\u5728NCP\u8fd9\u6837\u7684\u5b50\u96c6\uff08\u8fd9\u91cc\u7b26\u53f7C\u8868\u793a\u7ec4\u5408\uff09\u3002\u8fd9\u4e9b\u5b50\u96c6\u7684\u6570\u91cf\u5c06\u6309\u56e0\u5b50\uff08N\uff09\u7684\u987a\u5e8f\u6392\u5217\uff0c\u56e0\u6b64\u6240\u6709\u8fd9\u4e9b\u5b50\u96c6\u7684\u679a\u4e3e\u90fd\u4e0d\u7b26\u5408\u65f6\u9650\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 \u6211\u4eec\u53ef\u4ee5\u4ece\u89c2\u5bdf\u5f00\u59cb\uff0c\u4e00\u65e6\u6211\u4eec\u786e\u5b9a\u4e86\u5177\u6709\u6700\u9ad8\u6280\u80fd\u6c34\u5e73x\u7684\u5b66\u751f\uff0c\u4e3a\u4e86\u6700\u5c0f\u5316\u6211\u4eec\u7684\u76ee\u6807\uff0c\u6211\u4eec\u5e94\u8be5\u603b\u662f\u9009\u62e9\u5177\u6709\u5c3d\u53ef\u80fd\u9ad8\u4f46\u662f\u5c0f\u4e8e\u6216\u7b49\u4e8ex\u7684\u6280\u80fd\u7684\u5b66\u751f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u964d\u5e8f\u6392\u5217\u6280\u80fd\u6c34\u5e73\u5bf9\u5b66\u751f\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u5047\u8bbe\u4ed6\u4eec\u62e5\u6709\u56e2\u961f\u4e2d\u6700\u9ad8\u7684\u6280\u80fd\u6c34\u5e73\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u5b66\u751f\u8fdb\u884c\u8fed\u4ee3\u3002\u6bd4\u5982\u8bf4\uff0c\u8fd9\u540d\u5b66\u751f\u5904\u4e8e\u6392\u5e8f\u987a\u5e8f\u7684\u7b2ci\u4f4d\u7f6e;\u8be5\u56e2\u961f\u5c06\u7531\u4f4d\u7f6ei\uff0ci + 1\uff0c...\uff0ci + P-1\uff08\u5373\u5927\u5c0f\u4e3aP\u7684\u8fde\u7eed\u5b50\u9635\u5217\uff09\u7684\u5b66\u751f\u7ec4\u6210\u3002 \u5bf9\u4e8e\u6392\u5e8f\u6570\u7ec4\u4e2d\u6bcf\u4e2aP\u5927\u5c0f\u7684\u5b50\u9635\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u516c\u5f0f\u8ba1\u7b97\u5efa\u7acb\u516c\u5e73\u56e2\u961f\u6240\u9700\u7684\u8bad\u7ec3\u65f6\u95f4\u3002\u5b58\u5728\u5927\u5c0f\u4e3aP\u7684N-P + 1\u4e2a\u5b50\u9635\u5217\uff0c\u5e76\u4e14\u8ba1\u7b97\u5b50\u9635\u5217\u5927\u5c0fP\u7684\u8bad\u7ec3\u65f6\u95f4\u7684\u590d\u6742\u5ea6\u4e3aO\uff08P\uff09\u3002\u56e0\u6b64\uff0c\u8be5\u65b9\u6cd5\u7684\u603b\u4f53\u590d\u6742\u5ea6\u4e3aO\uff08N\u00d7P\uff09\uff0c\u8fd9\u5bf9\u4e8e\u6d4b\u8bd5\u96c61\u662f\u8db3\u591f\u7684\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 \u6211\u4eec\u9700\u8981\u7ecf\u5386\u6240\u6709\u5b50\u9635\u5217\uff0c\u4f46\u662f\u6211\u4eec\u80fd\u5426\u66f4\u5feb\u5730\u8ba1\u7b97\u51fa\u5b50\u9635\u5217\u7684\u8bad\u7ec3\u65f6\u95f4\uff1f \u8ba9\u6211\u4eec\u5047\u8bbe\u6570\u7ec4\u6309\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\u3002\u4ece\u4f4d\u7f6ei\u5f00\u59cb\u7684\u5b50\u9635\u5217\u7684\u8bad\u7ec3\u65f6\u95f4\u516c\u5f0f\u662f =\u03a3\uff08S [i] - S [j]\uff09\u5176\u4e2dj = i\u81f3i + P -1 = P\u00d7S [i] - \u03a3\uff08S [j]\uff09\u5176\u4e2dj = i\u81f3i + P-1 \u7531\u4e8e\u6211\u4eec\u603b\u662f\u9700\u8981\u4e00\u4e2a\u8fde\u7eed\u5b50\u9635\u5217\u7684\u603b\u548c\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5148\u8ba1\u7b97\u6574\u4e2a\u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u5e76\u5728O\uff081\uff09\u65f6\u95f4\u5185\u5f97\u5230\u4efb\u4f55\u5b50\u9635\u5217\u7684\u603b\u548c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba1\u7b97\u8bad\u7ec3\u65f6\u95f4O\uff081\uff09 \u3002 \u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u603b\u4f53\u590d\u6742\u6027\u662fO\uff08NlogN\uff09\u3002","title":"Analysis"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_7","text":"\u60a8\u6700\u8fd1\u88ab\u8058\u4e3a\u7740\u540d\u5305\u88f9\u6295\u9012\u516c\u53f8\u7684\u9996\u5e2d\u51b3\u7b56\u8005\uff08CDM\uff09\uff0c\u606d\u559c\uff01\u5ba2\u6237\u559c\u6b22\u5feb\u901f\u4ea4\u4ed8\u5305\u88f9\uff0c\u60a8\u51b3\u5b9a\u51cf\u5c11\u5728\u5168\u7403\u8303\u56f4\u5185\u4ea4\u4ed8\u5305\u88f9\u4ee5\u8d62\u5f97\u5ba2\u6237\u6240\u9700\u7684\u65f6\u95f4\u3002\u4f60\u5df2\u7ecf\u5411\u5f53\u5c40\u4ecb\u7ecd\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u4ed6\u4eec\u5df2\u7ecf\u4e3a\u4f60\u5206\u914d\u4e86\u8db3\u591f\u7684\u9884\u7b97\u6765\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\u3002 \u4e16\u754c\u53ef\u4ee5\u5206\u4e3aR\u00d7C\u65b9\u683c\u3002\u6bcf\u4e2a\u5e7f\u573a\u90fd\u5305\u542b\u4e00\u4e2a\u9001\u8d27\u529e\u516c\u5ba4\uff0c\u6216\u8005\u6ca1\u6709\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u5c1a\u672a\u5305\u542b\u4ea4\u4ed8\u529e\u516c\u5ba4\u7684\u7f51\u683c\u5e7f\u573a\uff0c\u5e76\u5728\u90a3\u91cc\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\u3002 \u5982\u679c\u8be5\u6b63\u65b9\u5f62\u5305\u542b\u4ea4\u4ed8\u5c40\uff0c\u5219\u5305\u88f9\u5230\u6b63\u65b9\u5f62\u7684\u4ea4\u8d27\u65f6\u95f4\u4e3a0\u3002\u5426\u5219\uff0c\u5b83\u88ab\u5b9a\u4e49\u4e3a\u8be5\u5e7f\u573a\u4e0e\u5305\u542b\u4ea4\u4ed8\u5c40\u7684\u4efb\u4f55\u5176\u4ed6\u5e7f\u573a\u4e4b\u95f4\u7684\u6700\u5c0f\u66fc\u54c8\u987f\u8ddd\u79bb\u3002**\u603b\u4ea4\u8d27\u65f6\u95f4\u662f\u6240\u6709\u65b9\u683c\u7684\u4ea4\u8d27\u65f6\u95f4\u7684\u6700\u5927\u503c**\u3002\u60a8\u6700\u591a\u53ef\u4ee5\u901a\u8fc7\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\u83b7\u5f97\u7684\u6700\u77ed\u603b\u4ea4\u8d27\u65f6\u95f4\u662f\u591a\u5c11\uff1f\u3010\u6240\u6709\u653e\u4e2a\u4ea4\u8d27\u65f6\u95f4\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u65f6\u95f4\u3011 \u6ce8\u610f\uff1a\u4e24\u4e2a\u6b63\u65b9\u5f62\uff08r1\uff0cc1\uff09\u548c\uff08r2\uff0cc2\uff09\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u5b9a\u4e49\u4e3a| r1 - r2 | + | c1 - c2 |\uff0c\u5176\u4e2d| * |\u8fd0\u7b97\u7b26\u8868\u793a\u7edd\u5bf9\u503c\u3002 \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u91cf\uff0cT\u3002T\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\u3002\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u7b2c\u4e00\u884c\u5305\u542b\u884c\u6570R\u548c\u7f51\u683c\u5217\u6570C.\u63a5\u4e0b\u6765\u7684R\u884c\u4e2d\u7684\u6bcf\u4e00\u884c\u5305\u542b\u4ece\u96c6\u5408{0,1}\u4e2d\u9009\u62e9\u7684C\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d0\u8868\u793a\u6ca1\u6709\u9012\u9001\u529e\u516c\u5ba4\uff0c1\u8868\u793a\u5728\u5e7f\u573a\u4e2d\u5b58\u5728\u9012\u9001\u529e\u516c\u5ba4\u3002 \u4ea7\u91cf \u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\u5305\u542bCase #x\uff1ay\uff0c\u5176\u4e2dx\u662f\u6d4b\u8bd5\u7528\u4f8b\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0cy\u662f\u5728\u6700\u591a\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u9012\u9001\u529e\u516c\u5ba4\u540e\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5c0f\u603b\u4ea4\u4ed8\u65f6\u95f4\u3002 \u8303\u56f4 \u65f6\u95f4\u9650\u5236\uff1a\u6bcf\u4e2a\u6d4b\u8bd5\u96c615\u79d2\u3002 \u5185\u5b58\u9650\u5236\uff1a1GB\u3002 1\u2264T\u2264100\u3002 \u521d\u59cb\u7f51\u683c\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u4ea4\u4ed8\u5c40\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 1\u2264R\u226410\u3002 1\u2264C\u226410\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 1\u2264R\u2264250\u3002 1\u2264C\u2264250\u3002 \u6837\u54c1 \u8f93\u5165 \u4ea7\u91cf 3 3 3 101 000 101 1 2 11 5 5 10001 00000 00000 00000 10001 \u6848\u4f8b\uff031\uff1a1 \u6848\u4f8b\uff032\uff1a0 \u6848\u4f8b\uff033\uff1a2 \u5728\u6837\u672c\u6848\u4f8b\uff031\u4e2d\uff0c\u901a\u8fc7\u5728\u6ca1\u6709\u4ea4\u4ed8\u529e\u516c\u5ba4\u7684\u4e94\u4e2a\u65b9\u5757\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e2d\u5efa\u7acb\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u6700\u5c0f\u7684\u603b\u4ea4\u4ed8\u65f6\u95f41\u3002 \u5728\u793a\u4f8b\u6848\u4f8b\uff032\u4e2d\uff0c\u6240\u6709\u6b63\u65b9\u5f62\u90fd\u5df2\u7ecf\u6709\u4e00\u4e2a\u4ea4\u4ed8\u529e\u516c\u5ba4\uff0c\u56e0\u6b64\u6700\u5c0f\u603b\u4ea4\u4ed8\u65f6\u95f4\u4e3a0.\u8bf7\u6ce8\u610f\uff0c\u60a8\u5fc5\u987b\u6dfb\u52a0\u6700\u591a\u4e00\u4e2a\u4ea4\u4ed8\u529e\u516c\u5ba4\u3002 \u5728\u6837\u672c\u6848\u4f8b\uff033\u4e2d\uff0c\u8981\u83b7\u5f97\u6700\u5c0f\u7684\u603b\u4ea4\u4ed8\u65f6\u95f42\uff0c\u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4efb\u4f55\u65b9\u683c\u4e2d\u5efa\u7acb\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\uff1a\uff082,3\uff09\uff0c\uff083,2\uff09\uff0c\uff083,3\uff09\uff0c\uff083\uff0c 4\uff09\uff0c\u6216\uff084,3\uff09\u3002\u4efb\u4f55\u5176\u4ed6\u53ef\u80fd\u6027\u5bfc\u81f4\u603b\u4ea4\u4ed8\u65f6\u95f4\u6bd42\u66f4\u9ad8\u3002","title":"\u5feb\u9012\u516c\u53f8\u6700\u5927\u8ddd\u79bb\u6700\u5c0f\u503c"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#analysis_1","text":"\u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 \u5bf9\u4e8e\u6d4b\u8bd5\u88c5\u7f6e1\uff0c\u6211\u4eec\u80fd\u591f\u68c0\u67e5\u65b0\u914d\u9001\u529e\u516c\u5ba4\u7684\u6240\u6709\u53ef\u80fd\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u627e\u5230\u6700\u5c0f\u5316\u4ea4\u8d27\u65f6\u95f4\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u5c06\u5206\u4e24\u4e2a\u9636\u6bb5\u5b8c\u6210\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6839\u636e\u73b0\u6709\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\u8ba1\u7b97\u6bcf\u4e2a\u5e7f\u573a\u7684\u4ea4\u4ed8\u65f6\u95f4\u3002\u5176\u6b21\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u65b0\u529e\u516c\u5ba4\u7684\u6240\u6709\u53ef\u80fd\u4f4d\u7f6e\u3002\u7b2c\u4e00\u90e8\u5206\u4e2d\u7684\u9884\u8ba1\u7b97\u5c06\u5141\u8bb8\u6211\u4eec\u66f4\u6709\u6548\u5730\u5728\u7b2c\u4e8c\u90e8\u5206\u4e2d\u627e\u5230\u4ea4\u8d27\u65f6\u95f4\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u901a\u8fc7\u8fed\u4ee3\u6574\u4e2a\u7f51\u683c\u5e76\u627e\u5230\u5230\u5177\u6709\u4ea4\u4ed8\u5c40\u7684\u6b63\u65b9\u5f62\u7684\u6700\u5c0f\u66fc\u54c8\u987f\u8ddd\u79bb\u6765\u8ba1\u7b97\u6b63\u65b9\u5f62\u7684\u4ea4\u4ed8\u65f6\u95f4\u3002\u5bf9\u4e8eO\uff08\uff08RC\uff092\uff09\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fd9\u5177\u6709\u6bcf\u5e73\u65b9O\uff08RC\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5bf9\u4e8e\u7b2c\u4e8c\u9636\u6bb5\uff0c\u6211\u4eec\u904d\u5386\u65b0\u4ea4\u4ed8\u5c40\u548c\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6240\u6709\u53ef\u80fd\u4f4d\u7f6e\uff0c\u5728\u6574\u4e2a\u7f51\u683c\u4e2d\u641c\u7d22\u5177\u6709\u6700\u5927\u65b0\u4ea4\u4ed8\u65f6\u95f4\u7684\u65b9\u5757\u3002\u65b0\u7684\u4ea4\u8d27\u65f6\u95f4\u662f\u5728\u7b2c\u4e00\u90e8\u5206\u8ba1\u7b97\u7684\u4ea4\u8d27\u65f6\u95f4\u548c\u5230\u65b0\u4ea4\u8d27\u529e\u4e8b\u5904\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u3002\u5bf9\u4e8e\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08\uff08RC\uff092\uff09\uff0c\u8fd9\u4e5f\u5177\u6709\u6bcf\u4e2a\u4f20\u9001\u4f4d\u7f6e\u7684O\uff08RC\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fd9\u5bf9\u4e8e\u6d4b\u8bd5\u88c5\u7f6e1\u662f\u8db3\u591f\u7684\u3002 \u6216\u8005\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u66f4\u5feb\u7684\u65b9\u5f0f\u8ba1\u7b97\u6bcf\u4e2a\u65b9\u683c\u7684\u4ea4\u4ed8\u65f6\u95f4\uff08\u4f8b\u5982\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u8df3\u8fc7\u7b2c\u4e00\u9636\u6bb5\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u4e00\u8282\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 \u6700\u5927\u95ee\u9898\u6700\u5c0f\u5316 \u4e8c\u5206\u7b54\u6848\u6cd5+BFS \u6211\u4eec\u53ef\u4ee5\u5bf9\u6d4b\u8bd5\u96c62\u4f7f\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u4e00\u79cd\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u65b0\u4ea4\u4ed8\u5730\u70b9\u7684\u6700\u5927\u4ea4\u4ed8\u65f6\u95f4\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u89e3\u51b3\u4ee5\u4e0b\u5b50\u95ee\u9898\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a\u7ed9\u5b9aK\u503c\uff0c\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u6dfb\u52a0\u65b0\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\uff0c\u4ee5\u4fbf\u6700\u5927\u4ea4\u4ed8\u65f6\u95f4\u6700\u591a\u4e3aK\uff1f\u8be5\u5b50\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u4e0e\u6d4b\u8bd5\u96c61\u7c7b\u4f3c\uff0c\u4f46\u662f\u76ee\u6807\u503c\u4e3aK\u5141\u8bb8\u6211\u4eec\u786e\u5207\u5730\u786e\u5b9a\u65b0\u4ea4\u4ed8\u5c40\u9700\u8981\u4e3a\u54ea\u4e9b\u65b9\u5757\u63d0\u4f9b\u670d\u52a1\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u79cd\u5dee\u5f02\u6765\u521b\u5efa\u66f4\u5feb\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u5bf9\u539f\u59cb\u95ee\u9898\u7684\u7b54\u6848\u4e3aK\uff0c\u5219\u5bf9\u4e8e[K\uff0c1]\u8303\u56f4\u5185\u7684\u503c\uff0c\u6211\u4eec\u7684\u5b50\u95ee\u9898\u7684\u7b54\u6848\u4e3a\u201c\u5426\u201d\uff0c\u5bf9\u4e8e[K\uff0c\u65e0\u7a77\u5927]\u8303\u56f4\u5185\u7684\u503c\uff0c\u7b54\u6848\u4e3a\u201c\u662f\u201d\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u7c7b\u578b\u7684\u5b50\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\uff1a\u5982\u679c\u7ed9\u5b9a\u7684\u503c\u6709\u6548\uff0c\u5219\u5b83\u662f\u7b54\u6848\u7684\u4e0a\u9650;\u5426\u5219\u5b83\u662f\u7b54\u6848\u7684\u4e25\u683c\u4e0b\u9650\u3002\u56e0\u6b64\uff0c\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u5b50\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u6765\u89e3\u51b3\u539f\u59cb\u95ee\u9898\u3002\u8fd9\u662f\u5c06\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u4e3a\u51b3\u7b56\u95ee\u9898\u7684\u5e38\u7528\u6280\u672f\u3002 \u9996\u5148\uff0c\u6211\u4eec\u901a\u8fc7\u53cd\u8f6c\u95ee\u9898\u6709\u6548\u5730\u8ba1\u7b97\u6bcf\u4e2a\u5e7f\u573a\u7684\u73b0\u6709\u4ea4\u8d27\u65f6\u95f4\uff1a\u6211\u4eec\u627e\u5230\u6bcf\u4e2a\u5e7f\u573a\u5230\u8fbe\u6bcf\u4e2a\u5e7f\u573a\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u800c\u4e0d\u662f\u627e\u5230\u6bcf\u4e2a\u5e7f\u573a\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u8fd9\u53ef\u4ee5\u4f7f\u7528\u4ece\u6240\u6709\u4ea4\u4ed8\u529e\u516c\u5ba4\u5f00\u59cb\u7684\u591a\u6e90\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6765\u5b8c\u6210\u3002\u591a\u6e90BFS\u4e0e\u5e38\u89c4BFS\u76f8\u540c\uff0c\u53ea\u662f\u60a8\u4f7f\u7528\u591a\u4e2a\u8d77\u59cb\u4f4d\u7f6e\u800c\u4e0d\u662f\u4e00\u4e2a\u3002\u6b64\u641c\u7d22\u6700\u591a\u8bbf\u95ee\u6bcf\u4e2a\u65b9\u5757\u4e00\u6b21\uff0c\u8fd9\u7ed9\u4e86\u6211\u4eecO\uff08RC\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u8bc6\u522b\u6240\u6709\u5177\u6709\u5927\u4e8eK\u7684\u4f20\u9012\u65f6\u95f4\u7684\u6b63\u65b9\u5f62\uff0c\u7136\u540e\u786e\u5b9a\u662f\u5426\u5b58\u5728\u4e0e\u8fd9\u4e9b\u6b63\u65b9\u5f62\u4e2d\u7684\u6bcf\u4e00\u4e2a\u76f8\u8dddK\u7684\u8ddd\u79bb\u5185\u7684\u4f4d\u7f6e\u3002\u4e3a\u4e86\u6709\u6548\u5730\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u66fc\u54c8\u987f\u8ddd\u79bb\u5177\u6709\u76f8\u540c\u7684\u516c\u5f0f\uff1a dist\uff08\uff08x1\uff0cy1\uff09\uff0c\uff08x2\uff0cy2\uff09\uff09= max\uff08abs\uff08x1 + y1 - \uff08x2 + y2\uff09\uff09\uff0cabs\uff08x1 - y1 - \uff08x2 - y2\uff09\uff09\uff09 \u8be5\u516c\u5f0f\u57fa\u4e8e\u4ee5\u4e0b\u4e8b\u5b9e\uff1a\u5bf9\u4e8e\u4efb\u4f55\u70b9\uff0c\u66fc\u54c8\u987f\u8ddd\u79bbK\u5185\u7684\u70b9\u96c6\u5f62\u6210\u65cb\u8f6c45\u5ea6\u7684\u6b63\u65b9\u5f62\u3002\u8fd9\u4e2a\u516c\u5f0f\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u6211\u4eec\u4fee\u6b63\uff08x2\uff0cy2\uff09\uff0c\u5f53x1 + y1\u548cx1-y1\u6700\u5927\u5316\u6216\u6700\u5c0f\u5316\u65f6\uff0c\u8ddd\u79bb\u5c06\u6700\u5927\u5316\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u4ea4\u4ed8\u65f6\u95f4\u5927\u4e8eK\u7684\u6240\u6709\u65b9\u683c\u8ba1\u7b97x1 + y1\u548cx1-y1\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u65b0\u4ea4\u4ed8\u5c40\u7684\u6240\u6709\u53ef\u80fd\u4f4d\u7f6e\uff0c\u5e76\u68c0\u67e5\u6700\u5927\u8ddd\u79bb\u662f\u5426\u4e3a\u5f53\u524d\u4ea4\u8d27\u65f6\u95f4\u5927\u4e8eK\u7684\u6b63\u65b9\u5f62\u7684\u4f4d\u7f6e\u5728\u6052\u5b9a\u65f6\u95f4\u5185\u81f3\u591a\u4e3aK.\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u7b54\u6848\u662f\u5426\u6700\u591a\u4e3aK\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08RC\uff09\u3002 \u4f7f\u7528\u4e8c\u8fdb\u5236\u641c\u7d22\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3aO\uff08RClog\uff08R + C\uff09\uff09\uff0c\u8fd9\u5bf9\u4e8e\u6d4b\u8bd5\u96c6\u6765\u8bf4\u5df2\u8db3\u591f\u3002\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u5728\u7f51\u683c\u4e0a\u5355\u6b21\u901a\u8fc7\u8ba1\u7b97\u4e0a\u8ff0\u6240\u6709\u53ef\u80fdK\u7684\u6700\u5c0f/\u6700\u5927\u503c\uff0c\u7136\u540e\u4f7f\u7528\u4e2a\u6848\u5de5\u4f5c\u6765\u786e\u5b9a\u6bcf\u4e2aK\u662f\u5426\u5b58\u5728\u53ef\u884c\u7684\u65b0\u4ea4\u4ed8\u529e\u516c\u5730\u70b9\uff0c\u4ece\u800c\u5c06\u5176\u63d0\u9ad8\u5230O\uff08RC\uff09\u65f6\u95f4\uff0c\u4f46\u8fd9\u79cd\u4f18\u5316\u662f\u4e0d\u5fc5\u8981\u7684","title":"Analysis"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_8","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#bfs","text":"\u5c06\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u4e3a\u51b3\u7b56\u95ee\u9898 1.\u9009\u53d6K\u4f5c\u4e3a\u7b54\u6848\u5224\u65ad\u662f\u5426\u662f\u6700\u5927\u95ee\u9898\u7684\u7ed3\u679c\uff08\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u7ed3\u679c\uff09 2.\u7531\u4e8e\u6c42\u95ee\u9898\u7684\u6700\u5c0f\u5316\u7ed3\u679c\uff0c\u5219[1, K)\u7b54\u6848\u4e3aNo\uff0c[K, R+C]\u7b54\u6848Yes 3.\u6700\u5927\u503c\u6700\u5c0f\u5316\u4e8c\u4efd\u7b54\u6848\u6cd5\uff0c O\uff08log\uff08R+C\uff09\uff09 int l = min_ans, r = max_ans; while (l < r) { int mid = (l + r) / 2; if (ok(mid)) //\u7b26\u5408\u6761\u4ef6\u8fd4\u56deTrue r = mid; else l = mid + 1; } 4.ok\u51fd\u6570 \u7528bfs\uff0c \u5373\u4ece\u6240\u67091\u51fa\u53d1 \u904d\u5386K\u5c42\uff0c O(RC) 5.\u66fc\u54c8\u987f\u8ddd\u79bb\u6027\u8d28 dist((x1\uff0cy1)\uff0c(x2\uff0cy2))= max(abs((x1 + y1) - \uff08x2 + y2))\uff0cabs((x1 - y1) - (x2 - y2))) 6.\u627e\u5230\u4e00\u4e2a(x_k, y_k)\u70b9\u6ee1\u8db3\u6240\u6709\u672a\u904d\u5386\u8fc7\u7684\u70b9\u7684\u8ddd\u79bb\u5747\u5c0f\u4e8e\u7b49\u4e8eK\uff0c\u5373dist((x1, y1), (x_k, y_k)) <= K O(RC) \uff0c\u53ef\u63a8\u51fa\uff08\u6027\u8d28\uff09 x + y de min max x - y de min max \u5f53x1 + y1\u548cx1-y1\u6700\u5927\u5316\u6216\u6700\u5c0f\u5316\u65f6\uff0c\u8ddd\u79bb\u5c06\u6700\u5927\u5316\u3002(\u8fb9\u754c\u70b9) \u56e0\u4e3a\u5982\u679c\u904d\u5386\u6240\u6709k\u70b9\u8981O(RC)\uff0c\u800c\u56fa\u5b9aK\u70b9\u8ba1\u7b97\u672a\u904d\u5386\u70b9\u4e5f\u8981O(RC), \u5171O(R^2C^2)\uff0c\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u6211\u4eec\u627e\u8fb9\u754c\u70b9\u5373\u4e0a\u9762\u56db\u4e2a\u6570 7.\u8ba1\u7b97\u6240\u6709\u53ef\u80fd\u7684\u4ea4\u4ed8\u529e\u516c\u5ba4\u5230\u51e0\u4e2a\u8fb9\u754c\u70b9\u7684\u8ddd\u79bb\uff0c\u627e\u5230\u6700\u5c0f\u7684 O(RC)** O(RC*log(R+C)) #include <iostream> #include <stdio.h> #include <algorithm> #include <limits.h> #include <string.h> #include <queue> using namespace std; // \u9898\u76ee\u6570\u636e\u8303\u56f4250 \u591a5\u4e2a\u9632\u6b62\u8d8a\u754c const int N = 255; // r c int n, m; // g \u6574\u4e2a\u5730\u56fe string g[N]; // dist \u6bcf\u4e2a\u7a7a\u5730\u5230\u8fbe\u8865\u7ed9\u7ad9\u7684\u8ddd\u79bb int dist[N][N]; // \u591a\u6e90\u70b9bfs int bfs(int k){ // \u4ece\u6240\u67091\u51fa\u53d1\uff0c\u628a\u6240\u6709K\u6b65\u4ee5\u5185\u80fd\u904d\u5386\u5230\u7684\u70b9\u5168\u90e8mark\u4e00\u904d, \u5177\u4f53\u7684\u8ddd\u79bb\u6570\u503c\u53ef\u4ee5\u4e0d\u7528\u7cbe\u786e \u5373\u539f\u5148\u70b9\u6807\u8bb0\u8fc7\u7684K\u6b65\u5185\u70b9\u53ef\u5ffd\u7565 \u56e0\u4e3a\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e86 queue<pair<int, int>> q; // \u521d\u59cb\u5316\u4e3a-1 memset(dist, -1, sizeof dist); // \u7528\u6240\u67091\u7684\u70b9\u521d\u59cb\u5316queue for(int i = 0; i < n; i++){ for(int j = 0; j < m; j++){ if(g[i][j] == '1'){ dist[i][j] = 0; q.push({i, j}); } } } // \u4e0a\u53f3\u4e0b\u5de6 \u949f\u8868\u5e8f // dx\u4ee3\u8868\u5217 dy\u4ee3\u8868\u884c int dx[4] = {-1, 0, 1, 0}; int dy[4] = {0, 1, 0, -1}; while(q.size()){ auto t = q.front(); q.pop(); int x = t.first, y = t.second; int distance = dist[x][y]; // \u82e5\u5f53\u524d\u5df2\u7ecf\u662f\u7b2ck\u5c42\uff0c\u4e0d\u53ef\u4ee5\u8fd9\u4e2a\u70b9\u7ee7\u7eed\u6269\u6563 if(distance == k){ continue; } // \u679a\u4e3e\u56db\u4e2a\u65b9\u5411 for(int i = 0; i < 4; i++){ int a = x + dx[i]; int b = y + dy[i]; // \u5750\u6807\u4e0d\u8981\u51fa\u754c\u4e14\u8be5\u5355\u5143\u672a\u904d\u5386\u8fc7 if(a >= 0 && a < n && b >= 0 && b < m && dist[a][b] == -1){ dist[a][b] = distance + 1; q.push({a, b}); } } } } bool check(int k){ bfs(k); // bfs\u540e dist\u91cc\u6240\u6709-1\u7684\u70b9\u90fd\u662f\u672a\u904d\u5386\u7684\u70b9, \u5373\u5230\u6700\u8fd11\u7684\u70b9\u5927\u4e8eK // min(x + y)\u5b9a\u4e49\u4e3amin_sum \u4ee5\u6b64\u7c7b\u63a8 int min_sum = INT_MAX, max_sum = INT_MIN; int min_sub = INT_MAX, max_sub = INT_MIN; for(int i = 0; i < n; i++){ for(int j = 0; j < m; j++){ if(dist[i][j] == -1){ min_sum = min(min_sum, i + j); max_sum = max(max_sum, i + j); min_sub = min(min_sub, i - j); max_sub = max(max_sub, i - j); } } } // \u82e5\u6240\u6709\u70b9\u90fd\u88ab\u6807\u8bb0\u8fc7 \u7b26\u5408\u7ed3\u679c\u8981\u6c42 \u8fd4\u56detrue if(min_sum == INT_MAX) return true; for(int i = 0; i < n; i++){ for(int j = 0; j < m; j++){ if(g[i][j] == '0'){ // \u66fc\u54c8\u987f\u8ddd\u79bb\u7684 \u7279\u70b9dist((x1\uff0cy1)\uff0c(x2\uff0cy2))= max(abs((x1 + y1) - \uff08x2 + y2))\uff0cabs((x1 - y1) - (x2 - y2))) int sum = max(abs(i + j - min_sum), abs(i + j - max_sum)); int sub = max(abs(i - j - min_sub), abs(i - j - max_sub)); if(max(sum, sub) <= k){ return true; } } } } return false; } int main(){ int T; cin >> T; for(int c = 1; c <= T; c++){ cin >> n >> m; for(int i = 0; i < n; i++) cin >> g[i]; // \u4e8c\u5206\u7b54\u6848\u6cd5 int l = 0, r = n + m; while(l < r){ int mid = (l + r) >> 1; if(check(mid)){ r = mid; }else{ l = mid + 1; } } printf(\"Case #%d: %d\\n\", c, r); } return 0; }","title":"\u89e3\u6cd5\u4e8c BFS + \u4e8c\u5206\u7b54\u6848\u7b54\u6848\u6cd5\uff08\u6700\u5927\u95ee\u9898\u6700\u5c0f\u5316\uff09"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_9","text":"\u60a8\u6b63\u5728\u51fa\u552e\u7535\u5f71\u9662\u524d\u6392\u5ea7\u4f4d\u7684\u95e8\u7968\u3002\u524d\u6392\u6709N\u4e2a\u5ea7\u4f4d\uff0c\u4ece\u5de6\u5230\u53f3\u7f16\u53f7\u4e3a1\u5230N.\u4f60\u4e0a\u5468\u79bb\u5f00\u4e86\u529e\u516c\u5ba4\uff0c\u56de\u6765\u540e\uff0cQ\u5ea7\u4f4d\u9884\u8ba2\u5df2\u7ecf\u5806\u79ef\uff01\u7b2ci\u4e2a\u9884\u8ba2\u8981\u6c42\u4eceLi\u5230Ri\u7684\u6240\u6709\u5ea7\u4f4d\u3002\u60a8\u73b0\u5728\u65e0\u804a\u5730\u5c06\u6bcf\u4e2a\u9884\u8ba2\u8f93\u5165\u7cfb\u7edf\uff0c\u4e00\u6b21\u4e00\u4e2a\u3002 \u7531\u4e8e\u67d0\u4e9b\u9884\u8ba2\u53ef\u80fd\u4f1a\u91cd\u53e0\uff0c\u56e0\u6b64\u7cfb\u7edf\u53ef\u80fd\u65e0\u6cd5\u5b8c\u5168\u6ee1\u8db3\u6bcf\u4e2a\u9884\u8ba2\u3002\u5f53\u60a8\u5728\u7cfb\u7edf\u4e2d\u8f93\u5165\u9884\u8ba2\u65f6\uff0c\u5b83\u4f1a\u5c06\u9884\u8ba2\u6240\u8bf7\u6c42\u7684\u672a\u88ab\u5206\u914d\u7684\u5ea7\u4f4d\u5206\u914d\u51fa\u53bb \u6700\u5927\u6574\u6570k\u662f\u5404\u4e2a\u8ba2\u5355\u5206\u914d\u7684\u6700\u5c0f\u5ea7\u4f4d\u6570\uff0c\u9898\u76ee\u8981\u6c42k\u7684\u6700\u5927\u503c \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u91cf\uff0cT\u3002T\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\u3002\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u90fd\u4ee5\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u548cQ\uff0c\u5ea7\u4f4d\u6570\u548c\u9884\u8ba2\u6570\u91cf\u7684\u884c\u5f00\u5934\u3002\u7136\u540e\uff0c\u8fd8\u6709Q\u884c\uff0c\u5176\u4e2d\u7b2ci\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570Li\u548cRi\uff0c\u8868\u793a\u7b2ci\u4e2a\u9884\u8ba2\u60f3\u8981\u9884\u8ba2\u4eceLi\u5230Ri\u7684\u6240\u6709\u5ea7\u4f4d\uff0c\u5305\u62ec\u5728\u5185\u3002 \u4ea7\u91cf \u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\u5305\u542bCase #x\uff1ay\uff0c\u5176\u4e2dx\u662f\u6d4b\u8bd5\u7528\u4f8b\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0cy\u662f\u6700\u5927\u503ck\uff0c\u5982\u4e0a\u6240\u8ff0\u3002 \u8303\u56f4 \u65f6\u95f4\u9650\u5236\uff1a\u6bcf\u4e2a\u6d4b\u8bd5\u96c630\u79d2\u3002 \u5185\u5b58\u9650\u5236\uff1a1GB\u3002 T = 100\u3002 1\u2264N\u2264106\u3002 1\u2264Li\u2264Ri\u2264N\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 1\u2264Q\u2264300\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 1\u2264Q\u226430000\u3002 \u5bf9\u4e8e\u81f3\u5c1185\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0cQ\u22643000\u3002 \u6837\u54c1 \u8f93\u5165 \u4ea7\u91cf 3 5 3 1 2 3 4 2 5 30 3 10 11 10 10 11 11 10 4 1 8 4 5 3 6 2 7 \u6848\u4f8b\uff031\uff1a1 \u6848\u4f8b\uff032\uff1a0 \u6848\u4f8b\uff033\uff1a2 \u5728\u6837\u672c\u6848\u4f8b\uff031\u4e2d\uff0c\u6709N = 5\u4e2a\u5e2d\u4f4d\u548cQ = 3\u4e2a\u9884\u8ba2\u3002\u4e00\u4e2a\u53ef\u80fd\u7684\u987a\u5e8f\u662f\uff1a \u5728\u7b2c\u4e8c\u6b21\u9884\u8ba2\u4e2d\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff083\u548c4\uff09\u3002 \u5728\u7b2c\u4e00\u6b21\u9884\u8ba2\u4e2d\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff081\u548c2\uff09\u3002 \u5728\u7b2c\u4e09\u6b21\u9884\u8ba2\u4e2d\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba21\u4e2a\u5ea7\u4f4d\uff08\u4ec5\u9650\u5ea7\u4f4d5\uff0c\u56e0\u4e3a\u5ea7\u4f4d1,2,3\u548c4\u5df2\u7ecf\u9884\u8ba2\uff09\u3002 \u6bcf\u4e2a\u9884\u8ba2\u81f3\u5c11\u5206\u914d1\u4e2a\u5ea7\u4f4d\uff0c\u5e76\u4e14\u6ca1\u6709\u8ba2\u5355\u4e3a\u6bcf\u4e2a\u9884\u8ba2\u5206\u914d\u81f3\u5c112\u4e2a\u5ea7\u4f4d\uff0c\u56e0\u6b64\u7b54\u6848\u662f1\u3002 \u5728\u6837\u672c\u6848\u4f8b\uff032\u4e2d\uff0c\u6709N = 30\u4e2a\u5e2d\u4f4d\u4e14Q = 3\u4e2a\u9884\u8ba2\u3002\u65e0\u8bba\u60a8\u5206\u914d\u7684\u5ea7\u4f4d\u662f\u4ec0\u4e48\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u9884\u8ba2\u5c06\u6ca1\u6709\u5206\u914d\u5ea7\u4f4d\u3002\u6240\u4ee5\u7b54\u6848\u662f0.\u8bf7\u6ce8\u610f\uff0c\u53ef\u4ee5\u6709\u5ea7\u4f4d\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u9884\u8ba2\uff01 \u5728\u6837\u672c\u6848\u4f8b\uff033\u4e2d\uff0c\u6709N = 10\u4e2a\u5e2d\u4f4d\u4e14Q = 4\u4e2a\u9884\u8ba2\u3002\u4e00\u4e2a\u53ef\u80fd\u7684\u987a\u5e8f\u662f\uff1a \u5728\u7b2c\u4e8c\u6b21\u9884\u8ba2\u4e2d\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff084\u548c5\uff09\u3002 \u5728\u7b2c\u4e09\u6b21\u9884\u8ba2\u4e2d\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff083\u548c6\uff0c\u56e0\u4e3a4\u548c5\u5df2\u7ecf\u9884\u8ba2\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u9884\u8ba2\u7684\u5ea7\u4f4d\u4e0d\u4e00\u5b9a\u5f7c\u6b64\u76f8\u90bb\u3002 \u8fdb\u5165\u7b2c\u56db\u6b21\u9884\u8ba2\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff082\u548c7\uff09\u3002 \u5728\u7b2c\u4e00\u6b21\u9884\u8ba2\u65f6\uff0c\u7cfb\u7edf\u5c06\u9884\u8ba22\u4e2a\u5ea7\u4f4d\uff081\u548c8\uff09\u3002 \u6bcf\u4e2a\u9884\u8ba2\u81f3\u5c11\u5206\u914d2\u4e2a\u5ea7\u4f4d\uff0c\u5e76\u4e14\u6ca1\u6709\u8ba2\u5355\u4e3a\u6bcf\u4e2a\u9884\u8ba2\u5206\u914d\u81f3\u5c113\u4e2a\u5ea7\u4f4d\uff0c\u56e0\u6b64\u7b54\u6848\u662f2\u3002 \u6ce8\u610f\uff1a\u6211\u4eec\u4e0d\u5efa\u8bae\u5bf9\u6b64\u95ee\u9898\u7684Large\u6570\u636e\u96c6\u4f7f\u7528\u89e3\u91ca/\u6162\u901f\u8bed\u8a00","title":"\u7535\u5f71\u7968\u95e8\u7968\u9884\u5b9a"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#analysis_2","text":"\u4e00\u822c\u6700\u5927\u95ee\u9898\u6700\u5c0f\u5316\uff08\u6700\u5c0f\u95ee\u9898\u6700\u5927\u5316\uff09\u7528\u4e8c\u5206\u7b54\u6848\u6cd5 \u5206\u6790 \u8bf7\u6c42\u7684\u53ef\u80fd\u6392\u5e8f\u6570\u91cf\u662fFactorial(Q),\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u6d4b\u8bd5\u96c6\u90fd\u4e0d\u591f\u5feb\u3002\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u5bf9\u4e8e\u6240\u9009\u62e9\u7684\u8bf7\u6c42\u6392\u5e8f\uff0c\u7cfb\u7edf\u5728\u4e0a\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u9884\u8ba2\u7684\u5e2d\u4f4d\u6570\u91cf\u4e0d\u4f9d\u8d56\u4e8e\u5148\u524dQ-1\u8bf7\u6c42\u7684\u6392\u5e8f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u627e\u5230\u6700\u540e\u5904\u7406\u7684\u8bf7\u6c42\u5f00\u59cb\uff0c\u7136\u540e\u5411\u540e\u79fb\u5411\u5148\u524d\u7684\u8bf7\u6c42\u3002\u7b54\u6848\u662fQ\u6b65\u9aa4\u4e2d\u9884\u8ba2\u7684\u6700\u4f4e\u5ea7\u4f4d\u6570\u3002 \u53e6\u4e00\u4e2a\u89c2\u5bdf\u662f\uff0c\u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u53ef\u4ee5\u4ece\u5269\u4f59\u7684\u96c6\u5408\u4e2d\u8d2a\u5fc3\u5730\u9009\u62e9\u6700\u540e\u4e00\u4e2a\u8bf7\u6c42\uff1a\u6211\u4eec\u53ef\u4ee5\u9884\u8ba2\u6700\u5927\u5ea7\u4f4d\u6570\u3002\u4e00\u4e2a\u76f4\u89c2\u7684\u8bc1\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ea4\u6362\u53c2\u6570\u6765\u8bc1\u660e\u8fd9\u4e00\u89c2\u5bdf\u7ed3\u679c\uff0c\u56e0\u4e3a\u9009\u62e9\u9884\u8ba2\u8f83\u5c11\u5ea7\u4f4d\u7684\u8bf7\u6c42\u4e0d\u4f1a\u7ed9\u6211\u4eec\u66f4\u597d\u7684\u7b54\u6848\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 \u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0\u5c06\u662fO\uff08N\u00d7Q\uff09\u7684\u987a\u5e8f\uff0c\u5176\u4e2d\u6211\u4eec\u4f7f\u7528\u9488\u5bf9\u6bcf\u4e2aQ\u6b65\u9aa4\u7684\u626b\u63cf\u7ebf\u7b97\u6cd5sweep line algorithm \u91cd\u65b0\u8ba1\u7b97O\uff08N\uff09\u4e2d\u7684\u5269\u4f59\u8bf7\u6c42\u7684\u5ea7\u4f4d\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53e6\u4e00\u4e2a\u89c2\u5bdf\u6765\u52a0\u5feb\u901f\u5ea6\uff1a\u8bf7\u6c42\u8986\u76d6\u7684\u552f\u4e00\u8303\u56f4\u7684\u6570\u91cf\u6700\u5927\u4e3a2 * Q\uff0c\u8fd9\u5c06\u4f7f\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684O\uff08Q2\uff09\u4e2d\u8fd0\u884c\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 \u8d2a\u5fc3 + \u7ebf\u6bb5\u6811 \u8ba9\u6211\u4eec\u5c1d\u8bd5\u52a0\u5feb\u91cd\u65b0\u8ba1\u7b97\u6bcf\u4e2a\u6b65\u9aa4\u53ef\u4ee5\u9884\u8ba2\u7684\u5ea7\u4f4d\u6570\u91cf\u7684\u7f13\u6162\u8fc7\u7a0b\u5bf9\u4e8e\u6bcf\u4e2a\u5ea7\u4f4d\uff0c\u8ba9\u6211\u4eec\u5c06\u5ea7\u4f4d\u7684\u4ef7\u503c\u8868\u793a\u4e3a\u8bd5\u56fe\u9884\u8ba2\u6b64\u5ea7\u4f4d\u7684\u5269\u4f59\u8bf7\u6c42\u6570\u91cf\u3002\u6bcf\u5f53\u5ea7\u4f4d\u7684\u4ef7\u503c\u964d\u81f31\u65f6\uff0c\u6211\u4eec\u4f1a\u589e\u52a0\u6211\u4eec\u53ef\u4ee5\u4e3a\u5305\u542b\u6b64\u5ea7\u4f4d\u9884\u8ba2\u7684\u76f8\u5e94\u8bf7\u6c42\u9884\u8ba2\u7684\u5ea7\u4f4d\u6570\u3002 \u7531\u4e8e\u8bf7\u6c42\u7531\u95f4\u9694\u8868\u793a\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u95f4\u9694\u6811\u6765\u652f\u6301\u5728\u6811\u7684\u521d\u59cb\u6784\u9020\u4e4b\u540e\u79fb\u9664\u95f4\u9694\u7684\u64cd\u4f5c\u3002\u533a\u95f4\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5b58\u50a8\u8986\u76d6\u5b83\u7684\u95f4\u9694\u96c6\uff0c\u4ee5\u53ca\u5176\u8303\u56f4\u5185\u4efb\u4f55\u5ea7\u4f4d\u7684\u6700\u5c0f\u503c\u3002\u6bcf\u5f53\u79fb\u9664\u64cd\u4f5c\u4f7f\u6700\u5c0f\u503c\u53d8\u4e3a1\u65f6\uff0c\u6211\u4eec\u6cbf\u6811\u5411\u4e0b\u8d70\uff0c\u627e\u5230\u6210\u4e3a\u4e00\u4e2a\u7684\u5ea7\u4f4d\uff0c\u7136\u540e\u5411\u4e0a\u8d70\u56de\u6811\uff0c\u627e\u51fa\u54ea\u4e2a\u95f4\u9694\u662f\u73b0\u5728\u8986\u76d6\u8be5\u5ea7\u4f4d\u7684\u552f\u4e00\u95f4\u9694\u3002\u6211\u4eec\u73b0\u5728\u5c06\u5ea7\u4f4d\u7684\u503c\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927\uff0c\u4ee5\u4fbf\u6211\u4eec\u4e0d\u518d\u5904\u7406\u5b83\u3002\u6bcf\u4e2a\u5ea7\u4f4d\u53ea\u53d1\u751f\u4e00\u6b21\uff0c\u603b\u644a\u8fd8\u6210\u672c\u4e3aO\uff08NlogN\uff09\u3002\u603b\u7684\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e00\u4e2a\u6052\u5b9a\u7684\u65f6\u95f4\u96c6\uff08\u6bd4\u5982\u4e00\u4e2ahashset\uff09\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u662fO\uff08Nlog\uff08Q + N\uff09\uff09\u3002","title":"Analysis"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_10","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_11","text":"1.\u7531\u4e8e\u7cfb\u7edf\u5728\u7b2cQ\u4e2a\u8ba2\u5355\u9884\u5b9a\u7684\u5e2d\u4f4d\u6570\u4e0d\u4f9d\u8d56\u4e8e\u524dQ-1\u4e2a\u8ba2\u5355\u7684\u6392\u5e8f\uff0c\u53ea\u53d6\u51b3\u4e8e\u54ea\u4e9b\u5ea7\u4f4d\u88ab\u5360\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u9006\u5e8f\u5904\u7406 2.\u53ef\u7528\u8d2a\u5fc3\u7b56\u7565\u627e\u51fa\u7b2cQ\u4e2a\u8ba2\u5355\uff0c\u5373\u7b2cQ\u4e2a\u8ba2\u5355\u76f8\u6bd4\u4e8e\u5176\u4ed6\u7684\u8ba2\u5355\uff08\u5373\u524d\u9762\u7684Q-1\u4e2a\u8ba2\u5355\uff09\u6ca1\u6709\u88ab\u524d\u9762\u8ba2\u5355\u8986\u76d6\u7684\u6700\u591a\u7684\u8ba2\u5355 3.","title":"\u89e3\u6cd5\u4e00 \u8d2a\u5fc3 + \u7ebf\u6bb5\u6811"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#todo","text":"\u4e8c\u5206\u3002 \u91cd\u70b9\u5728\u4e8e\u5224\u65ad\u662f\u5426\u53ef\u884c\u9636\u6bb5\u3002 \u9996\u5148\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u9884\u5b9a\uff0c\u5b83\u4eec\u53ea\u6709\u4e24\u79cd\u6267\u884c\u987a\u5e8f\uff0ca\u5148b\u540e\uff0c\u6216b\u5148a\u540e\u3002 \u73b0\u5728\u5224\u65ad\u7684\u601d\u8def\u662f\uff0c \u9996\u5148\u6839\u636e\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u7b2c\u4e00\u5173\u952e\u5b57\u4e3a\u8d77\u59cb\u70b9\uff0c\u7b2c\u4e8c\u5173\u952e\u5b57\u4e3a\u2212 -\u2212\u7ec8\u6b62\u70b9\uff0c \u8981\u4f7f\u5f97\u8fd9\u4e9b\u9884\u5b9a\u5c3d\u53ef\u80fd\u6ee1\u8db3\u6700\u5c0f\u503ck\u7684\u9700\u6c42\uff0c\u6bcf\u6b21\u6c42\u5f97\u7b2ci \u4e2a\u533a\u95f4\u6ee1\u8db3\u9700\u6c42\u540e\uff0c\u6700\u540e\u4e00\u4e2a\u5ea7\u4f4d\u540e\u4e00\u4e2a\u5ea7\u4f4d\uff0c\u8bbe\u4e3aed \u5bf9\u4e8e\u4e24\u4e2a\u533a\u95f4\uff0c\u8fdb\u884c\u4ee5\u4e0b\u8ba8\u8bba\uff1a \u4e24\u4e2a\u533a\u95f4\u76f8\u79bb\uff0c\u65e0\u9700\u8981\u8fdb\u884c\u7279\u522b\u8ba8\u8bba\uff1b \u4e24\u4e2a\u533a\u95f4\u76f8\u4ea4\uff0c \u5982\u679c\u540e\u4e00\u4e2a\u533a\u95f4\u8d77\u59cb\u70b9\u5728ed \u4e4b\u540e\uff0c\u90a3\u4e48\u5219\u53ef\u4ee5\u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u8ba9\u540e\u8005\u5148\u6267\u884c\uff1b \u5982\u679c\u540e\u4e00\u4e2a\u533a\u95f4\u8d77\u59cb\u70b9\u5728ed\u4e4b\u524d\uff0c\u90a3\u4e48\u53ea\u80fd\u5148\u5c06\u540e\u8005\u8d77\u59cb\u70b9\u504f\u79fb\u5230ri+1\uff0c\u5426\u5219\u7b2ci \u4e2a\u533a\u95f4\u5c31\u6ee1\u8db3\u4e0d\u4e86\u4e86\uff1b \u5982\u679c\u524d\u8005\u5305\u542b\u4e86\u540e\u8005\uff0c\u90a3\u4e48\uff0c\u540e\u8005\u5fc5\u987b\u5148\u6267\u884c\uff0c\u56e0\u6b64\u5728\u8ba1\u7b97\u524d\u8005\u6709\u6548\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u9700\u8981\u8df3\u8fc7\u540e\u8005\uff1b \u6839\u636e\u4e0a\u8ff0\u89c4\u5219\uff0c\u53ef\u4ee5\u5728O(Q2)\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5224\u65ad\uff0c\u7b97\u6cd5\u603b\u590d\u6742\u5ea6\u4e3aO(Q2logN) \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u5bf9\u4e8e\u4e00\u4e2a booking \u6765\u8bf4\uff0c\u5982\u679c\u5b83\u653e\u5728\u6700\u540e\uff0c\u90a3\u4e48\u5b83\u80fd\u786e\u5b9a\u7684seat \u6570\u76ee\u4e00\u5b9a\u662f\u56fa\u5b9a\u7684\uff0c\u4e0e\u524d\u9762 booking \u7684\u987a\u5e8f\u65e0\u5173\u3002 \u540c\u65f6\u6211\u4eec \u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u4e00\u4e2a \u8d2a\u5fc3\u7684\u505a\u6cd5 \u4e00\u5b9a\u662f\u6b63\u786e\u7684: \u5012\u7740\u786e\u5b9abooking \u7684\u987a\u5e8f\uff0c\u6bcf\u6b21\u53d6\u80fdbooking \u5230\u7684seat \u6700\u591a\u7684\u53bb\u6389\uff0c\u7136\u540e\u5728\u5269\u4f59\u96c6\u5408\u4e2d\u5982\u6cd5\u70ae\u5236 // In the name of God #include <iostream> #include <algorithm> #include <fstream> #include <vector> #include <deque> #include <assert.h> #include <queue> #include <stack> #include <set> #include <map> #include <stdio.h> #include <string.h> #include <utility> #include <math.h> #include <bitset> #include <iomanip> #include <complex> using namespace std; #define rep(i, a, b) for (int i = (a), i##_end_ = (b); i < i##_end_; ++i) #define debug(...) fprintf(stderr, __VA_ARGS__) #define mp make_pair #define x first #define y second #define pb push_back #define SZ(x) (int((x).size())) #define ALL(x) (x).begin(), (x).end() template<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; } template<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; } template<typename T> inline bool smin(T &a, const T &b) { return a > b ? a = b : a; } template<typename T> inline bool smax(T &a, const T &b) { return a < b ? a = b : a; } typedef long long LL; const int N = (int) 1e6 + 6, mod = (int) 0; int n, q, xl[N], xr[N], mvl[N]; pair<int, int> sr[N]; int check(int k) { for (int j = 0; j < q; ++j) xl[j] = sr[j].first, xr[j] = -sr[j].second, mvl[j] = xl[j]; for (int j = 0; j < q; ++j) { int l = xl[j], r = xr[j]; int st = mvl[j]; int allowed_after = r; int cnt = 0; for (int i = j + 1; i < q; ++i) { if (xr[i] <= r) { if (xl[i] <= st) { st = max(st, xr[i]); } else { cnt += xl[i] - st; st = max(st, xr[i]); if (cnt >= k) { allowed_after = xl[i] - (cnt - k); break; } } } } if (cnt < k) { cnt += r - st; if (cnt < k) return 0; allowed_after = r - (cnt - k); } for (int i = j + 1; i < q; ++i) { if (xl[i] >= allowed_after) break; if (xr[i] > r) { mvl[i] = max(mvl[i], r); } } } return 1; } int main() { int tc; cin >> tc; for (int tt = 1; tt <= tc; ++tt) { cout << \"Case #\" << tt << \": \"; cin >> n >> q; for (int j = 0; j < q; ++j) { cin >> xl[j] >> xr[j], --xl[j]; sr[j] = mp(xl[j], -xr[j]); } sort(sr, sr + q); int bl = 0, br = n + 1; while (bl < br - 1) { int bm = bl + br >> 1; if (check(bm)) { bl = bm; } else { br = bm; } } cout << bl << '\\n'; } }","title":"\u89e3\u6cd5\u4e8c \u4e8c\u5206\u7b54\u6848\u6cd5 \u6700\u5c0f\u95ee\u9898\u6700\u5927\u5316 [todo]"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#round-c","text":"","title":"Round C"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#wiggle-walk","text":"","title":"Wiggle Walk"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_12","text":"\u95ee\u9898 Banny\u521a\u4e70\u4e86\u4e00\u53f0\u65b0\u7684\u53ef\u7f16\u7a0b\u673a\u5668\u4eba\u3002\u4e3a\u4e86\u6d4b\u8bd5\u4ed6\u7684\u7f16\u7801\u6280\u80fd\uff0c\u4ed6\u5c06\u673a\u5668\u4eba\u653e\u7f6e\u5728\u4e00\u4e2a\u6b63\u65b9\u5f62\u7f51\u683c\u4e2d\uff0c\u5176\u4e2dR\u884c\uff08\u4ece\u5317\u5230\u5357\u7f16\u53f7\u4e3a1\u5230R\uff09\u548cC\u5217\uff08\u4ece\u897f\u5230\u4e1c\u7f16\u53f7\u4e3a1\u5230C\uff09\u3002\u884cr\u548c\u5217c\u4e2d\u7684\u65b9\u5757\u8868\u793a\u4e3a\uff08r\uff0cc\uff09\u3002 \u6700\u521d\u673a\u5668\u4eba\u5728\u65b9\u5757\uff08SR\uff0cSC\uff09\u5f00\u59cb\u3002\u73ed\u5c3c\u5c06\u7ed9\u4e88\u673a\u5668\u4ebaN\u6307\u4ee4\u3002\u6bcf\u6761\u6307\u4ee4\u662fN\uff0cS\uff0cE\u6216W\u4e2d\u7684\u4e00\u6761\uff0c\u6307\u793a\u673a\u5668\u4eba\u5206\u522b\u5411\u5317\uff0c\u5411\u5357\uff0c\u5411\u4e1c\u6216\u5411\u897f\u79fb\u52a8\u4e00\u4e2a\u65b9\u683c\u3002 \u5982\u679c\u673a\u5668\u4eba\u79fb\u52a8\u5230\u4e4b\u524d\u6240\u5904\u7684\u65b9\u5757\uff0c\u673a\u5668\u4eba\u5c06\u7ee7\u7eed\u6cbf\u540c\u4e00\u65b9\u5411\u79fb\u52a8\uff0c\u76f4\u5230\u5b83\u5230\u8fbe\u4e4b\u524d\u672a\u66fe\u8fdb\u5165\u8fc7\u7684\u65b9\u5757\u3002 Banny\u6c38\u8fdc\u4e0d\u4f1a\u7ed9\u673a\u5668\u4eba\u4e00\u4e2a\u6307\u4ee4\uff0c\u4f7f\u5b83\u79fb\u51fa\u7f51\u683c\u3002 \u4f60\u53ef\u4ee5\u5e2e\u52a9Banny\u6309\u7167N\u6307\u4ee4\u786e\u5b9a\u673a\u5668\u4eba\u5c06\u5b8c\u6210\u54ea\u4e2a\u65b9\u683c\uff1f \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u91cf\uff0cT\u3002T\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\u3002\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4ee5\u5305\u542b\u4e94\u4e2a\u6574\u6570N\uff0cR\uff0cC\uff0cSR\u548cSC\uff0c\u6307\u4ee4\u6570\uff0c\u884c\u6570\uff0c\u5217\u6570\uff0c\u673a\u5668\u4eba\u7684\u8d77\u59cb\u884c\u548c\u8d77\u59cb\u5217\u7684\u884c\u5f00\u59cb\u3002 \u7136\u540e\uff0c\u53e6\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u5305\u542bN\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32;\u8fd9\u4e9b\u5b57\u7b26\u4e2d\u7684\u7b2ci\u4e2a\u662fBanny\u7ed9\u673a\u5668\u4eba\uff08N\uff0cS\uff0cE\u6216W\u4e2d\u7684\u4e00\u4e2a\uff0c\u5982\u4e0a\u6240\u8ff0\uff09\u7684\u7b2ci\u4e2a\u6307\u4ee4\u3002 \u4ea7\u91cf \u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\u5305\u542bCase #x\uff1ar c\uff0c\u5176\u4e2dx\u662f\u6d4b\u8bd5\u7528\u4f8b\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0cr\u662f\u673a\u5668\u4eba\u5b8c\u6210\u7684\u884c\uff0cc\u662f\u673a\u5668\u4eba\u5b8c\u6210\u7684\u5217\u3002 \u8303\u56f4 \u5185\u5b58\u9650\u5236\uff1a1GB\u3002 1\u2264T\u2264100\u3002 1\u2264R\u22645\u00d7104\u3002 1\u2264C\u22645\u00d7104\u3002 1\u2264SR\u2264R 1\u2264SC\u2264C \u8bf4\u660e\u4e0d\u4f1a\u5bfc\u81f4\u673a\u5668\u4eba\u79fb\u51fa\u7f51\u683c\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 \u65f6\u95f4\u9650\u5236\uff1a20\u79d2\u3002 1\u2264N\u2264100\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 \u65f6\u95f4\u9650\u5236\uff1a60\u79d2\u3002 1\u2264N\u22645\u00d7104\u3002 \u6837\u54c1 \u8f93\u5165 \u4ea7\u91cf Input 3 5 3 6 2 3 EEWNS 4 3 3 1 1 SESE 11 5 8 3 4 NEESSWWNESE \u6848\u4f8b\uff031\uff1a3 2 \u6848\u4f8b\uff032\uff1a3 3 \u6848\u4f8b\uff033\uff1a3 7 \u6837\u672c\u6848\u4f8b\uff031\u5bf9\u5e94\u4e8e\u5de6\u4e0a\u56fe\uff0c\u6837\u672c\u6848\u4f8b\uff032\u5bf9\u5e94\u4e8e\u53f3\u4e0a\u56fe\uff0c\u6837\u672c\u6848\u4f8b\uff033\u5bf9\u5e94\u4e8e\u4e0b\u56fe\u3002\u5728\u6bcf\u4e2a\u56fe\u4e2d\uff0c\u9ec4\u8272\u65b9\u5757\u662f\u673a\u5668\u4eba\u5f00\u59cb\u7684\u65b9\u683c\uff0c\u800c\u7eff\u8272\u65b9\u5757\u662f\u673a\u5668\u4eba\u5b8c\u6210\u7684\u65b9\u683c\u3002","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_13","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#bruce-on2","text":"\"\"\" small dataset \"\"\" def getPos(N, R, C, SR, SC, instructions): iset = {(SR, SC)} for c in instructions: if c == 'N': while((SR - 1, SC) in iset): SR -= 1 SR -= 1 elif c == 'S': while((SR + 1, SC) in iset): SR += 1 SR += 1 elif c == 'W': while((SR, SC - 1) in iset): SC -= 1 SC -= 1 elif c == 'E': while((SR, SC + 1) in iset): SC += 1 SC += 1 iset = iset | {(SR, SC)} return SR, SC T = int(input().strip()) for i in range(1, T + 1): N, R, C, SR, SC = map(int, input().strip().split()) instructions = map(str, input()) ans1, ans2 = getPos(N, R,W C, SR, SC, instructions) print(\"Case #{}: {} {}\".format(i, ans1, ans2))","title":"bruce \u6a21\u62df\u6cd5 O(n^2)"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#onlogn","text":"\u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 \u4eba\u4eec\u53ef\u80fd\u8bd5\u56fe\u7b80\u5355\u5730\u6a21\u62df\u95ee\u9898\u9648\u8ff0\u4e2d\u63d0\u5230\u7684\u5185\u5bb9\uff0c\u5373\u7ee7\u7eed\u6cbf\u6307\u5b9a\u65b9\u5411\u79fb\u52a8\u673a\u5668\u4eba\u76f4\u5230\u5b83\u5230\u8fbe\u672a\u8bbf\u95ee\u7684\u65b9\u683c\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c06\u5177\u6709O\uff08N2\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5c3d\u7ba1\u5bf9\u4e8e\u6d4b\u8bd5\u96c61\u6765\u8bf4\u8db3\u591f\u597d\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 \u4e0a\u8ff0\u65b9\u6cd5\u7684\u95ee\u9898\u5728\u4e8e\u5b83\u8bbf\u95ee\u4e86\u8bb8\u591a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u65b9\u5757\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u65b9\u5757\u5c06\u662f\u6240\u6709\u5148\u524d\u8bbf\u95ee\u8fc7\u7684\u65b9\u5757\uff08\u8003\u8651\u8f93\u5165\uff0c\u5728\u6574\u4e2a\u533a\u57df\u4e2d\u7ed9\u51fa\u4ea4\u66ff\u7684E\u548cW\uff09\u3002\u5982\u679c\u6211\u4eec\u4ee5\u67d0\u79cd\u65b9\u5f0f\u66f4\u5feb\u5730\u5230\u8fbe\u6bcf\u4e2a\u6307\u4ee4\u7684\u76ee\u6807\u65b9\u5757\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u964d\u4f4e\u590d\u6742\u6027\u3002 Let's say the robot is in some row r and received an instruction W. Now, all the already visited squares (if any) it will pass before reaching an unvisited square have to form a contiguous interval in row r. This suggests that we may use intervals to represent all the visited squares in the same row. \u5047\u8bbe\u673a\u5668\u4eba\u5728\u67d0\u884cr\u4e2d\u5e76\u4e14\u63a5\u6536\u5230\u6307\u4ee4W.\u73b0\u5728\uff0c\u5728\u5230\u8fbe\u672a\u8bbf\u95ee\u7684\u6b63\u65b9\u5f62\u4e4b\u524d\u5b83\u5c06\u901a\u8fc7\u7684\u6240\u6709\u5df2\u7ecf\u8bbf\u95ee\u7684\u6b63\u65b9\u5f62\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u5fc5\u987b\u5728\u884cr\u4e2d\u5f62\u6210\u8fde\u7eed\u7684\u95f4\u9694\u3002\u8fd9\u8868\u660e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u533a\u95f4\u6765\u8868\u793a\u540c\u4e00\u884c\u4e2d\u7684\u6240\u6709\u8bbf\u95ee\u8fc7\u7684\u65b9\u5757\u3002 \u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u8003\u8651\u6211\u4eec\u4e3a\u7f51\u683c\u7684\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u90fd\u6709\u4e00\u7ec4\u95f4\u9694\u6765\u8868\u793a\u5728\u8be5\u7279\u5b9a\u884c\u6216\u5217\u4e2d\u8bbf\u95ee\u4e86\u54ea\u4e9b\u5355\u5143\u683c\uff0c\u8ba9\u6211\u4eec\u79f0\u5b83\u4eec\u4e3a\u95f4\u9694\u96c6\u3002\u6700\u521d\uff0c\u9664\u4e86\u5bf9\u5e94\u4e8e\u5177\u6709\u5355\u4e2a\u95f4\u9694\uff08SC\uff0cSC\uff09\u7684\u884cSR\u7684\u96c6\u5408\u4ee5\u53ca\u5bf9\u5e94\u4e8e\u5177\u6709\u5355\u4e2a\u95f4\u9694\uff08SR\uff0cSR\uff09\u7684\u5217SC\u7684\u96c6\u5408\u4e4b\u5916\uff0c\u6240\u6709\u8fd9\u4e9b\u96c6\u5408\u90fd\u662f\u7a7a\u7684\u3002 \u73b0\u5728\uff0c\u4f7f\u7528\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8ba9\u6211\u4eec\u5c1d\u8bd5\u627e\u5230\u673a\u5668\u4eba\u7684\u76ee\u6807\u65b9\u5757\u3002\u5047\u8bbe\u5b83\u5728\u65b9\u5f62\uff08r\uff0cc\uff09\u5e76\u5f97\u5230\u6307\u4ee4W.\u4e3a\u6b64\uff0c\u9996\u5148\u6211\u4eec\u641c\u7d22\u5bf9\u5e94\u4e8e\u884cr\u7684\u533a\u95f4\u96c6\u3002\u6211\u4eec\u5c06\u5c1d\u8bd5\u627e\u51fa\u6b64\u96c6\u5408\u4e2d\u7684\u54ea\u4e2a\u533a\u95f4\u5305\u542bc\uff08\u5fc5\u987b\u786e\u5b9a\u4e3a\u4e00\u4e2a\uff01\uff09\u3002\u4e00\u65e6\u6211\u4eec\u627e\u5230\u5b83\uff0c\u6211\u4eec\u7acb\u5373\u77e5\u9053\u4ec0\u4e48\u662f\u673a\u5668\u4eba\u7684\u65b0\u4f4d\u7f6e\uff01\u5f88\u660e\u663e\uff0c\u540c\u6837\u7684\u65b9\u6cd5\u4e5f\u9002\u7528\u4e8e\u6240\u6709\u5176\u4ed6\u65b9\u5411\u3002 \u73b0\u5728\u5269\u4e0b\u7684\u5c31\u662f\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\u6765\u9002\u5f53\u5730\u66f4\u65b0\u6211\u4eec\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4fbf\u5305\u62ec\u65b0\u8bbf\u95ee\u7684\u5e7f\u573a\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u5728\u4e24\u8005\u4e2d\u627e\u5230\u8be5\u65b9\u5757\u7684\u76f8\u90bb\u95f4\u9694\uff0c\u76f8\u5e94\u7684\u5217\u95f4\u9694\u96c6\u548c\u76f8\u5e94\u7684\u884c\u95f4\u9694\u96c6\u6765\u4ee5\u975e\u5e38\u6807\u51c6\u7684\u65b9\u5f0f\u5b8c\u6210\uff0c\u7136\u540e\u901a\u8fc7\u6269\u5c55\u5176\u4e2d\u4e00\u4e2a\u95f4\u9694\u6216\u5408\u5e76\u5b83\u4eec\u6216\u6dfb\u52a0\u5b83\u4eec\u6765\u66f4\u65b0\u5b83\u4eec\u4e00\u4e2a\u65b0\u76841\u957f\u5ea6\u95f4\u9694\u3002 \u7531\u4e8e\u6211\u4eec\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\u6700\u591a\u6dfb\u52a0\u4e00\u4e2a\u95f4\u9694\uff0c\u56e0\u6b64\u95f4\u9694\u7684\u6570\u91cf\u662fO\uff08N\uff09\u3002\u7531\u4e8e\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u5173\u4e8e\u67e5\u627e/\u63d2\u5165/\u5220\u9664\u5355\u4e2a\u95f4\u9694\uff0c\u56e0\u6b64\u6240\u6709\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u53ef\u4ee5\u5728O\uff08log\uff08N\uff09\uff09\u65f6\u95f4\u5185\u8f7b\u677e\u5904\u7406\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u6240\u6709\u8fd0\u884c\u65f6\u95f4\u90fd\u662fO\uff08Nlog\uff08N\uff09\uff09\u3002\u4f7f\u7528\u54c8\u5e0c\u8868\u4e5f\u5b58\u5728\u9488\u5bf9\u6b64\u95ee\u9898\u7684O\uff08N\uff09\u89e3\u51b3\u65b9\u6848\u3002\u5b83\u7559\u7ed9\u8bfb\u8005\u7ec3\u4e60\u3002","title":"\u95f4\u9694\u96c6 O(nlogn)"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#round-d","text":"","title":"Round D"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#x-or-what","text":"","title":"X or what \u5f02\u6216\u95ee\u9898"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_14","text":"Steven has an array of N non-negative integers. The i-th integer (indexed starting from 0) in the array is Ai. Steven really likes subintervals of A that are xor-even. Formally, a subinterval of A is a pair of indices (L, R), denoting the elements AL, AL+1, ..., AR-1, AR. The xor-sum of this subinterval is AL xor AL+1 xor ... xor AR-1 xor AR, where xor is the bitwise exclusive or. A subinterval is xor-even if its xor-sum has an even number of set bits in its binary representation. Steven would like to make Q modifications to the array. The i-th modification changes the Pi-th (indexed from 0) element to Vi. Steven would like to know, what is the size of the xor-even subinterval of A with the most elements after each modification? Input The first line of the input gives the number of test cases, T. T test cases follow. Each test case starts with a line containing two integers N and Q, denoting the number of elements in Steven's array and the number of modifications, respectively. The second line contains N integers. The i-th of them gives Ai indicating the i-th integer in Steven's array. Then, Q lines follow, describing the modifications. The i-th line contains Pi and Vi, The i-th modification changes the Pi-th element to Vi. indicating that the i-th modification changes the Pi-th (indexed from 0) element to Vi. Output For each test case, output one line containing Case #x: y_1 y_2 ... y_Q, where x is the test case number (starting from 1) and y_i is the number of elements in the largest xor-even subinterval of A after the i-th modification. If there are no xor-even subintervals, then output 0. Limits Time limit: 40 seconds per test set. Memory limit: 1GB. 1 \u2264 T \u2264 100. 0 \u2264 Ai < 1024. 0 \u2264 Pi < N. 0 \u2264 Vi < 1024. Test set 1 (Visible) 1 \u2264 N \u2264 100. 1 \u2264 Q \u2264 100. Test set 2 (Hidden) 1 \u2264 N \u2264 105. 1 \u2264 Q \u2264 105. Sample Input Output 2 4 3 10 21 3 7 1 13 0 32 2 22 5 1 14 1 15 20 26 4 26 Case #1: 4 3 4 Case #2: 4 In Sample Case 1, N = 4 and Q = 3. After the 1st modification, A is [10, 13, 3, 7]. The subinterval (0, 3) has xor-sum 10 xor 13 xor 3 xor 7 = 3. In binary, the xor-sum is 112, which has an even number of 1 bits, so the subinterval is xor-even. This is the largest subinterval possible, so the answer is 4. After the 2nd modification, A is [32, 13, 3, 7]. The largest xor-even subinterval is (0, 2), which has xor-sum 32 xor 13 xor 3 = 46. In binary, this is 1011102. After the 3rd modification, A is [32, 13, 22, 7]. The largest xor-even subinterval is (0, 3) again, which has xor-sum 32 xor 13 xor 22 xor 7 = 60. In binary, this is 1111002. In Sample Case 2, N = 5 and Q = 1. After the 1st modification, A is [14, 1, 15, 20, 26]. The largest xor-even subinterval is (1, 4), which has xor sum 1 xor 15 xor 20 xor 26 = 0. In binary, this is 02. \u53f2\u8482\u6587\u6709\u4e00\u7ec4N\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u7ec4\u4e2d\u7684\u7b2ci\u4e2a\u6574\u6570\uff08\u4ece0\u5f00\u59cb\u7d22\u5f15\uff09\u662fAi\u3002 \u53f2\u8482\u6587\u771f\u7684\u5f88\u559c\u6b22A\u7684\u5b50\u533a\u95f4\u3002\u5f62\u5f0f\u4e0a\uff0cA\u7684\u5b50\u533a\u95f4\u662f\u4e00\u5bf9\u7d22\u5f15\uff08L\uff0cR\uff09\uff0c\u8868\u793a\u5143\u7d20AL\uff0cAL + 1\uff0c...\uff0cAR-1\uff0cAR\u3002\u8be5\u5b50\u533a\u95f4\u7684xor-sum\u662fAL xor AL + 1 xor ... xor AR-1 xor AR\uff0c\u5176\u4e2dxor\u662f\u6309\u4f4d\u5f02\u6216\u3002 \u5b50\u533a\u95f4\u7684xor-even\u8868\u793a\u5b50\u533a\u95f4xor-sum\u5728\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u5177\u6709\u5076\u6570\u4e2a1\u3002 \u53f2\u8482\u6587\u60f3\u5bf9\u9635\u5217\u8fdb\u884cQ\u4fee\u6539\u3002\u7b2ci\u6b21\u4fee\u6539\u5c06Pi-th\uff08\u7d22\u5f15\u81ea0\uff09\u5143\u7d20\u66f4\u6539\u4e3aVi\u3002 Steven\u60f3\u77e5\u9053\uff0c\u6bcf\u6b21\u4fee\u6539\u540e\uff0cA\u7684xor-even\u5b50\u533a\u95f4\u7684\u6700\u5927\u8303\u56f4\u5927\u5c0f\u662f\u591a\u5c11\uff1f \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u91cf\uff0cT\u3002T\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\u3002 \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4ee5\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u548cQ\u7684\u884c\u5f00\u59cb\uff0c\u5206\u522b\u8868\u793aSteven\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6570\u548c\u4fee\u6539\u6570\u3002 \u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6574\u6570\u3002\u5176\u4e2d\u7684\u7b2ci\u4e2a\u7ed9\u51faAi\u8868\u793aSteven\u9635\u5217\u4e2d\u7684\u7b2ci\u4e2a\u6574\u6570\u3002 \u7136\u540e\uff0cQ\u884c\u8ddf\u968f\uff0c\u63cf\u8ff0\u4fee\u6539\u3002\u7b2ci\u884c\u5305\u542bPi\u548cVi\uff0c\u7b2ci\u6b21\u4fee\u6539\u5c06\u7b2cPi\u4e2a\u5143\u7d20\u66f4\u6539\u4e3aVi\u3002\u6307\u793a\u7b2ci\u4e2a\u4fee\u6539\u5c06Pi-th\uff08\u4ece0\u7d22\u5f15\uff09\u5143\u7d20\u6539\u53d8\u4e3aVi\u3002 \u4ea7\u91cf \u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\u5305\u542bCase #x\uff1ay_1 y_2 ... y_Q\uff0c\u5176\u4e2dx\u662f\u6d4b\u8bd5\u7528\u4f8b\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0cy_i\u662fA\u4e4b\u540e\u7684\u6700\u5927xor-even\u5b50\u533a\u95f4\u4e2d\u7684\u5143\u7d20\u6570\u3002\u7b2ci\u6b21\u4fee\u6539\u3002\u5982\u679c\u6ca1\u6709xor-even\u5b50\u533a\u95f4\uff0c\u5219\u8f93\u51fa0\u3002 \u8303\u56f4 \u65f6\u95f4\u9650\u5236\uff1a\u6bcf\u4e2a\u6d4b\u8bd5\u96c640\u79d2\u3002 \u5185\u5b58\u9650\u5236\uff1a1GB\u3002 1\u2264T\u2264100\u3002 0\u2264Ai<1024\u3002 0\u2264Pi<N\u3002 0\u2264Vi<1024\u3002 \u6d4b\u8bd5\u88c5\u7f6e1\uff08\u53ef\u89c1\uff09 1\u2264N\u2264100\u3002 1\u2264Q\u2264100\u3002 \u6d4b\u8bd5\u88c5\u7f6e2\uff08\u9690\u85cf\uff09 1\u2264N\u2264105\u3002 1\u2264Q\u2264105\u3002 \u6837\u54c1 \u8f93\u5165 \u4ea7\u91cf 2 4 3 10 21 3 7 1 13 0 32 2 22 5 1 14 1 15 20 26 4 26 \u6848\u4f8b\uff031\uff1a4 3 4 \u6848\u4f8b\uff032\uff1a4 \u5728\u6837\u672c\u6848\u4f8b1\u4e2d\uff0cN = 4\u4e14Q = 3\u3002 \u5728\u7b2c\u4e00\u6b21\u4fee\u6539\u540e\uff0cA\u662f[10,13,3,7]\u3002\u5b50\u533a\u95f4\uff080,3\uff09\u5177\u6709xor-sum 10 x\u621613 xor 3 xor 7 = 3.\u5728\u4e8c\u8fdb\u5236\u4e2d\uff0cxor-sum\u4e3a112\uff0c\u5176\u5076\u6570\u4e3a1\u4f4d\uff0c\u56e0\u6b64\u5b50\u533a\u95f4\u4e3axor-even\u3002\u8fd9\u662f\u6700\u5927\u7684\u5b50\u533a\u95f4\uff0c\u6240\u4ee5\u7b54\u6848\u662f4\u3002 \u5728\u7b2c\u4e8c\u6b21\u4fee\u6539\u540e\uff0cA\u662f[32,13,3,7]\u3002\u6700\u5927\u7684xor-even\u5b50\u533a\u95f4\u662f\uff080,2\uff09\uff0c\u5176xor-sum\u4e3a32 xor 13 xor 3 = 46.\u5728\u4e8c\u8fdb\u5236\u4e2d\uff0c\u8fd9\u662f1011102\u3002 \u5728\u7b2c3\u6b21\u4fee\u6539\u540e\uff0cA\u662f[32,13,22,7]\u3002\u6700\u5927\u7684xor-even\u5b50\u533a\u95f4\u518d\u6b21\u4e3a\uff080,3\uff09\uff0c\u5176xor-sum\u4e3a32 xor 13 xor 22 xor 7 = 60.\u4e8c\u8fdb\u5236\u4e2d\uff0c\u8fd9\u662f1111002\u3002 \u5728\u6837\u672c\u60c5\u51b52\u4e2d\uff0cN = 5\u4e14Q = 1.\u5728\u7b2c\u4e00\u6b21\u4fee\u6539\u4e4b\u540e\uff0cA\u662f[14,1,15,20,26]\u3002\u6700\u5927\u7684xor-even\u5b50\u533a\u95f4\u662f\uff081,4\uff09\uff0c\u5176xor\u548c1 x\u621615 x\u621620 xor 26 = 0.\u5728\u4e8c\u8fdb\u5236\u4e2d\uff0c\u8fd9\u662f02\u3002","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_15","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#xor-pass","text":"# \u6c42\u4e8c\u8fdb\u52361\u7684\u4e2a\u6570 O(c) def _count1(n): c = 0 while n: n &= (n - 1) c += 1 return c # \u4e8c\u8fdb\u5236\u6570\u4e2d\u76841\u7684\u4e2a\u6570\u7684\u5947\u5076\u6027: \u5982\u679c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e2d\u76841\u7684\u4e2a\u6570\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u8fd4\u56de1\uff1b\u5982\u679c\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u8fd4\u56de0\u3002 # k+y-(x-k)=2*k+y-x def get_numbers(A, Ch): # \u4e8c\u8fdb\u5236\u4e2a\u6570\u6570\u7ec4 # Bi = [] # for i, num in enumerate(A): # # \u5076\u6570\u4f4d\u4e3a\u6b63 \u5947\u6570\u4f4d\u4f4d\u8d1f # Bi.append(_count1(num) if i & 1 == 0 else -_count1(num)) forward = [0] for i, num in enumerate(A): forward.append(forward[-1] + _count1(num) * (1 if i & 1 == 0 else -1)) ans = [] for i, (Pi, Vi) in enumerate(Ch): ori = forward[Pi + 1] - forward[Pi] diff = _count1(Vi) * (1 if Pi & 1 == 0 else -1) - ori for j in range(Pi + 1, len(forward)): forward[j] += diff # \u8ba1\u7b97\u7b2c\u4e00\u4e2a\u5947\u6570 \u7b2c\u4e00\u4e2a\u5076\u6570 \u6700\u540e\u4e00\u4e2a\u5947\u6570 \u6700\u540e\u4e00\u4e2a\u5076\u6570 first_odd = -1 first_even = 0 last_odd = -1 last_even = -1 for j in range(len(forward)): if forward[j] & 1 == 1: first_odd = j break # if forward[j] & 1 == 0 and first_even == -1: # first_even = j # if first_odd != -1 and first_even != -1: # break for j in range(len(forward) - 1, -1, -1): if forward[j] & 1 == 1 and last_odd == -1: last_odd = j if forward[j] & 1 == 0 and last_even == -1: last_even = j if last_odd != -1 and last_even != -1: break print((first_even, first_odd, last_even, last_odd)) temp = max(last_odd - first_odd, last_even - first_even) temp = temp if temp > 0 else 0 ans.append(str(temp)) return ans T = int(input().strip()) for i in range(1, T + 1): N, Q = map(int, input().strip().split()) A = list(map(int, input().strip().split())) Ch = [] for _ in range(Q): fix = tuple(map(int, input().strip().split())) Ch.append(fix) print(\"Case #{}: \".format(i) + \" \".join(get_numbers(A, Ch)))","title":"\u89e3\u6cd5\u4e00 \u5229\u7528\u5f02\u6216\u7684\u6027\u8d28 + \u9010\u5143\u7d20 xor \u5c0f\u6570\u636e\u96c6pass"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#set","text":"set\u6309\u503c\u6709\u5e8f #include <cstdio> #include <cstring> #include <algorithm> #include <iostream> #include <set> using namespace std; const int maxn = 1e5 + 5; int N, Q; int a[maxn]; set<int> s; int main(){ int T; int cas = 0; cin >> T; while(T--){ printf(\"Case #%d:\", ++cas); cin >> N >> Q; s.clear(); for(int i = 0;i < N;i++){ scanf(\"%d\", a + i); if(__builtin_popcount(a[i]) & 1){ s.insert(i); } } for(int i = 0;i < Q;i++){ int p, v; scanf(\"%d%d\", &p, &v); if(__builtin_popcount(v) & 1){ s.insert(p); }else{ s.erase(p); } if(s.size() & 1){ int ans = min(*s.begin() + 1, N - *s.rbegin()); printf(\" %d\", N - ans); }else{ printf(\" %d\", N); } } puts(\"\"); } return 0; }","title":"\u89e3\u6cd5\u4e8c \u5229\u7528set\u7684\u503c\u6709\u5e8f\u6027 + \u5947\u6570\u76f8\u51cf\u4e3a\u5076\u6570"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#round-g","text":"","title":"Round G"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#book-reading","text":"","title":"Book Reading"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_16","text":"Supervin is a librarian handling an ancient book with N pages, numbered from 1 to N . Since the book is too old, unfortunately M pages are torn out: page number P1 , P2 , ..., PM . Today, there are Q lazy readers who are interested in reading the ancient book. Since they are lazy, each reader will not necessarily read all the pages. Instead, the i-th reader will only read the pages that are numbered multiples of Ri and not torn out. Supervin would like to know the sum of the number of pages read by each reader.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#input","text":"The first line of the input gives the number of test cases, T . T test cases follow. Each test case begins with a line containing the three integers N , M , and Q , the number of pages in the book, the number of torn out pages in the book, and the number of readers, respectively. The second line contains M integers, the i-th of which is Pi . The third line contains Q integers, the i-th of which is Ri .","title":"Input"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#output","text":"For each test case, output one line containing Case #x: y , where x is the test case number (starting from 1) and y is the total number of pages that will be read by all readers.","title":"Output"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#limits","text":"Time limit: 40 seconds per test set. Memory limit: 1GB. 1 \u2264 T \u2264 100. 1 \u2264 P1 < P2 < ... < PM \u2264 N . 1 \u2264 Ri \u2264 N , for all i.","title":"Limits"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#test-set-1-visible","text":"1 \u2264 M \u2264 N \u2264 1000. 1 \u2264 Q \u2264 1000.","title":"Test set 1 (Visible)"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#test-set-2-hidden","text":"1 \u2264 M \u2264 N \u2264 105. 1 \u2264 Q \u2264 105.","title":"Test set 2 (Hidden)"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#sample","text":"Input Output 3 11 1 2 8 2 3 11 11 11 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 11 1000 6 1 4 8 15 16 23 42 1 Case #1: 7 Case #2: 0 Case #3: 994 In sample case #1, the first reader will read the pages numbered 2, 4, 6, and 10. Note that the page numbered 8 will not be read since it is torn out. The second reader will read the pages numbered 3, 6, and 9. Therefore, the total number of pages that will be read by all readers is 4 + 3 = 7. In sample case #2, all pages are torn out so all readers will read 0 pages. In sample case #3, the first reader will read all the pages other than the six given pages.","title":"Sample"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_17","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_18","text":"T = int(input().strip()) for i in range(1, T + 1): N, M, Q = map(int, input().strip().split()) torns = set(map(int, input().strip().split())) persons = map(int, input().strip().split()) if len(torns) == N: print(\"Case #{}: {}\".format(i, 0)) continue res = 0 # key: \u901a\u8fc7\u5927\u6570\u636e\u96c6\u7684\u5173\u952e\u662f\u52a0\u4e0a\u8bb0\u5fc6\u5316 : C++\u76f4\u63a5\u8fc7 momo = dict() for p in persons: if p in momo: res += momo[p] else: temp = sum([1 if i * p not in torns else 0 for i in range(1, N // p + 1) ]) momo[p] = temp res += momo[p] print(\"Case #{}: {}\".format(i, res))","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_19","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#kickstart-2018","text":"","title":"KickStart 2018"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#round-a_1","text":"","title":"Round A"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#even-digits","text":"Determine the minimum number of button presses to make with no odd digits. a button press can increase the number by 1 or decrease the number by 1 EXamples 42=>0(42 has no odd digits) 11=>3(11-3=8) 1=>1(1-1=00r1+1=2) 2018=>2(2018+2=2020 Limits o Small dataset:1\u2264N\u2264105 o Large dataset:1sN$106","title":"Even Digits \u5076\u6570"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#round-c-74","text":"","title":"Round C 74"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#planet-distance","text":"","title":"Planet Distance"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_20","text":"There are n planets and N tubes through which you can travel from one planet toanother. The tubes are bidirectional, and no two tubes connect the same pair ofplanets. You can travel from any planet to any other planet using tubes. There exists exactly one cycle in the universe Your task is to find the minimum distance(in terms of the number of vacuumtubes)between each planet and a planet that is part of the cycle. Planets that are part of the cycle are assumed to be at distance 0 \u6709n\u4e2a\u884c\u661f\u548cN\u4e2a\u7ba1\u9053\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u4ece\u4e00\u4e2a\u884c\u661f\u5230\u53e6\u4e00\u4e2a\u884c\u661f\u3002\u8fd9\u4e9b\u7ba1\u9053\u662f\u53cc\u5411\u7684\uff0c\u6ca1\u6709\u4e24\u4e2a\u7ba1\u9053\u8fde\u63a5\u540c\u4e00\u884c\u661f\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u7ba1\u9053\u4ece\u4efb\u4f55\u884c\u661f\u5230\u4efb\u4f55\u5176\u4ed6\u884c\u661f\u3002 \u5b87\u5b99\u4e2d\u5b58\u5728\u4e00\u4e2a\u5faa\u73af \u60a8\u7684\u4efb\u52a1\u662f\u627e\u5230\u6bcf\u4e2a\u884c\u661f\u4e0e\u4f5c\u4e3a\u73af\u7684\u884c\u661f\u4e4b\u95f4\u7684\u6700\u5c0f\u8ddd\u79bb\uff08\u5c31\u771f\u7a7a\u7ba1\u7684\u6570\u91cf\u800c\u8a00\uff09\u3002\u4f5c\u4e3a\u73af\u4e00\u90e8\u5206\u7684\u884c\u661f\u88ab\u5047\u5b9a\u4e3a\u8ddd\u79bb0","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_21","text":"1.\u65e0\u5411\u56fe\u62d3\u6251\u6392\u5e8f\u627e\u5230\u8fd9\u4e2a\u73af 2.\u4ece\u8fd9\u4e2a\u73af\u51fa\u53d1BFS\u627e\u5230\u8ddd\u79bb import queue class Graph: def __init__(self, N): \"\"\" \u65e0\u5411\u56fe\u7684\u7c7b\u62d3\u6251\u6392\u5e8f V: \u9876\u70b9\u6570 node_list: \u90bb\u63a5\u8868 que: \u5ea6\u4e3a1\u7684\u9876\u70b9\u7684\u96c6\u5408 degree: \u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u7684\u5ea6 \"\"\" self.V = N self.adj_list = [[] for _ in range(N)] self.que = queue.Queue() self.degree = [0] * N self.visited = set() self.not_visited = set() def addEdge(self, s, t): self.adj_list[s].append(t) self.adj_list[t].append(s) self.degree[s] += 1 self.degree[t] += 1 # O(n + e) def topological_sort(self): # 1.\u5c06\u6240\u6709\u5165\u5ea6\u4e3a1\u7684\u70b9\u5165\u961f for i in range(self.V): if self.degree[i] == 1: self.que.put(i) # 2.\u8ba1\u6570\uff0c\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u8f93\u51fa\u7684\u9876\u70b9\u6570 count = 0 self.visited = set() while not self.que.empty(): v = self.que.get() self.visited.add(v) count += 1 # 2.1 \u5c06\u6240\u6709v\u6307\u5411\u7684\u9876\u70b9\u5ea6\u51cf\u4e00\uff0c\u540c\u65f6\u628a\u5ea6\u4e3a1\u7684\u70b9\u5165\u961f\u5217 for adj_v in self.adj_list[v]: self.degree[adj_v] -= 1 if self.degree[adj_v] == 1: self.que.put(adj_v) # 3.\u672a\u6d4f\u89c8\u8fc7\u7684\u7ed3\u70b9\u662f\u73af\u4e2d\u7ed3\u70b9 self.not_visited = set(range(self.V)) - self.visited # 4.\u5982\u679c\u6ca1\u6709\u5168\u90e8\u8f93\u51fa\u9876\u70b9\uff0c\u4ee3\u8868\u56fe\u4e2d\u6709\u73af\u8def if count < self.V: return False else: return True # O(n + e) def bfs(g, cycle_set, ans): que = queue.Queue() for v in cycle_set: que.put((v, 0)) while not que.empty(): v, dist = que.get() for adj_v in g.adj_list[v]: if ans[adj_v] != 0 or adj_v in cycle_set: continue ans[adj_v] = dist + 1 que.put((adj_v, ans[adj_v])) def solve(N, paths): # 1.\u6784\u5efa\u56fe\u548c\u5ea6\u5b57\u5178 \u4ee51\u5f00\u59cb g = Graph(N) for s, t in paths: g.addEdge(s - 1, t - 1) # 2.\u62d3\u6251\u6392\u5e8f + bfs ans = [0] * N if not g.topological_sort(): cycle_set = g.not_visited bfs(g, cycle_set, ans) return ans path = 'A-large-practice.in' fw = open('result_a_samll.out', 'w') with open(path, 'r') as f: T = int(f.readline().strip()) for i in range(1, T + 1): N = int(f.readline().strip()) paths = [] for _ in range(N): paths.append(map(int, f.readline().strip().split())) ans = solve(N, paths) print(\"Case #{}: {}\".format(i, ans)) fw.close() #include <iostream> #include <vector> #include <queue> #define MAX_N 1005 using namespace std; int main() { int T; cin >> T; for (int tc = 1; tc <= T; tc++){ int N; cin >> N; // 1.\u6784\u5efa\u56fe\uff08\u90bb\u63a5\u8868\uff09 vector<int> G[MAX_N]; for (int i = 0; i < N; i++){ int x, y; cin >> x >> y; G[x].push_back(y); G[y].push_back(x); } // 2.\u8ba1\u7b97\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5ea6 queue<int> q; vector<int> degree(N + 1); for(int i = 1; i <= N; i++){ degree[i] = G[i].size(); if (degree[i] == 1){ q.push(i); } } // 3.\u62d3\u6251\u6392\u5e8f vector<int> dis(N + 1); while (! q.empty()){ int v = q.front(); q.pop(); dis[v] = -1; for(int i = 0; i < G[v].size(); i++){ int adj_v = G[v][i]; degree[adj_v]--; if (degree[adj_v] == 1){ q.push(adj_v); } } } // 4.\u628a\u73af\u4e2d\u7ed3\u70b9\u653e\u5165\u961f\u5217 for (int i = 1; i <= N; i++){ if (dis[i] == 0){ q.push(i); } } // 5.BFS while (! q.empty()) { int v = q.front(); q.pop(); for (int i = 0; i < G[v].size(); i++) { int adj_v = G[v][i]; if (dis[adj_v] == -1) { dis[adj_v] = dis[v] + 1; q.push(adj_v); } } } cout << \"Case #\" << tc << \": \"; for (int i = 1; i <= N; i++){ cout << dis[i] << \" \"; } cout << endl; } return 0; }","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#kickstart-alarm","text":"","title":"Kickstart Alarm"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_22","text":"Use a Parameter Array A,, A2,..., An to compute an Alarm Array P,, P2,.,PK P: is just the summation of the i-th exponential-power of all the contiguous subarrays of the Parameter Array. The i-th exponential-power of subarray Aj, Aj+1 \u2026, A_h is defined as Our task is to calculate(P, +P,+.+Pk) modulo 1000000007","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_23","text":"\u5feb\u901f\u5e42 + \u8d39\u9a6c\u5c0f\u5b9a\u7406 #include <iostream> #include <math.h> #define MAX_N 1000000 using namespace std; const long long MOD = 1000000007; long long fast_pow(long long x, long long n, long long MOD){ // \u8ba1\u7b97 x ** n O(log n) long long ans = 1; x = x % MOD; while (n > 0){ if (n & 1){ ans = ans * x % MOD; } n = n / 2; x = x * x % MOD; } return ans; } int main(){ long long A[MAX_N + 2]; int tcase; cin >> tcase; for (int tc = 1; tc <= tcase; tc++){ long long N, K, x, y, C, D, E1, E2, F; cin >> N >> K >> x >> y >> C >> D >> E1 >> E2 >> F; A[1] = (x + y) % F; for (int i = 2; i <= N; i++){ int x_t = x, y_t = y; x = (C * x_t + D * y_t + E1) % F; y = (D * x_t + C * y_t + E2) % F; A[i] = (x + y) % F; } long long result = 0; long long last_sum = 0; for(int i = 1; i <= N; i++){ if (i == 1){ last_sum += K; } else{ // \u7b49\u6bd4\u6570\u5217 \u5feb\u901f\u5e42 + \u8d39\u9a6c\u5c0f\u5b9a\u7406 last_sum += i * (fast_pow(i, K, MOD) - 1) % MOD * fast_pow(i - 1, MOD - 2, MOD) % MOD; } last_sum %= MOD; long long temp = last_sum * (N - i + 1) % MOD; result += temp * A[i] % MOD; result %= MOD; } cout << \"Case #\" << tc << \": \" << result << endl; } }","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#round-d-48","text":"","title":"Round D 48"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#candies","text":"","title":"Candies"},{"location":"\u7b97\u6cd5/KickStart2019\u603b\u7ed3.html#_24","text":"","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html","text":"\u77e5\u8bc6\u70b9 [\u7b97\u6cd5] DFS\u539f\u7406\u53ca\u6a21\u677f stack \u5224\u51fa\u53e3\uff08\u7ec8\u70b9\u3001\u8d8a\u754c\uff09->\u526a\u679d->\u6269\u5c55->\u6807\u8bb0->\u9012\u5f52->\u8fd8\u539f void dfs(int \u5f53\u524d\u72b6\u6001) { if(\u5f53\u524d\u72b6\u6001\u4e3a\u8fb9\u754c\u72b6\u6001) { \u8bb0\u5f55\u6216\u8f93\u51fa return; } for(i=0;i<n;i++) //\u6a2a\u5411\u904d\u5386\u89e3\u7b54\u6811\u6240\u6709\u5b50\u8282\u70b9 { //\u6269\u5c55\u51fa\u4e00\u4e2a\u5b50\u72b6\u6001\u3002 \u4fee\u6539\u4e86\u5168\u5c40\u53d8\u91cf if(\u5b50\u72b6\u6001\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6) { dfs(\u5b50\u72b6\u6001) } \u6062\u590d\u5168\u5c40\u53d8\u91cf//\u56de\u6eaf\u90e8\u5206 } void dfs(...) { // \u7ed3\u675f\u9012\u5f52\u7684\u6761\u4ef6 if (...) { ..... // \u628a\u201c\u5f53\u524d\u7ed3\u679c\u201d \u52a0\u5165 \u201c\u7ed3\u679c\u96c6\u5bb9\u5668\u201d \u4e2d return; } // \u7ee7\u7eed\u9012\u5f52\uff0c\u91cc\u9762\u53ef\u80fd\u6709\u56de\u6eaf\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709 if (...) { ... // \u5728\u5bb9\u5668\u4e2d\u4fdd\u5b58\u5f53\u524d\u6570\u636e dfs() ... // \u5728\u5bb9\u5668\u4e2d\u5220\u9664\u4e0a\u9762\u4fdd\u5b58\u7684\u6570\u636e\uff08\u6ce8\uff1a\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u79f0\u4e3a\u56de\u6eaf\uff0c\u5f88\u660e\u663e\u5b83\u662fdfs\u7684\u4e00\u4e2a\u6b65\u9aa4\uff09 } } void dfs()//\u53c2\u6570\u7528\u6765\u8868\u793a\u72b6\u6001 { if(\u5230\u8fbe\u7ec8\u70b9\u72b6\u6001) { ...//\u6839\u636e\u9898\u610f\u6dfb\u52a0 return; } if(\u8d8a\u754c\u6216\u8005\u662f\u4e0d\u5408\u6cd5\u72b6\u6001) return; if(\u7279\u6b8a\u72b6\u6001)//\u526a\u679d return ; for(\u6269\u5c55\u65b9\u5f0f) { if(\u6269\u5c55\u65b9\u5f0f\u6240\u8fbe\u5230\u72b6\u6001\u5408\u6cd5) { \u4fee\u6539\u64cd\u4f5c;//\u6839\u636e\u9898\u610f\u6765\u6dfb\u52a0 \u6807\u8bb0\uff1b dfs\uff08\uff09\uff1b (\u8fd8\u539f\u6807\u8bb0)\uff1b //\u662f\u5426\u8fd8\u539f\u6807\u8bb0\u6839\u636e\u9898\u610f //\u5982\u679c\u52a0\u4e0a\uff08\u8fd8\u539f\u6807\u8bb0\uff09\u5c31\u662f \u56de\u6eaf\u6cd5 } } } [\u7b97\u6cd5] BFS\u539f\u7406\u53ca\u6a21\u677f queue [\u7b97\u6cd5] \u56de\u6eaf \u5173\u4e8e\u56de\u6eaf\u65f6\u95f4\u7684\u601d\u8003\uff0c\u7531\u4e8e\u56de\u6eaf\u591a\u6b21\u8c03\u7528\u9012\u5f52\uff0c\u5bfc\u81f4\u6211\u66fe\u7ecf\u4ee5\u4e3a\u5f88\u591a\u51fd\u6570\u5e76\u884c\u6267\u884c\uff0c\u5176\u5b9e\u4ecd\u662f\u5355\u6838\u6267\u884c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8 [\u7b97\u6cd5] \u8ba1\u6570\u6392\u5e8f \u5f53\u8f93\u5165\u7684\u5143\u7d20\u662f \u4e2a \u5230 \u4e4b\u95f4\u7684\u6574\u6570\u65f6\uff0c\u5b83\u7684\u8fd0\u884c\u65f6\u95f4\u662f \u3002\u8ba1\u6570\u6392\u5e8f\u4e0d\u662f \u6bd4\u8f83\u6392\u5e8f \uff0c\u6392\u5e8f\u7684\u901f\u5ea6\u5feb\u4e8e\u4efb\u4f55\u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5. \u627e\u51fa\u5f85\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u6700\u5927\u548c\u6700\u5c0f\u7684\u5143\u7d20 \u7edf\u8ba1\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u503c\u4e3a \u7684\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5b58\u5165\u6570\u7ec4 \u7684\u7b2c \u9879 \u5bf9\u6240\u6709\u7684\u8ba1\u6570\u7d2f\u52a0\uff08\u4ece \u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6bcf\u4e00\u9879\u548c\u524d\u4e00\u9879\u76f8\u52a0\uff09 \u53cd\u5411\u586b\u5145\u76ee\u6807\u6570\u7ec4\uff1a\u5c06\u6bcf\u4e2a\u5143\u7d20 \u653e\u5728\u65b0\u6570\u7ec4\u7684\u7b2c \u9879\uff0c\u6bcf\u653e\u4e00\u4e2a\u5143\u7d20\u5c31\u5c06 \u51cf\u53bb1 public static int[] countSort(int []a){ int b[] = new int[a.length]; int max = a[0], min = a[0]; for(int i : a){ if(i > max){ max = i; } if(i < min){ min = i; } } //\u8fd9\u91cck\u7684\u5927\u5c0f\u662f\u8981\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\uff0c\u5143\u7d20\u5927\u5c0f\u7684\u6781\u503c\u5dee+1 int k = max - min + 1; int c[] = new int[k]; for(int i = 0; i < a.length; ++i){ c[a[i]-min] += 1;//\u4f18\u5316\u8fc7\u7684\u5730\u65b9\uff0c\u51cf\u5c0f\u4e86\u6570\u7ec4c\u7684\u5927\u5c0f } for(int i = 1; i < c.length; ++i){ c[i] = c[i] + c[i-1]; } for(int i = a.length-1; i >= 0; --i){ b[--c[a[i]-min]] = a[i];//\u6309\u5b58\u53d6\u7684\u65b9\u5f0f\u53d6\u51fac\u7684\u5143\u7d20 } return b; } [\u7b97\u6cd5] \u6392\u5e8f\u6392\u5e8f # This function takes last element as pivot, places # the pivot element at its correct position in sorted # array, and places all smaller (smaller than pivot) # to left of pivot and all greater elements to right # of pivot def partition(arr,low,high): i = ( low-1 ) # index of smaller element pivot = arr[high] # pivot for j in range(low , high): # If current element is smaller than or # equal to pivot if arr[j] <= pivot: # increment index of smaller element i = i+1 arr[i],arr[j] = arr[j],arr[i] arr[i+1],arr[high] = arr[high],arr[i+1] return ( i+1 ) # key: \u964d\u4f4e\u6700\u574f\u60c5\u51b5\u51fa\u73b0\u7684\u6982\u7387 def partition_r(arr[], low, hig) r = Random Number from low to high Swap arr[r] and arr[hi] return partition(arr, low, high) # The main function that implements QuickSort # arr[] --> Array to be sorted, # low --> Starting index, # high --> Ending index # Function to do Quick sort def quickSort(arr,low,high): if low < high: # pi is partitioning index, arr[p] is now # at right place pi = partition(arr,low,high) # Separately sort elements before # partition and after partition quickSort(arr, low, pi-1) quickSort(arr, pi+1, high) [\u7b97\u6cd5] \u6700\u5927\u56e2\u95ee\u9898 todo [DATA STRUCTURE] \u4e8c\u53c9\u641c\u7d22\u6811 \u4e8c\u53c9\u641c\u7d22\u6811 \u3001 \u6709\u5e8f\u4e8c\u53c9\u6811 \uff08ordered binary tree\uff09\u6216 \u6392\u5e8f\u4e8c\u53c9\u6811 \u4e8c\u53c9\u67e5\u627e\u6811\u76f8\u6bd4\u4e8e\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u7684\u4f18\u52bf\u5728\u4e8e\u67e5\u627e\u3001\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u4f4e\u3002\u4e3a \u3002\u4e8c\u53c9\u67e5\u627e\u6811\u662f\u57fa\u7840\u6027\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u6784\u5efa\u66f4\u4e3a\u62bd\u8c61\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5982 \u96c6\u5408 \u3001 \u591a\u91cd\u96c6 \u3001 \u5173\u8054\u6570\u7ec4 \u7b49\u3002 \u867d\u7136\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6700\u574f\u6548\u7387\u662f \uff0c\u4f46\u5b83\u652f\u6301\u52a8\u6001\u67e5\u8be2\uff0c\u4e14\u6709\u5f88\u591a\u6539\u8fdb\u7248\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u53ef\u4ee5\u4f7f\u6811\u9ad8\u4e3a \uff0c\u4ece\u800c\u5c06\u6700\u574f\u6548\u7387\u964d\u81f3 \uff0c\u5982 AVL\u6811 \u3001 \u7ea2\u9ed1\u6811 \u7b49\u3002 \u82e5\u4efb\u610f\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u8282\u70b9\u7684\u503c\uff1b \u82e5\u4efb\u610f\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u8282\u70b9\u7684\u503c\uff1b \u4efb\u610f\u8282\u70b9\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u5206\u522b\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811\uff1b \u6ca1\u6709\u952e\u503c\u76f8\u7b49\u7684\u8282\u70b9\u3002 [DATA STRUCTURE] \u524d\u5e8f\u904d\u5386 \u4e2d\u5e8f\u904d\u5386 \u540e\u5e8f\u904d\u5386 \u6709\u4e24\u79cd\u901a\u7528\u7684\u904d\u5386\u6811\u7684\u7b56\u7565\uff1a \u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff08BFS\uff09 \u6211\u4eec\u6309\u7167\u9ad8\u5ea6\u987a\u5e8f\u4e00\u5c42\u4e00\u5c42\u7684\u8bbf\u95ee\u6574\u68f5\u6811\uff0c\u9ad8\u5c42\u6b21\u7684\u8282\u70b9\u5c06\u4f1a\u6bd4\u4f4e\u5c42\u6b21\u7684\u8282\u70b9\u5148\u88ab\u8bbf\u95ee\u5230\u3002 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09 \u5728\u8fd9\u4e2a\u7b56\u7565\u4e2d\uff0c\u6211\u4eec\u91c7\u7528\u6df1\u5ea6\u4f5c\u4e3a\u4f18\u5148\u7ea7\uff0c\u4ee5\u4fbf\u4ece\u8ddf\u5f00\u59cb\u4e00\u76f4\u5230\u8fbe\u67d0\u4e2a\u786e\u5b9a\u7684\u53f6\u5b50\uff0c\u7136\u540e\u518d\u8fd4\u56de\u6839\u5230\u8fbe\u53e6\u4e00\u4e2a\u5206\u652f\u3002 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b56\u7565\u53c8\u53ef\u4ee5\u6839\u636e\u6839\u8282\u70b9\u3001\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u7684\u76f8\u5bf9\u987a\u5e8f\u88ab\u7ec6\u5206\u4e3a\u524d\u5e8f\u904d\u5386\uff0c\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u3002 \u4e0b\u56fe\u4e2d\u7684\u9876\u70b9\u6309\u7167\u8bbf\u95ee\u7684\u987a\u5e8f\u7f16\u53f7\uff0c\u6309\u7167 1-2-3-4-5 \u7684\u987a\u5e8f\u6765\u6bd4\u8f83\u4e0d\u540c\u7684\u7b56\u7565\u3002 [DATA STRUCTURE] \u524d\u7f00\u6811 \u5728 \u8ba1\u7b97\u673a\u79d1\u5b66 \u4e2d\uff0c trie \uff0c\u53c8\u79f0 \u524d\u7f00\u6811 \u6216 \u5b57\u5178\u6811 \uff0c\u662f\u4e00\u79cd\u6709\u5e8f \u6811 \uff0c\u7528\u4e8e\u4fdd\u5b58 \u5173\u8054\u6570\u7ec4 \uff0c\u5176\u4e2d\u7684\u952e\u901a\u5e38\u662f \u5b57\u7b26\u4e32 \u3002\u4e0e \u4e8c\u53c9\u67e5\u627e\u6811 \u4e0d\u540c\uff0c\u952e\u4e0d\u662f\u76f4\u63a5\u4fdd\u5b58\u5728\u8282\u70b9\u4e2d\uff0c\u800c\u662f\u7531\u8282\u70b9\u5728\u6811\u4e2d\u7684\u4f4d\u7f6e\u51b3\u5b9a\u3002\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u5b59\u90fd\u6709\u76f8\u540c\u7684 \u524d\u7f00 \uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u6839\u8282\u70b9\u5bf9\u5e94 \u7a7a\u5b57\u7b26\u4e32 \u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e0d\u662f\u6240\u6709\u7684\u8282\u70b9\u90fd\u6709\u5bf9\u5e94\u7684\u503c\uff0c\u53ea\u6709\u53f6\u5b50\u8282\u70b9\u548c\u90e8\u5206\u5185\u90e8\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u952e\u624d\u6709\u76f8\u5173\u7684\u503c\u3002 Trie\u8fd9\u4e2a\u672f\u8bed\u6765\u81ea\u4e8ere trie val\u3002\u6839\u636e \u8bcd\u6e90\u5b66 \uff0ctrie\u7684\u53d1\u660e\u8005Edward Fredkin\u628a\u5b83\u8bfb\u4f5c /\u02c8tri\u02d0/ \"tree\"\u3002[ 1] [ 2] \u4f46\u662f\uff0c\u5176\u4ed6\u4f5c\u8005\u628a\u5b83\u8bfb\u4f5c /\u02c8tra\u026a/ \"try\"\u3002[ 1] [ 2] [ 3] \u5728\u56fe\u793a\u4e2d\uff0c\u952e\u6807\u6ce8\u5728\u8282\u70b9\u4e2d\uff0c\u503c\u6807\u6ce8\u5728\u8282\u70b9\u4e4b\u4e0b\u3002\u6bcf\u4e00\u4e2a\u5b8c\u6574\u7684\u82f1\u6587\u5355\u8bcd\u5bf9\u5e94\u4e00\u4e2a\u7279\u5b9a\u7684\u6574\u6570\u3002Trie\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a \u786e\u5b9a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a \uff0c\u5c3d\u7ba1\u8fb9\u4e0a\u7684\u7b26\u53f7\u4e00\u822c\u662f\u9690\u542b\u5728\u5206\u652f\u7684\u987a\u5e8f\u4e2d\u7684\u3002 \u952e\u4e0d\u9700\u8981\u88ab\u663e\u5f0f\u5730\u4fdd\u5b58\u5728\u8282\u70b9\u4e2d\u3002\u56fe\u793a\u4e2d\u6807\u6ce8\u51fa\u5b8c\u6574\u7684\u5355\u8bcd\uff0c\u53ea\u662f\u4e3a\u4e86\u6f14\u793atrie\u7684\u539f\u7406\u3002 trie\u4e2d\u7684\u952e\u901a\u5e38\u662f\u5b57\u7b26\u4e32\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u5176\u5b83\u7684\u7ed3\u6784\u3002trie\u7684\u7b97\u6cd5\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4fee\u6539\u4e3a\u5904\u7406\u5176\u5b83\u7ed3\u6784\u7684\u6709\u5e8f\u5e8f\u5217\uff0c\u6bd4\u5982\u4e00\u4e32\u6570\u5b57\u6216\u8005\u5f62\u72b6\u7684\u6392\u5217\u3002\u6bd4\u5982\uff0c bitwise trie \u4e2d\u7684\u952e\u662f\u4e00\u4e32\u4f4d\u5143\uff0c\u53ef\u4ee5\u7528\u4e8e\u8868\u793a\u6574\u6570\u6216\u8005\u5185\u5b58\u5730\u5740\u3002 \u5e94\u7528 trie\u6811\u5e38\u7528\u4e8e\u641c\u7d22\u63d0\u793a\u3002\u5982\u5f53\u8f93\u5165\u4e00\u4e2a\u7f51\u5740\uff0c\u53ef\u4ee5\u81ea\u52a8\u641c\u7d22\u51fa\u53ef\u80fd\u7684\u9009\u62e9\u3002\u5f53\u6ca1\u6709\u5b8c\u5168\u5339\u914d\u7684\u641c\u7d22\u7ed3\u679c\uff0c\u53ef\u4ee5\u8fd4\u56de\u524d\u7f00\u6700\u76f8\u4f3c\u7684\u53ef\u80fd\u3002[ 4] Summary This article is for intermediate level users. It introduces the following ideas: The data structure Trie (Prefix tree) and most common operations with it. Solution Applications Trie (we pronounce \"try\") or prefix tree is a tree data structure, which is used for retrieval of a key in a dataset of strings. There are various applications of this very efficient data structure such as : 1. Autocomplete Figure 1. Google Suggest in action. 2. Spell checker Figure 2. A spell checker used in word processor. 3. IP routing (Longest prefix matching) Figure 3. Longest prefix matching algorithm uses Tries in Internet Protocol (IP) routing to select an entry from a forwarding table. 4. T9 predictive text Figure 4. T9 which stands for Text on 9 keys, was used on phones to input texts during the late 1990s. 5. Solving word games Figure 5. Tries is used to solve Boggle efficiently by pruning the search space. There are several other data structures, like balanced trees and hash tables, which give us the possibility to search for a word in a dataset of strings. Then why do we need trie? Although hash table has O(1) O (1) time complexity for looking for a key, it is not efficient in the following operations : Finding all keys with a common prefix. Enumerating a dataset of strings in lexicographical order. Another reason why trie outperforms hash table, is that as hash table increases in size, there are lots of hash collisions and the search time complexity could deteriorate to O(n) O ( n ), where n n is the number of keys inserted. Trie could use less space compared to Hash Table when storing many keys with the same prefix. In this case using trie has only O(m) O ( m ) time complexity, where m m is the key length. Searching for a key in a balanced tree costs O(m \\log n) O ( m log n ) time complexity. Trie node structure Trie is a rooted tree. Its nodes have the following fields: Maximum of R R links to its children, where each link corresponds to one of R R character values from dataset alphabet. In this article we assume that R R is 26, the number of lowercase latin letters. Boolean field which specifies whether the node corresponds to the end of the key, or is just a key prefix. [API] collections.Counter \u8ba1\u6570 https://docs.python.org/3.6/library/collections.html#collections.Counter A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages. elements () Return an iterator over elements repeating each as many times as its count. Elements are returned in arbitrary order. If an element\u2019s count is less than one, elements() will ignore it. most_common ([ n ]) Return a list of the n most common elements and their counts from the most common to the least. If n is omitted or None , most_common() returns all elements in the counter. Elements with equal counts are ordered arbitrarily: [API] \u77ed\u8def\u903b\u8f91 \u8868\u8fbe\u5f0f\u4ece\u5de6\u81f3\u53f3\u8fd0\u7b97\uff0c\u82e5 or \u7684\u5de6\u4fa7\u903b\u8f91\u503c\u4e3a True \uff0c\u5219\u77ed\u8def or \u540e\u6240\u6709\u7684\u8868\u8fbe\u5f0f\uff08\u4e0d\u7ba1\u662f and \u8fd8\u662f or\uff09\uff0c\u76f4\u63a5\u8f93\u51fa or \u5de6\u4fa7\u8868\u8fbe\u5f0f \u3002 \u8868\u8fbe\u5f0f\u4ece\u5de6\u81f3\u53f3\u8fd0\u7b97\uff0c\u82e5 and \u7684\u5de6\u4fa7\u903b\u8f91\u503c\u4e3a False \uff0c\u5219\u77ed\u8def\u5176\u540e\u6240\u6709 and \u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u6709 or \u51fa\u73b0\uff0c\u8f93\u51fa and \u5de6\u4fa7\u8868\u8fbe\u5f0f\u5230 or \u7684\u5de6\u4fa7\uff0c\u53c2\u4e0e\u63a5\u4e0b\u6765\u7684\u903b\u8f91\u8fd0\u7b97\u3002 \u82e5 or \u7684\u5de6\u4fa7\u4e3a False \uff0c\u6216\u8005 and \u7684\u5de6\u4fa7\u4e3a True \u5219\u4e0d\u80fd\u4f7f\u7528\u77ed\u8def\u903b\u8f91\u3002 [API] Map Filter Reduce Map Map` applies a function to all the items in an input_list. Here is the blueprint: Blueprint map(function_to_apply, list_of_inputs) items = [1, 2, 3, 4, 5] squared = [] for i in items: squared.append(i**2) Map allows us to implement this in a much simpler and nicer way. Here you go: items = [1, 2, 3, 4, 5] squared = list(map(lambda x: x**2, items)) Most of the times we use lambdas with map so I did the same. Instead of a list of inputs we can even have a list of functions! def multiply(x): return (x*x) def add(x): return (x+x) funcs = [multiply, add] for i in range(5): value = list(map(lambda x: x(i), funcs)) print(value) # Output: # [0, 0] # [1, 2] # [4, 4] # [9, 6] # [16, 8] Filter As the name suggests, filter creates a list of elements for which a function returns true. Here is a short and concise example: number_list = range(-5, 5) less_than_zero = list(filter(lambda x: x < 0, number_list)) print(less_than_zero) # Output: [-5, -4, -3, -2, -1] The filter resembles a for loop but it is a builtin function and faster. Note: If map & filter do not appear beautiful to you then you can read about list/dict/tuple comprehensions. Reduce Reduce is a really useful function for performing some computation on a list and returning the result. It applies a rolling computation to sequential pairs of values in a list. For example, if you wanted to compute the product of a list of integers. So the normal way you might go about doing this task in python is using a basic for loop: product = 1 list = [1, 2, 3, 4] for num in list: product = product * num # product = 24 Now let\u2019s try it with reduce: from functools import reduce product = reduce((lambda x, y: x * y), [1, 2, 3, 4]) # Output: 24 [\u5934\u6761] \u5e38\u8003\u9898\u578b-\u5168\u6392\u5217 [API] \u5b57\u7b26\u6570\u5b57\u8f6c\u5316 ascii \u5b57\u7b26\u8f6c\u6570\u5b57 ord('a') \u6570\u5b57\u8f6c\u5b57\u7b26 chr(97) [\u5e38\u7528\u4f4d\u8fd0\u7b97] 1. \u539f\u7801 \u539f\u7801\u5c31\u662f\u7b26\u53f7\u4f4d\u52a0\u4e0a\u771f\u503c\u7684\u7edd\u5bf9\u503c, \u5373\u7528\u7b2c\u4e00\u4f4d\u8868\u793a\u7b26\u53f7, \u5176\u4f59\u4f4d\u8868\u793a\u503c. \u6bd4\u5982\u5982\u679c\u662f8\u4f4d\u4e8c\u8fdb\u5236: [+1]\u539f = 0000 0001 [-1]\u539f = 1000 0001 \u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d. \u56e0\u4e3a\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d, \u6240\u4ee58\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u53d6\u503c\u8303\u56f4\u5c31\u662f: [1111 1111 , 0111 1111] \u5373 [-127 , 127] \u539f\u7801\u662f\u4eba\u8111\u6700\u5bb9\u6613\u7406\u89e3\u548c\u8ba1\u7b97\u7684\u8868\u793a\u65b9\u5f0f. 2. \u53cd\u7801 \u53cd\u7801\u7684\u8868\u793a\u65b9\u6cd5\u662f: \u6b63\u6570\u7684\u53cd\u7801\u662f\u5176\u672c\u8eab \u8d1f\u6570\u7684\u53cd\u7801\u662f\u5728\u5176\u539f\u7801\u7684\u57fa\u7840\u4e0a, \u7b26\u53f7\u4f4d\u4e0d\u53d8\uff0c\u5176\u4f59\u5404\u4e2a\u4f4d\u53d6\u53cd. [+1] = [00000001]\u539f = [00000001]\u53cd [-1] = [10000001]\u539f = [11111110]\u53cd \u53ef\u89c1\u5982\u679c\u4e00\u4e2a\u53cd\u7801\u8868\u793a\u7684\u662f\u8d1f\u6570, \u4eba\u8111\u65e0\u6cd5\u76f4\u89c2\u7684\u770b\u51fa\u6765\u5b83\u7684\u6570\u503c. \u901a\u5e38\u8981\u5c06\u5176\u8f6c\u6362\u6210\u539f\u7801\u518d\u8ba1\u7b97. 3. \u8865\u7801 \u8865\u7801\u7684\u8868\u793a\u65b9\u6cd5\u662f: \u6b63\u6570\u7684\u8865\u7801\u5c31\u662f\u5176\u672c\u8eab \u8d1f\u6570\u7684\u8865\u7801\u662f\u5728\u5176\u539f\u7801\u7684\u57fa\u7840\u4e0a, \u7b26\u53f7\u4f4d\u4e0d\u53d8, \u5176\u4f59\u5404\u4f4d\u53d6\u53cd, \u6700\u540e+1. (\u5373\u5728\u53cd\u7801\u7684\u57fa\u7840\u4e0a+1) [+1] = [00000001]\u539f = [00000001]\u53cd = [00000001]\u8865 [-1] = [10000001]\u539f = [11111110]\u53cd = [11111111]\u8865 \u5bf9\u4e8e\u8d1f\u6570, \u8865\u7801\u8868\u793a\u65b9\u5f0f\u4e5f\u662f\u4eba\u8111\u65e0\u6cd5\u76f4\u89c2\u770b\u51fa\u5176\u6570\u503c\u7684. \u901a\u5e38\u4e5f\u9700\u8981\u8f6c\u6362\u6210\u539f\u7801\u5728\u8ba1\u7b97\u5176\u6570\u503c. a ^ a = 0 \u6574\u6570\u7684\u8865\u7801\u4e0d\u53d8 4.\u4e3a\u4f55\u8981\u4f7f\u7528\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801 \u5728\u5f00\u59cb\u6df1\u5165\u5b66\u4e60\u524d, \u6211\u7684\u5b66\u4e60\u5efa\u8bae\u662f\u5148\"\u6b7b\u8bb0\u786c\u80cc\"\u4e0a\u9762\u7684\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u7684\u8868\u793a\u65b9\u5f0f\u4ee5\u53ca\u8ba1\u7b97\u65b9\u6cd5. \u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u8ba1\u7b97\u673a\u53ef\u4ee5\u6709\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\u8868\u793a\u4e00\u4e2a\u6570. \u5bf9\u4e8e\u6b63\u6570\u56e0\u4e3a\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\u7684\u7ed3\u679c\u90fd\u76f8\u540c: [+1] = [00000001]\u539f = [00000001]\u53cd = [00000001]\u8865 \u6240\u4ee5\u4e0d\u9700\u8981\u8fc7\u591a\u89e3\u91ca. \u4f46\u662f\u5bf9\u4e8e\u8d1f\u6570: [-1] = [10000001]\u539f = [11111110]\u53cd = [11111111]\u8865 \u53ef\u89c1\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u662f\u5b8c\u5168\u4e0d\u540c\u7684. \u65e2\u7136\u539f\u7801\u624d\u662f\u88ab\u4eba\u8111\u76f4\u63a5\u8bc6\u522b\u5e76\u7528\u4e8e\u8ba1\u7b97\u8868\u793a\u65b9\u5f0f, \u4e3a\u4f55\u8fd8\u4f1a\u6709\u53cd\u7801\u548c\u8865\u7801\u5462? \u9996\u5148, \u56e0\u4e3a\u4eba\u8111\u53ef\u4ee5\u77e5\u9053\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d, \u5728\u8ba1\u7b97\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u6839\u636e\u7b26\u53f7\u4f4d, \u9009\u62e9\u5bf9\u771f\u503c\u533a\u57df\u7684\u52a0\u51cf. (\u771f\u503c\u7684\u6982\u5ff5\u5728\u672c\u6587\u6700\u5f00\u5934). \u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a, \u52a0\u51cf\u4e58\u6570\u5df2\u7ecf\u662f\u6700\u57fa\u7840\u7684\u8fd0\u7b97, \u8981\u8bbe\u8ba1\u7684\u5c3d\u91cf\u7b80\u5355. \u8ba1\u7b97\u673a\u8fa8\u522b\"\u7b26\u53f7\u4f4d\"\u663e\u7136\u4f1a\u8ba9\u8ba1\u7b97\u673a\u7684\u57fa\u7840\u7535\u8def\u8bbe\u8ba1\u53d8\u5f97\u5341\u5206\u590d\u6742! \u4e8e\u662f\u4eba\u4eec\u60f3\u51fa\u4e86\u5c06\u7b26\u53f7\u4f4d\u4e5f\u53c2\u4e0e\u8fd0\u7b97\u7684\u65b9\u6cd5. \u6211\u4eec\u77e5\u9053, \u6839\u636e\u8fd0\u7b97\u6cd5\u5219\u51cf\u53bb\u4e00\u4e2a\u6b63\u6570\u7b49\u4e8e\u52a0\u4e0a\u4e00\u4e2a\u8d1f\u6570, \u5373: 1-1 = 1 + (-1) = 0 , \u6240\u4ee5\u673a\u5668\u53ef\u4ee5\u53ea\u6709\u52a0\u6cd5\u800c\u6ca1\u6709\u51cf\u6cd5, \u8fd9\u6837\u8ba1\u7b97\u673a\u8fd0\u7b97\u7684\u8bbe\u8ba1\u5c31\u66f4\u7b80\u5355\u4e86. \u4e8e\u662f\u4eba\u4eec\u5f00\u59cb\u63a2\u7d22 \u5c06\u7b26\u53f7\u4f4d\u53c2\u4e0e\u8fd0\u7b97, \u5e76\u4e14\u53ea\u4fdd\u7559\u52a0\u6cd5\u7684\u65b9\u6cd5. \u9996\u5148\u6765\u770b\u539f\u7801: \u8ba1\u7b97\u5341\u8fdb\u5236\u7684\u8868\u8fbe\u5f0f: 1-1=0 1 - 1 = 1 + (-1) = [00000001]\u539f + [10000001]\u539f = [10000010]\u539f = -2 \u5982\u679c\u7528\u539f\u7801\u8868\u793a, \u8ba9\u7b26\u53f7\u4f4d\u4e5f\u53c2\u4e0e\u8ba1\u7b97, \u663e\u7136\u5bf9\u4e8e\u51cf\u6cd5\u6765\u8bf4, \u7ed3\u679c\u662f\u4e0d\u6b63\u786e\u7684.\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4f55\u8ba1\u7b97\u673a\u5185\u90e8\u4e0d\u4f7f\u7528\u539f\u7801\u8868\u793a\u4e00\u4e2a\u6570. \u4e3a\u4e86\u89e3\u51b3\u539f\u7801\u505a\u51cf\u6cd5\u7684\u95ee\u9898, \u51fa\u73b0\u4e86\u53cd\u7801: \u8ba1\u7b97\u5341\u8fdb\u5236\u7684\u8868\u8fbe\u5f0f: 1-1=0 1 - 1 = 1 + (-1) = [0000 0001]\u539f + [1000 0001]\u539f= [0000 0001]\u53cd + [1111 1110]\u53cd = [1111 1111]\u53cd = [1000 0000]\u539f = -0 \u53d1\u73b0\u7528\u53cd\u7801\u8ba1\u7b97\u51cf\u6cd5, \u7ed3\u679c\u7684\u771f\u503c\u90e8\u5206\u662f\u6b63\u786e\u7684. \u800c\u552f\u4e00\u7684\u95ee\u9898\u5176\u5b9e\u5c31\u51fa\u73b0\u5728\"0\"\u8fd9\u4e2a\u7279\u6b8a\u7684\u6570\u503c\u4e0a. \u867d\u7136\u4eba\u4eec\u7406\u89e3\u4e0a+0\u548c-0\u662f\u4e00\u6837\u7684, \u4f46\u662f0\u5e26\u7b26\u53f7\u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684. \u800c\u4e14\u4f1a\u6709[0000 0000]\u539f\u548c[1000 0000]\u539f\u4e24\u4e2a\u7f16\u7801\u8868\u793a0. \u4e8e\u662f\u8865\u7801\u7684\u51fa\u73b0, \u89e3\u51b3\u4e860\u7684\u7b26\u53f7\u4ee5\u53ca\u4e24\u4e2a\u7f16\u7801\u7684\u95ee\u9898: 1-1 = 1 + (-1) = [0000 0001]\u539f + [1000 0001]\u539f = [0000 0001]\u8865 + [1111 1111]\u8865 = [0000 0000]\u8865=[0000 0000]\u539f \u8fd9\u68370\u7528[0000 0000]\u8868\u793a, \u800c\u4ee5\u524d\u51fa\u73b0\u95ee\u9898\u7684-0\u5219\u4e0d\u5b58\u5728\u4e86.\u800c\u4e14\u53ef\u4ee5\u7528[1000 0000]\u8868\u793a-128: (-1) + (-127) = [1000 0001]\u539f + [1111 1111]\u539f = [1111 1111]\u8865 + [1000 0001]\u8865 = [1000 0000]\u8865 -1-127\u7684\u7ed3\u679c\u5e94\u8be5\u662f-128, \u5728\u7528\u8865\u7801\u8fd0\u7b97\u7684\u7ed3\u679c\u4e2d, [1000 0000]\u8865 \u5c31\u662f-128. \u4f46\u662f\u6ce8\u610f\u56e0\u4e3a\u5b9e\u9645\u4e0a\u662f\u4f7f\u7528\u4ee5\u524d\u7684-0\u7684\u8865\u7801\u6765\u8868\u793a-128, \u6240\u4ee5-128\u5e76\u6ca1\u6709\u539f\u7801\u548c\u53cd\u7801\u8868\u793a.(\u5bf9-128\u7684\u8865\u7801\u8868\u793a[1000 0000]\u8865\u7b97\u51fa\u6765\u7684\u539f\u7801\u662f[0000 0000]\u539f, \u8fd9\u662f\u4e0d\u6b63\u786e\u7684) \u4f7f\u7528\u8865\u7801, \u4e0d\u4ec5\u4ec5\u4fee\u590d\u4e860\u7684\u7b26\u53f7\u4ee5\u53ca\u5b58\u5728\u4e24\u4e2a\u7f16\u7801\u7684\u95ee\u9898, \u800c\u4e14\u8fd8\u80fd\u591f\u591a\u8868\u793a\u4e00\u4e2a\u6700\u4f4e\u6570. \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e488\u4f4d\u4e8c\u8fdb\u5236, \u4f7f\u7528\u539f\u7801\u6216\u53cd\u7801\u8868\u793a\u7684\u8303\u56f4\u4e3a[-127, +127], \u800c\u4f7f\u7528\u8865\u7801\u8868\u793a\u7684\u8303\u56f4\u4e3a[-128, 127]. \u56e0\u4e3a\u673a\u5668\u4f7f\u7528\u8865\u7801, \u6240\u4ee5\u5bf9\u4e8e\u7f16\u7a0b\u4e2d\u5e38\u7528\u5230\u768432\u4f4dint\u7c7b\u578b, \u53ef\u4ee5\u8868\u793a\u8303\u56f4\u662f: [-231, 231-1] \u56e0\u4e3a\u7b2c\u4e00\u4f4d\u8868\u793a\u7684\u662f\u7b26\u53f7\u4f4d.\u800c\u4f7f\u7528\u8865\u7801\u8868\u793a\u65f6\u53c8\u53ef\u4ee5\u591a\u4fdd\u5b58\u4e00\u4e2a\u6700\u5c0f\u503c. 5.lowbit(x) = x & (-x) == x & (~x + 1) lowbit \u8981\u7684\u662f\u4f60\u4ece\u672b\u5c3e\u5f00\u59cb\u7b2c1\u4e2a 1(\u5176\u4ed6\u4f4d\u7f6e\u90fd\u662f0) \u6240\u4ee3\u8868\u7684\u503c 6.x ^ x = 0 \u5f02\u6216XOR\u7684\u7279\u70b9 \u6309\u4f4d\u5f02\u6216\u76843\u4e2a\u7279\u70b9: (1) 0^0=0,0^1=1 0\u5f02\u6216\u4efb\u4f55\u6570\uff1d\u4efb\u4f55\u6570 (2) 1^0=1,1^1=0 1\u5f02\u6216\u4efb\u4f55\u6570\uff0d\u4efb\u4f55\u6570\u53d6\u53cd (3) \u4efb\u4f55\u6570\u5f02\u6216\u81ea\u5df1\uff1d\u628a\u81ea\u5df1\u7f6e0 \u6309\u4f4d\u5f02\u6216\u7684\u51e0\u4e2a\u5e38\u89c1\u7528\u9014: (1) \u4f7f\u67d0\u4e9b\u7279\u5b9a\u7684\u4f4d\u7ffb\u8f6c \u200b \u4f8b\u5982\u5bf9\u657010100001\u7684\u7b2c2\u4f4d\u548c\u7b2c3\u4f4d\u7ffb\u8f6c\uff0c\u5219\u53ef\u4ee5\u5c06\u8be5\u6570\u4e0e00000110\u8fdb\u884c\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u3002 \u3000\u3000\u3000\u3000\u3000 10100001^00000110 = 10100111 (2) \u5b9e\u73b0\u4e24\u4e2a\u503c\u7684\u4ea4\u6362\uff0c\u800c\u4e0d\u5fc5\u4f7f\u7528\u4e34\u65f6\u53d8\u91cf\u3002 \u200b \u4f8b\u5982\u4ea4\u6362\u4e24\u4e2a\u6574\u6570a=10100001\uff0cb=00000110\u7684\u503c\uff0c\u53ef\u901a\u8fc7\u4e0b\u5217\u8bed\u53e5\u5b9e\u73b0\uff1a \u3000\u3000\u3000\u3000a = a^b\uff1b \u3000\u3000//a=10100111 \u3000\u3000\u3000\u3000b = b^a\uff1b \u3000\u3000//b=10100001 \u3000\u3000\u3000\u3000a = a^b\uff1b \u3000\u3000//a=00000110 (3) \u5f02\u6216\u538b\u7f29\u5947\u5076\u6027\u4fe1\u606f \u4e8c\u8fdb\u5236\u6570\u4e2d\u76841\u7684\u4e2a\u6570\u7684\u5947\u5076\u6027: \u5982\u679c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e2d\u76841\u7684\u4e2a\u6570\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u6bcf\u4e00\u4f4d\u6570\u7d2f\u6b21xor\u8fd4\u56de1\uff1b\u5982\u679c\u6bcf\u4e00\u4f4d\u6570\u7d2f\u6b21xor\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u8fd4\u56de0\u3002 (4) \u4e24\u6570a\u548cb\u7684xor\u8fd0\u7b97\u7ed3\u679c\uff08\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u4e2d1\u7684\u4e2a\u6570\u7684\u5947\u5076\u6027 * (a\u76841s - b\u76841s) & 1 == 1 --> \u7ed3\u679c\u4e2d1s\u4e3a\u5947\u6570 * (a\u76841s - b\u76841s) & 1 == 0 --> \u7ed3\u679c\u4e2d1s\u4e3a\u5076\u6570 \u5b57\u5178\u5e8f \u8bbe\u60f3\u4e00\u672c\u82f1\u8bed\u5b57\u5178\u91cc\u7684\u5355\u8bcd\uff0c\u54ea\u4e2a\u5728\u524d\u54ea\u4e2a\u5728\u540e\uff1f \u663e\u7136\u7684\u505a\u6cd5\u662f\u5148\u6309\u7167\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u3001\u4ee5 a\u3001b\u3001c\u2026\u2026z \u7684\u987a\u5e8f\u6392\u5217\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u4e00\u6837\uff0c\u90a3\u4e48\u6bd4\u8f83\u7b2c\u4e8c\u4e2a\u3001\u7b2c\u4e09\u4e2a\u4e43\u81f3\u540e\u9762\u7684\u5b57\u6bcd\u3002\u5982\u679c\u6bd4\u5230\u6700\u540e\u4e24\u4e2a\u5355\u8bcd\u4e0d\u4e00\u6837\u957f\uff08\u6bd4\u5982\uff0csigh \u548c sight\uff09\uff0c\u90a3\u4e48\u628a\u77ed\u8005\u6392\u5728\u524d\u3002 --- \u5f62\u5f0f\u5b9a\u4e49 \u7ed9\u5b9a\u4e24\u4e2a\u504f\u5e8f\u96c6A\u548cB,(a,b)\u548c(a\u2032,b\u2032)\u5c5e\u4e8e\u7b1b\u5361\u5c14\u79ef A \u00d7 B\uff0c\u5219\u5b57\u5178\u5e8f\u5b9a\u4e49\u4e3a (a,b) \u2264 (a\u2032,b\u2032) \u5f53\u4e14\u4ec5\u5f53 a < a\u2032 \u6216 (a = a\u2032 \u4e14 b \u2264 b\u2032). \u7ed3\u679c\u662f\u504f\u5e8f\u3002\u5982\u679cA\u548cB\u662f\u5168\u5e8f, \u90a3\u4e48\u7ed3\u679c\u4e5f\u662f\u5168\u5e8f\u3002 \u591a\u5143\u7d20\u6309\u5b57\u5178\u5e8f\u6392\u5e8f sorted(intervals, key=lambda x: (x[0], x[1])) \u56de\u6587\u95ee\u9898 manacher\u7b97\u6cd5 def manacher(S): \"\"\" \u56de\u6587\u95ee\u9898\u4e09\u79cd\u89e3\u6cd5\uff1a 1.\u4e2d\u5fc3\u6269\u6563\u6cd5 2.DP 3.manacher\u7b97\u6cd5: O(n) \u672c\u51fd\u6570\u8fd4\u56de\u6700\u5927\u56de\u6587\u5b50\u5b57\u7b26\u4e32 \"\"\" # 1.\u89e3\u51b3\u957f\u5ea6\u5947\u5076\u6027\u5e26\u6765\u7684\u5bf9\u79f0\u8f74\u4f4d\u7f6e\u95ee\u9898 # \u5176\u4e2d\u9996\u5c3e\u7684\u4f5c\u7528\u662f\u4e2d\u5fc3\u6269\u6563\u7684\u65f6\u5019\u9632\u6b62\u7d22\u5f15\u8d8a\u754c A = '^#' + '#'.join(S) + '#$' # 2.\u8f85\u52a9\u6570\u7ec4LEN\uff0c\u5b58\u50a8\u7684\u662f\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u534a\u5f84(**\u4e0d\u5305\u62eci\u8fd9\u4e2a\u5143\u7d20) # LEN\u6570\u7ec4\u6027\u8d28: LEN[i]\u5c31\u662f\u8be5\u56de\u6587\u5b50\u4e32\u5728\u539f\u5b57\u7b26\u4e32S\u4e2d\u7684\u957f\u5ea6 LEN = [0] * len(A) # 3.\u8bbe\u7f6e\u4e24\u4e2a\u53d8\u91cf\uff0cright \u548c center \u3002right \u4ee3\u8868\u4ee5 center \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u53f3\u8fb9\u754c\uff0c # \u4e5f\u5c31\u662fright = center + LEN[center] - 1\u3002 center = right = 0 # 4.\u53bb\u6389\u9996\u5c3e\u4f9d\u6b21\u904d\u5386A\u6570\u7ec4\u5143\u7d20 for i in range(1, len(A) - 1): # 5.i <= right, j\u548ci\u5173\u4e8e\u4f4d\u7f6ecenter\u5bf9\u79f0, \u4ee5j\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u4e00\u5b9a\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5185\u90e8, # LEN[i]=LEN[j] # i > right, \u4ee5i\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5916\u90e8\uff0c # \u800c\u5927\u4e8eright\u7684\u90e8\u5206\u6211\u4eec\u8fd8\u6ca1\u6709\u8fdb\u884c\u5339\u914d\uff0c\u6240\u4ee5\u8981\u4eceright+1\u4f4d\u7f6e\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u5339\u914d\uff0c\u76f4\u5230\u53d1\u751f\u5931\u914d\uff0c # \u4ece\u800c\u66f4\u65b0P\u548c\u5bf9\u5e94\u7684po\u4ee5\u53caLen[i]\u3002 if i < right: LEN[i] = min(right - i, LEN[2 * center - i]) else: LEN[i] = 0 # 6.\u5947\u6570\u7684\u4e2d\u5fc3\u6269\u6563\u6cd5 while A[i + LEN[i] + 1] == A[i - LEN[i] - 1]: LEN[i] += 1 # 7..\u5982\u679ci\u7684\u53f3\u8fb9\u754c > \u539f\u6765\u7684\u53f3\u8fb9\u754c\uff0c\u66f4\u65b0 if i + LEN[i] > right: center, right = i, i + LEN[i] # print('\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e32', A) # print('\u8f85\u52a9\u534a\u5f84\u6570\u7ec4', LEN) maxLen, centerIndex = max((n, i) for i, n in enumerate(LEN)) print((maxLen, centerIndex)) # return maxLen \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32\u957f\u5ea6 # return s[(centerIndex - maxLen)//2: (centerIndex + maxLen)//2] \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32 # return sum([(1+x)//2 for x in LEN]) \u6c42\u56de\u6587\u5b50\u4e32\u6570\u91cf return sum([(1+x)//2 for x in LEN]) Python\u4e2dset\u503c\u4f1a\u81ea\u52a8\u6392\u5e8f\u4f46\u5e76\u4e0d\u4fdd\u8bc1 \u6700\u597d\u4e0d\u8981\u5229\u7528\uff08\u7d22\u5f15\u65e0\u5e8f\uff09 C++\u4e5f\u662f \u987a\u5e8f\u5e76\u4e0d\u4fdd\u8bc1\uff0c\u8fd9\u662f\u5177\u4f53\u5b9e\u73b0\u7684\u95ee\u9898\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u5728\u4f7f\u7528set\u7684\u65f6\u5019\uff0c\u8bf7\u628a\u5b83\u8ba4\u4e3a\u662f\u6570\u5b66\u4e0a\u7684\u96c6\u5408\uff0c\u65e0\u5e8f\uff0c\u4e0d\u8981\u5728\u5b9e\u73b0set\u7684\u65f6\u5019\u5047\u5b9a\u5176\u6709\u987a\u5e8f\uff0c\u53ef\u80fd\u4f1a\u9519 \u6b27\u62c9\u8def\u5f84 \u6b27\u62c9\u56de\u8def \u6b27\u62c9\u8def\u5f84\u662f\u4e00\u4e2a\u5728\u56fe\u4e2d\u6240\u6709\u8fb9\u5747\u53ea\u8bbf\u95ee\u4e00\u6b21\u7684\u8def\u5f84 \u6b27\u62c9\u56de\u8def\u662f\u8d77\u59cb\u70b9\u548c\u7ec8\u6b62\u70b9\u662f\u4e00\u4e2a\u7684\u6b27\u62c9\u8def\u5f84 \u6027\u8d28\uff1a \u5982\u679c\u5df2\u77e5\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4ece\u4efb\u4f55\u4e00\u70b9\u5f00\u59cb\u6b27\u62c9\u56de\u8def Java python \u8d1f\u6570\u9664\u6cd5 Java: -1 / 2 == 0; -3 / 2 == -1 python3: -1 // 2 == -1; -3 // 2 == -2 \u7531\u6570\u636e\u8303\u56f4\u53cd\u63a8\u7b97\u6cd5\u590d\u6742\u5ea6\u4ee5\u53ca\u7b97\u6cd5\u5185\u5bb9 \u4e00\u822cACM\u6216\u8005\u7b14\u8bd5\u9898\u7684\u65f6\u95f4\u9650\u5236\u662f1\u79d2\u62162\u79d2\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cC++\u4ee3\u7801\u4e2d\u7684\u64cd\u4f5c\u6b21\u6570\u63a7\u5236\u5728 $10^7$ \u4e3a\u6700\u4f73\u3002 \u4e0b\u9762\u7ed9\u51fa\u5728\u4e0d\u540c\u6570\u636e\u8303\u56f4\u4e0b\uff0c\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7b97\u6cd5\u8be5\u5982\u4f55\u9009\u62e9\uff1a $n \\le 30$, \u6307\u6570\u7ea7\u522b, dfs+\u526a\u679d\uff0c\u72b6\u6001\u538b\u7f29dp $n \\le 100$ => $O(n^3)$\uff0cfloyd\uff0cdp $n \\le 1000$ => $O(n^2)$\uff0c$O(n^2logn)$\uff0cdp\uff0c\u4e8c\u5206 $n \\le 10000$ => $O(n * \\sqrt n)$\uff0c\u5757\u72b6\u94fe\u8868 $n \\le 100000$ => $O(nlogn)$ => \u5404\u79cdsort\uff0c\u7ebf\u6bb5\u6811\u3001\u6811\u72b6\u6570\u7ec4\u3001set/map\u3001heap\u3001dijkstra+heap\u3001spfa\u3001\u6c42\u51f8\u5305\u3001\u6c42\u534a\u5e73\u9762\u4ea4\u3001\u4e8c\u5206 $n \\le 1000000$ => $O(n)$, \u4ee5\u53ca\u5e38\u6570\u8f83\u5c0f\u7684 $O(nlogn)$ \u7b97\u6cd5 => hash\u3001\u53cc\u6307\u9488\u626b\u63cf\u3001kmp\u3001AC\u81ea\u52a8\u673a\uff0c\u5e38\u6570\u6bd4\u8f83\u5c0f\u7684 $O(nlogn)$ \u7684\u505a\u6cd5\uff1asort\u3001\u6811\u72b6\u6570\u7ec4\u3001heap\u3001dijkstra\u3001spfa $n \\le 10000000$ => $O(n)$\uff0c\u53cc\u6307\u9488\u626b\u63cf\u3001kmp\u3001AC\u81ea\u52a8\u673a\u3001\u7ebf\u6027\u7b5b\u7d20\u6570 $n \\le 10^9$ => $O(\\sqrt n)$\uff0c\u5224\u65ad\u8d28\u6570 $n \\le 10^{18}$ => $O(logn)$\uff0c\u6700\u5927\u516c\u7ea6\u6570 \u6570\u5b66 1. \u4e24\u6570\u4e4b\u548c 1.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u4f60\u4e0d\u80fd\u91cd\u590d\u5229\u7528\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u540c\u6837\u7684\u5143\u7d20\u3002 \u793a\u4f8b: \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9 \u56e0\u4e3a nums[0] + nums[1] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [0, 1] 1.2 \u89e3\u6cd5 Hash class Solution(object): def twoSum(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: List[int] Hash \"\"\" dic = dict() for i, num in enumerate(nums): diff = target - num if diff in dic: return [dic[diff], i] else: dic[num] = i 7.\u6574\u6570\u53cd\u8f6c 7.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6574\u6570\u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002 \u793a\u4f8b 1: \u8f93\u5165: 123 \u8f93\u51fa: 321 \u793a\u4f8b 2: \u8f93\u5165: -123 \u8f93\u51fa: -321 \u793a\u4f8b 3: \u8f93\u5165: 120 \u8f93\u51fa: 21 \u6ce8\u610f: \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8\u5f97\u4e0b 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5219\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u2212231, 231 \u2212 1]\u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u6ea2\u51fa\u90a3\u4e48\u5c31\u8fd4\u56de 0\u3002 7.2.\u89e3\u6cd5 \u6ce8\u610f\uff1a-2147483648\u7684\u76f8\u53cd\u6570\u6ea2\u51fa\u4e86 7.2.1 \u65b9\u6cd5\u4e00 #include <limits.h> class Solution { public: int reverse(int x) { int ans = 0; int sign = x < 0 ? - 1: 1; if(x == INT_MIN){ // -2147483648 \u53cd\u8f6c\u6ea2\u51fa return 0; } x = abs(x); while(x > 0){ // 2**31(2 << 30): 2147483648 if(ans == INT_MAX / 10){ if(x % 10 > 7){ return 0; } }else if(ans > INT_MAX / 10){ return 0; } ans = ans * 10 + x % 10; x /= 10; } return ans * sign; } }; class Solution { public: int reverse(int x) { int sign = x < 0 ? - 1: 1; if(x == INT_MIN){ // -2147483648 \u53cd\u8f6c\u6ea2\u51fa return 0; } x = abs(x); int res = 0; while(x > 0){ if(res > INT_MAX / 10 || res * 10 > (INT_MAX - x % 10)){ return 0; } res = res * 10 + x % 10; x /= 10; } return sign * res; } }; 7.2.2 \u65b9\u6cd5\u4e8c \u4e0d\u63a8\u8350 class Solution { public int reverse(int x) { int ans = 0; while(x != 0){ int tail = x % 10; int newAns = ans * 10 + tail; // If overflow exists, the new result will not equal previous one. if((newAns - tail) / 10 != ans){ return 0; } ans = newAns; x = x / 10; } return ans; } } 29.\u4e24\u6570\u76f8\u9664 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570 dividend \u548c\u9664\u6570 divisor\u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002 \u8fd4\u56de\u88ab\u9664\u6570 dividend \u9664\u4ee5\u9664\u6570 divisor \u5f97\u5230\u7684\u5546\u3002 \u793a\u4f8b 1: \u8f93\u5165: dividend = 10, divisor = 3 \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: dividend = 7, divisor = -3 \u8f93\u51fa: -2 \u8bf4\u660e: \u88ab\u9664\u6570\u548c\u9664\u6570\u5747\u4e3a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002 \u9664\u6570\u4e0d\u4e3a 0\u3002 \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u2212231, 231 \u2212 1]\u3002\u672c\u9898\u4e2d\uff0c\u5982\u679c\u9664\u6cd5\u7ed3\u679c\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 231 \u2212 1\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u672a\u5168\u90e8\u8003\u8651\u6ea2\u51fa class Solution(object): def divide(self, dividend, divisor): \"\"\" \u5947\u601d\u5999\u60f3\uff1a\u628a\u6700\u5c0f\u8d1f\u6570\u8f6c\u4e3a\u6574\u6570\u9700\u8981\u5224\u65ad\u6ea2\u51fa\uff0c\u8fd4\u56de\u6765\u5168\u90e8\u8f6c\u4e3a\u8d1f\u6570\u5904\u7406\u89c4\u907f\u5f00\u8fd9\u4e2a\u95ee\u9898 \"\"\" INT_MIN = (-1 << 31) INT_MAX = ~((-1 << 31) + 1) + 1 if dividend == INT_MIN and divisor == -1: return INT_MAX sign = -1 if (dividend > 0) ^ (divisor > 0) else 1 # \u5168\u90e8\u8f6c\u4e3a\u8d1f\u6570\u4e0d\u7528\u5728\u8fd9\u5224\u65ad\u6ea2\u51fa dvd = 0 - dividend if dividend > 0 else dividend dvs = 0 - divisor if divisor > 0 else divisor ans = 0 while dvd <= dvs: temp = dvs cnt = 1 # todo:\u6ca1\u5224\u65ad\u4e2d\u95f4\u8fc7\u7a0b\u6ea2\u51fa while (temp << 1) >= dvd: temp <<= 1 cnt <<= 1 dvd -= temp ans += cnt return ans * sign \u89e3\u6cd5\u4e8c 50.pow(x,n) \u9898\u76ee\u63cf\u8ff0 \u5b9e\u73b0 pow(x, n) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25 \u8bf4\u660e: -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u2212231, 231 \u2212 1] \u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 \u53ef\u9009memo\u7684\u5de5\u5177: from functools import lru_cache @lru_cache(None) def generate(i, ah, bh, res): class Solution: def myPow(self, x: float, n: int) -> float: \"\"\" \u5206\u6cbb\u6cd5 + \u8bb0\u5fc6\u5316 \u8fb9\u754c \u8d1f\u6570 \"\"\" memo = dict() def helper(x, n): if n == 1: return x if (x, n) in memo: return memo[(x, n)] if n & 1: memo[(x, n)] = helper(x, n // 2) * helper(x, n // 2) * x return memo[(x, n)] else: memo[(x, n)] = helper(x, n // 2) * helper(x, n // 2) return memo[(x, n)] if n == 0: return 1 if x == 0: return 0 if n < 0: n = -n x = 1 / x return helper(x, n) \u89e3\u6cd5\u4e8c \u5faa\u73af\u6cd5todo 69. x \u7684\u5e73\u65b9\u6839 69.1 \u9898\u76ee\u63cf\u8ff0 \u5b9e\u73b0 int sqrt(int x) \u51fd\u6570\u3002 \u8ba1\u7b97\u5e76\u8fd4\u56de x \u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d x \u662f\u975e\u8d1f\u6574\u6570\u3002 \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002 \u793a\u4f8b 1: \u8f93\u5165: 4 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: 8 \u8f93\u51fa: 2 \u8bf4\u660e: 8 \u7684\u5e73\u65b9\u6839\u662f 2.82842..., \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002 69.2 \u89e3\u6cd5 69.2.1 \u65b9\u6cd5\u4e00 \u627e\u89c4\u5f8b[\u4e8c\u5206] \u5173\u952e: \u5982\u4f55\u627e\u5230\u4e00\u4e2ax\u7684\u6574\u6570\u5e73\u65b9\u6839, \u7279\u70b9: y * y <= x < (y + 1)*(y + 1) class Solution: def mySqrt(self, x: int) -> int: \"\"\"\u4e8c\u5206\u67e5\u627e \u4fdd\u7559\u6574\u6570 \u5047\u8bbe\u7ed3\u679c\u4e3ay y * y <= x < (y + 1) * (y + 1) \"\"\" low, high = 0, x//2 + 1 while low <= high: mid = (low + high) >> 1 if mid * mid == x: return mid elif mid * mid < x: if (mid + 1) * (mid + 1) > x: return mid else: low = mid + 1 else: high = mid - 1 69.2.2 \u65b9\u6cd5\u4e8c \u725b\u987f\u8fed\u4ee3\u6cd5 def mySqrt(self, n: int) -> int: r = n while r*r > n: r = (r + n//r) // 2 return r 69.3 \u53f3\u79fb\u7684\u7528\u6cd5 x // 2 == x >> 1 [not] x >> 2 166.\u5206\u6570\u5230\u5c0f\u6570 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u5206\u6570\u7684\u5206\u5b50 numerator \u548c\u5206\u6bcd denominator\uff0c\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u5c0f\u6570\u3002 \u5982\u679c\u5c0f\u6570\u90e8\u5206\u4e3a\u5faa\u73af\u5c0f\u6570\uff0c\u5219\u5c06\u5faa\u73af\u7684\u90e8\u5206\u62ec\u5728\u62ec\u53f7\u5185\u3002 \u793a\u4f8b 1: \u8f93\u5165: numerator = 1, denominator = 2 \u8f93\u51fa: \"0.5\" \u793a\u4f8b 2: \u8f93\u5165: numerator = 2, denominator = 1 \u8f93\u51fa: \"2\" \u793a\u4f8b 3: \u8f93\u5165: numerator = 2, denominator = 3 \u8f93\u51fa: \"0.(6) \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u957f\u9664\u6cd5 class Solution { // \u8fd9\u9898\u6ca1\u610f\u601d public String fractionToDecimal(int numerator, int denominator) { if (numerator == 0) { return \"0\"; } StringBuilder fraction = new StringBuilder(); // If either one is negative (not both) if (numerator < 0 ^ denominator < 0) { fraction.append(\"-\"); } // Convert to Long or else abs(-2147483648) overflows long dividend = Math.abs(Long.valueOf(numerator)); long divisor = Math.abs(Long.valueOf(denominator)); fraction.append(String.valueOf(dividend / divisor)); long remainder = dividend % divisor; if (remainder == 0) { return fraction.toString(); } fraction.append(\".\"); Map<Long, Integer> map = new HashMap<>(); while (remainder != 0) { if (map.containsKey(remainder)) { fraction.insert(map.get(remainder), \"(\"); fraction.append(\")\"); break; } map.put(remainder, fraction.length()); remainder *= 10; fraction.append(String.valueOf(remainder / divisor)); remainder %= divisor; } return fraction.toString(); } } \u89e3\u6cd5\u4e8c 204.\u8ba1\u7b97\u8d28\u6570 204.1.\u9898\u76ee\u63cf\u8ff0 \u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570 n \u7684\u8d28\u6570\u7684\u6570\u91cf\u3002 \u793a\u4f8b: \u8f93\u5165: 10 \u8f93\u51fa: 4 \u89e3\u91ca: \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002 204.2.\u89e3\u6cd5 204.2.1 \u65b9\u6cd5\u4e00 \u5b9a\u4e49\u6cd5 class Solution { public int countPrimes(int n) { int ans = 0; for(int i = 2; i < n; i++){ ans += isPrime(i) ? 1 : 0; } return ans; } public boolean isPrime(int n){ if(n == 2 || n == 3){ return true; } for(int i = 2; i <= Math.sqrt(n); i++){ if(n % i == 0){ return false; } } return true; } } 204.2.2 \u65b9\u6cd5\u4e8c \u8fd9\u9898\u641c\u5230\u4e00\u4e2a\u975e\u5e38\u725b\u903c\u7684\u7b97\u6cd5,\u53eb\u505a\u5384\u62c9\u591a\u585e\u7b5b\u6cd5. \u6bd4\u5982\u8bf4\u6c4220\u4ee5\u5185\u8d28\u6570\u7684\u4e2a\u6570,\u9996\u51480,1\u4e0d\u662f\u8d28\u6570.2\u662f\u7b2c\u4e00\u4e2a\u8d28\u6570,\u7136\u540e\u628a20\u4ee5\u5185\u6240\u67092\u7684\u500d\u6570\u5212\u53bb.2\u540e\u9762\u7d27\u8ddf\u7684\u6570\u5373\u4e3a\u4e0b\u4e00\u4e2a\u8d28\u65703,\u7136\u540e\u628a3\u6240\u6709\u7684\u500d\u6570\u5212\u53bb.3\u540e\u9762\u7d27\u8ddf\u7684\u6570\u5373\u4e3a\u4e0b\u4e00\u4e2a\u8d28\u65705,\u518d\u628a5\u6240\u6709\u7684\u500d\u6570\u5212\u53bb.\u4ee5\u6b64\u7c7b\u63a8. \u4ee3\u7801\u7684\u5b9e\u73b0\u4e0a\u7528\u4e86\u975e\u5e38\u597d\u7684\u6280\u5de7: \u5728\u4e0a\u9762\u904d\u5386\u7d22\u5f15\u7684\u65f6\u5019\u7528\u5230\u4e86\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u6280\u5de7. \u5373i\u662f\u4ece(2,int(n* 0.5)+1)\u800c\u975e(2,n).\u8fd9\u4e2a\u6280\u5de7\u662f\u53ef\u4ee5\u9a8c\u8bc1\u7684,\u6bd4\u5982\u8bf4\u6c429\u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570,\u90a3\u4e48\u53ea\u8981\u5212\u6389sqrt(9)\u4ee5\u5185\u7684\u8d28\u6570\u500d\u6570,\u5269\u4e0b\u7684\u5373\u5168\u4e3a\u8d28\u6570. \u6240\u4ee5\u5728\u5212\u53bb\u500d\u6570\u7684\u65f6\u5019\u4e5f\u662f\u4ecei i\u5f00\u59cb\u5212\u6389,\u800c\u4e0d\u662fi+i. class Solution { public int countPrimes(int n) { if(n <= 2){ return 0; }else{ // \u751f\u6210\u4e2a\u503c\u5168\u90e8\u4e3a1\u7684\u5217\u8868 int[] arr = new int[n+1]; Arrays.fill(arr, 1); arr[0] = 0; arr[1] = 0; //\u56e0\u4e3a0\u548c1\u4e0d\u662f\u8d28\u6570,\u6240\u4ee5\u5217\u8868\u7684\u524d\u4e24\u4e2a\u4f4d\u7f6e\u8d4b\u503c\u4e3a0 output[0],output[1] = 0,0 // \u6b64\u65f6\u4eceindex = 2\u5f00\u59cb\u904d\u5386,output[2]==1,\u5373\u8868\u660e\u7b2c\u4e00\u4e2a\u8d28\u6570\u4e3a2,\u7136\u540e\u5c062\u7684\u500d\u6570\u5bf9\u5e94\u7684\u7d22\u5f15 //\u5168\u90e8\u8d4b\u503c\u4e3a0. \u6b64\u65f6output[3] == 1,\u5373\u8868\u660e\u4e0b\u4e00\u4e2a\u8d28\u6570\u4e3a3,\u540c\u6837\u5212\u53bb3\u7684\u500d\u6570.\u4ee5\u6b64\u7c7b\u63a8. for(int i = 2; i <= Math.sqrt(n); i++){ if(arr[i] == 1){ for(int j = i * i; j < n; j += i){ arr[j] = 0; } } } int sum = 0; for(int i = 0; i < n; i++){ if(arr[i] == 1){ sum++; } } return sum; } } } class Solution { public int countPrimes(int n) { boolean[] notPrime = new boolean[n]; int count = 0; for(int i = 2; i < n; i++){ if(notPrime[i] == false){ count++; for(int j = 2; j * i < n; j++){ notPrime[i*j] = true; } } } return count; } } 241. \u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7 241.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u4e3a\u8868\u8fbe\u5f0f\u6dfb\u52a0\u62ec\u53f7\uff0c\u6539\u53d8\u5176\u8fd0\u7b97\u4f18\u5148\u7ea7\u4ee5\u6c42\u51fa\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4f60\u9700\u8981\u7ed9\u51fa\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u7684\u7ed3\u679c\u3002\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u542b + , - \u4ee5\u53ca * \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"2-1-1\" \u8f93\u51fa: [0, 2] \u89e3\u91ca: ((2-1)-1) = 0 (2-(1-1)) = 2 \u793a\u4f8b 2: \u8f93\u5165: \"2*3-4*5\" \u8f93\u51fa: [-34, -14, -10, -10, 10] \u89e3\u91ca: (2*(3-(4*5))) = -34 ((2*3)-(4*5)) = -14 ((2*(3-4))*5) = -10 (2*((3-4)*5)) = -10 (((2*3)-4)*5) = 10 241.2 \u89e3\u6cd5 \u5206\u800c\u6cbb\u4e4b 241.2.1 \u65b9\u6cd5\u4e00 \u5206\u800c\u6cbb\u4e4b class Solution(object): def diffWaysToCompute(self, input): \"\"\" :type input: str :rtype: List[int] Divide and Conquer Divide Conquer Combine* \"\"\" # \u8fb9\u754c\u6761\u4ef6 if input.isnumeric(): return [int(input)] result = [] for i, item in enumerate(input): left_res = [] right_res = [] if item in set(['*', '+', '-']): left = input[:i] right = input[i+1:] if left.isnumeric(): left_res.append(int(left)) else: left_res.extend(self.diffWaysToCompute(left)) if right.isnumeric(): right_res.append(int(right)) else: right_res.extend(self.diffWaysToCompute(right)) for l in left_res: for r in right_res: if '*' == item: result.append(l * r) elif '+' == item: result.append(l + r) elif '-' == item: result.append(l - r) return result 241.2.2 \u65b9\u6cd5\u4e8c or \u77ed\u8def\u903b\u8f91\u66ff\u6362\u6761\u4ef6\u5206\u652f def diffWaysToCompute(self, input): # \u4e0b\u9762\u7684or\u5229\u7528\u4e86\u77ed\u8def\u903b\u8f91 return [a+b if c == '+' else a-b if c == '-' else a*b for i, c in enumerate(input) if c in '+-*' for a in self.diffWaysToCompute(input[:i]) for b in self.diffWaysToCompute(input[i+1:])] or [int(input)] 241.2.3 \u65b9\u6cd5\u4e09 eval: \u628a\u5b57\u7b26\u4e32\u5f53\u505a\u8868\u8fbe\u5f0f\u6267\u884c def diffWaysToCompute(self, input): return [eval(`a`+c+`b`) for i, c in enumerate(input) if c in '+-*' for a in self.diffWaysToCompute(input[:i]) for b in self.diffWaysToCompute(input[i+1:])] or [int(input)] [\u5f52\u7eb3\u516c\u5f0f]258.\u5404\u4f4d\u76f8\u52a0 1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 num \uff0c\u53cd\u590d\u5c06\u5404\u4e2a\u4f4d\u4e0a\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f4\u5230\u7ed3\u679c\u4e3a\u4e00\u4f4d\u6570\u3002 \u793a\u4f8b: \u8f93\u5165: 38 \u8f93\u51fa: 2 \u89e3\u91ca: \u5404\u4f4d\u76f8\u52a0\u7684\u8fc7\u7a0b\u4e3a\uff1a3 + 8 = 11, 1 + 1 = 2\u3002 \u7531\u4e8e 2 \u662f\u4e00\u4f4d\u6570\uff0c\u6240\u4ee5\u8fd4\u56de 2\u3002 \u8fdb\u9636: \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\uff0c\u4e14\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f 2.\u89e3\u6cd5 2.2 \u65b9\u6cd5\u4e8c \u516c\u5f0f \u4e0d\u901a\u7528 \u5bf9\u4e8e\u57fa\u6570b\uff08\u5341\u8fdb\u5236\u60c5\u51b5b = 10\uff09\uff0c\u6574\u6570\u7684\u6570\u5b57\u6839\u662f\uff1a \u5982\u679cn == 0\uff0c\u5219dr\uff08n\uff09= 0 dr\uff08n\uff09=\uff08b -1\uff09\u5982\u679cn\uff01= 0\u4e14n\uff05\uff08b -1\uff09== 0 dr\uff08n\uff09= n mod\uff08b -1\uff09\u5982\u679cn\uff05\uff08b -1\uff09\uff01= 0 \u8981\u4e48 dr\uff08n\uff09= 1 +\uff08n - 1\uff09\uff059 \u6ce8\u610f\uff0c\u5f53n = 0\u65f6\uff0c\u7531\u4e8e\uff08n -1\uff09\uff059 = -1\uff0c\u8fd4\u56de\u503c\u4e3a\u96f6\uff08\u6b63\u786e\uff09\u3002 \u4ece\u516c\u5f0f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u7684\u7ed3\u679c\u662f\u5468\u671f\u6027\u7684\uff0c\u5468\u671f\uff08b -1\uff09\u3002 \u5c0f\u6570\u7684\u8f93\u51fa\u987a\u5e8f\uff08b = 10\uff09\uff1a \u301c\u8f93\u5165\uff1a0 1 2 3 4 ... \u8f93\u51fa\uff1a0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 .... \u4ece\u6b64\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5176\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662fO\uff081\uff09\u3002 class Solution(object): def addDigits(self, num): \"\"\" :type num: int :rtype: int \"\"\" while(num >= 10): temp = 0 while(num > 0): temp += num % 10 num /= 10 num = temp return num 2.1 \u65b9\u6cd5\u4e00 \u8fed\u4ee3\u6cd5 \u3010\u63a8\u8350\u3011 class Solution(object): def addDigits(self, num): \"\"\" :type num: int :rtype: int \"\"\" while(num >= 10): sum_val = 0 while(num > 0): sum_val += num % 10 num /= 10 num = sum_val return num 263.\u4e11\u6570 1.\u9898\u76ee\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684 \u6b63\u6574\u6570 \u3002 \u793a\u4f8b 1: \u8f93\u5165: 6 \u8f93\u51fa: true \u89e3\u91ca: 6 = 2 \u00d7 3 \u793a\u4f8b 2: \u8f93\u5165: 8 \u8f93\u51fa: true \u89e3\u91ca: 8 = 2 \u00d7 2 \u00d7 2 \u793a\u4f8b 3: \u8f93\u5165: 14 \u8f93\u51fa: false \u89e3\u91ca: 14 \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570 7\u3002 \u8bf4\u660e\uff1a 1 \u662f\u4e11\u6570\u3002 \u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4: [\u2212231, 231 \u2212 1]\u3002 2.\u89e3\u6cd5 2.1 \u65b9\u6cd5\u4e00 class Solution { public boolean isUgly(int num) { if(num == 1){ return true; } while(num != 0 && num % 2 == 0){ num /= 2; } while(num != 0 && num % 3 == 0){ num /= 3; } while(num != 0 && num % 5 == 0){ num /= 5; } return num == 1; } } if (num > 0) for (int i=2; i<6; i++) while (num % i == 0) num /= i; return num == 1; 264.\u4e11\u6570II \u9898\u76ee\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c n \u4e2a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b: \u8f93\u5165: n = 10 \u8f93\u51fa: 12 \u89e3\u91ca: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002 \u8bf4\u660e: 1 \u662f\u4e11\u6570\u3002 n \u4e0d\u8d85\u8fc71690\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4e09\u6307\u9488\u6cd5 O(n) We have an array k of first n ugly number. We only know, at the beginning, the first one, which is 1. Then k[1] = min( k[0]x2, k[0]x3, k[0]x5). The answer is k[0]x2. So we move 2's pointer to 1. Then we test: k[2] = min( k[1]x2, k[0]x3, k[0]x5). And so on. Be careful about the cases such as 6, in which we need to forward both pointers of 2 and 3. x here is multiplication. class Solution: def nthUglyNumber(self, n: int) -> int: \"\"\" \u4e09\u6307\u9488\u6cd5 \"\"\" res = [1] idx2 = 0 idx3 = 0 idx5 = 0 for i in range(n - 1): res.append(min(res[idx2] * 2, res[idx3] * 3, res[idx5] * 5)) # \u5f53\u547d\u4e2d\u4e0b\u4e00\u4e2a\u4e11\u6570\u65f6\uff0c\u8bf4\u660e\u8be5\u6307\u9488\u6307\u5411\u7684\u4e11\u6570 \u4e58\u4ee5\u5bf9\u5e94\u6743\u91cd\u6240\u5f97\u79ef\u6700\u5c0f\u3002\u6b64\u65f6\uff0c\u6307\u9488\u5e94\u8be5\u6307\u5411\u4e0b\u4e00\u4e2a\u4e11\u6570\u3002 if res[-1] == res[idx2]*2: idx2 += 1 if res[-1] == res[idx3]*3: idx3 += 1 if res[-1] == res[idx5]*5: idx5 += 1 return res[n - 1] \u89e3\u6cd5\u4e8c \u5806 O(n**2) res[0] = 1 \u7136\u540e\u7528res[0]\u4e58\u4ee5{2,3,5}\uff0c\u653e\u8fdb\u6700\u5c0f\u5806\u4e2d\uff0c\u4ece\u5806\u4e2d\u53d6\u51fa\u5806\u9876\uff0c\u5373\u4e3ares[1]\u3002 res[1] = 2 \u7136\u540e\u7528res[1]\u4e58\u4ee5{2,3,5}\uff0c\u653e\u8fdb\u6700\u5c0f\u5806\u4e2d\uff0c\u4ece\u5806\u4e2d\u53d6\u51fa\u5806\u9876\uff0c\u5373\u4e3ares[2]\u3002 \u5faa\u73af\u5230 n \u5373\u53ef\u3002 public int nthUglyNumber(int n) { if(n==1) return 1; PriorityQueue<Long> q = new PriorityQueue(); q.add(1l); for(long i=1; i<n; i++) { long tmp = q.poll(); while(!q.isEmpty() && q.peek()==tmp) tmp = q.poll(); q.add(tmp*2); q.add(tmp*3); q.add(tmp*5); } return q.poll().intValue(); 279.\u5b8c\u5168\u5e73\u65b9\u6570 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u6b63\u6574\u6570 n\uff0c\u627e\u5230\u82e5\u5e72\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff08\u6bd4\u5982 1, 4, 9, 16, ...\uff09\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u7b49\u4e8e n\u3002\u4f60\u9700\u8981\u8ba9\u7ec4\u6210\u548c\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u4e2a\u6570\u6700\u5c11\u3002 \u793a\u4f8b 1: \u8f93\u5165: n = 12 \u8f93\u51fa: 3 \u89e3\u91ca: 12 = 4 + 4 + 4. \u793a\u4f8b 2: \u8f93\u5165: n = 13 \u8f93\u51fa: 2 \u89e3\u91ca: 13 = 4 + 9. \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DP \u4f1a\u8d85\u65f6 class Solution: def numSquares(self, n: int) -> int: dp = [float('inf')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n] \u89e3\u6cd5\u4e8c BFS \u9898\u76ee\u53d8\u5f62 import queue class Solution: def numSquares(self, n): # 1.\u7ec8\u6b62\u6761\u4ef6 if n < 2: return n # 2.\u5b8c\u5168\u5e73\u65b9\u6570\u5217\u8868 square_lst = [] i = 1 while i * i <= n: square_lst.append(i * i) i += 1 # 3.BFS \u4ee5n\u4e3a\u6839 \u4ee5\u6bcf\u4e2a \uff08n - \u5b8c\u5168\u5e73\u65b9\u6570\uff09\u4e3a\u5b50\u7ed3\u70b9 \u4e0d\u65ad\u5411\u4e0b\u904d\u5386 \u76f4\u5230\u67d0\u5b50\u7ed3\u70b9\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570 que = queue.Queue() que.put((n, 0)) while que: num, depth = que.get() for square in square_lst: if square < num: que.put((num - square, depth + 1)) elif square == num: return depth + 1 \u89e3\u6cd5\u4e09 \u56db\u5e73\u65b9\u548c\u5b9a\u7406 todo:\u8bb2\u89e3 class Solution { private: int is_square(int n) { int sqrt_n = (int)(sqrt(n)); return (sqrt_n*sqrt_n == n); } public: // Based on Lagrange's Four Square theorem, there // are only 4 possible results: 1, 2, 3, 4. int numSquares(int n) { // If n is a perfect square, return 1. if(is_square(n)) { return 1; } // The result is 4 if and only if n can be written in the // form of 4^k*(8*m + 7). Please refer to // Legendre's three-square theorem. while ((n & 3) == 0) // n%4 == 0 { n >>= 2; } if ((n & 7) == 7) // n%8 == 7 { return 4; } // Check whether 2 is the result. int sqrt_n = (int)(sqrt(n)); for(int i = 1; i <= sqrt_n; i++) { if (is_square(n - i*i)) { return 2; } } return 3; } }; 338.\u6bd4\u7279\u4f4d\u8ba1\u6570 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 num\u3002\u5bf9\u4e8e 0 \u2264 i \u2264 num \u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57 i \uff0c\u8ba1\u7b97\u5176\u4e8c\u8fdb\u5236\u6570\u4e2d\u7684 1 \u7684\u6570\u76ee\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u6570\u7ec4\u8fd4\u56de\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 \u8f93\u51fa: [0,1,1] \u793a\u4f8b 2: \u8f93\u5165: 5 \u8f93\u51fa: [0,1,1,2,1,2] \u8fdb\u9636: \u7ed9\u51fa\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n*sizeof(integer))\u7684\u89e3\u7b54\u975e\u5e38\u5bb9\u6613\u3002\u4f46\u4f60\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4O(n)\u5185\u7528\u4e00\u8d9f\u626b\u63cf\u505a\u5230\u5417\uff1f \u8981\u6c42\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002 \u4f60\u80fd\u8fdb\u4e00\u6b65\u5b8c\u5584\u89e3\u6cd5\u5417\uff1f\u8981\u6c42\u5728C++\u6216\u4efb\u4f55\u5176\u4ed6\u8bed\u8a00\u4e2d\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u51fd\u6570\uff08\u5982 C++ \u4e2d\u7684 __builtin_popcount\uff09\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def countBits(self, num: int) -> List[int]: \"\"\" \u627e\u89c4\u5f8b \u5076\u6570\u521d\u4e8c\u7ed3\u679c\u76f8\u7b49 \u5947\u6570\u7b49\u4e8e\u524d\u4e00\u4e2a\u5076\u6570\u7ed3\u679c+1 \"\"\" dp = [0] for i in range(1, num + 1): if i % 2: dp.append(dp[i - 1] + 1) else: dp.append(dp[i // 2]) return dp \u89e3\u6cd5\u4e8c 504. \u4e03\u8fdb\u5236\u6570 504.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a7\u8fdb\u5236\uff0c\u5e76\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8f93\u51fa\u3002 \u793a\u4f8b 1: \u8f93\u5165: 100 \u8f93\u51fa: \"202\" \u793a\u4f8b 2: \u8f93\u5165: -7 \u8f93\u51fa: \"-10\" \u6ce8\u610f: \u8f93\u5165\u8303\u56f4\u662f [-1e7, 1e7] \u3002 504.2 \u89e3\u6cd5 504.2.1 \u65b9\u6cd5\u4e00 \u8fed\u4ee3\u6cd5 def convertTo7(self, num): if num == 0: return '0' n, res = abs(num), '' while n: res = str(n % 7) + res n //= 7 return res if num > 0 else '-' + res 504.2.2 \u65b9\u6cd5\u4e8c \u9012\u5f52\u6cd5 def convertTo7(self, num): if num < 0: return '-' + self.convertTo7(-num) # \u7ec8\u6b62\u6761\u4ef6 if num < 7: return str(num) return self.convertTo7(num // 7) + str(num % 7) 866. \u56de\u6587\u7d20\u6570 866.1.\u9898\u76ee\u63cf\u8ff0 \u6c42\u51fa\u5927\u4e8e\u6216\u7b49\u4e8e N \u7684\u6700\u5c0f\u56de\u6587\u7d20\u6570\u3002 \u56de\u987e\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u5927\u4e8e 1\uff0c\u4e14\u5176\u56e0\u6570\u53ea\u6709 1 \u548c\u5b83\u81ea\u8eab\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u662f \u7d20\u6570 \u3002 \u4f8b\u5982\uff0c2\uff0c3\uff0c5\uff0c7\uff0c11 \u4ee5\u53ca 13 \u662f\u7d20\u6570\u3002 \u56de\u987e\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u4ece\u5de6\u5f80\u53f3\u8bfb\u4e0e\u4ece\u53f3\u5f80\u5de6\u8bfb\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u662f \u56de\u6587\u6570\u3002 \u4f8b\u5982\uff0c12321 \u662f\u56de\u6587\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a6 \u8f93\u51fa\uff1a7 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a8 \u8f93\u51fa\uff1a11 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a13 \u8f93\u51fa\uff1a101 \u63d0\u793a\uff1a 1 <= N <= 10^8 \u7b54\u6848\u80af\u5b9a\u5b58\u5728\uff0c\u4e14\u5c0f\u4e8e 2 * 10^8 \u3002 866.2.\u89e3\u6cd5 866.2.1 \u65b9\u6cd5\u4e00 class Solution { public int primePalindrome(int N) { if(N % 2 == 0 && N > 2){ N += 1; } while (true) { if (N == reverse(N) && isPrime(N)) return N; if(N > 2){ N++; } N++; if (10_000_000 < N && N < 100_000_000) N = 100_000_001; } } public boolean isPrime(int N) { if (N < 2) return false; int R = (int) Math.sqrt(N); for (int d = 2; d <= R; ++d) if (N % d == 0) return false; return true; } public int reverse(int N) { int ans = 0; while (N > 0) { ans = 10 * ans + (N % 10); N /= 10; } return ans; } } 1276.\u4e0d\u6d6a\u8d39\u539f\u6599\u7684\u6c49\u5821\u5236\u4f5c\u65b9\u6848 \u9898\u76ee\u63cf\u8ff0 \u5723\u8bde\u6d3b\u52a8\u9884\u70ed\u5f00\u59cb\u5566\uff0c\u6c49\u5821\u5e97\u63a8\u51fa\u4e86\u5168\u65b0\u7684\u6c49\u5821\u5957\u9910\u3002\u4e3a\u4e86\u907f\u514d\u6d6a\u8d39\u539f\u6599\uff0c\u8bf7\u4f60\u5e2e\u4ed6\u4eec\u5236\u5b9a\u5408\u9002\u7684\u5236\u4f5c\u8ba1\u5212\u3002 \u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 tomatoSlices \u548c cheeseSlices \uff0c\u5206\u522b\u8868\u793a\u756a\u8304\u7247\u548c\u5976\u916a\u7247\u7684\u6570\u76ee\u3002\u4e0d\u540c\u6c49\u5821\u7684\u539f\u6599\u642d\u914d\u5982\u4e0b\uff1a \u5de8\u65e0\u9738\u6c49\u5821\uff1a 4 \u7247\u756a\u8304\u548c 1 \u7247\u5976\u916a \u5c0f\u7687\u5821\uff1a 2 \u7247\u756a\u8304\u548c 1 \u7247\u5976\u916a \u8bf7\u4f60\u4ee5 [total_jumbo, total_small] \uff08[\u5de8\u65e0\u9738\u6c49\u5821\u603b\u6570\uff0c\u5c0f\u7687\u5821\u603b\u6570]\uff09\u7684\u683c\u5f0f\u8fd4\u56de\u6070\u5f53\u7684\u5236\u4f5c\u65b9\u6848\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u756a\u8304\u7247 tomatoSlices \u548c\u5976\u916a\u7247 cheeseSlices \u7684\u6570\u91cf\u90fd\u662f 0 \u3002 \u5982\u679c\u65e0\u6cd5\u4f7f\u5269\u4e0b\u7684\u756a\u8304\u7247 tomatoSlices \u548c\u5976\u916a\u7247 cheeseSlices \u7684\u6570\u91cf\u4e3a 0 \uff0c\u5c31\u8bf7\u8fd4\u56de [] \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1atomatoSlices = 16, cheeseSlices = 7 \u8f93\u51fa\uff1a[1,6] \u89e3\u91ca\uff1a\u5236\u4f5c 1 \u4e2a\u5de8\u65e0\u9738\u6c49\u5821\u548c 6 \u4e2a\u5c0f\u7687\u5821\u9700\u8981 4*1 + 2*6 = 16 \u7247\u756a\u8304\u548c 1 + 6 = 7 \u7247\u5976\u916a\u3002\u4e0d\u4f1a\u5269\u4e0b\u539f\u6599\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1atomatoSlices = 17, cheeseSlices = 4 \u8f93\u51fa\uff1a[] \u89e3\u91ca\uff1a\u53ea\u5236\u4f5c\u5c0f\u7687\u5821\u548c\u5de8\u65e0\u9738\u6c49\u5821\u65e0\u6cd5\u7528\u5149\u5168\u90e8\u539f\u6599\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1atomatoSlices = 4, cheeseSlices = 17 \u8f93\u51fa\uff1a[] \u89e3\u91ca\uff1a\u5236\u4f5c 1 \u4e2a\u5de8\u65e0\u9738\u6c49\u5821\u4f1a\u5269\u4e0b 16 \u7247\u5976\u916a\uff0c\u5236\u4f5c 2 \u4e2a\u5c0f\u7687\u5821\u4f1a\u5269\u4e0b 15 \u7247\u5976\u916a\u3002 \u793a\u4f8b 4\uff1a \u8f93\u5165\uff1atomatoSlices = 0, cheeseSlices = 0 \u8f93\u51fa\uff1a[0,0] \u793a\u4f8b 5\uff1a \u8f93\u5165\uff1atomatoSlices = 2, cheeseSlices = 1 \u8f93\u51fa\uff1a[0,1] \u63d0\u793a\uff1a 0 <= tomatoSlices <= 10^7 0 <= cheeseSlices <= 10^7 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9e21\u5154\u540c\u7b3c\u95ee\u9898 class Solution: def numOfBurgers(self, tomatoSlices: int, cheeseSlices: int) -> List[int]: t, c = tomatoSlices, cheeseSlices if t < 2 * c or t > 4 * c: return [] if (t - 2 * c) & 1: return [] tn = (t - 2 * c) >> 1 cn = c - tn return [tn, cn] \u89e3\u6cd5\u4e8c \u5b57\u7b26\u4e32 \u601d\u8def\uff08\u7c7b\u4f3c\u6570\u7ec4\uff09 \u5206\u6cbb\u6cd5 \u53cc\u6307\u9488 3.\u65e0\u91cd\u590d\u5b57\u7b26\u4e32\u7684\u6700\u957f\u5b50\u4e32 3.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"bbbbb\" \u8f93\u51fa: 1 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002 \u793a\u4f8b 3: \u8f93\u5165: \"pwwkew\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002 3.2.\u89e3\u6cd5 3.2.1 \u65b9\u6cd5\u4e00 O(n ^ 2) \u56fa\u5b9a\u9996\u5b57\u7b26 bruce class Solution: def lengthOfLongestSubstring(self, s: str) -> int: max_l = 0 for i in range(len(s)): c_set = set() for j, c in enumerate(s[i:]): if c in c_set: max_l = max(max_l, j) break else: c_set.add(c) max_l = max(max_l, j+1) return max_l 3.2.2 \u65b9\u6cd5\u4e8c Bruce O(n ^ 3) public class Solution { public int lengthOfLongestSubstring(String s) { int n = s.length(); int ans = 0; for (int i = 0; i < n; i++) for (int j = i + 1; j <= n; j++) if (allUnique(s, i, j)) ans = Math.max(ans, j - i); return ans; } public boolean allUnique(String s, int start, int end) { Set<Character> set = new HashSet<>(); for (int i = start; i < end; i++) { Character ch = s.charAt(i); if (set.contains(ch)) return false; set.add(ch); } return true; } } 3.2.3 \u65b9\u6cd5\u4e09 \u6ed1\u52a8\u7a97\u53e3 O(n) \u66b4\u529b\u6cd5\u975e\u5e38\u7b80\u5355\u3002\u4f46\u5b83\u592a\u6162\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u4f18\u5316\u5b83\u5462\uff1f \u5728\u66b4\u529b\u6cd5\u4e2d\uff0c\u6211\u4eec\u4f1a\u53cd\u590d\u68c0\u67e5\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\u662f\u5426\u542b\u6709\u6709\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u4f46\u8fd9\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\u5982\u679c\u4ece\u7d22\u5f15 i i \u5230 j - 1 j \u22121 \u4e4b\u95f4\u7684\u5b50\u5b57\u7b26\u4e32 s_{ij} s i j \u5df2\u7ecf\u88ab\u68c0\u67e5\u4e3a\u6ca1\u6709\u91cd\u590d\u5b57\u7b26\u3002\u6211\u4eec\u53ea\u9700\u8981\u68c0\u67e5 s[j] s [ j ] \u5bf9\u5e94\u7684\u5b57\u7b26\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u4e8e\u5b50\u5b57\u7b26\u4e32 s_{ij} s i j \u4e2d\u3002 \u8981\u68c0\u67e5\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5df2\u7ecf\u5728\u5b50\u5b57\u7b26\u4e32\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u6574\u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4ea7\u751f\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a O(n^2) O ( n 2) \u7684\u7b97\u6cd5\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002 \u901a\u8fc7\u4f7f\u7528 HashSet \u4f5c\u4e3a\u6ed1\u52a8\u7a97\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 O(1) O (1) \u7684\u65f6\u95f4\u6765\u5b8c\u6210\u5bf9\u5b57\u7b26\u662f\u5426\u5728\u5f53\u524d\u7684\u5b50\u5b57\u7b26\u4e32\u4e2d\u7684\u68c0\u67e5\u3002 \u6ed1\u52a8\u7a97\u53e3\u662f\u6570\u7ec4/\u5b57\u7b26\u4e32\u95ee\u9898\u4e2d\u5e38\u7528\u7684\u62bd\u8c61\u6982\u5ff5\u3002 \u7a97\u53e3\u901a\u5e38\u662f\u5728\u6570\u7ec4/\u5b57\u7b26\u4e32\u4e2d\u7531\u5f00\u59cb\u548c\u7ed3\u675f\u7d22\u5f15\u5b9a\u4e49\u7684\u4e00\u7cfb\u5217\u5143\u7d20\u7684\u96c6\u5408\uff0c\u5373 [i, j)[ i , j )\uff08\u5de6\u95ed\uff0c\u53f3\u5f00\uff09\u3002\u800c\u6ed1\u52a8\u7a97\u53e3\u662f\u53ef\u4ee5\u5c06\u4e24\u4e2a\u8fb9\u754c\u5411\u67d0\u4e00\u65b9\u5411\u201c\u6ed1\u52a8\u201d\u7684\u7a97\u53e3\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5c06 [ i , j ) \u5411\u53f3\u6ed1\u52a8 1\u4e2a\u5143\u7d20\uff0c\u5219\u5b83\u5c06\u53d8\u4e3a [i+1, j+1)\uff08\u5de6\u95ed\uff0c\u53f3\u5f00\uff09\u3002 \u56de\u5230\u6211\u4eec\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528 HashSet \u5c06\u5b57\u7b26\u5b58\u50a8\u5728\u5f53\u524d\u7a97\u53e3 [i, j)[ i , j )\uff08\u6700\u521d j = i j = i \uff09\u4e2d\u3002 \u7136\u540e\u6211\u4eec\u5411\u53f3\u4fa7\u6ed1\u52a8\u7d22\u5f15 j j \uff0c\u5982\u679c\u5b83\u4e0d\u5728 HashSet \u4e2d\uff0c\u6211\u4eec\u4f1a\u7ee7\u7eed\u6ed1\u52a8 j j \u3002\u76f4\u5230 s[j] \u5df2\u7ecf\u5b58\u5728\u4e8e HashSet \u4e2d\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u627e\u5230\u7684\u6ca1\u6709\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u5b57\u7b26\u4e32\u5c06\u4f1a\u4ee5\u7d22\u5f15 i i \u5f00\u5934\u3002\u5982\u679c\u6211\u4eec\u5bf9\u6240\u6709\u7684 i i \u8fd9\u6837\u505a\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 def lengthOfLongestSubstring(self, s: str) -> int: cset = set() i, j = 0, 0 res = 0 while j < len(s): if s[j] in cset: res = max(res, j - i) cset.remove(s[i]) i += 1 else: cset.add(s[j]) j += 1 res = max(res, j - i) return res import java.lang.Math; import java.util.HashSet; class Solution { public int lengthOfLongestSubstring(String s) { if(s == null || \"\".equals(s)){ return 0; } int i = 0, j = 0, ans = 0; HashSet<Character> set = new HashSet<>(); while(j < s.length()){ if(!set.contains(s.charAt(j))){ set.add(s.charAt(j++)); ans = Math.max(ans, j - i); }else{ set.remove(s.charAt(i++)); } } return ans; } } 3.2.4 \u65b9\u6cd5\u56db \u6539\u8fdb\u7684\u6ed1\u52a8\u7a97\u53e3 O(n) \u4e0a\u8ff0\u7684\u65b9\u6cd5\u6700\u591a\u9700\u8981\u6267\u884c 2n \u4e2a\u6b65\u9aa4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65\u4f18\u5316\u4e3a\u4ec5\u9700\u8981 n \u4e2a\u6b65\u9aa4\u3002\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5b57\u7b26\u5230\u7d22\u5f15\u7684\u6620\u5c04\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u96c6\u5408\u6765\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5b58\u5728\u3002 \u5f53\u6211\u4eec\u627e\u5230\u91cd\u590d\u7684\u5b57\u7b26\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u8df3\u8fc7\u8be5\u7a97\u53e3\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c s[j] \u5728 [i, j \u8303\u56f4\u5185\u6709\u4e0e j' \u91cd\u590d\u7684\u5b57\u7b26\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u9010\u6e10\u589e\u52a0 i \u3002 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7 [i\uff0cj'][ i \uff0c j \u2032] \u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\uff0c\u5e76\u5c06 i\u53d8\u4e3a j' + 1\u3002 class Solution: def lengthOfLongestSubstring(self, s: str) -> int: dic = dict() i, j = 0, 0 res = 0 while j < len(s): if s[j] in dic: i = max(i, dic[s[j]]) res = max(res, j - i + 1) dic[s[j]] = j + 1 j += 1 return res import java.lang.Math; import java.util.HashMap; class Solution { public int lengthOfLongestSubstring(String s) { if(s == null || \"\".equals(s)){ return 0; } int i = 0, j = 0, ans = 0; HashMap<Character, Integer> map = new HashMap<>(); while(j < s.length()){ if(map.containsKey(s.charAt(j))) # key: i\u4e00\u5b9a\u662f\u5f80\u540e\u8d70 i = Math.max(map.get(s.charAt(j)), i); ans = Math.max(ans, j - i + 1); map.put(s.charAt(j), ++j); } return ans; } } 5.\u6700\u957f\u56de\u6587\u5b50\u4e32 5.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe s \u7684\u6700\u5927\u957f\u5ea6\u4e3a 1000\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"babad\" \u8f93\u51fa: \"bab\" \u6ce8\u610f: \"aba\" \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: \"cbbd\" \u8f93\u51fa: \"bb\" 5.2.\u89e3\u6cd5 5.2.1 \u65b9\u6cd5\u4e00 DP O(n**2) import java.util.Arrays; class Solution { public String longestPalindrome(String s) { if(s.length() <= 1){ return s; } int left = 0, right = 0, len = 0; boolean[][] dp = new boolean[s.length()][s.length()]; // i\u4ece\u540e\u5f80\u524d\u4e3a\u4e86j-i\u4ece\u5c0f\u5f80\u5927 for(int i = s.length() - 1; i >= 0; i--){ for(int j = i; j < s.length(); j++){ // \u82e5s.charAt(i) == s.charAt(j) && \uff08j - i <= 2\uff09\u4e00\u5b9a\u56de\u6587 // \u5426\u5219\u5c31\u8981\u5224\u65addp[i+1][j-1] dp[i][j] = s.charAt(i) == s.charAt(j) && (j - i <= 2 || dp[i+1][j-1]); if(dp[i][j] && j - i > right - left){ left = i; right = j; } } } return s.substring(left, right+1); } } 5.2.2 \u65b9\u6cd5\u4e8c \u4e2d\u5fc3\u6269\u6563\u6cd5 O(n**2) \u4e8b\u5b9e\u4e0a\uff0c\u53ea\u9700\u4f7f\u7528\u6052\u5b9a\u7684\u7a7a\u95f4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 O ( n*2) \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u89c2\u5bdf\u5230\u56de\u6587\u4e2d\u5fc3\u7684\u4e24\u4fa7\u4e92\u4e3a\u955c\u50cf\u3002\u56e0\u6b64\uff0c\u56de\u6587\u53ef\u4ee5\u4ece\u5b83\u7684\u4e2d\u5fc3\u5c55\u5f00\uff0c\u5e76\u4e14\u53ea\u67092 n \u22121 \u4e2a\u8fd9\u6837\u7684\u4e2d\u5fc3\u3002 \u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u662f 2 n \u22121 \u4e2a\uff0c\u800c\u4e0d\u662f n \u4e2a\u4e2d\u5fc3\uff1f\u539f\u56e0\u5728\u4e8e\u6240\u542b\u5b57\u6bcd\u6570\u4e3a\u5076\u6570\u7684\u56de\u6587\u7684\u4e2d\u5fc3\u53ef\u4ee5\u5904\u4e8e\u4e24\u5b57\u6bcd\u4e4b\u95f4\uff08\u4f8b\u5982 \u201cabba\u201d \u7684\u4e2d\u5fc3\u5728\u4e24\u4e2a \u2018b\u2019 \u4e4b\u95f4\uff09\u3002 \u663e\u7136\u6240\u6709\u7684\u56de\u6587\u4e32\u90fd\u662f\u5bf9\u79f0\u7684\u3002\u957f\u5ea6\u4e3a\u5947\u6570\u56de\u6587\u4e32\u4ee5\u6700\u4e2d\u95f4\u5b57\u7b26\u7684\u4f4d\u7f6e\u4e3a\u5bf9\u79f0\u8f74\u5de6\u53f3\u5bf9\u79f0\uff0c\u800c\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\u7684\u5bf9\u79f0\u8f74\u5728\u4e2d\u95f4\u4e24\u4e2a\u5b57\u7b26\u4e4b\u95f4\u7684\u7a7a\u9699\u3002\u53ef\u5426\u5229\u7528\u8fd9\u79cd\u5bf9\u79f0\u6027\u6765\u63d0\u9ad8\u7b97\u6cd5\u6548\u7387\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u6211\u4eec\u77e5\u9053\u6574\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5b57\u7b26\uff0c\u4ee5\u53ca\u5b57\u7b26\u95f4\u7684\u7a7a\u9699\uff0c\u90fd\u53ef\u80fd\u662f\u67d0\u4e2a\u56de\u6587\u5b50\u4e32\u7684\u5bf9\u79f0\u8f74\u4f4d\u7f6e\u3002\u53ef\u4ee5\u904d\u5386\u8fd9\u4e9b\u4f4d\u7f6e\uff0c\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u540c\u65f6\u5411\u5de6\u548c\u5411\u53f3\u6269\u5c55\uff0c\u76f4\u5230\u5de6\u53f3\u4e24\u8fb9\u7684\u5b57\u7b26\u4e0d\u540c\uff0c\u6216\u8005\u8fbe\u5230\u8fb9\u754c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7684\u4f4d\u7f6e\u4e00\u5171\u6709n+n-1=2n-1\u4e2a\uff0c\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u5e73\u5747\u5927\u7ea6\u8981\u8fdb\u884cn/4\u6b21\u5b57\u7b26\u6bd4\u8f83\uff0c\u4e8e\u662f\u6b64\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\u3002 class Solution: def longestPalindrome(self, s: str) -> str: \"\"\" \u8fb9\u754c\u6761\u4ef6 \u4e2d\u5fc3\u6269\u6563\u6cd5 \u9a6c\u62c9\u8f66\u6cd5 \"\"\" def getLen(s, i, j): res = 0 while i >= 0 and j < len(s) and s[i] == s[j]: res = max(res, j - i + 1) i -= 1 j += 1 return res l, r = 0, 0 for i in range(len(s)): len1 = getLen(s, i, i) if len1 > r - l + 1: l, r = i - len1 // 2, i + len1 // 2 len2 = getLen(s, i, i + 1) if len2 > r - l + 1: l, r = i - (len2 - 1) // 2, i + len2 // 2 return s[l: r + 1] class Solution { public String longestPalindrome(String s) { if(s.length() <= 1){ return s; } int start = 0, end = 0; for(int i = 0; i < s.length(); i++){ // \u5355\u72ec\u7684\u4e2d\u5fc3\u70b9 int len1 = expandAroundCenter(s, i, i); // \u4e24\u4e2a\u76f8\u540c\u5730\u4e2d\u5fc3\u70b9 int len2 = expandAroundCenter(s, i, i + 1); int len = Math.max(len1, len2); if(len >= end - start + 1){ start = i - (len1 - 1) / 2; end = i + len / 2; } } return s.substring(start, end + 1); } private int expandAroundCenter(String s, int left, int right) { // \u56de\u6587\u53ef\u4ee5\u662f\u4e00\u4e2a\u4e2d\u5fc3\u6216\u8005\u4e24\u4e2a\u76f8\u540c\u5730\u4e2d\u5fc3\u70b9 int L = left, R = right; while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) { L--; R++; } return R - L - 1; } } 5.2.3 Manacher \u7b97\u6cd5 TO(n) \u9a6c\u62c9\u8f66\u7b97\u6cd5 class Solution: def longestPalindrome(self, s: str) -> str: \"\"\" \u8fb9\u754c\u6761\u4ef6 \u4e2d\u5fc3\u6269\u6563\u6cd5 O(n**2) \u9a6c\u62c9\u8f66\u6cd5 \"\"\" # 1.\u4ee5#\u586b\u5145\u95f4\u9694 \u89e3\u51b3\u56de\u6587\u5b50\u4e32\u5947\u5076\u6027\u95ee\u9898 A = '^#' + '#'.join(s) + '#&' # 2.\u6784\u5efa\u8f85\u52a9\u6570\u7ec4Len \u5b58\u50a8\u4ee5i\u4e3a\u6838\u5fc3\u7684\u5b50\u4e32\u534a\u5f84(\u4e0d\u5305\u62eci) Len = [0] * len(A) center, right = 0, 0 for i in range(1, len(A) - 1): if i < right: Len[i] = min(right - i, Len[2 * center - i]) while A[i + Len[i] + 1] == A[i - Len[i] - 1]: Len[i] += 1 if i + Len[i] > right: center, right = i, i + Len[i] # key: \u6c42\u5b50\u4e32\u957f\u5ea6 \u8bb0\u4f4f\u5427 maxLen, centerIndex = max((n, i) for i, n in enumerate(Len)) return s[(centerIndex - maxLen)//2: (centerIndex + maxLen)//2] def manacher(S): \"\"\" \u56de\u6587\u95ee\u9898\u4e09\u79cd\u89e3\u6cd5\uff1a 1.\u4e2d\u5fc3\u6269\u6563\u6cd5 2.DP 3.manacher\u7b97\u6cd5: O(n) \u672c\u51fd\u6570\u8fd4\u56de\u6700\u5927\u56de\u6587\u5b50\u5b57\u7b26\u4e32 \"\"\" # 1.\u89e3\u51b3\u957f\u5ea6\u5947\u5076\u6027\u5e26\u6765\u7684\u5bf9\u79f0\u8f74\u4f4d\u7f6e\u95ee\u9898 # \u5176\u4e2d\u9996\u5c3e\u7684\u4f5c\u7528\u662f\u4e2d\u5fc3\u6269\u6563\u7684\u65f6\u5019\u9632\u6b62\u7d22\u5f15\u8d8a\u754c A = '^#' + '#'.join(S) + '#$' # 2.\u8f85\u52a9\u6570\u7ec4LEN\uff0c\u5b58\u50a8\u7684\u662f\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u534a\u5f84(**\u4e0d\u5305\u62eci\u8fd9\u4e2a\u5143\u7d20) # LEN\u6570\u7ec4\u6027\u8d28: LEN[i]\u5c31\u662f\u8be5\u56de\u6587\u5b50\u4e32\u5728\u539f\u5b57\u7b26\u4e32S\u4e2d\u7684\u957f\u5ea6 LEN = [0] * len(A) # 3.\u8bbe\u7f6e\u4e24\u4e2a\u53d8\u91cf\uff0cright \u548c center \u3002right \u4ee3\u8868\u4ee5 center \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u53f3\u8fb9\u754c\uff0c # \u4e5f\u5c31\u662fright = center + LEN[center] - 1\u3002 center = right = 0 # 4.\u53bb\u6389\u9996\u5c3e\u4f9d\u6b21\u904d\u5386A\u6570\u7ec4\u5143\u7d20 for i in range(1, len(A) - 1): # 5.i <= right, j\u548ci\u5173\u4e8e\u4f4d\u7f6ecenter\u5bf9\u79f0, \u4ee5j\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u4e00\u5b9a\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5185\u90e8, # LEN[i]=LEN[j] # i > right, \u4ee5i\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5916\u90e8\uff0c # \u800c\u5927\u4e8eright\u7684\u90e8\u5206\u6211\u4eec\u8fd8\u6ca1\u6709\u8fdb\u884c\u5339\u914d\uff0c\u6240\u4ee5\u8981\u4eceright+1\u4f4d\u7f6e\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u5339\u914d\uff0c\u76f4\u5230\u53d1\u751f\u5931\u914d\uff0c # \u4ece\u800c\u66f4\u65b0P\u548c\u5bf9\u5e94\u7684po\u4ee5\u53caLen[i]\u3002 if i < right: LEN[i] = min(right - i, LEN[2 * center - i]) else: LEN[i] = 0 # 6.\u5947\u6570\u7684\u4e2d\u5fc3\u6269\u6563\u6cd5 # \u5947\u5076\u6027\u95ee\u9898\u7531\u7b2c\u4e00\u6b65\u5df2\u7ecf\u89e3\u51b3\u4e86 while A[i + LEN[i] + 1] == A[i - LEN[i] - 1]: LEN[i] += 1 # 7..\u5982\u679ci\u7684\u53f3\u8fb9\u754c > \u539f\u6765\u7684\u53f3\u8fb9\u754c\uff0c\u66f4\u65b0 if i + LEN[i] > right: center, right = i, i + LEN[i] # print('\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e32', A) # print('\u8f85\u52a9\u534a\u5f84\u6570\u7ec4', LEN) maxLen, centerIndex = max((n, i) for i, n in enumerate(LEN)) print((maxLen, centerIndex)) # return maxLen \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32\u957f\u5ea6 # return s[(centerIndex - maxLen)//2: (centerIndex + maxLen)//2] \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32 # return sum([(1+x)//2 for x in LEN]) \u6c42\u56de\u6587\u5b50\u4e32\u6570\u91cf return S[(centerIndex - maxLen)//2: (centerIndex + maxLen)//2] 6.Z\u5b57\u5f62\u53d8\u5e7b 1.\u9898\u76ee\u63cf\u8ff0 \u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c Z \u5b57\u5f62\u6392\u5217\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a \"LEETCODEISHIRING\" \u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a L C I R E T O E S I I G E D H N \u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a\"LCIRETOESIIGEDHN\"\u3002 \u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a string convert(string s, int numRows); \u793a\u4f8b 1: \u8f93\u5165: s = \"LEETCODEISHIRING\", numRows = 3 \u8f93\u51fa: \"LCIRETOESIIGEDHN\" \u793a\u4f8b 2: \u8f93\u5165: s = \"LEETCODEISHIRING\", numRows = 4 \u8f93\u51fa: \"LDREOEIIECIHNTSG\" \u89e3\u91ca: L D R E O E I I E C I H N T S G 2.\u89e3\u6cd5 2.1 \u65b9\u6cd5\u4e00 TO(n) SO(n) class Solution: def convert(self, s: str, numRows: int) -> str: res = [\"\" for _ in range(numRows)] i = 0 Up = False for c in s: res[i] += c if Up: if i > 0: i -= 1 else: Up = False i += 1 else: if i < numRows - 1: i += 1 else: Up = True i -= 1 return \"\".join(res) class Solution { public String convert(String s, int numRows) { if(numRows == 1){ return s; } ArrayList<ArrayList<Character>> rows = new ArrayList<>(); for(int i = 0; i < numRows; i++){ ArrayList<Character> list = new ArrayList<>(); rows.add(list); } for(int i = 0, j = 0, sign = 1; i < s.length(); i++){ rows.get(j).add(s.charAt(i)); if(j == numRows - 1 || (i != 0 && j == 0)){ sign = -sign; } j += sign; } StringBuilder builder = new StringBuilder(); for(ArrayList<Character> list: rows){ for(Character c: list){ builder.append(c); } } return builder.toString(); } } 12.\u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57 \u9898\u76ee\u63cf\u8ff0 \u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a I\uff0c V\uff0c X\uff0c L\uff0cC\uff0cD \u548c M\u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII, \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII\uff0c\u800c\u662f IV\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u793a\u4f8b 1: \u8f93\u5165: 3 \u8f93\u51fa: \"III\" \u793a\u4f8b 2: \u8f93\u5165: 4 \u8f93\u51fa: \"IV\" \u793a\u4f8b 3: \u8f93\u5165: 9 \u8f93\u51fa: \"IX\" \u793a\u4f8b 4: \u8f93\u5165: 58 \u8f93\u51fa: \"LVIII\" \u89e3\u91ca: L = 50, V = 5, III = 3. \u793a\u4f8b 5: \u8f93\u5165: 1994 \u8f93\u51fa: \"MCMXCIV\" \u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4. \u89e3\u6cd5 \u89e3\u6cd5\u4e00 Hash class Solution: def intToRoman(self, num: int) -> str: \"\"\" \u6570\u5b57\u8303\u56f4 1 - 3999 \u8fb9\u754c\u6761\u4ef6 \u7279\u6b8a\u6761\u4ef6 \"\"\" dic = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M', 4: 'IV', 9: 'IX', 40: 'XL', 90: 'XC', 400: 'CD', 900: 'CM'} ans = \"\" bit = 0 while num: a = num % 10 if a == 4 or a == 9: ans = dic[a * (10 ** bit)] + ans elif a >= 1 and a < 4: ans = dic[10 ** bit] * a + ans elif a >= 5 and a < 9: print(a) ans = dic[10 ** bit * 5] + dic[10 ** bit] * (a - 5) + ans num //= 10 bit += 1 return ans \u89e3\u6cd5\u4e8c \u5657\u5657\u5657 public static String intToRoman(int num) { String M[] = {\"\", \"M\", \"MM\", \"MMM\"}; String C[] = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"}; String X[] = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"}; String I[] = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"}; return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10]; } \u89e3\u6cd5\u4e09 \u63a8\u8350 class Solution: def intToRoman(self, num: int) -> str: values = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] numerals = [ \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\" ] res = \"\" for i in range(len(values)): if num // values[i] > 0: res += (num // values[i]) * numerals[i] num %= values[i] return res 20.\u6709\u6548\u7684\u62ec\u53f7 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']' \u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002 \u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a \u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002 \u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002 \u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"()\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: \"()[]{}\" \u8f93\u51fa: true \u793a\u4f8b 3: \u8f93\u5165: \"(]\" \u8f93\u51fa: false \u793a\u4f8b 4: \u8f93\u5165: \"([)]\" \u8f93\u51fa: false \u793a\u4f8b 5: \u8f93\u5165: \"{[]}\" \u8f93\u51fa: true \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def isValid(self, s: str) -> bool: stack = [] mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"} for c in s: if c not in mapping: stack.append(c) else: top_element = stack.pop() if stack else '#' if mapping[c] != top_element: return False return not stack 71.\u7b80\u5316\u8def\u5f84 \u9898\u76ee\u63cf\u8ff0 \u4ee5 Unix \u98ce\u683c\u7ed9\u51fa\u4e00\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u4f60\u9700\u8981\u7b80\u5316\u5b83\u3002\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u89c4\u8303\u8def\u5f84\u3002 \u5728 Unix \u98ce\u683c\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u4e00\u4e2a\u70b9\uff08.\uff09\u8868\u793a\u5f53\u524d\u76ee\u5f55\u672c\u8eab\uff1b\u6b64\u5916\uff0c\u4e24\u4e2a\u70b9 \uff08..\uff09 \u8868\u793a\u5c06\u76ee\u5f55\u5207\u6362\u5230\u4e0a\u4e00\u7ea7\uff08\u6307\u5411\u7236\u76ee\u5f55\uff09\uff1b\u4e24\u8005\u90fd\u53ef\u4ee5\u662f\u590d\u6742\u76f8\u5bf9\u8def\u5f84\u7684\u7ec4\u6210\u90e8\u5206\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\uff1aLinux / Unix\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84 vs \u76f8\u5bf9\u8def\u5f84 \u8bf7\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u89c4\u8303\u8def\u5f84\u5fc5\u987b\u59cb\u7ec8\u4ee5\u659c\u6760 / \u5f00\u5934\uff0c\u5e76\u4e14\u4e24\u4e2a\u76ee\u5f55\u540d\u4e4b\u95f4\u5fc5\u987b\u53ea\u6709\u4e00\u4e2a\u659c\u6760 /\u3002\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\u540d\uff08\u5982\u679c\u5b58\u5728\uff09\u4e0d\u80fd\u4ee5 / \u7ed3\u5c3e\u3002\u6b64\u5916\uff0c\u89c4\u8303\u8def\u5f84\u5fc5\u987b\u662f\u8868\u793a\u7edd\u5bf9\u8def\u5f84\u7684\u6700\u77ed\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a\"/home/\" \u8f93\u51fa\uff1a\"/home\" \u89e3\u91ca\uff1a\u6ce8\u610f\uff0c\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\u540d\u540e\u9762\u6ca1\u6709\u659c\u6760\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a\"/../\" \u8f93\u51fa\uff1a\"/\" \u89e3\u91ca\uff1a\u4ece\u6839\u76ee\u5f55\u5411\u4e0a\u4e00\u7ea7\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u56e0\u4e3a\u6839\u662f\u4f60\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u9ad8\u7ea7\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a\"/home//foo/\" \u8f93\u51fa\uff1a\"/home/foo\" \u89e3\u91ca\uff1a\u5728\u89c4\u8303\u8def\u5f84\u4e2d\uff0c\u591a\u4e2a\u8fde\u7eed\u659c\u6760\u9700\u8981\u7528\u4e00\u4e2a\u659c\u6760\u66ff\u6362\u3002 \u793a\u4f8b 4\uff1a \u8f93\u5165\uff1a\"/a/./b/../../c/\" \u8f93\u51fa\uff1a\"/c\" \u793a\u4f8b 5\uff1a \u8f93\u5165\uff1a\"/a/../../b/../c//.//\" \u8f93\u51fa\uff1a\"/c\" \u793a\u4f8b 6\uff1a \u8f93\u5165\uff1a\"/a//b////c/d//././/..\" \u8f93\u51fa\uff1a\"/a/b/c\" \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u6808 class Solution: def simplifyPath(self, path: str) -> str: stack = [] words = path.split(\"/\") for w in words: if w == '' or w == '.': continue if w == '..': if stack: stack.pop() else: stack.append(w) res = \"/\" + \"/\".join(stack) return res \u89e3\u6cd5\u4e8c 91.\u89e3\u7801\u65b9\u6cd5 \u9898\u76ee\u63cf\u8ff0 \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"12\" \u8f93\u51fa: 2 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"226\" \u8f93\u51fa: 3 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"BZ\" (2 26), \"VF\" (22 6), \u6216\u8005 \"BBF\" (2 2 6) \u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DP \u540e\u4e00\u4e2a\u5b57\u7b26\u4e0e\u524d\u7f00\u82e5\u5e72\u4e2a\u5b57\u7b26\u7684\u7ec4\u5408\u53ef\u4ee5\u901a\u8fc7\u516c\u5f0f dp_i = dp_{i-1}+ dp_{i-2} \u8ba1\u7b97\u51fa\u6765\uff0cdp[i]\u4ee5\u5f53\u524di\u4e3a\u7ed3\u5c3e\u6709\u591a\u5c11\u79cd\u65b9\u6cd5 class Solution: def numDecodings(self, s: str) -> int: \"\"\" DP \u8fb9\u754c\u6761\u4ef6: 1.\u9996\u5b57\u6bcd\u4e3a0 2.\u4e2d\u95f4\u67d0\u5b57\u6bcd\u4e3a0 \"\"\" if not s or s[0] == '0': return 0 def check(num): return num >=10 and num <=26 # dp[i]\u4ee5\u5f53\u524di\u4e3a\u7ed3\u5c3e\u6709\u591a\u5c11\u79cd\u65b9\u6cd5 dp = [0] * (len(s) + 1) dp[0] = 1 dp[1] = 1 for i in range(2, len(s) + 1): dp[i] = (dp[i - 1] if s[i - 1] != '0' else 0) + (dp[i - 2] if check(int(s[i-2: i])) else 0) return dp[len(s)] \u89e3\u6cd5\u4e8c 125. \u9a8c\u8bc1\u56de\u6587\u4e32 125.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002 \u8bf4\u660e\uff1a \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"A man, a plan, a canal: Panama\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: \"race a car\" \u8f93\u51fa: false 125.2.\u89e3\u6cd5 125.2.1 \u65b9\u6cd5\u4e00 class Solution: def isPalindrome(self, s: str) -> bool: # 1.\u6574\u7406 ss = \"\" for c in s: if (c <= '9'and c >= '0') or (c <='z' and c >= 'a') or (c <='Z' and c >= 'A'): ss += c ss = ss.lower() # 2.\u9a8c\u8bc1 if not ss: return True i, j = 0, len(ss)-1 while i < j: if ss[i] != ss[j]: return False i += 1 j -= 1 return True 125.2.2 \u65b9\u6cd5\u4e8c public class Solution { public boolean isPalindrome(String s) { String actual = s.replaceAll(\"[^A-Za-z0-9]\", \"\").toLowerCase(); String rev = new StringBuffer(actual).reverse().toString(); return actual.equals(rev); } } 394.\u5b57\u7b26\u4e32\u7f16\u7801 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u7ecf\u8fc7\u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b83\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u3002 \u7f16\u7801\u89c4\u5219\u4e3a: k[encoded_string]\uff0c\u8868\u793a\u5176\u4e2d\u65b9\u62ec\u53f7\u5185\u90e8\u7684 encoded_string \u6b63\u597d\u91cd\u590d k \u6b21\u3002\u6ce8\u610f k \u4fdd\u8bc1\u4e3a\u6b63\u6574\u6570\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8f93\u5165\u5b57\u7b26\u4e32\u603b\u662f\u6709\u6548\u7684\uff1b\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u989d\u5916\u7684\u7a7a\u683c\uff0c\u4e14\u8f93\u5165\u7684\u65b9\u62ec\u53f7\u603b\u662f\u7b26\u5408\u683c\u5f0f\u8981\u6c42\u7684\u3002 \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u539f\u59cb\u6570\u636e\u4e0d\u5305\u542b\u6570\u5b57\uff0c\u6240\u6709\u7684\u6570\u5b57\u53ea\u8868\u793a\u91cd\u590d\u7684\u6b21\u6570 k \uff0c\u4f8b\u5982\u4e0d\u4f1a\u51fa\u73b0\u50cf 3a \u6216 2[4] \u7684\u8f93\u5165\u3002 \u793a\u4f8b: s = \"3[a]2[bc]\", \u8fd4\u56de \"aaabcbc\". s = \"3[a2[c]]\", \u8fd4\u56de \"accaccacc\". s = \"2[abc]3[cd]ef\", \u8fd4\u56de \"abcabccdcdcdef\". \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u6808 class Solution: def decodeString(self, s: str) -> str: stack = [] res = \"\" multi = 0 for c in s: if c == '[': stack.append([multi, res]) res, multi = \"\", 0 elif c == ']': cur_multi, last_res = stack.pop() res = last_res + cur_multi * res elif '0' <= c <= '9': multi = multi * 10 + int(c) else: res += c return res class Solution: def decodeString(self, s: str) -> str: \"\"\" \u9012\u5f52\u6cd5\uff1a dfs\uff1a \u8fb9\u754c\u6761\u4ef6\uff1a \u5b57\u7b26\u4e32\u7a7a \u6570\u5b57\u4e0d\u53ea\u662f\u4e2a\u4f4d\u6570 \u62ec\u53f7\u53ef\u4ee5\u5d4c\u5957 \u4e0d\u662f\u5fc5\u987b\u4ee5\u6269\u56de\u7ed3\u5c3e \"\"\" def is_number(c): if type(c) == int: return True return c >= '0' and c <= '9' def is_char(c): if type(c) == int: return False return c not in ['[', ']'] if not s: return s ans = '' stack = [] for c in s: if is_number(c): if stack and is_number(stack[-1]): stack[-1] = (stack[-1] * 10 + int(c)) else: stack.append(int(c)) elif c == '[': stack.append(c) elif c == ']': if stack: string = '' if is_char(stack[-1]): string = stack.pop() stack.pop() cnt = stack.pop() string = string * cnt if stack: if is_char(stack[-1]): stack[-1] = stack[-1] + string else: stack.append(string) else: ans += string else: if stack and is_char(stack[-1]): stack[-1] = stack[-1] + c else: stack.append(c) if stack: ans += stack[-1] return ans \u89e3\u6cd5\u4e8c 395.\u81f3\u5c11\u6709K\u4e2a\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u9898\u76ee\u63cf\u8ff0 \u627e\u5230\u7ed9\u5b9a\u5b57\u7b26\u4e32\uff08\u7531\u5c0f\u5199\u5b57\u7b26\u7ec4\u6210\uff09\u4e2d\u7684\u6700\u957f\u5b50\u4e32 T \uff0c \u8981\u6c42 T \u4e2d\u7684\u6bcf\u4e00\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u90fd\u4e0d\u5c11\u4e8e k \u3002\u8f93\u51fa T \u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"aaabb\", k = 3 \u8f93\u51fa: 3 \u6700\u957f\u5b50\u4e32\u4e3a \"aaa\" \uff0c\u5176\u4e2d 'a' \u91cd\u590d\u4e86 3 \u6b21\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"ababbc\", k = 2 \u8f93\u51fa: 5 \u6700\u957f\u5b50\u4e32\u4e3a \"ababb\" \uff0c\u5176\u4e2d 'a' \u91cd\u590d\u4e86 2 \u6b21\uff0c 'b' \u91cd\u590d\u4e86 3 \u6b21\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u627e\u5230\u8fb9\u754c \u5206\u800c\u6cbb\u4e4b class Solution: def longestSubstring(self, s: str, k: int) -> int: \"\"\" \u5206\u800c\u6cbb\u4e4b \u7531\u4e8e\u5c11\u4e8ek\u4e2a\u7684\u5b57\u7b26\u4e00\u5b9a\u4e0d\u80fd\u51fa\u73b0\u5728\u7ed3\u679c\u4e2d \u5229\u7528\u8fd9\u4e2a\u5206\u5272 \u9012\u5f52 \"\"\" if not s: return 0 for c in s: if s.count(c) < k: return max(self.longestSubstring(sub_s, k) for sub_s in s.split(c)) return len(s) \u89e3\u6cd5\u4e8c 409. \u6700\u957f\u56de\u6587\u4e32 409.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u5927\u5199\u5b57\u6bcd\u548c\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u901a\u8fc7\u8fd9\u4e9b\u5b57\u6bcd\u6784\u9020\u6210\u7684\u6700\u957f\u7684\u56de\u6587\u4e32\u3002 \u5728\u6784\u9020\u8fc7\u7a0b\u4e2d\uff0c\u8bf7\u6ce8\u610f\u533a\u5206\u5927\u5c0f\u5199\u3002\u6bd4\u5982 \"Aa\" \u4e0d\u80fd\u5f53\u505a\u4e00\u4e2a\u56de\u6587\u5b57\u7b26\u4e32\u3002 \u6ce8\u610f: \u5047\u8bbe\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 1010\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"abccccdd\" \u8f93\u51fa: 7 \u89e3\u91ca: \u6211\u4eec\u53ef\u4ee5\u6784\u9020\u7684\u6700\u957f\u7684\u56de\u6587\u4e32\u662f\"dccaccd\", \u5b83\u7684\u957f\u5ea6\u662f 7\u3002 409.2 \u89e3\u6cd5 409.2.1 Greedy [Accepted] Intuition A palindrome consists of letters with equal partners, plus possibly a unique center (without a partner). The letter i from the left has its partner i from the right. For example in 'abcba' , 'aa' and 'bb' are partners, and 'c' is a unique center. Imagine we built our palindrome. It consists of as many partnered letters as possible, plus a unique center if possible. This motivates a greedy approach. Algorithm For each letter, say it occurs v times. We know we have v // 2 * 2 letters that can be partnered for sure. For example, if we have 'aaaaa' , then we could have 'aaaa' partnered, which is 5 // 2 * 2 = 4 letters partnered. At the end, if there was any v % 2 == 1 , then that letter could have been a unique center. Otherwise, every letter was partnered. To perform this check, we will check for v % 2 == 1 and ans % 2 == 0 , the latter meaning we haven't yet added a unique center to the answer. Complexity Analysis Time Complexity: O(N) O ( N ), where N N is the length of s . We need to count each letter. Space Complexity: O(1) O (1), the space for our count, as the alphabet size of s is fixed. We should also consider that in a bit complexity model, technically we need O(\\log N) O (log N ) bits to store the count values. def longestPalindrome(self, s): \"\"\" :type s: str :rtype: int \"\"\" ans = 0 for k, v in collections.Counter(s).most_common(): ans += v // 2 * 2 if ans % 2 == 0 and v % 2 == 1: ans += 1 return ans 409.2.2 \u5229\u7528set\u7edf\u8ba1\u5947\u6570\u6b21 class Solution(object): def longestPalindrome(self, s): \"\"\" :type s: str :rtype: int \"\"\" hash = set() for c in s: if c not in hash: hash.add(c) else: hash.remove(c) # len(hash) is the number of the odd letters return len(s) - len(hash) + 1 if len(hash) > 0 else len(s) 409.2.3 \u5229\u7528\u4f4d\u8fd0\u7b97\u7edf\u8ba1\u5947\u6570\u6b21 \u6211\u7edf\u8ba1\u6709\u591a\u5c11\u4e2a\u5b57\u6bcd\u51fa\u73b0\u5947\u6570\u6b21\u3002\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u5b57\u6bcd\uff0c\u9664\u4e86\u6bcf\u4e2a\u5947\u6570\u5b57\u6bcd\uff0c\u6211\u4eec\u5fc5\u987b\u7559\u4e0b\u4e00\u4e2a\uff0c\u9664\u4e86\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7684\u4e00\u4e2a\u3002 def longestPalindrome(self, s): odds = sum(v & 1 for v in collections.Counter(s).values()) # bool(odds)\u4f5c\u7528\u662f\u5982\u679codds\u4e0d\u4e3a0 \u5219bool(odds)\u4e3a1 return len(s) - odds + bool(odds) 409.2.4 \u5b57\u7b26\u6570\u7ec4 \u7c7b\u4f3c\u4e0a\u97623\u89e3\u6cd5 class Solution { public int longestPalindrome(String s) { if(s == null || \"\".equals(s)){ return 0; } int[] charMap = new int[128]; int maxLength = 0; int flag = 0; for(int i = 0; i < s.length(); i++){ // \u7edf\u8ba1\u5404\u5b57\u7b26\u6570\u91cf charMap[(int)s.charAt(i)] += 1; } for(int i = 0; i < charMap.length; i++){ if((charMap[i] & 1) == 0){ // \u5982\u679c\u5b57\u7b26\u6570\u4e3aeven \u76f4\u63a5\u52a0\u5230\u7ed3\u679c\u4e2d maxLength += charMap[i]; }else{ // \u5982\u679c\u5b57\u7b26\u6570\u4e3aodd\uff0c \u51cf1\u52a0\u5230\u7ed3\u679c\u4e2d\uff0c\u4e14\u4e2d\u5fc3\u70b9\u7f6e\u4e3a1 maxLength += charMap[i] - 1; flag = 1; } } return maxLength + flag; } } 438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32 p\uff0c\u627e\u5230 s \u4e2d\u6240\u6709\u662f p \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002 \u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32 s \u548c p \u7684\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc7 20100\u3002 \u8bf4\u660e\uff1a \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002 \u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: s: \"cbaebabacd\" p: \"abc\" \u8f93\u51fa: [0, 6] \u89e3\u91ca: \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"cba\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 6 \u7684\u5b50\u4e32\u662f \"bac\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 2: \u8f93\u5165: s: \"abab\" p: \"ab\" \u8f93\u51fa: [0, 1, 2] \u89e3\u91ca: \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 1 \u7684\u5b50\u4e32\u662f \"ba\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 2 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u6ed1\u52a8\u7a97\u53e3 class Solution: def findAnagrams(self, s: str, p: str) -> List[int]: \"\"\" \u6ed1\u52a8\u7a97\u53e3 \"\"\" res = [] window = {} # \u8bb0\u5f55\u7a97\u53e3\u4e2d\u5404\u4e2a\u5b57\u7b26\u6570\u91cf\u7684\u5b57\u5178 needs = {} # \u8bb0\u5f55\u76ee\u6807\u5b57\u7b26\u4e32\u4e2d\u5404\u4e2a\u5b57\u7b26\u6570\u91cf\u7684\u5b57\u5178 for c in p: needs[c] = needs.get(c, 0) + 1 Len, limit = len(p), len(s) l = r = 0 while r < limit: c = s[r] if c not in needs: window.clear() l = r = r + 1 else: window[c] = window.get(c, 0) + 1 if r - l + 1 == Len: if window == needs: res.append(l) window[s[l]] -= 1 l += 1 r += 1 return res \u89e3\u6cd5\u4e8c 647.\u56de\u6587\u5b50\u4e32 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u56de\u6587\u5b50\u4e32\u3002 \u5177\u6709\u4e0d\u540c\u5f00\u59cb\u4f4d\u7f6e\u6216\u7ed3\u675f\u4f4d\u7f6e\u7684\u5b50\u4e32\uff0c\u5373\u4f7f\u662f\u7531\u76f8\u540c\u7684\u5b57\u7b26\u7ec4\u6210\uff0c\u4e5f\u4f1a\u88ab\u8ba1\u4e3a\u662f\u4e0d\u540c\u7684\u5b50\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"abc\" \u8f93\u51fa: 3 \u89e3\u91ca: \u4e09\u4e2a\u56de\u6587\u5b50\u4e32: \"a\", \"b\", \"c\". \u793a\u4f8b 2: \u8f93\u5165: \"aaa\" \u8f93\u51fa: 6 \u8bf4\u660e: 6\u4e2a\u56de\u6587\u5b50\u4e32: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\". \u6ce8\u610f: \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc71000\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4e2d\u5fc3\u6269\u6563\u6cd5 \u63a8\u8350 \u91cd\u70b9\u662f\u4e00\u4e2a\u4e2d\u5fc3\u8fd8\u662f\u4e24\u4e2a\u4e2d\u5fc3 class Solution: def countSubstrings(self, s: str) -> int: \"\"\" \u4e0d\u540c\u7684\u5f00\u59cb\u548c\u7ed3\u675fO(n) \u5171 O(n ** 2) \u4e2d\u5fc3\u6269\u6563\u6cd5 \"\"\" def isPalidrime(s, l, r): \"\"\" \u4e00\u4e2a\u4e2d\u5fc3l == r\u8fd8\u662f\u4e24\u4e2a\u4e2d\u5fc3 l = r - 1 \"\"\" res = 0 while l >= 0 and r < length and s[l] == s[r]: res += 1 l -= 1 r += 1 return res length = len(s) ans = 0 for i in range(length): ans += isPalidrime(s, i, i) ans += isPalidrime(s, i, i + 1) return ans \u89e3\u6cd5\u4e8c Manacher class Solution: def countSubstrings(self, s: str) -> int: def manacher(S): \"\"\" \u56de\u6587\u95ee\u9898\u4e09\u79cd\u89e3\u6cd5\uff1a 1.\u4e2d\u5fc3\u6269\u6563\u6cd5 2.DP 3.manacher\u7b97\u6cd5: O(n) \u672c\u51fd\u6570\u8fd4\u56de\u6700\u5927\u56de\u6587\u5b50\u5b57\u7b26\u4e32 \"\"\" # 1.\u89e3\u51b3\u957f\u5ea6\u5947\u5076\u6027\u5e26\u6765\u7684\u5bf9\u79f0\u8f74\u4f4d\u7f6e\u95ee\u9898 # \u5176\u4e2d\u9996\u5c3e\u7684\u4f5c\u7528\u662f\u4e2d\u5fc3\u6269\u6563\u7684\u65f6\u5019\u9632\u6b62\u7d22\u5f15\u8d8a\u754c A = '^#' + '#'.join(S) + '#$' # 2.\u8f85\u52a9\u6570\u7ec4LEN\uff0c\u5b58\u50a8\u7684\u662f\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u534a\u5f84(**\u4e0d\u5305\u62eci\u8fd9\u4e2a\u5143\u7d20) # LEN\u6570\u7ec4\u6027\u8d28: LEN[i]\u5c31\u662f\u8be5\u56de\u6587\u5b50\u4e32\u5728\u539f\u5b57\u7b26\u4e32S\u4e2d\u7684\u957f\u5ea6 LEN = [0] * len(A) # 3.\u8bbe\u7f6e\u4e24\u4e2a\u53d8\u91cf\uff0cright \u548c center \u3002right \u4ee3\u8868\u4ee5 center \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u53f3\u8fb9\u754c\uff0c # \u4e5f\u5c31\u662fright = center + LEN[center] - 1\u3002 center = right = 0 # 4.\u53bb\u6389\u9996\u5c3e\u4f9d\u6b21\u904d\u5386A\u6570\u7ec4\u5143\u7d20 for i in range(1, len(A) - 1): # 5.i <= right, j\u548ci\u5173\u4e8e\u4f4d\u7f6ecenter\u5bf9\u79f0, \u4ee5j\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u4e00\u5b9a\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5185\u90e8, # LEN[i]=LEN[j] # i > right, \u4ee5i\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5916\u90e8\uff0c # \u800c\u5927\u4e8eright\u7684\u90e8\u5206\u6211\u4eec\u8fd8\u6ca1\u6709\u8fdb\u884c\u5339\u914d\uff0c\u6240\u4ee5\u8981\u4eceright+1\u4f4d\u7f6e\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u5339\u914d\uff0c\u76f4\u5230\u53d1\u751f\u5931\u914d\uff0c # \u4ece\u800c\u66f4\u65b0P\u548c\u5bf9\u5e94\u7684po\u4ee5\u53caLen[i]\u3002 if i < right: LEN[i] = min(right - i, LEN[2 * center - i]) else: LEN[i] = 0 # 6.\u5947\u6570\u7684\u4e2d\u5fc3\u6269\u6563\u6cd5 while A[i + LEN[i] + 1] == A[i - LEN[i] - 1]: LEN[i] += 1 # 7..\u5982\u679ci\u7684\u53f3\u8fb9\u754c > \u539f\u6765\u7684\u53f3\u8fb9\u754c\uff0c\u66f4\u65b0 if i + LEN[i] > right: center, right = i, i + LEN[i] # print('\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e32', A) # print('\u8f85\u52a9\u534a\u5f84\u6570\u7ec4', LEN) maxLen, centerIndex = max((n, i) for i, n in enumerate(LEN)) print((maxLen, centerIndex)) # return maxLen \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32\u957f\u5ea6 # return s[(centerIndex - maxLen)//2: (centerIndex + maxLen)//2] \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32 # return sum([(1+x)//2 for x in LEN]) \u6c42\u56de\u6587\u5b50\u4e32\u6570\u91cf # LEN\u4ee3\u8868\u7684\u662f\u4e0d\u5305\u542b\u4e2d\u5fc3\u70b9\u7684\u534a\u5f84,\u4e5f\u662f\u4ee5\u5b83\u4e3a\u4e2d\u5fc3\u70b9\u7684\u957f\u5ea6, \u5947\u6570\u8981\u52a0\u4e00\u9664\u4ee5\u4e8c\u624d\u80fd\u5f97\u5230\u4ee5\u5b83\u4e3a\u4e2d\u5fc3\u70b9\u7684\u56de\u6587\u5b50\u4e32\u6570\u91cf, \u5076\u6570\u52a0\u4e00\u4e0d\u5f71\u54cd\u7ed3\u679c return sum([(1+x)//2 for x in LEN]) return manacher(s) \u6570\u7ec4 4. \u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 [hard] \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4 nums1 \u548c nums2\u3002 \u8bf7\u4f60\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u4e14\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log(m + n))\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u548c nums2 \u4e0d\u4f1a\u540c\u65f6\u4e3a\u7a7a\u3002 \u793a\u4f8b 1: nums1 = [1, 3] nums2 = [2] \u5219\u4e2d\u4f4d\u6570\u662f 2.0 \u793a\u4f8b 2: nums1 = [1, 2] nums2 = [3, 4] \u5219\u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 + \u4e8c\u5206 https://mp.weixin.qq.com/s/FBlH7o-ssj_iMEPLcvsY2w class Solution(object): def findMedianSortedArrays(self, nums1, nums2): \"\"\" A[k/2] = B[k/2],\u90a3\u4e48\u7b2c k \u5927\u7684\u6570\u5c31\u662f A[k/2] A[k/2] > B[k/2],\u90a3\u4e48\u7b2c k \u5927\u7684\u6570\u80af\u5b9a\u5728 A[0:k/2+1] \u548c B[k/2:] \u4e2d\uff0c\u8fd9\u6837\u5c31\u5c06\u539f\u6765\u7684\u6240\u6709\u6570\u7684\u603b\u548c\u51cf\u5c11\u5230\u4e00\u534a\u4e86\uff0c\u518d\u5728\u8fd9\u4e2a\u8303\u56f4\u91cc\u9762\u627e\u7b2c k/2 \u5927\u7684\u6570\u5373\u53ef\uff0c\u8fd9\u6837\u4e5f\u8fbe\u5230\u4e86\u4e8c\u5206\u67e5\u627e\u7684\u533a\u522b\u4e86\u3002 A[k/2] < B[k/2]\uff0c\u90a3\u4e48\u7b2c k \u5927\u7684\u6570\u80af\u5b9a\u5728 B[0:k/2+1]\u548c A[k/2:] \u4e2d\uff0c\u540c\u7406\u5728\u8fd9\u4e2a\u8303\u56f4\u627e\u7b2c k/2 \u5927\u7684\u6570\u5c31\u53ef\u4ee5\u4e86\u3002 [\u6ce8\u610f] \u7531\u4e8e\u8be5\u65b9\u6cd5\u4e3b\u8981\u8003\u8651\u524d\u9762\u5143\u7d20 \u6240\u4ee5\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4e0d\u7528\u5220\u9664A[0:k/2+1] B[0:k/2+1]\u5269\u4e0b\u7684\u5143\u7d20 \"\"\" def getKth(nums1, s1, t1, nums2, s2, t2, k): len1 = t1 - s1 + 1 len2 = t2 - s2 + 1 if len1 == 0: return nums2[s2 + k - 1] if len2 == 0: return nums1[s1 + k - 1] if k == 1: print(s1, s2, t1, t2) return min(nums1[s1], nums2[s2]) i = s1 + min(len1, k // 2) - 1 j = s2 + min(len2, k // 2) - 1 if nums1[i] > nums2[j]: return getKth(nums1, s1, t1, nums2, j + 1, t2, k - (j - s2 + 1)) else: return getKth(nums1, i + 1, t1, nums2, s2, t2, k - (i - s1 + 1)) n, m = len(nums1), len(nums2) # trick\uff1a\u5c06\u5076\u6570\u548c\u5947\u6570\u7684\u60c5\u51b5\u5408\u5e76\uff0c\u5982\u679c\u662f\u5947\u6570\uff0c\u4f1a\u6c42\u4e24\u6b21\u540c\u6837\u7684 k left_mid = (n + m + 1) // 2 right_mid = (n + m + 2) // 2 return (getKth(nums1, 0, n - 1, nums2, 0, m - 1, left_mid) + getKth(nums1, 0, n - 1, nums2, 0, m - 1, right_mid)) * 0.5 \u89e3\u6cd5\u4e8c 11.\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570 a1\uff0ca2\uff0c...\uff0can\uff0c\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 (i, ai) \u3002\u5728\u5750\u6807\u5185\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a (i, ai) \u548c (i, 0)\u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u8bf4\u660e\uff1a\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c\u4e14 n \u7684\u503c\u81f3\u5c11\u4e3a 2 \u56fe\u4e2d\u5782\u76f4\u7ebf\u4ee3\u8868\u8f93\u5165\u6570\u7ec4 [1,8,6,2,5,4,8,3,7]\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u80fd\u591f\u5bb9\u7eb3\u6c34\uff08\u8868\u793a\u4e3a\u84dd\u8272\u90e8\u5206\uff09\u7684\u6700\u5927\u503c\u4e3a 49\u3002 \u793a\u4f8b: \u8f93\u5165: [1,8,6,2,5,4,8,3,7] \u8f93\u51fa: 49 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u53cc\u6307\u9488\u6cd5 O(n) \u5939\u903c \u8fd9\u79cd\u65b9\u6cd5\u80cc\u540e\u7684\u601d\u8def\u5728\u4e8e\uff0c\u4e24\u7ebf\u6bb5\u4e4b\u95f4\u5f62\u6210\u7684\u533a\u57df\u603b\u662f\u4f1a\u53d7\u5230\u5176\u4e2d\u8f83\u77ed\u90a3\u6761\u957f\u5ea6\u7684\u9650\u5236\u3002\u6b64\u5916\uff0c\u4e24\u7ebf\u6bb5\u8ddd\u79bb\u8d8a\u8fdc\uff0c\u5f97\u5230\u7684\u9762\u79ef\u5c31\u8d8a\u5927\u3002 \u6211\u4eec\u5728\u7531\u7ebf\u6bb5\u957f\u5ea6\u6784\u6210\u7684\u6570\u7ec4\u4e2d\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u653e\u5728\u5f00\u59cb\uff0c\u4e00\u4e2a\u7f6e\u4e8e\u672b\u5c3e\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u53d8\u91cf maxareamaxarea \u6765\u6301\u7eed\u5b58\u50a8\u5230\u76ee\u524d\u4e3a\u6b62\u6240\u83b7\u5f97\u7684\u6700\u5927\u9762\u79ef\u3002 \u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u4f1a\u627e\u51fa\u6307\u9488\u6240\u6307\u5411\u7684\u4e24\u6761\u7ebf\u6bb5\u5f62\u6210\u7684\u533a\u57df\uff0c\u66f4\u65b0 maxarea\uff0c\u5e76\u5c06\u6307\u5411\u8f83\u77ed\u7ebf\u6bb5\u7684\u6307\u9488\u5411\u8f83\u957f\u7ebf\u6bb5\u90a3\u7aef\u79fb\u52a8\u4e00\u6b65\u3002 \u8fd9\u79cd\u65b9\u6cd5\u5982\u4f55\u5de5\u4f5c\uff1f \u6700\u521d\u6211\u4eec\u8003\u8651\u7531\u6700\u5916\u56f4\u4e24\u6761\u7ebf\u6bb5\u6784\u6210\u7684\u533a\u57df\u3002\u73b0\u5728\uff0c\u4e3a\u4e86\u4f7f\u9762\u79ef\u6700\u5927\u5316\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u66f4\u957f\u7684\u4e24\u6761\u7ebf\u6bb5\u4e4b\u95f4\u7684\u533a\u57df\u3002\u5982\u679c\u6211\u4eec\u8bd5\u56fe\u5c06\u6307\u5411\u8f83\u957f\u7ebf\u6bb5\u7684\u6307\u9488\u5411\u5185\u4fa7\u79fb\u52a8\uff0c\u77e9\u5f62\u533a\u57df\u7684\u9762\u79ef\u5c06\u53d7\u9650\u4e8e\u8f83\u77ed\u7684\u7ebf\u6bb5\u800c\u4e0d\u4f1a\u83b7\u5f97\u4efb\u4f55\u589e\u52a0\u3002\u4f46\u662f\uff0c\u5728\u540c\u6837\u7684\u6761\u4ef6\u4e0b\uff0c\u79fb\u52a8\u6307\u5411\u8f83\u77ed\u7ebf\u6bb5\u7684\u6307\u9488\u5c3d\u7ba1\u9020\u6210\u4e86\u77e9\u5f62\u5bbd\u5ea6\u7684\u51cf\u5c0f\uff0c\u4f46\u5374\u53ef\u80fd\u4f1a\u6709\u52a9\u4e8e\u9762\u79ef\u7684\u589e\u5927\u3002\u56e0\u4e3a\u79fb\u52a8\u8f83\u77ed\u7ebf\u6bb5\u7684\u6307\u9488\u4f1a\u5f97\u5230\u4e00\u6761\u76f8\u5bf9\u8f83\u957f\u7684\u7ebf\u6bb5\uff0c\u8fd9\u53ef\u4ee5\u514b\u670d\u7531\u5bbd\u5ea6\u51cf\u5c0f\u800c\u5f15\u8d77\u7684\u9762\u79ef\u51cf\u5c0f\u3002 class Solution: def maxArea(self, height: List[int]) -> int: \"\"\" \u53cc\u6307\u9488 \u8d2a\u5fc3 \u4e24\u7aef\u8f83\u77ed\u7684\u5f80\u5185\u79fb\u52a8 \"\"\" l, r = 0, len(height) - 1 res = 0 while l < r: res = max(res, (r - l) * min(height[r], height[l])) if height[l] <= height[r]: l += 1 else: r -= 1 return res class Solution { public int maxArea(int[] height) { int ans = 0, i = 0, j = height.length - 1; while(i < j){ ans = Math.max((j - i) * Math.min(height[i], height[j]), ans); if (height[i] <= height[j]){ i++; }else{ j--; } } return ans; } } \u89e3\u6cd5\u4e8c bruce O(n**2) public int maxArea(int[] height) { int ans = 0; for(int i = 0; i < height.length - 1; i++){ for(int j = i + 1; j < height.length; j++){ ans = Math.max((j - i ) * Math.min(height[i], height[j]), ans); } } return ans; } \u4e8c\u5206\u7b54\u6848\u6cd5 15.\u4e09\u6570\u4e4b\u548c \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \uff0c\u4f7f\u5f97 a + b + c = 0 \uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u4f8b\u5982, \u7ed9\u5b9a\u6570\u7ec4 nums = [-1, 0, 1, 2, -1, -4]\uff0c \u6ee1\u8db3\u8981\u6c42\u7684\u4e09\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 1], [-1, -1, 2] ] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 O(n**2) hash\u6cd5 \u8f83\u6162 \u904d\u5386\u4e24\u4e2a\u6811 \u7528hash\u5bfb\u627e\u7b2c\u4e09\u4e2a\u6570\u5b57 \u51cf\u679d \u526a\u6389i\u6570\u5b57\u76f8\u540c\u7684\u60c5\u51b5\u548c\u526a\u6389j\u6570\u5b57\u76f8\u540c\u7684\u60c5\u51b5 class Solution { public List<List<Integer>> threeSum(int[] nums) { Arrays.sort(nums); HashMap<Integer, Integer> numsMap = new HashMap<Integer, Integer>(); for(int i = 0; i < nums.length; i++){ if(numsMap.containsKey(nums[i])){ numsMap.put(nums[i], numsMap.get(nums[i]) + 1); }else{ numsMap.put(nums[i], 0); } } for(int i = 0; i < nums.length - 2; i++){ if(i != 0 && nums[i] == nums[i-1]){ i = i + numsMap.get(nums[i]) - 1; continue; } for(int j = i + 1; j < nums.length - 1; j++){ if(j - i > 1 && nums[j] == nums[j-1]){ if(nums[i] == nums[j]){ j = j + numsMap.get(nums[j]) - 2; }else{ j = j + numsMap.get(nums[j]) - 1; } continue; } int num3 = - nums[i] - nums[j]; if(num3 == nums[j+1]){ ArrayList<Integer> temp = new ArrayList<Integer>(); temp.add(nums[i]); temp.add(num3); temp.add(nums[j]); ans.add(temp); }else if (num3 > nums[j+1] && numsMap.containsKey(num3)){ ArrayList<Integer> temp = new ArrayList<Integer>(); temp.add(nums[i]); temp.add(num3); temp.add(nums[j]); ans.add(temp); } } } List<List<Integer>> ans1 = new ArrayList<>(ans); return ans1; } } \u89e3\u6cd5\u4e8c sort + 2sum + \u526a\u679d \u6211\u4eec\u7684\u60f3\u6cd5\u662f\u5bf9\u8f93\u5165\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u8fd0\u884c\u4e09\u5143\u7ec4\u4e2d\u53ef\u80fd\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6240\u6709\u7d22\u5f15\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5bf9\u9635\u5217\u7684\u5269\u4f59\u90e8\u5206\u8fdb\u884c\u6807\u51c6\u7684\u53cc\u54112Sum\u626b\u63cf\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5e0c\u671b\u8df3\u8fc7\u76f8\u540c\u7684\u5143\u7d20\uff0c\u4ee5\u907f\u514d\u5728\u7b54\u6848\u4e2d\u91cd\u590d\uff0c\u800c\u4e0d\u4f1a\u50cf\u8fd9\u6837\u8bbe\u7f6e\u6216smt def threeSum(self, nums: List[int]) -> List[List[int]]: \"\"\" \u53cc\u6307\u9488 \u5939\u903c two-sum \u8fb9\u754c \u65e0\u91cd\u590d\u4e09\u5143\u7ec4 \"\"\" nums = sorted(nums) res = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue l, r = i + 1, len(nums) - 1 while l < r: if nums[l] + nums[r] + nums[i] == 0: res.append([nums[i], nums[l], nums[r]]) while l < r and nums[l] == nums[l + 1]: l += 1 while l < r and nums[r] == nums[r - 1]: r -= 1 l += 1 r -= 1 elif nums[l] + nums[r] + nums[i] < 0: l += 1 else: r -= 1 return res class Solution { public List<List<Integer>> threeSum(int[] nums) { Arrays.sort(nums); List<List<Integer>> res = new LinkedList<>(); for(int i = 0; i < nums.length - 2; i++){ // // skip same result if (i > 0 && nums[i] == nums[i - 1]) { continue; } // bi-2sum int lo = i + 1, hi = nums.length - 1, sum = 0 - nums[i]; while(lo < hi){ if(nums[lo] + nums[hi] == sum){ res.add(Arrays.asList(nums[i], nums[lo], nums[hi])); // \u8df3\u8fc7\u91cd\u590d\u5143\u7d20 while (lo < hi && nums[lo] == nums[lo+1]) lo++; while (lo < hi && nums[hi] == nums[hi-1]) hi--; lo++; hi--; }else if(nums[lo] + nums[hi] < sum) { lo++; }else{ hi--; } } } return res; } } 18.\u56db\u6570\u4e4b\u548c \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \u548c d \uff0c\u4f7f\u5f97 a + b + c + d \u7684\u503c\u4e0e target \u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002 \u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4efb\u610f\u4e24\u6570\u7ec4\u5408hash + \u7d22\u5f15\u4e0d\u4e00\u81f4 O(n**2) class Solution: def fourSum(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: List[List[int]] \"\"\" dic = collections.defaultdict(list) for i in range(len(nums)): for j in range(i+1,len(nums)): dic[nums[i]+nums[j]].append((i,j)) result = set() for key in dic: if target - key in dic: list1 = dic[key] list2 = dic[target - key] # \u7d22\u5f15\u4e0d\u4e00\u81f4 for (i,j) in list1: for (k,l) in list2: if i!=k and i!=l and j!=k and j!=l: flist = [nums[i],nums[j],nums[k],nums[l] flist.sort() result.add(tuple(flist)) return list(result) \u89e3\u6cd5\u4e8c \u9012\u5f52 O(n ** 2) \u5148\u6392\u5e8f \u9012\u5f52\u56de\u6eaf def fourSum(self, nums, target): def findNsum(l, r, target, N, result, results): if r-l+1 < N or N < 2 or target < nums[l]*N or target > nums[r]*N: # early termination return if N == 2: # two pointers solve sorted 2-sum problem while l < r: s = nums[l] + nums[r] if s == target: results.append(result + [nums[l], nums[r]]) l += 1 while l < r and nums[l] == nums[l-1]: l += 1 elif s < target: l += 1 else: r -= 1 else: # recursively reduce N for i in range(l, r+1): if i == l or (i > l and nums[i-1] != nums[i]): findNsum(i+1, r, target-nums[i], N-1, result+[nums[i]], results) nums.sort() results = [] findNsum(0, len(nums)-1, target, 4, [], results) return results 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: [ 1->4->5, 1->3->4, 2->6 ] \u8f93\u51fa: 1->1->2->3->4->4->5->6 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4f18\u5148\u7ea7\u961f\u5217 \u95ee\u98981 \u975e\u7a7a\u6570\u7ec4\u8981\u5148heapify\u624d\u80fd\u53d8\u6210heap \u95ee\u98982 \u8981\u4fdd\u8bc1\u4e0d\u6b62\u4f18\u5148\u7ea7\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u6bd4\u8f83 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e5f\u8981\u53ef\u6bd4\u8f83(\u6216\u8005\u4fdd\u8bc1\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u91cd\u590d) import heapq class Solution: def mergeKLists(self, lists: List[ListNode]) -> ListNode: \"\"\" \u4f18\u5148\u7ea7\u961f\u5217 \u95ee\u9898: \u975e\u7a7a\u6570\u7ec4\u8981\u5148heapify\u624d\u80fd\u53d8\u6210heap \"\"\" hp = [(n.val, idx) for idx, n in enumerate(lists) if n] heapq.heapify(hp) dummy = ListNode(-1) p = dummy while hp: v, idx = heapq.heappop(hp) p.next = ListNode(v) p = p.next if lists[idx].next: heapq.heappush(hp, (lists[idx].next.val, idx)) lists[idx] = lists[idx].next return dummy.next \u89e3\u6cd5\u4e8c 31.\u4e0b\u4e00\u4e2a\u6392\u5217 \u9898\u76ee\u63cf\u8ff0 \u5b9e\u73b0\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6392\u5217\u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002 \u5fc5\u987b\u539f\u5730\u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff0c\u8f93\u5165\u4f4d\u4e8e\u5de6\u4fa7\u5217\uff0c\u5176\u76f8\u5e94\u8f93\u51fa\u4f4d\u4e8e\u53f3\u4fa7\u5217\u3002 1,2,3 \u2192 1,3,2 3,2,1 \u2192 1,2,3 1,1,5 \u2192 1,5,1 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u8be5\u9898\u76ee\u753b\u56fe\u66f4\u5bb9\u6613 \u9996\u5148\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u5e8f\u5217\u7684\u964d\u5e8f\uff0c\u6ca1\u6709\u53ef\u80fd\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u6570\u7ec4\u4e0d\u53ef\u80fd\u6709\u4e0b\u4e00\u4e2a\u6392\u5217\uff1a [9, 5, 4, 3, 1] \u6211\u4eec\u9700\u8981\u4ece\u53f3\u8fb9\u627e\u5230\u7b2c\u4e00\u5bf9\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u5b57 a[i] \u548c a[i-1]\uff0c\u5b83\u4eec\u6ee1\u8db3 a[i]>a[i-1]\u3002\u73b0\u5728\uff0c\u6ca1\u6709\u5bf9 a[i] \u53f3\u4fa7\u7684\u91cd\u65b0\u6392\u5217\u53ef\u4ee5\u521b\u5efa\u66f4\u5927\u7684\u6392\u5217\uff0c\u56e0\u4e3a\u8be5\u5b50\u6570\u7ec4\u7531\u6570\u5b57\u6309\u964d\u5e8f\u7ec4\u6210\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u6392\u5217 a[i-1] \u53f3\u8fb9\u7684\u6570\u5b57\uff0c\u5305\u62ec\u5b83\u81ea\u5df1\u3002 \u73b0\u5728\uff0c\u4ec0\u4e48\u6837\u5b50\u7684\u91cd\u65b0\u6392\u5217\u5c06\u4ea7\u751f\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u5b57\u5462\uff1f\u6211\u4eec\u60f3\u8981\u521b\u5efa\u6bd4\u5f53\u524d\u66f4\u5927\u7684\u6392\u5217\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6570\u5b57 a[i-1] \u66ff\u6362\u4e3a\u4f4d\u4e8e\u5176\u53f3\u4fa7\u533a\u57df\u7684\u6570\u5b57\u4e2d**\u6bd4\u5b83\u66f4\u5927\u7684\u6700\u5c0f\u6570\u5b57**\uff0c\u4f8b\u5982 a[j]\u3002 \u6211\u4eec\u4ea4\u6362\u6570\u5b57 a[i-1] \u548c a[j]\u3002\u6211\u4eec\u73b0\u5728\u5728\u7d22\u5f15 i-1\u5904\u6709\u6b63\u786e\u7684\u6570\u5b57\u3002 \u4f46\u76ee\u524d\u7684\u6392\u5217\u4ecd\u7136\u4e0d\u662f\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u7684\u6392\u5217\u3002\u6211\u4eec\u9700\u8981\u901a\u8fc7\u4ec5\u4f7f\u7528 a[i-1]\u53f3\u8fb9\u7684\u6570\u5b57\u6765\u5f62\u6210\u6700\u5c0f\u7684\u6392\u5217\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u653e\u7f6e\u90a3\u4e9b\u6309\u5347\u5e8f\u6392\u5217\u7684\u6570\u5b57\uff0c\u4ee5\u83b7\u5f97\u6700\u5c0f\u7684\u6392\u5217\u3002 \u4f46\u662f\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u5728\u4ece\u53f3\u4fa7\u626b\u63cf\u6570\u5b57\u65f6\uff0c\u6211\u4eec\u53ea\u662f\u7ee7\u7eed\u9012\u51cf\u7d22\u5f15\u76f4\u5230\u6211\u4eec\u627e\u5230 a[i] \u548c a[i-1] \u8fd9\u5bf9\u6570\u3002\u5176\u4e2d\uff0ca[i] > a[i-1]\u3002\u56e0\u6b64\uff0ca[i-1] \u53f3\u8fb9\u7684\u6240\u6709\u6570\u5b57\u90fd\u5df2\u6309\u964d\u5e8f\u6392\u5e8f\u3002\u6b64\u5916\uff0c\u4ea4\u6362 a[i-1] \u548c a[j]\u5e76\u672a\u6539\u53d8\u8be5\u987a\u5e8f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u53cd\u8f6c a[i-1]\u4e4b\u540e\u7684\u6570\u5b57\uff0c\u4ee5\u83b7\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u5b57\u5178\u6392\u5217\u3002 \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u5bf9\u6574\u4e2a\u6570\u7ec4\u8fdb\u884c\u4e24\u6b21\u626b\u63cf\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u6ca1\u6709\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u539f\u5730\u66ff\u6362\u8db3\u4ee5\u505a\u5230\u3002 class Solution { public void nextPermutation(int[] nums) { int i = nums.length - 1; for(;i > 0; i--){ if(nums[i] > nums[i-1]){ break } } if(i > 0 && nums[i] > nums[i-1]){ int j = i + 1; while(j < nums.length && nums[j] > nums[i-1]){ j++; } swap(nums, --j, i-1); reverse(nums, i, nums.length - 1); return; } reverse(nums, 0, nums.length - 1); } private void swap(int[] nums, int i, int j){ int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } private void reverse(int[] nums, int i, int j){ int times = (j - i + 1) >> 1; for(int k = 0; k < times; k++){ swap(nums, i + k, j - k); } } } 33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002 ( \u4f8b\u5982\uff0c\u6570\u7ec4 [0,1,2,4,5,6,7] \u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] )\u3002 \u641c\u7d22\u4e00\u4e2a\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f O(log n) \u7ea7\u522b\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [4,5,6,7,0,1,2], target = 0 \u8f93\u51fa: 4 \u793a\u4f8b 2: \u8f93\u5165: nums = [4,5,6,7,0,1,2], target = 3 \u8f93\u51fa: -1 \u5728\u771f\u5b9e\u7684\u9762\u8bd5\u4e2d\u9047\u5230\u8fc7\u8fd9\u9053\u9898\uff1f \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5047\u8bbe nums \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a[12\u300113\u300114\u300115\u300116\u300117\u300118\u300119\u30010\u30011\u30012\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u300110\u300111] \u7531\u4e8e\u672a\u5b8c\u5168\u6392\u5e8f\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u8fdb\u884c\u5e38\u89c4\u7684\u4e8c\u8fdb\u5236\u641c\u7d22\u3002\u4f46\u662f\u8bc0\u7a8d\u51fa\u5728\u8fd9\u91cc\uff1a \u5982\u679c\u76ee\u6807\u662f14\uff0c\u90a3\u4e48\u6211\u4eec nums \u5c06\u5bf9\u6b64\u8fdb\u884c\u8c03\u6574\uff0c\u5176\u4e2d\u201c inf\u201d\u8868\u793a\u65e0\u7a77\u5927\uff1a [12\u300113\u300114\u300115\u300115\u300117\u300118\u300119\uff0cinf\uff0cinf\uff0cinf\uff0cinf\uff0cinf\uff0cinf\uff0cinf \uff0cinf\uff0cinf\uff0cinf\uff0cinf\uff0cinf \u5982\u679c\u76ee\u6807\u4e3a7\uff0c\u5219\u6211\u4eec\u8c03\u6574 nums \u4e3a\uff1a [-inf\uff0c-inf\uff0c-inf\uff0c-inf\uff0c-inf\uff0c-inf\uff0c-inf\uff0c-inf\uff0c0\u30011\u30012\u30013\u30014\u30015\uff0c 6\uff0c7\uff0c8\uff0c9\uff0c10\uff0c11] \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u8fdb\u884c\u666e\u901a\u7684\u4e8c\u8fdb\u5236\u641c\u7d22\u3002\u5f53\u7136\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u8c03\u6574\u6574\u4e2a\u6570\u7ec4\uff0c\u800c\u662f\u4ec5\u52a8\u6001\u8c03\u6574\u4ec5\u67e5\u770b\u7684\u5143\u7d20\u3002\u901a\u8fc7\u5c06\u76ee\u6807\u5143\u7d20\u548c\u5b9e\u9645\u5143\u7d20\u90fd\u4e0enums [0]\u8fdb\u884c\u6bd4\u8f83\u6765\u8fdb\u884c\u8c03\u6574\u3002 int search(vector<int>& nums, int target) { int lo = 0, hi = nums.size(); while (lo < hi) { int mid = (lo + hi) / 2; double num = (nums[mid] < nums[0]) == (target < nums[0]) ? nums[mid] : target < nums[0] ? -INFINITY : INFINITY; if (num < target) lo = mid + 1; else if (num > target) hi = mid; else return mid; } return -1; } \u89e3\u6cd5\u4e8c \u5de6\u95ed\u53f3\u5f00\u4e8c\u5206\u67e5\u627e class Solution(object): def search(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: int \"\"\" l, r = 0, len(nums) while l < r: mid = l + (r - l) // 2 if nums[mid] == target: return mid if nums[mid] > nums[l]: if nums[l] <= target and target < nums[mid]: r = mid else: l = mid + 1 else: if nums[mid] < target and target <= nums[r - 1]: l = mid + 1 else: r = mid return -1 \u89e3\u6cd5\u4e09 \u4e8c\u6b21\u4e8c\u5206\u67e5\u627e \u7b2c\u4e00\u6b21\u4e8c\u5206\u67e5\u627e\uff1a \u4e3a\u4e86\u627e\u5230\u6570\u7ec4\u5728\u54ea\u4e00\u5904\u53ef\u4ee5\u5206\u5272\u4e24\u6bb5\u5347\u5e8f\u6570\u7ec4\uff0c\u6bd4\u5982 [4,5,6,7,0,1,2]\uff0c\u6211\u5e0c\u671b\u77e5\u90537\u8fd9\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u8fd9\u6837\u6211\u5c31\u80fd\u5c06\u6574\u4e2a\u6570\u7ec4\u5206\u4e3a\u6709\u5e8f\u7684\u4e24\u4e2a\u90e8\u5206\u3002 \u5728\u8fd9\u6b21\u67e5\u627e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u5229\u7528\u4e86 nums[mid] \u8ddf nums[0] \u7684\u5173\u7cfb\uff0c\u6765\u786e\u8ba4 nums[mid] \u843d\u5728\u54ea\u4e00\u6bb5\uff0c\u4ee5\u6b63\u786e\u5730\u8c03\u6574 low \u548c high \u7684\u5927\u5c0f\u3002 \u7b2c\u4e8c\u6b21\u4e8c\u5206\u67e5\u627e \u4e3a\u4e86\u627e\u5230target\u7684\u4e0b\u6807\uff0c\u9996\u5148\u8981\u77e5\u9053target\u5728\u4e24\u6bb5\u5347\u5e8f\u6570\u7ec4\u4e2d\u7684\u54ea\u4e00\u6bb5\uff08\u5c06 target \u548c nums[0] \u6bd4\u5927\u5c0f\uff09\u7136\u540e\u5728\u6240\u5728\u7684\u8fd9\u4e00\u6bb5\u8fdb\u884c\u5e38\u89c4\u7684\u4e8c\u5206\u67e5\u627e\u3002 \u7528\u4e86\u4e24\u6b21\u4e8c\u5206\u67e5\u627e\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(2logn) = O(logn)O(2logn)=O(logn) 34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f O(log n) \u7ea7\u522b\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c\uff0c\u8fd4\u56de [-1, -1]\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [5,7,7,8,8,10], target = 8 \u8f93\u51fa: [3,4] \u793a\u4f8b 2: \u8f93\u5165: nums = [5,7,7,8,8,10], target = 6 \u8f93\u51fa: [-1,-1] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4e8c\u5206\u67e5\u627e class Solution: def searchRange(self, nums: List[int], target: int) -> List[int]: if not nums or len(nums) == 0: return [-1, -1] l, r = 0, len(nums) - 1 while l < r: mid = l + ((r - l) >> 1) if nums[mid] < target: l = mid + 1 else: r = mid if nums[l] != target: return [-1, -1] start = l l, r = 0, len(nums) while l < r: mid = l + ((r - l) >> 1) if nums[mid] <= target: l = mid + 1 else: r = mid end = r - 1 return [start, end] class Solution { public int[] searchRange(int[] nums, int target) { /** * \u627e\u5230target\u7684\u5f00\u59cb * \u627e\u5230target\u7684\u7ed3\u675f */ int start = -1, end = -1; int[] result = new int[]{start, end}; int left = 0, right = nums.length - 1; while(left <= right){ int mid = (left + right) >> 1; if(nums[mid] == target && (mid == 0 || nums[mid] > nums[mid - 1])){ start = mid; break; }else if (nums[mid] >= target){ right = mid - 1; }else{ left = mid + 1; } } if (start == -1){ return result; } left = 0; right = nums.length - 1; while(left <= right){ int mid = (left + right) >> 1; if(nums[mid] == target && (mid == nums.length-1 || nums[mid] < nums[mid+1])){ end = mid; break; }else if (nums[mid] <= target){ left = mid + 1; }else{ right = mid - 1; } } result[0] = start; result[1] = end; return result; } } \u89e3\u6cd5\u4e8c class Solution { // returns leftmost (or rightmost) index at which `target` should be // inserted in sorted array `nums` via binary search. private int extremeInsertionIndex(int[] nums, int target, boolean left) { int lo = 0; int hi = nums.length - 1; while (lo <= hi) { int mid = (lo + hi) >> 1; if (nums[mid] > target || (left && target == nums[mid])) { hi = mid - 1; } else { lo = mid + 1; } } return lo; } public int[] searchRange(int[] nums, int target) { int[] targetRange = {-1, -1}; int leftIdx = extremeInsertionIndex(nums, target, true); // assert that `leftIdx` is within the array bounds and that `target` // is actually in `nums`. if (leftIdx == nums.length || nums[leftIdx] != target) { return targetRange; } targetRange[0] = leftIdx; targetRange[1] = extremeInsertionIndex(nums, target, false)-1; return targetRange; } } 48.\u65cb\u8f6c\u56fe\u50cf \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002 \u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002 \u8bf4\u660e\uff1a \u4f60\u5fc5\u987b\u5728\u539f\u5730\u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002\u8bf7\u4e0d\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a matrix = [ [1,2,3], [4,5,6], [7,8,9] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [7,4,1], [8,5,2], [9,6,3] ] \u793a\u4f8b 2: \u7ed9\u5b9a matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 1.\u8ba1\u7b97\u5f85\u65cb\u8f6c\u5c42\u6570 2.\u8ba1\u7b97\u67d0\u4e00\u5c42\u5982\u4f55\u65cb\u8f6c class Solution: def rotate(self, matrix: List[List[int]]) -> None: \"\"\" Do not return anything, modify matrix in-place instead. \u601d\u8def: \u65cb\u8f6c \u8f6c\u7f6e + \u7ffb\u8f6c \"\"\" n = len(matrix) cycles = n // 2 if n == 0: return for k in range(cycles): for i in range(k, n - k - 1): temp = matrix[k][i] matrix[k][i] = matrix[n-1-i][k] matrix[n-1-i][k] = matrix[n-1-k][n-1-i] matrix[n-1-k][n-1-i] = matrix[i][n-1-k] matrix[i][n-1-k] = temp \u89e3\u6cd5\u4e8c \u8f6c\u7f6e+\u7ffb\u8f6c \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(N^2). \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u7531\u4e8e\u65cb\u8f6c\u64cd\u4f5c\u662f \u5c31\u5730 \u5b8c\u6210\u7684\u3002 \u6700\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u5148\u8f6c\u7f6e\u77e9\u9635\uff0c\u7136\u540e\u7ffb\u8f6c\u6bcf\u4e00\u884c\u3002\u8fd9\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u5df2\u7ecf\u80fd\u8fbe\u5230\u6700\u4f18\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N^2) O ( N 2)\u3002 class Solution: def rotate(self, matrix: List[List[int]]) -> None: \"\"\" Do not return anything, modify matrix in-place instead. \u601d\u8def: \u65cb\u8f6c \u8f6c\u7f6e + \u7ffb\u8f6c \"\"\" if not matrix or len(matrix) < 2: return n = len(matrix) for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] for i in range(n): matrix[i] = matrix[i][::-1] class Solution { public void rotate(int[][] matrix) { int n = matrix.length; // transpose matrix for (int i = 0; i < n; i++) { for (int j = i; j < n; j++) { int tmp = matrix[j][i]; matrix[j][i] = matrix[i][j]; matrix[i][j] = tmp; } } // reverse each row for (int i = 0; i < n; i++) { for (int j = 0; j < n / 2; j++) { int tmp = matrix[i][j]; matrix[i][j] = matrix[i][n - j - 1]; matrix[i][n - j - 1] = tmp; } } } } 54.\u87ba\u65cb\u77e9\u9635 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b m x n \u4e2a\u5143\u7d20\u7684\u77e9\u9635\uff08m \u884c, n \u5217\uff09\uff0c\u8bf7\u6309\u7167\u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f\uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] \u8f93\u51fa: [1,2,3,6,9,8,7,4,5] \u793a\u4f8b 2: \u8f93\u5165: [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] \u8f93\u51fa: [1,2,3,4,8,12,11,10,9,5,6,7] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def spiralOrder(self, matrix: List[List[int]]) -> List[int]: \"\"\" \u89c4\u5f8b\uff1a\u627e\u5230m\u548cn\u4e2d\u8f83\u5c0f\u8005 \u83b7\u5f97\u5708\u6570 \u5982\u679c\u8f83\u5c0f\u8005\u4e3a\u5076\u6570k (k + 1) // 2 \u6700\u5185\u5708\u4e0d\u662f\u5355\u5c42 \u5982\u679c\u8f83\u5c0f\u8005\u4e3a\u5947\u6570k (k + 1) // 2 \u6700\u5185\u5708\u662f\u5355\u5c42 \"\"\" def traverse(i): # \u4e0a\u9762 for j in range(i, n - i): ans.append(matrix[i][j]) # \u53f3\u9762 for j in range(i + 1, m - i): ans.append(matrix[j][n - i - 1]) # \u5355\u5c42\u4e0d\u6267\u884c\u540e\u4e24\u6761 if i != ls - 1 or (k & 1) == 0: # \u4e0b\u9762 for j in range(n - i - 2, i - 1, -1): ans.append(matrix[m - i - 1][j]) # \u5de6\u9762 for j in range(m - i - 2, i, -1): ans.append(matrix[j][i]) m = len(matrix) if not m: return matrix n = len(matrix[0]) k = min(m, n) ls = (k + 1) >> 1 ans = [] for i in range(ls): traverse(i) return ans \u89e3\u6cd5\u4e8c \u7d22\u5f15\u662f\u5426\u76f8\u9047\u5224\u65ad\u662f\u5426\u662f\u5355\u5c42 class Solution(object): def spiralOrder(self, matrix): def spiral_coords(r1, c1, r2, c2): for c in range(c1, c2 + 1): yield r1, c for r in range(r1 + 1, r2 + 1): yield r, c2 # \u5982\u679cr1 == r2 or c1 == c2 \u6700\u4e2d\u5fc3\u5355\u5c42\u904d\u5386 if r1 < r2 and c1 < c2: for c in range(c2 - 1, c1, -1): yield r2, c for r in range(r2, r1, -1): yield r, c1 if not matrix: return [] ans = [] v while r1 <= r2 and c1 <= c2: for r, c in spiral_coords(r1, c1, r2, c2): ans.append(matrix[r][c]) r1 += 1; r2 -= 1 c1 += 1; c2 -= 1 return an 55.\u8df3\u8dc3\u6e38\u620f \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002 \u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u793a\u4f8b 1: \u8f93\u5165: [2,3,1,1,4] \u8f93\u51fa: true \u89e3\u91ca: \u4ece\u4f4d\u7f6e 0 \u5230 1 \u8df3 1 \u6b65, \u7136\u540e\u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u793a\u4f8b 2: \u8f93\u5165: [3,2,1,0,4] \u8f93\u51fa: false \u89e3\u91ca: \u65e0\u8bba\u600e\u6837\uff0c\u4f60\u603b\u4f1a\u5230\u8fbe\u7d22\u5f15\u4e3a 3 \u7684\u4f4d\u7f6e\u3002\u4f46\u8be5\u4f4d\u7f6e\u7684\u6700\u5927\u8df3\u8dc3\u957f\u5ea6\u662f 0 \uff0c \u6240\u4ee5\u4f60\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u89e3\u6cd5 \u4ece\u53f3\u5411\u5de6\u7684\u601d\u8def\u4f1a\u66f4\u597d\u00b7 \u89e3\u6cd5\u4e00 \u526a\u679d \u901f\u5ea6\u8f83\u6162 \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6O(n**2) class Solution: def canJump(self, nums: List[int]) -> bool: dp = [False] * len(nums) dp[0] = True for i in range(1, len(nums)): for j in range(i - 1, -1, -1): if dp[j] and (i - j) <= nums[j]: dp[i] = True break return dp[len(nums)-1] class Solution: def canJump(self, nums: List[int]) -> bool: marks = [0] for i in range(1, len(nums)): length = len(marks) for x in range(length-1, -1, -1): j = marks[x] if (i - j) <= nums[j]: marks.append(i) break return marks != [] and marks[-1] + 1 == len(nums) \u89e3\u6cd5\u4e8c \u52a8\u6001\u89c4\u5212 \u81ea\u53f3\u5411\u5de6 python \u8d85\u65f6 O(n**2) class Solution: def canJump(self, nums: List[int]) -> bool: length = len(nums) dp = [False] * length # \u81ea\u53f3\u5411\u5de6 dp[length - 1] = True for i in range(length - 2, -1, -1): next_farthest_step = min(length - 1, i + nums[i]) for j in range(i + 1, next_farthest_step + 1): if dp[j]: dp[i] = True break return dp[0] \u89e3\u6cd5\u4e09 \u8d2a\u5fc3 \u5f53\u6211\u4eec\u628a\u4ee3\u7801\u6539\u6210\u81ea\u5e95\u5411\u4e0a\u7684\u6a21\u5f0f\uff0c\u6211\u4eec\u4f1a\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u53d1\u73b0\uff0c\u4ece\u67d0\u4e2a\u4f4d\u7f6e\u51fa\u53d1\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u6807\u8bb0\u4e3a GOOD \u7684\u5750\u6807\uff08\u7531\u8df3\u51fa\u5faa\u73af\u7684\u6761\u4ef6\u53ef\u5f97\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\u627e\u5230\u6700\u5de6\u8fb9\u7684\u90a3\u4e2a\u5750\u6807\u3002\u5982\u679c\u6211\u4eec\u7528\u4e00\u4e2a\u5355\u72ec\u7684\u53d8\u91cf\u6765\u8bb0\u5f55\u6700\u5de6\u8fb9\u7684 GOOD \u4f4d\u7f6e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u907f\u514d\u641c\u7d22\u6574\u4e2a\u6570\u7ec4\uff0c\u8fdb\u800c\u53ef\u4ee5\u7701\u7565\u6574\u4e2a memo \u6570\u7ec4\u3002 \u4ece\u53f3\u5411\u5de6\u8fed\u4ee3\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6211\u4eec\u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e00\u6b65\u8df3\u8dc3\u53ef\u4ee5\u5230\u8fbe GOOD \u7684\u4f4d\u7f6e\uff08currPosition + nums[currPosition] >= leftmostGoodIndex\uff09\u3002\u5982\u679c\u53ef\u4ee5\u5230\u8fbe\uff0c\u5f53\u524d\u4f4d\u7f6e\u4e5f\u6807\u8bb0\u4e3a GOOD \uff0c\u540c\u65f6\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u5c06\u6210\u4e3a\u65b0\u7684\u6700\u5de6\u8fb9\u7684 GOOD \u4f4d\u7f6e\uff0c\u4e00\u76f4\u91cd\u590d\u5230\u6570\u7ec4\u7684\u5f00\u5934\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5750\u6807\u6807\u8bb0\u4e3a GOOD \u610f\u5473\u7740\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u8df3\u5230\u6700\u540e\u7684\u4f4d\u7f6e\u3002 \u6a21\u62df\u4e00\u4e0b\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u8f93\u5165\u6570\u7ec4 nums = [9, 4, 2, 1, 0, 2, 0]\uff0c\u6211\u4eec\u7528 G \u8868\u793a GOOD\uff0c\u7528 B \u8868\u793a BAD \u548c U \u8868\u793a UNKNOWN\u3002\u6211\u4eec\u9700\u8981\u8003\u8651\u6240\u6709\u4ece 0 \u51fa\u53d1\u7684\u60c5\u51b5\u5e76\u5224\u65ad\u5750\u6807 0 \u662f\u5426\u662f\u597d\u5750\u6807\u3002\u7531\u4e8e\u5750\u6807 1 \u662f GOOD\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece 0 \u8df3\u5230 1 \u5e76\u4e14 1 \u6700\u7ec8\u53ef\u4ee5\u8df3\u5230\u5750\u6807 6\uff0c\u6240\u4ee5\u5c3d\u7ba1 nums[0] \u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u6700\u540e\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u79cd\u65b9\u6848\u5c31\u53ef\u4ee5\u77e5\u9053\u7ed3\u679c\u3002 Index 0 1 2 3 4 5 6 nums 9 4 2 1 0 2 0 memo U G B B B G G class Solution: def canJump(self, nums: List[int]) -> bool: length = len(nums) lastPos = length - 1 for i in range(length - 2, -1, -1): if i + nums[i] >= lastPos: lastPos = i return lastPos == 0 \u89e3\u6cd5\u56db \u8d2a\u5fc3 bool canJump(int A[], int n) { int i = 0; for (int reach = 0; i < n && i <= reach; ++i) reach = max(i + A[i], reach); return i == n; } 56.\u5408\u5e76\u533a\u95f4 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u8bf7\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[1,3],[2,6],[8,10],[15,18]] \u8f93\u51fa: [[1,6],[8,10],[15,18]] \u89e3\u91ca: \u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6]. \u793a\u4f8b 2: \u8f93\u5165: [[1,4],[4,5]] \u8f93\u51fa: [[1,5]] \u89e3\u91ca: \u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u7ef4\u62a4\u524d\u4e00\u4e2a\u5f85\u5408\u5e76\u597d\u7684\u533a\u95f4\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c left_max\uff0c right_max \u5f53\u5f53\u524d\u533a\u95f4\u7684\u5de6\u8fb9\u754c\u5927\u4e8e\u5e26\u5408\u5e76\u597d\u7684\u53f3\u8fb9\u754c\uff0c\u628a\u5408\u5e76\u597d\u7684\u8fb9\u754c\u653e\u5165\u7ed3\u679c\u96c6\u5408\uff0c\u91cd\u65b0\u628a\u5f53\u524d\u533a\u95f4\u5de6\u53f3\u8fb9\u754c\u66f4\u65b0\u6210\u5e26\u5408\u5e76\u597d\u7684\u533a\u95f4\u8fb9\u754c \u6ce8\u610f\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u8981\u653e\u5165\u7ed3\u679c\u96c6\u5408\u4e2d class Solution: def merge(self, intervals: List[List[int]]) -> List[List[int]]: if not intervals: return intervals intervals = sorted(intervals, key=lambda x: (x[0], x[1])) left_max = -1; right_max = -1; ans = [] for left, right in intervals: if right_max == -1: left_max = left right_max = right elif left > right_max: ans.append([left_max, right_max]) left_max = left right_max = right elif right > right_max: right_max = right if not ans or right_max != ans[-1][1]: ans.append([left_max, right_max]) return ans \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn) \u9664\u53bb sort \u7684\u5f00\u9500\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u6b21\u7ebf\u6027\u626b\u63cf\uff0c\u6240\u4ee5\u4e3b\u8981\u7684\u65f6\u95f4\u5f00\u9500\u662f\u6392\u5e8f\u7684 O(nlgn)O(nlgn) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) (or O(n) \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u539f\u5730\u6392\u5e8f intervals \uff0c\u5c31\u4e0d\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\uff1b\u5426\u5219\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u7ebf\u6027\u5927\u5c0f\u7684\u7a7a\u95f4\u53bb\u5b58\u50a8 intervals \u7684\u5907\u4efd\uff0c\u6765\u5b8c\u6210\u6392\u5e8f\u8fc7\u7a0b \u89e3\u6cd5\u4e8c \u9996\u5148\uff0c\u6211\u4eec\u5c06\u5217\u8868\u6309\u4e0a\u8ff0\u65b9\u5f0f\u6392\u5e8f\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u533a\u95f4\u63d2\u5165 merged \u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u6309\u987a\u5e8f\u8003\u8651\u4e4b\u540e\u7684\u6bcf\u4e2a\u533a\u95f4\uff1a\u5982\u679c\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5728\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u4e4b\u540e\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e0d\u4f1a\u91cd\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06\u8fd9\u4e2a\u533a\u95f4\u63d2\u5165 merged \u4e2d\uff1b\u5426\u5219\uff0c\u4ed6\u4eec\u91cd\u5408\uff0c\u6211\u4eec\u7528\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u66f4\u65b0\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9 end \u5982\u679c\u524d\u8005\u6570\u503c\u6bd4\u540e\u8005\u5927\u7684\u8bdd\u3002 class Solution: def merge(self, intervals: List[List[int]]) -> List[List[int]]: if not intervals: return intervals intervals = sorted(intervals, key=lambda x: (x[0], x[1])) ans = [] for left, right in intervals: # \u5f53\u7ed3\u679c\u96c6\u5408\u7a7a\u6216\u8005 \u65b0\u533a\u95f4\u4e0d\u4e0e\u7ed3\u679c\u7ed3\u5408\u6700\u540e\u7684\u533a\u95f4\u91cd\u53e0 \u5219\u628a\u8be5\u533a\u95f4\u653e\u5165\u7ed3\u679c\u96c6\u5408 if not ans or ans[-1][1] < left: ans.append([left, right]) # \u5426\u5219\u66f4\u65b0\u7ed3\u679c\u96c6\u5408\u6700\u540e\u4e00\u4e2a\u53bb\u89c1\u7684\u53f3\u8fb9\u754c else: ans[-1][1] = max(ans[-1][1], right) return ans 73.\u77e9\u9635\u7f6e\u96f6 73.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a m x n \u7684\u77e9\u9635\uff0c\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u4e3a 0\uff0c\u5219\u5c06\u5176\u6240\u5728\u884c\u548c\u5217\u7684\u6240\u6709\u5143\u7d20\u90fd\u8bbe\u4e3a 0\u3002\u8bf7\u4f7f\u7528 \u539f\u5730 \u7b97\u6cd5 \u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [1,1,1], [1,0,1], [1,1,1] ] \u8f93\u51fa: [ [1,0,1], [0,0,0], [1,0,1] ] \u793a\u4f8b 2: \u8f93\u5165: [ [0,1,2,0], [3,4,5,2], [1,3,1,5] ] \u8f93\u51fa: [ [0,0,0,0], [0,4,5,0], [0,3,1,0] ] \u8fdb\u9636: \u4e00\u4e2a\u76f4\u63a5\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 O( m n ) \u7684\u989d\u5916\u7a7a\u95f4\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u6539\u8fdb\u65b9\u6848\u662f\u4f7f\u7528 O( m + n ) \u7684\u989d\u5916\u7a7a\u95f4\uff0c\u4f46\u8fd9\u4ecd\u7136\u4e0d\u662f\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u5e38\u6570\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f 73.2.\u89e3\u6cd5 73.2.1 \u65b9\u6cd5\u4e00 TO(n*m) SO(n+m) class Solution { public void setZeroes(int[][] matrix) { if(matrix == null || matrix.length == 0){ return; } // \u5efa\u7acb\u884c\u6807\u8bb0\u6570\u7ec4 \u5217\u6807\u8bb0\u6570\u7ec4 int[] rows = new int[matrix.length], cols = new int[matrix[0].length]; for(int i = 0; i < matrix.length; i++){ for(int j = 0; j < matrix[0].length; j++){ if(matrix[i][j] == 0){ rows[i] += 1; cols[j] += 1; } } } for(int i = 0; i < matrix.length; i++){ if(rows[i] > 0){ for(int j = 0; j < matrix[0].length; j++){ matrix[i][j] = 0; } } } for(int j = 0; j < matrix[0].length; j++){ if(cols[j] > 0){ for(int i = 0; i < matrix.length; i++){ matrix[i][j] = 0; } } } } } class Solution { public void setZeroes(int[][] matrix) { int R = matrix.length; int C = matrix[0].length; Set<Integer> rows = new HashSet<Integer>(); Set<Integer> cols = new HashSet<Integer>(); // Essentially, we mark the rows and columns that are to be made zero for (int i = 0; i < R; i++) { for (int j = 0; j < C; j++) { if (matrix[i][j] == 0) { rows.add(i); cols.add(j); } } } // Iterate over the array once again and using the rows and cols sets, update the elements. for (int i = 0; i < R; i++) { for (int j = 0; j < C; j++) { if (rows.contains(i) || cols.contains(j)) { matrix[i][j] = 0; } } } } } 73.2.2 \u65b9\u6cd5\u4e8c TO(n*m) SO(1) \u7a7a\u95f4\u590d\u6742\u5ea6 O(2) \uff0c\u7528\u4e24\u4e2a\u5e03\u5c14\u53d8\u91cf\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002 \u5229\u7528\u6570\u7ec4\u7684\u9996\u884c\u548c\u9996\u5217\u6765\u8bb0\u5f55 0 \u503c\u3002\u4ece\u6570\u7ec4\u4e0b\u6807\u7684 A[1][1]\u5f00\u59cb\u904d\u5386\uff0c \u4e24\u4e2a\u5e03\u5c14\u503c\u8bb0\u5f55\u9996\u884c\u9996\u5217\u662f\u5426\u9700\u8981\u7f6e0 class Solution { public void setZeroes(int[][] matrix) { if(matrix == null || matrix.length == 0 || matrix[0].length == 0){ return; } // \u8bb0\u5f55\u9996\u884c\u9996\u5217\u662f\u5426\u7f6e0 boolean firstRow = false; for(int i = 0; i < matrix[0].length; i++){ if(matrix[0][i] == 0){ firstRow = true; } } boolean firstCol = false; for(int i = 0; i < matrix.length; i++){ if(matrix[i][0] == 0){ firstCol = true; } } // \u4ecematrix[1][1]\u5f00\u59cb\u904d\u5386\uff0c \u5229\u7528\u6570\u7ec4\u9996\u884c\u9996\u5217\u6765\u8bb0\u5f550\u503c for(int i = 1; i < matrix.length; i++){ for(int j = 1; j < matrix[0].length; j++){ if(matrix[i][j] == 0){ matrix[i][0] = 0; matrix[0][j] = 0; } } } for(int i = 1; i < matrix.length; i++){ if(matrix[i][0] == 0){ for(int j = 0; j < matrix[0].length; j++){ matrix[i][j] = 0; } } } // \u66f4\u65b0\u9996\u884c\u9996\u5217 for(int j = 1; j < matrix[0].length; j++){ if(matrix[0][j] == 0){ for(int i = 0; i < matrix.length; i++){ matrix[i][j] = 0; } } } if(firstRow){ for(int i = 0; i < matrix[0].length; i++){ matrix[0][i] = 0; } } if(firstCol){ for(int i = 0; i < matrix.length; i++){ matrix[i][0] = 0; } } } } class Solution { public void setZeroes(int[][] matrix) { Boolean isCol = false; int R = matrix.length; int C = matrix[0].length; for (int i = 0; i < R; i++) { // Since first cell for both first row and first column is the same i.e. matrix[0][0] // We can use an additional variable for either the first row/column. // For this solution we are using an additional variable for the first column // and using matrix[0][0] for the first row. if (matrix[i][0] == 0) { isCol = true; } for (int j = 1; j < C; j++) { // If an element is zero, we set the first element of the corresponding row and column to 0 if (matrix[i][j] == 0) { matrix[0][j] = 0; matrix[i][0] = 0; } } } // Iterate over the array once again and using the first row and first column, update the elements. for (int i = 1; i < R; i++) { for (int j = 1; j < C; j++) { if (matrix[i][0] == 0 || matrix[0][j] == 0) { matrix[i][j] = 0; } } } // See if the first row needs to be set to zero as well if (matrix[0][0] == 0) { for (int j = 0; j < C; j++) { matrix[0][j] = 0; } } // See if the first column needs to be set to zero as well if (isCol) { for (int i = 0; i < R; i++) { matrix[i][0] = 0; } } } } 74.\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u9898\u76ee\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad m x n \u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a \u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002 \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 3 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 13 \u8f93\u51fa: false \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5bf9\u89d2 O(m + n) class Solution: def searchMatrix(self, matrix: List[List[int]], target: int) -> bool: if not matrix or len(matrix) == 0 or len(matrix[0]) == 0: return False m = len(matrix) n = len(matrix[0]) row = m - 1 col = 0 while row >= 0 and col < n: if matrix[row][col] == target: return True elif matrix[row][col] > target: row -= 1 else: col += 1 return False \u89e3\u6cd5\u4e8c O(logmn) class Solution: def searchMatrix(self, matrix: List[List[int]], target: int) -> bool: m = len(matrix) if m == 0: return False n = len(matrix[0]) #\u4e8c\u5206\u67e5\u627e left, right = 0, m * n - 1 while left <= right: pivot_idx = (left + right) // 2 pivot_element = matrix[pivot_idx // n][pivot_idx % n] if target == pivot_element: return True else: if target < pivot_element: right = pivot_idx - 1 else: left = pivot_idx + 1 return False 75. \u989c\u8272\u5206\u7c7b 75.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\uff0c\u4e00\u5171 n \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c \u539f\u5730 \u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5f97\u76f8\u540c\u989c\u8272\u7684\u5143\u7d20\u76f8\u90bb\uff0c\u5e76\u6309\u7167\u7ea2\u8272\u3001\u767d\u8272\u3001\u84dd\u8272\u987a\u5e8f\u6392\u5217\u3002 \u6b64\u9898\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 0\u3001 1 \u548c 2 \u5206\u522b\u8868\u793a\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\u3002 \u6ce8\u610f: \u4e0d\u80fd\u4f7f\u7528\u4ee3\u7801\u5e93\u4e2d\u7684\u6392\u5e8f\u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002 \u793a\u4f8b: \u8f93\u5165: [2,0,2,1,1,0] \u8f93\u51fa: [0,0,1,1,2,2] \u8fdb\u9636\uff1a \u4e00\u4e2a\u76f4\u89c2\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u7684\u4e24\u8d9f\u626b\u63cf\u7b97\u6cd5\u3002 \u9996\u5148\uff0c\u8fed\u4ee3\u8ba1\u7b97\u51fa0\u30011 \u548c 2 \u5143\u7d20\u7684\u4e2a\u6570\uff0c\u7136\u540e\u6309\u71670\u30011\u30012\u7684\u6392\u5e8f\uff0c\u91cd\u5199\u5f53\u524d\u6570\u7ec4\u3002 \u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u7684\u4e00\u8d9f\u626b\u63cf\u7b97\u6cd5\u5417\uff1f 75.2 \u89e3\u6cd5 75.2.1 \u7c7b\u4f3c\u4e8e\u5feb\u6392\u4e2d\u7684partition [NOTE]: \u548cblue\u4ea4\u6362\u65f6white\u4e0d\u8981\u76f4\u63a5\u8fed\u4ee3\u5230\u4e0b\u4e00\u6b21, \u8981\u7ee7\u7eed\u5224\u65ad\u4ea4\u6362\u540e\u7684\u503c\u662f\u4ec0\u4e48 trick: \u628ared white blue \u6539\u6210 zero one two \u53ef\u80fd\u66f4\u6613\u5199 \u66f4\u6613\u8bfb class Solution: def sortColors(self, nums: List[int]) -> None: \"\"\" Do not return anything, modify nums in-place instead. \"\"\" red, white, blue = -1, 0, len(nums) while white < blue: if nums[white] == 0: nums[white], nums[red+1] = nums[red+1], nums[white] red += 1 white += 1 elif nums[white] == 1: white += 1 else: nums[white], nums[blue-1] = nums[blue-1], nums[white] blue -= 1 75.2.2 \u626b\u63cf\u4e24\u904d \u4ea4\u6362 The idea is to sweep all 0s to the left and all 2s to the right, then all 1s are left in the middle. It is hard to define what is a \"one-pass\" solution but this algorithm is bounded by O(2n), meaning that at most each element will be seen and operated twice (in the case of all 0s). You may be able to write an algorithm which goes through the list only once, but each step requires multiple operations, leading the total operations larger than O(2n). class Solution { public: void sortColors(int A[], int n) { int second=n-1, zero=0; for (int i=0; i<=second; i++) { while (A[i]==2 && i<second) swap(A[i], A[second--]); while (A[i]==0 && i>zero) swap(A[i], A[zero++]); } } }; 75.2.3 \u8ba1\u6570\u6392\u5e8f def sortColors(self, nums: List[int]) -> None: \"\"\" \u8ba1\u6570\u6392\u5e8f 1.\u627e\u51fa\u5f85\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u6700\u5927\u548c\u6700\u5c0f\u7684\u5143\u7d20 \u672c\u9898\u76f4\u63a5\u5f970,2 2.\u7edf\u8ba1\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u503c\u4e3ai\u7684\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5b58\u5165\u6570\u7ec4 C \u7684\u7b2ci\u9879 3.\u5bf9\u6240\u6709\u7684\u8ba1\u6570\u7d2f\u52a0\uff08\u4ece C \u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6bcf\u4e00\u9879\u548c\u524d\u4e00\u9879\u76f8\u52a0\uff09 4.\u53cd\u5411\u586b\u5145\u76ee\u6807\u6570\u7ec4\uff1a\u5c06\u6bcf\u4e2a\u5143\u7d20i\u653e\u5728\u65b0\u6570\u7ec4\u7684\u7b2cC[i]\u9879\uff0c\u6bcf\u653e\u4e00\u4e2a\u5143\u7d20\u5c31\u5c06C[i]\u51cf\u53bb1 \"\"\" min_val, max_val = 0, 2 c = [0] * (max_val-min_val+1) for i in range(0, len(nums)): c[nums[i]-min_val] += 1 for j in range(1, len(c)): c[j] = c[j] + c[j-1] result = [0]*len(nums) for k in range(len(nums)-1, -1, -1): result[c[nums[k]-min_val]-1] = nums[k] c[nums[k]-min_val] -= 1 return result 88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 88.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d \uff0c \u4f7f\u5f97 num1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u8bf4\u660e: \u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n \uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002 \u793a\u4f8b: \u8f93\u5165: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 \u8f93\u51fa: [1,2,2,3,5,6] 88.2.\u89e3\u6cd5 88.2.1 \u65b9\u6cd5\u4e00 \u628a\u8f83\u5927\u503c\u653e\u5165\u6700\u540e class Solution: def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None: \"\"\" Do not return anything, modify nums1 in-place instead. \"\"\" l = m + n - 1 while m and n: if nums1[m-1] > nums2[n-1]: nums1[l] = nums1[m-1] m -= 1 else: nums1[l] = nums2[n-1] n -= 1 l -= 1 for i in range(n): nums1[i] = nums2[i] def merge(self, nums1, m, nums2, n): while m > 0 and n > 0: if nums1[m-1] >= nums2[n-1]: nums1[m+n-1] = nums1[m-1] m -= 1 else: nums1[m+n-1] = nums2[n-1] n -= 1 if n > 0: nums1[:n] = nums2[:n] class Solution { public: void merge(int A[], int m, int B[], int n) { int i=m-1; int j=n-1; int k = m+n-1; while(i >=0 && j>=0) { if(A[i] > B[j]) A[k--] = A[i--]; else A[k--] = B[j--]; } while(j>=0) A[k--] = B[j--]; } }; 130.\u88ab\u56f4\u7ed5\u7684\u533a\u57df \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u77e9\u9635\uff0c\u5305\u542b 'X' \u548c 'O'\uff08\u5b57\u6bcd O\uff09\u3002 \u627e\u5230\u6240\u6709\u88ab 'X' \u56f4\u7ed5\u7684\u533a\u57df\uff0c\u5e76\u5c06\u8fd9\u4e9b\u533a\u57df\u91cc\u6240\u6709\u7684 'O' \u7528 'X' \u586b\u5145\u3002 \u793a\u4f8b: X X X X X O O X X X O X X O X X \u8fd0\u884c\u4f60\u7684\u51fd\u6570\u540e\uff0c\u77e9\u9635\u53d8\u4e3a\uff1a X X X X X X X X X X X X X O X X \u89e3\u91ca: \u88ab\u56f4\u7ed5\u7684\u533a\u95f4\u4e0d\u4f1a\u5b58\u5728\u4e8e\u8fb9\u754c\u4e0a\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u4efb\u4f55\u8fb9\u754c\u4e0a\u7684 'O' \u90fd\u4e0d\u4f1a\u88ab\u586b\u5145\u4e3a 'X'\u3002 \u4efb\u4f55\u4e0d\u5728\u8fb9\u754c\u4e0a\uff0c\u6216\u4e0d\u4e0e\u8fb9\u754c\u4e0a\u7684 'O' \u76f8\u8fde\u7684 'O' \u6700\u7ec8\u90fd\u4f1a\u88ab\u586b\u5145\u4e3a 'X'\u3002\u5982\u679c\u4e24\u4e2a\u5143\u7d20\u5728\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u76f8\u90bb\uff0c\u5219\u79f0\u5b83\u4eec\u662f\u201c\u76f8\u8fde\u201d\u7684\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DFS \u5bf9\u8fb9\u754c\u4e0a\u7684 O \u8981\u7279\u6b8a\u5904\u7406\uff0c\u90a3\u4e48\u5269\u4e0b\u7684 O \u66ff\u6362\u6210 X \u5c31\u53ef\u4ee5\u4e86\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5982\u4f55\u5bfb\u627e\u548c\u8fb9\u754c\u8054\u901a\u7684 O class Solution: def solve(self, board: List[List[str]]) -> None: \"\"\" \u5bf9\u8fb9\u754c\u4e0a\u7684 O \u8981\u7279\u6b8a\u5904\u7406\uff0c\u90a3\u4e48\u5269\u4e0b\u7684 O \u66ff\u6362\u6210 X \u5c31\u53ef\u4ee5\u4e86\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5982\u4f55\u5bfb\u627e\u548c\u8fb9\u754c\u8054\u901a\u7684 O \"\"\" def dfs(i, j): # \u5982\u679c\u8fd4\u56deTrue \u9700\u8981\u6062\u590d\u5df2\u4fee\u6539 board[i][j] = '#' # \u5de6 \u4e0a \u53f3 \u4e0b directions = [(0, -1), (-1, 0), (0, 1), (1, 0)] for dx, dy in directions: if (i + dx) >= 0 and (i + dx) < m and (j + dy) >= 0 and (j + dy) < n and board[i + dx][j + dy] =='O': dfs(i + dx, j + dy) m = len(board) if not m: return n = len(board[0]) if not n: return for j in range(n): if board[0][j] == 'O': dfs(0, j) if board[m-1][j] == 'O': dfs(m-1, j) for i in range(m): if board[i][0] == 'O': dfs(i, 0) if board[i][n-1] == 'O': dfs(i, n - 1) for i in range(m): for j in range(n): if board[i][j] == 'O': board[i][j] = 'X' if board[i][j] == '#': board[i][j] = 'O' \u89e3\u6cd5\u4e8c 134.\u52a0\u6cb9\u7ad9 [\u63a8\u8350] \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u6761\u73af\u8def\u4e0a\u6709 N \u4e2a\u52a0\u6cb9\u7ad9\uff0c\u5176\u4e2d\u7b2c i \u4e2a\u52a0\u6cb9\u7ad9\u6709\u6c7d\u6cb9 gas[i] \u5347\u3002 \u4f60\u6709\u4e00\u8f86\u6cb9\u7bb1\u5bb9\u91cf\u65e0\u9650\u7684\u7684\u6c7d\u8f66\uff0c\u4ece\u7b2c i \u4e2a\u52a0\u6cb9\u7ad9\u5f00\u5f80\u7b2c i+1 \u4e2a\u52a0\u6cb9\u7ad9\u9700\u8981\u6d88\u8017\u6c7d\u6cb9 cost[i] \u5347\u3002\u4f60\u4ece\u5176\u4e2d\u7684\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u5f00\u59cb\u65f6\u6cb9\u7bb1\u4e3a\u7a7a\u3002 \u5982\u679c\u4f60\u53ef\u4ee5\u7ed5\u73af\u8def\u884c\u9a76\u4e00\u5468\uff0c\u5219\u8fd4\u56de\u51fa\u53d1\u65f6\u52a0\u6cb9\u7ad9\u7684\u7f16\u53f7\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 \u8bf4\u660e: \u5982\u679c\u9898\u76ee\u6709\u89e3\uff0c\u8be5\u7b54\u6848\u5373\u4e3a\u552f\u4e00\u7b54\u6848\u3002 \u8f93\u5165\u6570\u7ec4\u5747\u4e3a\u975e\u7a7a\u6570\u7ec4\uff0c\u4e14\u957f\u5ea6\u76f8\u540c\u3002 \u8f93\u5165\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5747\u4e3a\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: gas = [1,2,3,4,5] cost = [3,4,5,1,2] \u8f93\u51fa: 3 \u89e3\u91ca: \u4ece 3 \u53f7\u52a0\u6cb9\u7ad9(\u7d22\u5f15\u4e3a 3 \u5904)\u51fa\u53d1\uff0c\u53ef\u83b7\u5f97 4 \u5347\u6c7d\u6cb9\u3002\u6b64\u65f6\u6cb9\u7bb1\u6709 = 0 + 4 = 4 \u5347\u6c7d\u6cb9 \u5f00\u5f80 4 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 4 - 1 + 5 = 8 \u5347\u6c7d\u6cb9 \u5f00\u5f80 0 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 8 - 2 + 1 = 7 \u5347\u6c7d\u6cb9 \u5f00\u5f80 1 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 7 - 3 + 2 = 6 \u5347\u6c7d\u6cb9 \u5f00\u5f80 2 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 6 - 4 + 3 = 5 \u5347\u6c7d\u6cb9 \u5f00\u5f80 3 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u4f60\u9700\u8981\u6d88\u8017 5 \u5347\u6c7d\u6cb9\uff0c\u6b63\u597d\u8db3\u591f\u4f60\u8fd4\u56de\u5230 3 \u53f7\u52a0\u6cb9\u7ad9\u3002 \u56e0\u6b64\uff0c3 \u53ef\u4e3a\u8d77\u59cb\u7d22\u5f15\u3002 \u793a\u4f8b 2: \u8f93\u5165: gas = [2,3,4] cost = [3,4,3] \u8f93\u51fa: -1 \u89e3\u91ca: \u4f60\u4e0d\u80fd\u4ece 0 \u53f7\u6216 1 \u53f7\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u56e0\u4e3a\u6ca1\u6709\u8db3\u591f\u7684\u6c7d\u6cb9\u53ef\u4ee5\u8ba9\u4f60\u884c\u9a76\u5230\u4e0b\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u3002 \u6211\u4eec\u4ece 2 \u53f7\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u53ef\u4ee5\u83b7\u5f97 4 \u5347\u6c7d\u6cb9\u3002 \u6b64\u65f6\u6cb9\u7bb1\u6709 = 0 + 4 = 4 \u5347\u6c7d\u6cb9 \u5f00\u5f80 0 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 4 - 3 + 2 = 3 \u5347\u6c7d\u6cb9 \u5f00\u5f80 1 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 3 - 3 + 3 = 3 \u5347\u6c7d\u6cb9 \u4f60\u65e0\u6cd5\u8fd4\u56de 2 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u56e0\u4e3a\u8fd4\u7a0b\u9700\u8981\u6d88\u8017 4 \u5347\u6c7d\u6cb9\uff0c\u4f46\u662f\u4f60\u7684\u6cb9\u7bb1\u53ea\u6709 3 \u5347\u6c7d\u6cb9\u3002 \u56e0\u6b64\uff0c\u65e0\u8bba\u600e\u6837\uff0c\u4f60\u90fd\u4e0d\u53ef\u80fd\u7ed5\u73af\u8def\u884c\u9a76\u4e00\u5468\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u8d2a\u5fc3 1.\u603b\u6cb9\u91cf >= \u603b\u8def\u7a0b \u4e00\u5b9a\u53ef\u4ee5\u8d70\u5b8c\u5168\u7a0b 2.\u7b2c\u4e8c\u4e2a\u89c4\u5219\u53ef\u4ee5\u88ab\u4e00\u822c\u5316\uff0c\u6211\u4eec\u5f15\u5165\u53d8\u91cf curr_tank \uff0c\u8bb0\u5f55\u5f53\u524d\u6cb9\u7bb1\u91cc\u5269\u4f59\u7684\u603b\u6cb9\u91cf\u3002 \u5982\u679c\u5728\u67d0\u4e00\u4e2a\u52a0\u6cb9\u7ad9 curr_tank\u6bd4 0 \u5c0f\uff0c\u610f\u5473\u7740\u6211\u4eec\u65e0\u6cd5\u5230\u8fbe\u8fd9\u4e2a\u52a0\u6cb9\u7ad9\u3002 **\u4e0b\u4e00\u6b65\u6211\u4eec\u628a\u8fd9\u4e2a\u52a0\u6cb9\u7ad9\u5f53\u505a\u65b0\u7684\u8d77\u70b9\uff0c\u5e76\u5c06 curr_tank \u91cd\u7f6e\u4e3a 0 \uff0c\u56e0\u4e3a\u91cd\u65b0\u51fa\u53d1\uff0c\u6cb9\u7bb1\u4e2d\u7684\u6cb9\u4e3a 0 \u3002 \uff08\u4ece\u4e0a\u4e00\u6b21\u91cd\u7f6e\u7684\u52a0\u6cb9\u7ad9\u5230\u5f53\u524d\u52a0\u6cb9\u7ad9\u7684\u4efb\u610f\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u5230\u8fbe\u5f53\u524d\u52a0\u6cb9\u7ad9\u4e4b\u524d\uff0c curr_tank \u4e5f\u4e00\u5b9a\u4f1a\u6bd4 0 \u5c0f\uff09** class Solution: def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int: \"\"\" \u8d2a\u5fc3\uff1a 1.\u603b\u6cb9\u91cf >= \u603b\u8def\u7a0b \u4e00\u5b9a\u53ef\u4ee5\u8d70\u5b8c\u5168\u7a0b 2.\u7b2c\u4e8c\u4e2a\u89c4\u5219\u53ef\u4ee5\u88ab\u4e00\u822c\u5316\uff0c\u6211\u4eec\u5f15\u5165\u53d8\u91cf curr_tank \uff0c\u8bb0\u5f55\u5f53\u524d\u6cb9\u7bb1\u91cc\u5269\u4f59\u7684\u603b\u6cb9\u91cf\u3002 \u5982\u679c\u5728\u67d0\u4e00\u4e2a\u52a0\u6cb9\u7ad9 curr_tank\u6bd4 0 \u5c0f\uff0c\u610f\u5473\u7740\u6211\u4eec\u65e0\u6cd5\u5230\u8fbe\u8fd9\u4e2a\u52a0\u6cb9\u7ad9\u3002 **\u4e0b\u4e00\u6b65\u6211\u4eec\u628a\u8fd9\u4e2a\u52a0\u6cb9\u7ad9\u5f53\u505a\u65b0\u7684\u8d77\u70b9\uff0c\u5e76\u5c06 curr_tank \u91cd\u7f6e\u4e3a 0 \uff0c\u56e0\u4e3a\u91cd\u65b0\u51fa\u53d1\uff0c\u6cb9\u7bb1\u4e2d\u7684\u6cb9\u4e3a 0 \u3002 \uff08\u4ece\u4e0a\u4e00\u6b21\u91cd\u7f6e\u7684\u52a0\u6cb9\u7ad9\u5230\u5f53\u524d\u52a0\u6cb9\u7ad9\u7684\u4efb\u610f\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u5230\u8fbe\u5f53\u524d\u52a0\u6cb9\u7ad9\u4e4b\u524d\uff0c curr_tank \u4e5f\u4e00\u5b9a\u4f1a\u6bd4 0 \u5c0f\uff09** \"\"\" total_gas = 0 cur_gas = 0 ans = 0 for i in range(len(gas)): total_gas += gas[i] - cost[i] cur_gas += gas[i] - cost[i] if cur_gas < 0: ans = i + 1 cur_gas = 0 return ans if total_gas >= 0 else -1 \u89e3\u6cd5\u4e8c 150.\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c \u9898\u76ee\u63cf\u8ff0 \u6839\u636e\u9006\u6ce2\u5170\u8868\u793a\u6cd5\uff0c\u6c42\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u6709\u6548\u7684\u8fd0\u7b97\u7b26\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u3002 \u8bf4\u660e\uff1a \u6574\u6570\u9664\u6cd5\u53ea\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002 \u7ed9\u5b9a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u603b\u662f\u6709\u6548\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8868\u8fbe\u5f0f\u603b\u4f1a\u5f97\u51fa\u6709\u6548\u6570\u503c\u4e14\u4e0d\u5b58\u5728\u9664\u6570\u4e3a 0 \u7684\u60c5\u51b5\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [\"2\", \"1\", \"+\", \"3\", \"*\"] \u8f93\u51fa: 9 \u89e3\u91ca: ((2 + 1) * 3) = 9 \u793a\u4f8b 2\uff1a \u8f93\u5165: [\"4\", \"13\", \"5\", \"/\", \"+\"] \u8f93\u51fa: 6 \u89e3\u91ca: (4 + (13 / 5)) = 6 \u793a\u4f8b 3\uff1a \u8f93\u5165: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \" \", \"/\", \" \", \"17\", \"+\", \"5\", \"+\"] \u8f93\u51fa: 22 \u89e3\u91ca: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 python\u7684\u9664\u6cd5\u662f\u9677\u9631\uff0cc++\u6ca1\u95ee\u9898 class Solution: def evalRPN(self, tokens: List[str]) -> int: stack = [] sign = {'+', '-', '*', '/'} ans = 0 for c in tokens: if c in sign: num2 = stack.pop() num1 = stack.pop() if c == '+': stack.append(num1 + num2) elif c == '-': stack.append(num1 - num2) elif c == '*': stack.append(num1 * num2) else: # key:\u9664\u6cd5\u662f\u9677\u9631 # \u53e6\u4e00\u79cd\u5199\u6cd5\uff1aint(d[-2]/d[-1]) if num1 * num2 >= 0: stack.append(num1 // num2) else: stack.append(-(abs(num1) // abs(num2))) ans = stack[-1] else: stack.append(int(c)) if stack: return stack[-1] return ans \u89e3\u6cd5\u4e8c 152.\u4e58\u79ef\u6700\u5927\u5b50\u5e8f\u5217 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u51fa\u4e00\u4e2a\u5e8f\u5217\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\uff08\u8be5\u5e8f\u5217\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [2,3,-2,4] \u8f93\u51fa: 6 \u89e3\u91ca: \u5b50\u6570\u7ec4 [2,3] \u6709\u6700\u5927\u4e58\u79ef 6\u3002 \u793a\u4f8b 2: \u8f93\u5165: [-2,0,-1] \u8f93\u51fa: 0 \u89e3\u91ca: \u7ed3\u679c\u4e0d\u80fd\u4e3a 2, \u56e0\u4e3a [-2,-1] \u4e0d\u662f\u5b50\u6570\u7ec4\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u6b63\u8d1f\u6307\u9488 DP \u4e58\u6cd5\u548c\u52a0\u6cd5\u6700\u5927\u533a\u522b\u662f\u4e58\u6cd5\u9700\u8981\u8003\u8651\u6b63\u8d1f\u53f7 \u66ff\u6362\u5927\u5c0f\u7d22\u5f15 \u6700\u5927\u503c \u8d1f\u6700\u5927\u503c \u6807\u7b7e\uff1a\u52a8\u6001\u89c4\u5212 \u904d\u5386\u6570\u7ec4\u65f6\u8ba1\u7b97\u5f53\u524d\u6700\u5927\u503c\uff0c\u4e0d\u65ad\u66f4\u65b0 \u4ee4imax\u4e3a\u5f53\u524d\u6700\u5927\u503c\uff0c\u5219\u5f53\u524d\u6700\u5927\u503c\u4e3a imax = max(imax * nums[i], nums[i]) \u7531\u4e8e\u5b58\u5728\u8d1f\u6570\uff0c\u90a3\u4e48\u4f1a\u5bfc\u81f4\u6700\u5927\u7684\u53d8\u6700\u5c0f\u7684\uff0c\u6700\u5c0f\u7684\u53d8\u6700\u5927\u7684\u3002\u56e0\u6b64\u8fd8\u9700\u8981\u7ef4\u62a4\u5f53\u524d\u6700\u5c0f\u503cimin\uff0cimin = min(imin * nums[i], nums[i]) \u5f53\u8d1f\u6570\u51fa\u73b0\u65f6\u5219imax\u4e0eimin\u8fdb\u884c\u4ea4\u6362\u518d\u8fdb\u884c\u4e0b\u4e00\u6b65\u8ba1\u7b97 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)O(n) class Solution: def maxProduct(self, nums: List[int]) -> int: \"\"\" \u4e58\u6cd5\u548c\u52a0\u6cd5\u6700\u5927\u533a\u522b\u662f\u4e58\u6cd5\u9700\u8981\u8003\u8651\u6b63\u8d1f\u53f7 \u66ff\u6362\u5927\u5c0f\u7d22\u5f15 \"\"\" ans = float('-inf') minv = 1 maxv = 1 for num in nums: if num < 0: minv, maxv = maxv, minv maxv = max(maxv * num, num) minv = min(minv * num, num) ans = max(maxv, ans) return ans \u89e3\u6cd5\u4e8c 162.\u5bfb\u627e\u5cf0\u503c \u9898\u76ee\u63cf\u8ff0 \u5cf0\u503c\u5143\u7d20\u662f\u6307\u5176\u503c\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u503c\u7684\u5143\u7d20\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u8f93\u5165\u6570\u7ec4 nums\uff0c\u5176\u4e2d nums[i] \u2260 nums[i+1]\uff0c\u627e\u5230\u5cf0\u503c\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002 \u6570\u7ec4\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u5cf0\u503c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u4efb\u4f55\u4e00\u4e2a\u5cf0\u503c\u6240\u5728\u4f4d\u7f6e\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums[-1] = nums[n] = -\u221e\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [1,2,3,1] \u8f93\u51fa: 2 \u89e3\u91ca: 3 \u662f\u5cf0\u503c\u5143\u7d20\uff0c\u4f60\u7684\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u5176\u7d22\u5f15 2\u3002 \u793a\u4f8b 2: \u8f93\u5165: nums = [1,2,1,3,5,6,4] \u8f93\u51fa: 1 \u6216 5 \u89e3\u91ca: \u4f60\u7684\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u7d22\u5f15 1\uff0c\u5176\u5cf0\u503c\u5143\u7d20\u4e3a 2\uff1b \u6216\u8005\u8fd4\u56de\u7d22\u5f15 5\uff0c \u5176\u5cf0\u503c\u5143\u7d20\u4e3a 6\u3002 \u8bf4\u660e: \u4f60\u7684\u89e3\u6cd5\u5e94\u8be5\u662f O(logN) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4e8c\u5206\u67e5\u627e class Solution: def findPeakElement(self, nums: List[int]) -> int: left = 0 right = len(nums) - 1 while left < right: mid = left + ((right - left) >> 1) if nums[mid] < nums[mid + 1]: left = mid + 1 elif nums[mid] > nums[mid + 1]: right = mid return left \u89e3\u6cd5\u4e8c 167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4 167.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6309\u7167 \u5347\u5e8f\u6392\u5217 \u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u627e\u5230\u4e24\u4e2a\u6570\u4f7f\u5f97\u5b83\u4eec\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570\u3002 \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u8fd9\u4e24\u4e2a\u4e0b\u6807\u503c index1 \u548c index2\uff0c\u5176\u4e2d index1 \u5fc5\u987b\u5c0f\u4e8e index2 \u3002 \u8bf4\u660e: \u8fd4\u56de\u7684\u4e0b\u6807\u503c\uff08index1 \u548c index2\uff09\u4e0d\u662f\u4ece\u96f6\u5f00\u59cb\u7684\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165\u53ea\u5bf9\u5e94\u552f\u4e00\u7684\u7b54\u6848\uff0c\u800c\u4e14\u4f60\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u76f8\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b: \u8f93\u5165: numbers = [2, 7, 11, 15], target = 9 \u8f93\u51fa: [1,2] \u89e3\u91ca: 2 \u4e0e 7 \u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 9 \u3002\u56e0\u6b64 index1 = 1, index2 = 2 \u3002 167.2 \u89e3\u6cd5 167.2.1 \u65b9\u6cd5\u4e00 \u5dee\u503c\u7684\u4e8c\u5206\u67e5\u627e O(nlogn) class Solution: def twoSum(self, numbers: List[int], target: int) -> List[int]: \"\"\" Note: index\u4ece1\u5f00\u59cb \u5bf9\u5e94\u552f\u4e00\u7b54\u6848 \u4e0d\u53ef\u91cd\u590d\u4f7f\u7528\u76f8\u540c\u5143\u7d20 \u601d\u8def: \u5dee\u503c\u7684\u4e8c\u5206\u67e5\u627e \"\"\" highest = len(numbers) - 1 for i, a in enumerate(numbers): b = target - a # \u4e8c\u5206\u67e5\u627e low = i + 1 high = highest while low <= high: mid = (low + high) >> 1 if numbers[mid] == b: return i+1, mid+1 elif numbers[mid] > b: high = mid - 1 else: low = mid + 1 167.2.2 \u65b9\u6cd5\u4e8c \u5b57\u5178\u66ff\u6362\u4e0a\u9762\u7684\u4e8c\u5206\u67e5\u627e O(n) 'key in dict'\u64cd\u4f5c\u662fO(1) [\u63a8\u8350] # dictionary def twoSum2(self, numbers, target): dic = {} for i, num in enumerate(numbers): if target-num in dic: return [dic[target-num]+1, i+1] dic[num] = i 167.2.3 \u53cc\u6307\u9488 O(n) [\u63a8\u8350] def twoSum(self, numbers, target): l, r = 0, len(numbers)-1 while l < r: s = numbers[l] + numbers[r] if s == target: return [l+1, r+1] elif s < target: l += 1 else: r -= 1 169.\u6c42\u4f17\u6570 [\u63a8\u8350] 169.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u7684\u4f17\u6570\u3002\u4f17\u6570\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570 \u5927\u4e8e \u230a n/2 \u230b \u7684\u5143\u7d20\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u4f17\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,2,3] \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: [2,2,1,1,1,2,2] \u8f93\u51fa: 2 169.2 \u89e3\u6cd5 169.2.1 \u65b9\u6cd5\u4e00 Hash timeO(n) spaceO(n) class Solution: def majorityElement(self, nums: List[int]) -> int: import collections return collections.Counter(nums).most_common(1)[0][0] import java.util.HashMap; public class Solution { public int MoreThanHalfNum_Solution(int [] array) { if(array == null || array.length == 0){ return 0; } if(array.length == 1){ return array[0]; } HashMap<Integer, Integer> map = new HashMap<>(); for(int i = 0; i < array.length; i++){ if(map.containsKey(array[i])){ if(map.get(array[i]) + 1 > array.length / 2){ return array[i]; } map.put(array[i], map.get(array[i]) + 1); }else{ map.put(array[i], 1); } } return 0; } } 169.2.2 \u65b9\u6cd5\u4e8c Bruce force timeO(n**2) + spaceO(1) \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u4f17\u6570\u3002 \u5728\u5251\u6307 offer\u4e2d\u4e0d\u6210\u7acb\uff0c\u56e0\u4e3a\u6ca1\u6709\u4fdd\u8bc1\u6570\u7ec4\u4e2d\u603b\u5b58\u5728\u4f17\u6570 def majorityElement(self, nums): majority_count = len(nums)//2 for num in nums: count = sum(1 for elem in nums if elem == num) if count > majority_count: return num 169.2.3 \u65b9\u6cd5\u4e09 Sorting timeO(nlogn) spaceO(1 or n) We sorted nums in place here - if that is not allowed, then we must spend linear additional space on a copy of nums and sort the copy instead. class Solution: def majorityElement(self, nums): nums.sort() return nums[len(nums)//2] 169.2.4 \u65b9\u6cd5\u56db random (\u9884\u671f\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027) import random class Solution: def majorityElement(self, nums): majority_count = len(nums)//2 while True: candidate = random.choice(nums) if sum(1 for elem in nums if elem == candidate) > majority_count: return candidate 169.2.5 \u65b9\u6cd5\u4e94 Boyer-Moore Voting Algorithm(\u6469\u5c14\u6295\u7968\u6cd5) \u6469\u5c14\u6295\u7968\u7b97\u6cd5\u662f\u57fa\u4e8e\u8fd9\u4e2a\u4e8b\u5b9e\uff1a\u6bcf\u6b21\u4ece\u5e8f\u5217\u91cc\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u540c\u7684\u6570\u5b57\u5220\u9664\u6389\uff08\u6216\u79f0\u4e3a\u201c\u62b5\u6d88\u201d\uff09\uff0c\u6700\u540e\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\u6216\u51e0\u4e2a\u76f8\u540c\u7684\u6570\u5b57\uff0c\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u603b\u6570\u4e00\u534a\u7684\u90a3\u4e2a \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u4f17\u6570\u3002 \u5728\u5251\u6307 offer\u4e2d\u4e0d\u6210\u7acb\uff0c\u56e0\u4e3a\u6ca1\u6709\u4fdd\u8bc1\u6570\u7ec4\u4e2d\u603b\u5b58\u5728\u4f17\u6570 def majorityElement(self, nums): count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate 169.2.5 \u65b9\u6cd56 \u4f4d\u8fd0\u7b97[todo] public int majorityElement(int[] nums) { int[] bit = new int[32]; for (int i = 0; i < nums.length; i++) { for (int j = 0; j < 32; j++) { bit[j] += (nums[i] >> j) & 1; } } int majority = 0; for (int j = 0; j < 32; j++) { bit[j] = bit[j] > (nums.length / 2)? 1 : 0; majority += bit[j] << j; } return majority; } 209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4[\u53cc\u6307\u9488\u63a8\u8350] [\u4e8c\u5206\u6cd5todo] 1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709 n \u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570 s \uff0c \u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c \u2265 s \u7684\u957f\u5ea6\u6700\u5c0f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4 \u3002 \u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de 0\u3002 \u793a\u4f8b: \u8f93\u5165: s = 7, nums = [2,3,1,2,4,3] \u8f93\u51fa: 2 \u89e3\u91ca: \u5b50\u6570\u7ec4 [4,3] \u662f\u8be5\u6761\u4ef6\u4e0b\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u3002 \u8fdb\u9636: \u5982\u679c\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86 O ( n ) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5, \u8bf7\u5c1d\u8bd5 O ( n log n ) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u3002 2.\u89e3\u6cd5 2.1 \u65b9\u6cd5\u4e00 \u53cc\u6307\u9488 def minSubArrayLen(self, s: int, nums: List[int]) -> int: sumv = 0 minLen = len(nums) + 1 l, r = 0, 0 while r < len(nums): sumv += nums[r] while sumv >= s: minLen = min(minLen, r - l + 1) sumv -= nums[l] l += 1 r += 1 return minLen if minLen != len(nums) + 1 else 0 2.2 \u65b9\u6cd5\u4e8c \u4e8c\u5206\u67e5\u627e \u9010\u5143\u7d20\u7d2f\u52a0 class Solution { public int minSubArrayLen(int s, int[] nums) { int[] sums = new int[nums.length + 1]; for (int i = 1; i < sums.length; i++){ sums[i] = sums[i - 1] + nums[i - 1]; } int minLen = Integer.MAX_VALUE; // i\u662f\u5f00\u59cb\u7ed3\u70b9 for (int i = 0; i < sums.length; i++) { int end = binarySearch(i + 1, sums.length - 1, sums[i] + s, sums); if (end == sums.length) break; if (end - i < minLen) minLen = end - i; } return minLen == Integer.MAX_VALUE ? 0 : minLen; } private int binarySearch(int lo, int hi, int key, int[] sums) { while (lo <= hi) { int mid = (lo + hi) / 2; if (sums[mid] >= key){ hi = mid - 1; } else { lo = mid + 1; } } return lo; } } 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 215.1 \u9898\u76ee\u63cf\u8ff0 \u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,2,1,5,6,4] \u548c k = 2 \u8f93\u51fa: 5 \u793a\u4f8b 2: \u8f93\u5165: [3,2,3,1,2,4,5,5,6] \u548c k = 4 \u8f93\u51fa: 4 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u7684\u957f\u5ea6\u3002O(n) 215.2 \u89e3\u6cd5 215.2.1 \u65b9\u6cd5\u4e00 partition \u91cd\u70b9\u770b\u7b2c\u4e8c\u4e2a import random class Solution: def findKthLargest(self, nums: List[int], k: int) -> int: \"\"\" \u627e\u5230\u7b2ck\u5927, \u5373\u627e\u5230\u7b2c\u5c0f\u7684\u5143\u7d20 \u65b9\u6cd51: \u5148\u6392\u5e8f \u518d\u6311\u7b2c(n + 1 - k)\u4e2a O(nlogn) \u65b9\u6cd52: 1.\u968f\u673a\u5316 2.\u6784\u9020partition: \u627e\u5230\u6307\u5b9a\u5143\u7d20\u7684\u4f4d\u7f6e, \u5e76\u628a\u6bd4\u5b83\u7684\u5c0f\u7684\u653e\u5de6\u9762, \u5176\u5b83\u7684\u653e\u53f3\u9762 3.\u628a2\u4e2d\u83b7\u53d6\u5230\u7684\u4f4d\u7f6e(+1)\u548c(n+1-k)\u8fdb\u884c\u6bd4\u8f83(\u5206\u800c\u6cbb\u4e4b) \"\"\" def partition(nums, start, end, item): \"\"\" \u627e\u5230\u6307\u5b9a\u5143\u7d20\u7684\u4f4d\u7f6e, \u5e76\u628a\u6bd4\u5b83\u7684\u5c0f\u7684\u653e\u5de6\u9762, \u5176\u5b83\u7684\u653e\u53f3\u9762 \"\"\" i = start - 1 for j in range(start, end): if nums[j] < item: nums[i+1], nums[j] = nums[j], nums[i+1] i += 1 else: continue nums[i+1], nums[end] = nums[end], nums[i+1] return i+1 def random_findKthLargest(nums, start, end, k): n = len(nums) # 1.\u968f\u673a\u5316 i = random.randint(start, end) nums[i], nums[end] = nums[end], nums[i] # 2.partition x = partition(nums, start, end, nums[end]) # 3.\u5206\u800c\u6cbb\u4e4b if x + 1 == n + 1 - k: return nums[x] elif x + 1 > n + 1 - k: return random_findKthLargest(nums, start, x - 1, k) else: return random_findKthLargest(nums, x + 1, end, k) return random_findKthLargest(nums, 0, len(nums)-1, k) import random class Solution: def findKthLargest(self, nums: List[int], k: int) -> int: def partition(l, r): i = l - 1 for j in range(l, r): if nums[j] < nums[r]: i += 1 nums[i], nums[j] = nums[j], nums[i] nums[i + 1], nums[r] = nums[r], nums[i + 1] return i + 1 def random_findKthSmallest(l, r, k): index = random.randint(l, r) nums[index], nums[r] = nums[r], nums[index] q = partition(l, r) if q == k: return nums[q] elif q < k: return random_findKthSmallest(q + 1, r, k) else: return random_findKthSmallest(l, q - 1, k) return random_findKthSmallest(0, len(nums) - 1, len(nums) - k) 215.2.2 \u6700\u5c0f\u5806 Time: O(k) + O(n * logk) | Space: O(K) import heapq class Solution(object): def findKthLargest(self, nums, k): min_heap = [-float('inf')] * k heapq.heapify(min_heap) for num in nums: if num > min_heap[0]: heapq.heappop(min_heap) heapq.heappush(min_heap, num) return min_heap[0] 215.2.3 \u6700\u5927\u5806 Time: O(n + klog(n)) | Space: O(n) \u9996\u5148\u89e3\u91ca\u4e0b\u4e3a\u4ec0\u4e48\u8981 nums = [-num for num in nums] . \u56e0\u4e3aPython\u7684Standard Library\u91cc\u9762\u8c03\u7528heapify\u7684\u65f6\u5019\uff0c\u6c38\u8fdc\u662f\u4e00\u4e2amin_heap\uff0c\u7136\u540e\u56e0\u4e3a\u6ca1\u6709Max Heap\u7684implementation\uff0c\u4f60\u8981\u505a\u7684\u5c31\u662f\u901a\u8fc7Min Heap\u6765\u6a21\u62dfMax Heap\u7684\u8fd0\u7b97\uff0c \u6700\u7b80\u5355\u7684\u5c31\u662f\u5c06\u6240\u6709\u7684\u6570\u53d8\u6210 -num \uff0c\u8fd9\u662f\u4e0d\u662f\u4e00\u4e2a\u597d\u7684Practice\uff1f\u4e0d\u4e00\u5b9a\uff0c\u5f88\u591a\u4eba\u4e5f\u81ea\u5df1implement\u4e86Max Heap\u7684\u6570\u636e\u7ed3\u6784\u3002\u5177\u4f53\u63a8\u8350\u5927\u5bb6\u770b\u770b\u8fd9\u4e2a\u5e16\u5b50\uff1a StackOverFlow import heapq class Solution(object): def findKthLargest(self, nums, k): nums = [-num for num in nums] heapq.heapify(nums) res = float('inf') for _ in range(k): res = heapq.heappop(nums) return -res 215.2.4 Max Heap vs. Min Heap \u54ea\u4e2a\u7b97\u6cd5\u66f4\u52a0\u597d\uff1f Max: Time: O(n + klog(n)) | Space: O(n) Min: Time: O(k) + O((n-k) * logk) | Space: O(K) \u5982\u679c\u8003\u8651k\u65e0\u9650\u63a5\u8fd1n Max: O(n + nlog(n)) ~= O(nlogn) Min: O(n + logk) ~= O(n) \u5982\u679c\u8003\u8651k = 0.5n Max: O(n + nlogn) Min: O(n + nlogn) \u5982\u679c\u8003\u8651n \u65e0\u9650\u5927 Max: O(constant * n) \u4e3a\u4ec0\u4e48\u662fconstant * n\uff0c \u53c2\u8003 Min: O(log(k) * n) 238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef 238.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d n > 1\uff0c\u8fd4\u56de\u8f93\u51fa\u6570\u7ec4 output \uff0c\u5176\u4e2d output[i] \u7b49\u4e8e nums \u4e2d\u9664 nums[i] \u4e4b\u5916\u5176\u4f59\u5404\u5143\u7d20\u7684\u4e58\u79ef\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3,4] \u8f93\u51fa: [24,12,8,6] \u8bf4\u660e: \u8bf7 \u4e0d\u8981\u4f7f\u7528\u9664\u6cd5\uff0c \u4e14\u5728 O( n ) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u6b64\u9898\u3002 \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u5728\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e2a\u9898\u76ee\u5417\uff1f\uff08 \u51fa\u4e8e\u5bf9\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7684\u76ee\u7684\uff0c\u8f93\u51fa\u6570\u7ec4 \u4e0d\u88ab\u89c6\u4e3a \u989d\u5916\u7a7a\u95f4\u3002\uff09 238.2 \u89e3\u6cd5 238.2.1 \u65b9\u6cd5\u4e00 \u9010\u5143\u7d20\u7d2f\u4e58 import math class Solution: def productExceptSelf(self, nums: List[int]) -> List[int]: forward = [1] for num in nums: forward.append(forward[-1]*num) forward = forward[:-1] back = [1] for num in nums[::-1]: back.append(back[-1]*num) back = back[:-1][::-1] return [forward[i] * back[i] for i, num in enumerate(nums)] public class Solution { public int[] productExceptSelf(int[] nums) { int n = nums.length; int[] res = new int[n]; res[0] = 1; for (int i = 1; i < n; i++) { res[i] = res[i - 1] * nums[i - 1]; } int right = 1; for (int i = n - 1; i >= 0; i--) { res[i] *= right; right *= nums[i]; } return res; } 240.\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635II \u9898\u76ee\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22 m x n \u77e9\u9635 matrix \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a \u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002 \u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002 \u793a\u4f8b: \u73b0\u6709\u77e9\u9635 matrix \u5982\u4e0b\uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] \u7ed9\u5b9a target = 5\uff0c\u8fd4\u56de true\u3002 \u7ed9\u5b9a target = 20\uff0c\u8fd4\u56de false\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u77e9\u9635\u4e8c\u5206\u67e5\u627e \u4e8c\u5206\u67e5\u627e\uff1a \u4ece\u5de6\u4e0b\u89d2\u6216\u53f3\u4e0a\u89d2\u5f00\u59cb\u4f5c\u4e3a\u4e2d\u503c \u5982\u679c\u5c0f\u4e8etarget \u5411\u53f3 \u5982\u679c\u5927\u4e8etarget \u5411\u4e0b class Solution: def searchMatrix(self, matrix, target): \"\"\" :type matrix: List[List[int]] :type target: int :rtype: bool \u4e8c\u5206\u67e5\u627e\uff1a \u4ece\u5de6\u4e0b\u89d2\u6216\u53f3\u4e0a\u89d2\u5f00\u59cb\u4f5c\u4e3a\u4e2d\u503c \u5982\u679c\u5c0f\u4e8etarget \u5411\u53f3 \u5982\u679c\u5927\u4e8etarget \u5411\u4e0b \"\"\" if len(matrix) == 0 or len(matrix[0]) == 0: return False m = len(matrix) n = len(matrix[0]) i = m - 1 j = 0 mid = matrix[i][j] while i >= 0 and j < n: if target == matrix[i][j]: return True elif target < matrix[i][j]: i -= 1 elif target > matrix[i][j]: j += 1 return False 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd 242.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad t \u662f\u5426\u662f s \u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"anagram\", t = \"nagaram\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: s = \"rat\", t = \"car\" \u8f93\u51fa: false \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u8fdb\u9636: \u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f 242.2 \u89e3\u6cd5 242.2.1 \u65b9\u6cd5\u4e00 Hash class Solution(object): def isAnagram(self, s, t): \"\"\" :type s: str :type t: str :rtype: bool \"\"\" dic = dict() for i in s: dic.setdefault(i, 0) dic[i] += 1 for j in t: if j not in dic or dic[j] == 0: return False else: dic[j] -= 1 for key, val in dic.items(): if val != 0: return False return True Complexity analysis Time complexity : O(n)O(n). Time complexity is O(n)O(n) because accessing the counter table is a constant time operation. Space complexity : O(1)O(1). Although we do use extra space, the space complexity is O(1)O(1) because the table's size stays constant no matter how large nn is. 242.2.2 \u65b9\u6cd5\u4e8c \u6570\u7ec4 \u4e0d\u80fd\u89e3\u51b3\u8fdb\u9636\u95ee\u9898 def isAnagram2(self, s, t): # ord() : \u5b83\u4ee5\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08Unicode \u5b57\u7b26\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684 ASCII \u6570\u503c dic1, dic2 = [0]*26, [0]*26 for item in s: dic1[ord(item)-ord('a')] += 1 for item in t: dic2[ord(item)-ord('a')] += 1 return dic1 == dic2 242.2.3 \u65b9\u6cd5\u4e09 \u6392\u5e8f \u6bd4\u8f83 def isAnagram3(self, s, t): return sorted(s) == sorted(t) 260. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III [\u63a8\u8350] 260.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4f59\u6240\u6709\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002 \u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e24\u4e2a\u5143\u7d20\u3002 \u793a\u4f8b : \u8f93\u5165: [1,2,1,3,2,5] \u8f93\u51fa: [3,5] \u6ce8\u610f\uff1a \u7ed3\u679c\u8f93\u51fa\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c [5, 3] \u4e5f\u662f\u6b63\u786e\u7b54\u6848\u3002 \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u5b9e\u73b0\uff1f 260.2 \u89e3\u6cd5 260.2.1 \u65b9\u6cd5\u4e00 hash class Solution: def singleNumber(self, nums: List[int]) -> List[int]: \"\"\" \u65b9\u6cd5\u4e00: dict \"\"\" dic = dict() for num in nums: if num in dic: del dic[num] else: dic.setdefault(num, 1) return list(dic.keys()) 260.2.2 \u65b9\u6cd5\u4e8c \u4f4d\u8fd0\u7b97(\u4e8c\u904d, \u7b2c\u4e00\u904d\u5f97\u5230\u4e86\u4e24\u4e2a\u5355\u503c\u5f02\u6216, \u7b2c\u4e8c\u904d\u548c\u4e0a\u4e00\u904d\u7ed3\u679c) public class Solution { public int[] singleNumber(int[] nums) { int diff = 0; for (int num : nums) { diff ^= num; } // pick one bit as flag // (~ (diff - 1)) == -diff // x\u4ee3\u8868\u7684\u662f\u53ea\u51fa\u73b0\u4e00\u904d\u7684\u503c\u7684A B\u7684\u5f02\u6216 A^B // x & (-x) \u53d6\u5f97\u662fx\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u5c0f\u4f4d\u4e0a\u76841\u5176\u4ed6\u4f4d\u4e3a0\u4ee3\u8868\u7684\u6570\u503c // \u5219bitFlag\u4e3aA\u4e0eB\u6709\u533a\u522b\u7684\u6700\u5c0f\u4f4d\u4ee3\u8868\u7684\u503c \u5f02\u6216\uff1a\u4e0d\u4e00\u6837\u7684\u4f4d\u7f6e\u4e3a1 int bitFlag = (diff & (~ (diff - 1))); int[] res = new int[2]; for (int num : nums) { if ((num & bitFlag) == 0) { res[0] ^= num; } else { res[1] ^= num; } } return res; } } 278.\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c \u9898\u76ee\u63cf\u8ff0 \u4f60\u662f\u4ea7\u54c1\u7ecf\u7406\uff0c\u76ee\u524d\u6b63\u5728\u5e26\u9886\u4e00\u4e2a\u56e2\u961f\u5f00\u53d1\u65b0\u7684\u4ea7\u54c1\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4f60\u7684\u4ea7\u54c1\u7684\u6700\u65b0\u7248\u672c\u6ca1\u6709\u901a\u8fc7\u8d28\u91cf\u68c0\u6d4b\u3002\u7531\u4e8e\u6bcf\u4e2a\u7248\u672c\u90fd\u662f\u57fa\u4e8e\u4e4b\u524d\u7684\u7248\u672c\u5f00\u53d1\u7684\uff0c\u6240\u4ee5\u9519\u8bef\u7684\u7248\u672c\u4e4b\u540e\u7684\u6240\u6709\u7248\u672c\u90fd\u662f\u9519\u7684\u3002 \u5047\u8bbe\u4f60\u6709 n \u4e2a\u7248\u672c [1, 2, ..., n]\uff0c\u4f60\u60f3\u627e\u51fa\u5bfc\u81f4\u4e4b\u540e\u6240\u6709\u7248\u672c\u51fa\u9519\u7684\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 bool isBadVersion(version) \u63a5\u53e3\u6765\u5224\u65ad\u7248\u672c\u53f7 version \u662f\u5426\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u51fa\u9519\u3002\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002\u4f60\u5e94\u8be5\u5c3d\u91cf\u51cf\u5c11\u5bf9\u8c03\u7528 API \u7684\u6b21\u6570\u3002 \u793a\u4f8b: \u7ed9\u5b9a n = 5\uff0c\u5e76\u4e14 version = 4 \u662f\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002 \u8c03\u7528 isBadVersion(3) -> false \u8c03\u7528 isBadVersion(5) -> true \u8c03\u7528 isBadVersion(4) -> true \u6240\u4ee5\uff0c4 \u662f\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5de6\u5f00\u53f3\u95ed\u4e8c\u5206\u67e5\u627e # The isBadVersion API is already defined for you. # @param version, an integer # @return a bool # def isBadVersion(version): class Solution(object): def firstBadVersion(self, n): \"\"\" :type n: int :rtype: int \"\"\" l, r = 1, n while l < r: mid = l + (r - l) // 2 if not isBadVersion(mid): l = mid + 1 else: r = mid return l \u89e3\u6cd5\u4e8c 283.\u79fb\u52a8\u96f6 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 0 \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u793a\u4f8b: \u8f93\u5165: [0,1,0,3,12] \u8f93\u51fa: [1,3,12,0,0] \u8bf4\u660e: \u5fc5\u987b\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u80fd\u62f7\u8d1d\u989d\u5916\u7684\u6570\u7ec4\u3002 \u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u63d2\u5165\u6392\u5e8f class Solution: def moveZeroes(self, nums: List[int]) -> None: \"\"\" \u6392\u5e8f \u63d2\u5165\u6392\u5e8f \"\"\" if not nums or len(nums) == 1: return j = -1 for i in range(len(nums)): if nums[i] != 0: j += 1 nums[i], nums[j] = nums[j], nums[i] \u89e3\u6cd5\u4e8c 287.\u5bfb\u627e\u91cd\u590d\u6570 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\u5176\u6570\u5b57\u90fd\u5728 1 \u5230 n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c n\uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,3,4,2,2] \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [3,1,3,4,2] \u8f93\u51fa: 3 \u8bf4\u660e\uff1a \u4e0d\u80fd\u66f4\u6539\u539f\u6570\u7ec4\uff08\u5047\u8bbe\u6570\u7ec4\u662f\u53ea\u8bfb\u7684\uff09\u3002 \u53ea\u80fd\u4f7f\u7528\u989d\u5916\u7684 O(1) \u7684\u7a7a\u95f4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e O(n2) \u3002 \u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u6b62\u91cd\u590d\u51fa\u73b0\u4e00\u6b21\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u6392\u5e8f\u548cHash\uff08\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff09 def findDuplicate(self, nums): nums.sort() for i in range(1, len(nums)): if nums[i] == nums[i-1]: return nums[i] class Solution: def findDuplicate(self, nums): seen = set() for num in nums: if num in seen: return num seen.add(num) \u89e3\u6cd5\u4e8c \u5f17\u6d1b\u4f0a\u5fb7\u7684\u4e4c\u9f9f\u548c\u5154\u5b50\uff08\u5faa\u73af\u68c0\u6d4b\uff09 \u672c\u8d28\u4e0a\u662f\u4e2a\u5feb\u6162\u6307\u9488 \u4e4c\u9f9f\u8d70\u4e00\u6b65 \u5154\u5b50\u8d70\u4e24\u6b65 \u5f53\u76f8\u9047\u65f6\u77e5\u9053\u5154\u5b50\u6bd4\u4e4c\u9f9f\u5feb\u4e00\u500d\uff0c\u5373\u4e4c\u9f9f\u518d\u7ee7\u7eed\u8d70\uff0c\u5154\u5b50\u4ece\u5934\u8d70 \u4f7f\u7528\u6570\u7ec4\u4e2d\u7684\u503c\u4f5c\u4e3a\u7d22\u5f15\u4e0b\u6807\u8fdb\u884c\u904d\u5386\uff0c\u904d\u5386\u7684\u7ed3\u679c\u80af\u5b9a\u662f\u4e00\u4e2a\u73af\uff08\u6709\u4e00\u4e2a\u91cd\u590d\u5143\u7d20\uff09 \u68c0\u6d4b\u91cd\u590d\u5143\u7d20\u95ee\u9898\u8f6c\u6362\u6210\u68c0\u6d4b\u73af\u7684\u5165\u53e3 \u4e3a\u4e86\u627e\u5230\u73af\u7684\u5165\u53e3\uff0c\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u6b65\u9aa4\uff1a \u8bbe\u7f6e\u4e24\u4e2a\u5feb\u6162\u6307\u9488\uff0c fast\u6bcf\u6b21\u8d70\u4e24\u6b65\uff0cslow\u6bcf\u6b21\u8d70\u4e00\u6b65\uff0c\u6700\u7ec8\u8d70\u4e86slow\u8d70\u4e86n\u6b65\u4e0efast\u76f8\u9047\uff0cfast\u8d70\u4e862*n\uff0cfast\u53ef\u80fd\u6bd4slow\u591a\u9976\u4e86\u73af\u7684i\u5708\uff0c\u5f97\u5230\u73af\u7684\u5468\u957f\u4e3an/i slow\u6307\u9488\u7ee7\u7eed\u8d70, \u4e14\u53e6\u8bbe\u7b2c\u4e09\u4e2a\u6307\u9488\u6bcf\u6b21\u8d70\u4e00\u6b65\uff0c\u4e24\u4e2a\u6307\u9488\u5fc5\u5b9a\u5728\u5165\u53e3\u5904\u76f8\u9047 \u5047\u8bbe\u73af\u7684\u5165\u53e3\u548c\u8d77\u70b9\u7684\u8ddd\u79bb\u65f6m \u5f53\u7b2c\u4e09\u4e2a\u6307\u9488\u8d70\u4e86m\u6b65\u5230\u73af\u7684\u5165\u53e3\u65f6 slow\u521a\u597d\u8d70\u4e86n + m\u6b65\uff0c\u6362\u53e5\u8bdd\u8bf4\u65f6\u9976\u4e86\u73afi\u5708\uff08\u73af\u7684\u5468\u957f\u4e3an/i\uff09\u52a0m\u6b65\uff08\u8d77\u70b9\u5230\u5165\u53e3\u7684\u8ddd\u79bb\uff09 \u5f97\u5230\u76f8\u9047\u7684\u662f\u73af\u7684\u5165\u53e3\uff0c\u5165\u53e3\u5143\u7d20\u5373\u4e3a\u91cd\u590d\u5143\u7d20 class Solution: def findDuplicate(self, nums): # Find the intersection point of the two runners. slow = nums[0] fast = nums[0] while True: slow = nums[slow] fast = nums[nums[fast]] # \u5728\u6570\u7ec4\u4e2d\u76f8\u9047\u4e86\uff0c\u5faa\u73af\u7684\u5165\u53e3\u5143\u7d20\u5373\u662f\u91cd\u590d\u5143\u7d20 if slow == fast: break # \u627e\u5230\u5faa\u73af\u7684\u5165\u53e3\u5143\u7d20 ptr1 = nums[0] ptr2 = slow while ptr1 != ptr2: ptr1 = nums[ptr1] ptr2 = nums[ptr2] return ptr1 289.\u751f\u547d\u6e38\u620f \u9898\u76ee\u63cf\u8ff0 \u6839\u636e\u767e\u5ea6\u767e\u79d1\uff0c\u751f\u547d\u6e38\u620f\uff0c\u7b80\u79f0\u4e3a\u751f\u547d\uff0c\u662f\u82f1\u56fd\u6570\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u4f55\u987f\u00b7\u5eb7\u5a01\u57281970\u5e74\u53d1\u660e\u7684\u7ec6\u80de\u81ea\u52a8\u673a\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b m \u00d7 n \u4e2a\u683c\u5b50\u7684\u9762\u677f\uff0c\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u7ec6\u80de\u3002\u6bcf\u4e2a\u7ec6\u80de\u5177\u6709\u4e00\u4e2a\u521d\u59cb\u72b6\u6001 live\uff081\uff09\u5373\u4e3a\u6d3b\u7ec6\u80de\uff0c \u6216 dead\uff080\uff09\u5373\u4e3a\u6b7b\u7ec6\u80de\u3002\u6bcf\u4e2a\u7ec6\u80de\u4e0e\u5176\u516b\u4e2a\u76f8\u90bb\u4f4d\u7f6e\uff08\u6c34\u5e73\uff0c\u5782\u76f4\uff0c\u5bf9\u89d2\u7ebf\uff09\u7684\u7ec6\u80de\u90fd\u9075\u5faa\u4ee5\u4e0b\u56db\u6761\u751f\u5b58\u5b9a\u5f8b\uff1a \u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u7684\u6d3b\u7ec6\u80de\u6570\u5c11\u4e8e\u4e24\u4e2a\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u6b7b\u4ea1\uff1b \u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u6709\u4e24\u4e2a\u6216\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u4ecd\u7136\u5b58\u6d3b\uff1b \u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u6709\u8d85\u8fc7\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u6b7b\u4ea1\uff1b \u5982\u679c\u6b7b\u7ec6\u80de\u5468\u56f4\u6b63\u597d\u6709\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6b7b\u7ec6\u80de\u590d\u6d3b\uff1b \u6839\u636e\u5f53\u524d\u72b6\u6001\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u9762\u677f\u4e0a\u7ec6\u80de\u7684\u4e0b\u4e00\u4e2a\uff08\u4e00\u6b21\u66f4\u65b0\u540e\u7684\uff09\u72b6\u6001\u3002\u4e0b\u4e00\u4e2a\u72b6\u6001\u662f\u901a\u8fc7\u5c06\u4e0a\u8ff0\u89c4\u5219\u540c\u65f6\u5e94\u7528\u4e8e\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u6bcf\u4e2a\u7ec6\u80de\u6240\u5f62\u6210\u7684\uff0c\u5176\u4e2d\u7ec6\u80de\u7684\u51fa\u751f\u548c\u6b7b\u4ea1\u662f\u540c\u65f6\u53d1\u751f\u7684\u3002 \u793a\u4f8b: \u8f93\u5165: [ [0,1,0], [0,0,1], [1,1,1], [0,0,0] ] \u8f93\u51fa: [ [0,0,0], [1,0,1], [0,1,1], [0,1,0] ] \u8fdb\u9636: \u4f60\u53ef\u4ee5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u89e3\u51b3\u672c\u9898\u5417\uff1f\u8bf7\u6ce8\u610f\uff0c\u9762\u677f\u4e0a\u6240\u6709\u683c\u5b50\u9700\u8981\u540c\u65f6\u88ab\u66f4\u65b0\uff1a\u4f60\u4e0d\u80fd\u5148\u66f4\u65b0\u67d0\u4e9b\u683c\u5b50\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u4eec\u7684\u66f4\u65b0\u540e\u7684\u503c\u518d\u66f4\u65b0\u5176\u4ed6\u683c\u5b50\u3002 \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4\u6765\u8868\u793a\u9762\u677f\u3002\u539f\u5219\u4e0a\uff0c\u9762\u677f\u662f\u65e0\u9650\u7684\uff0c\u4f46\u5f53\u6d3b\u7ec6\u80de\u4fb5\u5360\u4e86\u9762\u677f\u8fb9\u754c\u65f6\u4f1a\u9020\u6210\u95ee\u9898\u3002\u4f60\u5c06\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff1f \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u77e9\u9635\u7684\u5143\u7d20\u662f\u540c\u65f6\u6539\u53d8\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u7528\u66f4\u65b0\u540e\u7684\u5143\u7d20\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u662f\u539f\u5730\u7b97\u6cd5\u53c8\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\u5b58\u50a8\u66f4\u65b0\u540e\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u60f3\u5230\u4e86\u7528\u539f\u77e9\u9635\u540c\u65f6\u4fdd\u5b58\u539f\u59cb\u6570\u636e\u548c\u65b0\u6570\u636e\u3002 \u4e3a\u4e86\u540c\u65f6\u4fdd\u5b58\u4e24\u4e2a\u6570\u636e\uff0c\u90a3\u4e48\u539f\u6765\u76840\u548c1\u4e24\u4e2a\u53d8\u91cf\u5c31\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\u4e86\uff0c\u7531\u4e8e\u4e00\u5171\u6709\u56db\u79cd\u53ef\u80fd\uff0c\u6d3b-\u6d3b\uff0c\u6d3b-\u6b7b\uff0c\u6b7b-\u6d3b\uff0c\u6b7b-\u6b7b\u3002\u6240\u4ee5\u4f7f\u7528\u56db\u4e2a\u6807\u8bc6\u7b26\u6765\u8bb0\u5f55\u4fe1\u606f\u3002 class Solution: def gameOfLife(self, board: List[List[int]]) -> None: \"\"\" Do not return anything, modify board in-place instead. \"\"\" m = len(board) if not m: return n = len(board[0]) if not n: return for i in range(m): for j in range(n): cnt = 0 # \u5de6 \u5de6\u4e0a \u4e0a \u53f3\u4e0a \u53f3 \u53f3\u4e0b \u4e0b \u5de6\u4e0b directions = [(0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1)] for dx, dy in directions: if (i + dx) >= 0 and (i + dx) < m and (j + dy) >= 0 and (j + dy) < n and board[i + dx][j + dy] in [1, 11, -9]: cnt += 1 print((i, j, cnt)) if cnt == 3 or (board[i][j] == 1 and cnt == 2): board[i][j] += 10 else: board[i][j] -= 10 for i in range(m): for j in range(n): if board[i][j] > 0: board[i][j] = 1 else: board[i][j] = 0 \u89e3\u6cd5\u4e8c \u4e0a\u9762\u4ee3\u7801\u4f18\u5316 \u53ea\u4fee\u6539 | \u6d3b -> \u6b7b: -1 | \u6b7b -> \u6d3b:2 | \u5176\u4ed6\u4e0d\u6539\u53d8 303. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u4e0d\u53ef\u53d8 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15 i \u5230 j (i \u2264 j) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b i, j \u4e24\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a nums = [-2, 0, 3, -5, 2, -1]\uff0c\u6c42\u548c\u51fd\u6570\u4e3a sumRange() sumRange(0, 2) -> 1 sumRange(2, 5) -> -1 sumRange(0, 5) -> -3 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e0d\u53ef\u53d8\u3002 \u4f1a\u591a\u6b21\u8c03\u7528 sumRange \u65b9\u6cd5\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u524d\u7f00\u548c class NumArray: def __init__(self, nums: List[int]): self.cumsum = [0] for num in nums: self.cumsum.append(self.cumsum[-1] + num) def sumRange(self, i: int, j: int) -> int: return self.cumsum[j + 1] - self.cumsum[i] # Your NumArray object will be instantiated and called as such: # obj = NumArray(nums) # param_1 = obj.sumRange(i,j) \u89e3\u6cd5\u4e8c 304. \u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22 - \u77e9\u9635\u4e0d\u53ef\u53d8 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u8ba1\u7b97\u5176\u5b50\u77e9\u5f62\u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u8be5\u5b50\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u4e3a (row1, col1) \uff0c\u53f3\u4e0b\u89d2\u4e3a (row2, col2)\u3002 \u4e0a\u56fe\u5b50\u77e9\u9635\u5de6\u4e0a\u89d2 (row1, col1) = (2, 1) \uff0c\u53f3\u4e0b\u89d2(row2, col2) = (4, 3)\uff0c\u8be5\u5b50\u77e9\u5f62\u5185\u5143\u7d20\u7684\u603b\u548c\u4e3a 8\u3002 \u793a\u4f8b: \u7ed9\u5b9a matrix = [ [3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5] ] sumRegion(2, 1, 4, 3) -> 8 sumRegion(1, 1, 2, 2) -> 11 sumRegion(1, 2, 2, 4) -> 12 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u77e9\u9635\u4e0d\u53ef\u53d8\u3002 \u4f1a\u591a\u6b21\u8c03\u7528 sumRegion \u65b9\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe row1 \u2264 row2 \u4e14 col1 \u2264 col2\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u524d\u7f00\u548c class NumMatrix: \"\"\" \u7c7b\u4f3c\u4e8e\u524d\u7f00\u548c \u6211\u4eec\u5b58\u50a8\u4ee5\u67d0\u4e00\u7ed3\u70b9\u4e3a\u53f3\u4e0b\u8fb9\u754c\u7684\u6240\u6709\u524d\u7f00 \"\"\" def __init__(self, matrix: List[List[int]]): if not matrix or len(matrix) == 0 or len(matrix[0]) == 0: return m = len(matrix) n = len(matrix[0]) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): dp[i][j] = matrix[i - 1][j - 1] + dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1] self.cumsum = dp1 def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int: return self.cumsum[row2 + 1][col2 + 1] - self.cumsum[row2 + 1][col1] - self.cumsum[row1][col2 + 1] + self.cumsum[row1][col1] # Your NumMatrix object will be instantiated and called as such: # obj = NumMatrix(matrix) # param_1 = obj.sumRegion(row1,col1,row2,col2) \u89e3\u6cd5\u4e8c 324.\u6446\u52a8\u6392\u5e8f [\u63a8\u8350] \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4 nums\uff0c\u5c06\u5b83\u91cd\u65b0\u6392\u5217\u6210 nums[0] < nums[1] > nums[2] < nums[3]... \u7684\u987a\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [1, 5, 1, 1, 6, 4] \u8f93\u51fa: \u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f [1, 4, 1, 5, 1, 6] \u793a\u4f8b 2: \u8f93\u5165: nums = [1, 3, 2, 2, 3, 1] \u8f93\u51fa: \u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f [2, 3, 1, 3, 1, 2] \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u4f1a\u5f97\u5230\u6709\u6548\u7684\u7ed3\u679c\u3002 \u8fdb\u9636: \u4f60\u80fd\u7528 O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c / \u6216\u539f\u5730 O(1) \u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u6392\u5e8f O(nlogn) \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u524d\u534a\u6bb5\u5012\u5e8f\u586b\u5165\u5947\u6570\u4e0b\u6807\uff0c\u5c06\u540e\u534a\u6bb5\u5012\u5e8f\u586b\u5165\u5076\u6570\u4e0b\u6807\uff0c\u5176\u539f\u7406\u662f\u5982\u679c\u9898\u76ee\u6709\u89e3\uff0c\u5219\u5bf9\u4e8e\u6392\u597d\u5e8f\u7684\u6570\u7ec4\uff0c\u95f4\u9694\u8d85\u8fc7n/2\u7684\u4e24\u4e2a\u5143\u7d20\u5fc5\u4e0d\u76f8\u7b49\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\u3002 def wiggleSort(self, nums): nums.sort() half = len(nums[::2]) nums[::2], nums[1::2] = nums[:half][::-1], nums[half:][::-1] \u89e3\u6cd5\u4e8c \u865a\u62df\u7d22\u5f15 + \u8377\u5170\u56fd\u65d7\u95ee\u9898\uff08\u4e09\u8272\u7403\u95ee\u9898\uff09 \u5148\u7528findKthLargestElement\u7684\u601d\u8def\u5c06\u6570\u7ec4\u8fdb\u884cpartition\uff0c\u8ba9median\u7684\u5de6\u8fb9\u5168\u90fd\u5927\u4e8emedian\uff0c\u53f3\u8fb9\u5168\u90fd\u5c0f\u4e8emedian\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c[1,4,5,6,1,1] => [5,6,4,1,1,1] \u5229\u7528virtual indexing\u7684\u6027\u8d28\uff0c\u6761\u4ef6\u4e3a mapIndex = (1 + 2 * index) % (n | 1) \uff0cn \u4ee3\u8868\u6570\u7ec4\u4e2a\u6570 n | 1\u4f5c\u7528 \u6700\u4f4e\u4f4d\u7f6e1\uff0c \u8ba9\u5947\u6570\u4e0d\u53d8 \u5076\u6570\u52a01 \u8fd9\u4e48\u6620\u5c04\u7684\u539f\u56e0\u662f\u8ba9median\u5de6\u9762\u7684\u5728odd index, \u8ba9median\u53f3\u9762\u7684\u5728Even index \u53ef\u4ee5\u5c06index\u8fd9\u6837\u8f6c\u6362 - index 0 1 2 3 4 5 mapp 1 3 5 0 2 4 \u89e3\u9898\u601d\u8def\uff1a \u7528quickSelect\u65b9\u6cd5\u627e\u5230median \u5229\u7528sort color\u7684\u65b9\u6cd5\uff08 \u8377\u5170\u56fd\u65d7\u95ee\u9898 \uff09\uff0c\u5bf9mapped index\u6240\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u4ea4\u6362\u3002 void wiggleSort(vector<int>& nums) { int n = nums.size(); // Find a median. auto midptr = nums.begin() + n / 2; nth_element(nums.begin(), midptr, nums.end()); int mid = *midptr; // Index-rewiring. #define A(i) nums[(1+2*(i)) % (n|1)] // 3-way-partition-to-wiggly in O(n) time with O(1) space. // \u76ee\u7684\u8ba9\u865a\u62df\u7d22\u5f15\u7b26\u5408 big ... big median small .. small \u7684\u5f62\u5f0f\uff0c\u539f\u59cb\u6570\u7ec4\u5c31\u53d8\u6210\u4e86\u6447\u6446\u5e8f\u5217 int i = 0, j = 0, k = n - 1; while (j <= k) { if (A(j) > mid) swap(A(i++), A(j++)); else if (A(j) < mid) swap(A(j), A(k--)); else j++; } } public void wiggleSort(int[] nums) { int median = findKthLargestElement(nums, nums.length / 2); int red = 0; int blue = nums.length - 1; int n = nums.length; int i =0; while(i <= blue) { if (nums[mapIndex(i, n)] > median) { swap(nums, mapIndex(red, n), mapIndex(i, n)); red++; i++; } else if (nums[mapIndex(i, n)] < median) { swap(nums, mapIndex(blue, n), mapIndex(i, n)); blue--; } else { i++; } } return; } private void swap(int[] nums, int i, int j) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } private int mapIndex(int index, int n) { return (1 + 2 * index) % (n | 1); } 334.\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6570\u7ec4\uff0c\u5224\u65ad\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a 3 \u7684\u9012\u589e\u5b50\u5e8f\u5217\u3002 \u6570\u5b66\u8868\u8fbe\u5f0f\u5982\u4e0b: \u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684 i, j, k, \u4e14\u6ee1\u8db3 0 \u2264 i < j < k \u2264 n-1\uff0c \u4f7f\u5f97 arr[i] < arr[j] < arr[k] \uff0c\u8fd4\u56de true ; \u5426\u5219\u8fd4\u56de false \u3002 \u8bf4\u660e: \u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1) \u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: [5,4,3,2,1] \u8f93\u51fa: false \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u8d2a\u5fc3 \u5148\u8bf4\u4e0b\u8fd9\u9053\u9898\u7684\u601d\u8def\uff1a \u9996\u5148\u627e\u5230\u4e00\u4e2a\u76f8\u5bf9\u5c0f\u7684\u503c\uff0c\u7136\u540e\u627e\u5230\u6bd4\u8fd9\u4e2a\u5c0f\u4e00\u70b9\u7684\u503c\u5927\u7684\u503c(\u4e2d\u95f4\u503c)\uff0c\u7136\u540e\u770b\u80fd\u591f\u5728\u6700\u540e\u627e\u5230\u6bd4\u4e2d\u95f4\u503c\u5927\u7684\u503c\u3002 \u6211\u6765\u8bf4\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u601d\u8def\u80fd\u4fdd\u8bc1\u8986\u76d6\u6240\u6709\u7684\u60c5\u51b5\u3002 \u9996\u5148\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u7136\u540e\u627e\u4e0d\u5230\u4e2d\u95f4\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u5fc5\u7136\u4e0d\u5305\u542b\u9012\u589e\u7684\u4e09\u4e2a\u6570\uff08\u56e0\u4e3a\u8fde\u9012\u589e\u7684\u4e24\u4e2a\u6570\u90fd\u627e\u4e0d\u5230\uff09\u3002 \u7136\u540e\u5047\u8bbe\u6211\u4eec\u627e\u5230\u4e86\u4e24\u4e2a\u9012\u589e\u7684\u503c\uff0c\u90a3\u4e48\u5982\u679c\u4e0b\u4e00\u4e2a\u503c\u5c0f\u4e8e\u6700\u5c0f\u503c\uff0c\u6211\u4eec\u5c31\u5e94\u8be5\u5c06\u6700\u5c0f\u503c\u7684\u6307\u9488\u5b9a\u4f4d\u5230\u8fd9\u4e2a\u503c\u4e0a\u3002\u6211\u4eec\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u6700\u5c0f\u503c\uff0c\u9632\u6b62\u540e\u9762\u51fa\u73b0\u4e86\u66f4\u5c0f\u7684\u4e00\u5bf9\u9012\u589e\u503c\uff0c\u800c\u5373\u4f7f\u4e0d\u51fa\u73b0\uff0c\u4e5f\u4e0d\u59a8\u788d\u6211\u4eec\u627e\u5230\u89e3\uff08\u56e0\u4e3a\u6700\u7ec8\u662f\u770b\u80fd\u5426\u627e\u5230\u5927\u4e8e\u4e2d\u95f4\u503c\u7684\u503c\uff09\u3002 \u5982\u679c\u4e0b\u4e00\u4e2a\u503c\u5927\u4e8e\u6700\u5c0f\u503c\uff0c\u4e14\u5c0f\u4e8e\u4e2d\u95f4\u503c\uff0c\u5219\u6211\u4eec\u4f7f\u7528\u8be5\u503c\u4f5c\u4e3a\u4e2d\u95f4\u503c(\u56e0\u4e3a\u5982\u679c\u6700\u5c0f\u7684\u4e2d\u95f4\u503c\u90fd\u5f97\u4e0d\u5230\u89e3\uff0c\u90a3\u4e48\u5c31\u662ffalse\uff0c\u8fd9\u6837\u4e5f\u4fdd\u8bc1\u4e86\u8986\u76d6\u6240\u6709\u7684\u60c5\u51b5)\u3002 \u6700\u540e\uff0c\u5982\u679c\u627e\u5230\u4e86\u5927\u4e8e\u4e2d\u95f4\u503c\u7684\u503c\uff0c\u5219\u4e3atrue. class Solution { public boolean increasingTriplet(int[] nums) { int one = Integer.MAX_VALUE; int two = Integer.MAX_VALUE; for (int num : nums) { if (num <= one) { one = num; } else if (num <= two) { two = num; } else { return true; } return false; } } \u89e3\u6cd5\u4e8c 341.\u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5d4c\u5957\u7684\u6574\u578b\u5217\u8868\u3002\u8bbe\u8ba1\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f7f\u5176\u80fd\u591f\u904d\u5386\u8fd9\u4e2a\u6574\u578b\u5217\u8868\u4e2d\u7684\u6240\u6709\u6574\u6570\u3002 \u5217\u8868\u4e2d\u7684\u9879\u6216\u8005\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[1,1],2,[1,1]] \u8f93\u51fa: [1,1,2,1,1] \u89e3\u91ca: \u901a\u8fc7\u91cd\u590d\u8c03\u7528 next \u76f4\u5230 hasNext \u8fd4\u56defalse\uff0cnext \u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: [1,1,2,1,1]\u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,[4,[6]]] \u8f93\u51fa: [1,4,6] \u89e3\u91ca: \u901a\u8fc7\u91cd\u590d\u8c03\u7528 next \u76f4\u5230 hasNext \u8fd4\u56defalse\uff0cnext \u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: [1,4,6]\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u6808 # \"\"\" # This is the interface that allows for creating nested lists. # You should not implement it, or speculate about its implementation # \"\"\" #class NestedInteger(object): # def isInteger(self): # \"\"\" # @return True if this NestedInteger holds a single integer, rather than a nested list. # :rtype bool # \"\"\" # # def getInteger(self): # \"\"\" # @return the single integer that this NestedInteger holds, if it holds a single integer # Return None if this NestedInteger holds a nested list # :rtype int # \"\"\" # # def getList(self): # \"\"\" # @return the nested list that this NestedInteger holds, if it holds a nested list # Return None if this NestedInteger holds a single integer # :rtype List[NestedInteger] # \"\"\" class NestedIterator(object): def __init__(self, nestedList): \"\"\" \u501f\u7528stack \"\"\" \"\"\" Initialize your data structure here. :type nestedList: List[NestedInteger] \"\"\" self.stack = nestedList[::-1] if nestedList else [] def next(self): \"\"\" :rtype: int \"\"\" return self.stack.pop() def hasNext(self): \"\"\" :rtype: bool \"\"\" if self.stack: top = self.stack.pop() while not top.isInteger(): self.stack += top.getList()[::-1] if self.stack: top = self.stack.pop() else: return False self.stack.append(top) return True else: return False # Your NestedIterator object will be instantiated and called as such: # i, v = NestedIterator(nestedList), [] # while i.hasNext(): v.append(i.next()) \u89e3\u6cd5\u4e8c 347. \u524dK\u4e2a\u9ad8\u9891\u5143\u7d20 [\u63a8\u8350] 347.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d k \u9ad8\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [1,1,1,2,2,3], k = 2 \u8f93\u51fa: [1,2] \u793a\u4f8b 2: \u8f93\u5165: nums = [1], k = 1 \u8f93\u51fa: [1] \u8bf4\u660e\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684 k \u603b\u662f\u5408\u7406\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u4e2d\u4e0d\u76f8\u540c\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002 \u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u5fc5\u987b \u4f18\u4e8e O( n log n ) , n \u662f\u6570\u7ec4\u7684\u5927\u5c0f\u3002 347.2 \u89e3\u6cd5 \u8be5\u9898\u601d\u8def\u5bb9\u6613\u4f46\u7f16\u7801\u96be\u3002\u5f88\u5bb9\u6613\u60f3\u51fa\u8981\u7edf\u8ba1\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u53d6\u51fa\u5176\u4e2d\u524d k \u9ad8\u7684\u3002\u4f46\u91c7\u7528\u4f55\u79cd\u6570\u636e\u7ed3\u6784\u5c31\u6bd4\u8f83\u8bb2\u7a76\u4e86\u3002 \u7b2c\u4e00\u79cd\u601d\u8def\u662f\u5229\u7528\u4f18\u5148\u961f\u5217\uff0c\u5373\u6700\u5927\u5806\u3002\u8fd9\u91cc\u6ce8\u610f\u5b58\u5165\u5806\u4e2d\u7684\u5143\u7d20\u662f pair \u7c7b\u578b\u7684\uff0c\u4e14\u4ee5\u51fa\u73b0\u7684\u6b21\u6570\u4e3a key,\u503c\u4e3a val.\u56e0\u4e3a pair \u7684\u6392\u5e8f\u662f\u5148\u6bd4\u8f83 first\uff0c\u518d\u6bd4\u8f83 second\u3002 \u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5229\u7528\u6876\u6392\u5e8f\uff0c10\u4e2a\u5143\u7d20\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u662f0 ~ 10\uff0c\u6240\u4ee5\u6876\u7684\u4e2a\u6570\u4e3anums.size() + 1\u3002\u6ce8\u610f\u53ef\u80fd\u6709\u76f8\u540c\u6b21\u6570\u7684\u5143\u7d20\u51fa\u73b0\uff0c\u56e0\u6b64\u6876\u4e2d\u5b58\u50a8\u7684\u662f\u4e00\u4e2a\u6570\u7ec4\u800c\u975e\u5355\u4e00\u5143\u7d20\u3002 347.2.1 \u65b9\u6cd5\u4e00 hash+\u5806\u6392\u5e8f import heapq class Solution: def topKFrequent(self, nums: List[int], k: int) -> List[int]: \"\"\" 1.\u5148\u8fdb\u884cHash: key:num val:count of num 2.\u6cd5\u4e00 \u5806\u6392\u5e8f: \u6211\u4eec\u53ef\u4ee5\u7528\u5806\u6392\u5e8f\u6765\u6309\u7167\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\u3002 \u4f7f\u7528\u4e00\u4e2a\u6700\u5927\u5806\u6765\u6309\u7167\u6620\u5c04\u6b21\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5217 \u6cd5\u4e8c \u6876\u6392\u5e8f: \u5728\u5efa\u7acb\u597d\u6570\u5b57\u548c\u5176\u51fa\u73b0\u6b21\u6570\u7684\u6620\u5c04\u540e\uff0c\u6211\u4eec\u6309\u7167\u5176\u51fa\u73b0\u6b21\u6570\u5c06\u6570\u5b57\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e2d\u53bb\uff0c \u8fd9\u6837\u6211\u4eec\u4ece\u6876\u7684\u540e\u9762\u5411\u524d\u9762\u904d\u5386\uff0c\u6700\u5148\u5f97\u5230\u7684\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57\uff0c \u6211\u4eec\u627e\u5230k\u4e2a\u540e\u8fd4\u56de\u5373\u53ef\uff0c\u53c2\u89c1\u4ee3\u7801\u5982\u4e0b\uff1a [Note] headp\u53ea\u63d0\u4f9b\u6700\u5c0f\u5806\u7684\u5b9e\u73b0, \u60f3\u7528\u6700\u5927\u5806\u4e00\u4e2a\u529e\u6cd5\u662f\u52a0\u8d1f\u53f7 \"\"\" # 1.Hash nums count cnt_dict = dict() for num in nums: cnt_dict.setdefault(num, 0) cnt_dict[num] += 1 # \u5806\u6392\u5e8f heap = [tuple([val, key]) for key, val in cnt_dict.items()] return [item[1] for item in heapq.nlargest(k, heap)] 347.2.2 \u65b9\u6cd5\u4e8c hash+\u6876\u6392\u5e8f class Solution: def topKFrequent(self, nums: List[int], k: int) -> List[int]: \"\"\" 1.\u5148\u8fdb\u884cHash: key:num val:count of num 2.\u6cd5\u4e00 \u5806\u6392\u5e8f: \u6211\u4eec\u53ef\u4ee5\u7528\u5806\u6392\u5e8f\u6765\u6309\u7167\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\u3002 \u4f7f\u7528\u4e00\u4e2a\u6700\u5927\u5806\u6765\u6309\u7167\u6620\u5c04\u6b21\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5217 \u6cd5\u4e8c \u6876\u6392\u5e8f: \u5728\u5efa\u7acb\u597d\u6570\u5b57\u548c\u5176\u51fa\u73b0\u6b21\u6570\u7684\u6620\u5c04\u540e\uff0c\u6211\u4eec\u6309\u7167\u5176\u51fa\u73b0\u6b21\u6570\u5c06\u6570\u5b57\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e2d\u53bb\uff0c \u8fd9\u6837\u6211\u4eec\u4ece\u6876\u7684\u540e\u9762\u5411\u524d\u9762\u904d\u5386\uff0c\u6700\u5148\u5f97\u5230\u7684\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57\uff0c \u6211\u4eec\u627e\u5230k\u4e2a\u540e\u8fd4\u56de\u5373\u53ef\uff0c\u53c2\u89c1\u4ee3\u7801\u5982\u4e0b\uff1a [Note] headp\u53ea\u63d0\u4f9b\u6700\u5c0f\u5806\u7684\u5b9e\u73b0, \u60f3\u7528\u6700\u5927\u5806\u4e00\u4e2a\u529e\u6cd5\u662f\u52a0\u8d1f\u53f7 \"\"\" # 1.Hash nums count cnt_dict = dict() for num in nums: cnt_dict.setdefault(num, 0) cnt_dict[num] += 1 # 2.\u6876\u6392\u5e8f min_cnt, max_cnt = min(cnt_dict.values()), max(cnt_dict.values()) # \u5efa\u7acb\u6876 c = [[] for i in range(max_cnt - min_cnt + 1)] for num, cnt in cnt_dict.items(): c[cnt - min_cnt].append(num) result = [] for item in c[::-1]: if k == 0: return result if item == []: continue else: result.extend(item) k = k - len(item) if k == 0: return result public List<Integer> topKFrequent(int[] nums, int k) { List<Integer>[] bucket = new List[nums.length + 1]; Map<Integer, Integer> frequencyMap = new HashMap<Integer, Integer>(); for (int n : nums) { frequencyMap.put(n, frequencyMap.getOrDefault(n, 0) + 1); } for (int key : frequencyMap.keySet()) { int frequency = frequencyMap.get(key); if (bucket[frequency] == null) { bucket[frequency] = new ArrayList<>(); } bucket[frequency].add(key); } List<Integer> res = new ArrayList<>(); for (int pos = bucket.length - 1; pos >= 0 && res.size() < k; pos--) { if (bucket[pos] != null) { res.addAll(bucket[pos]); } } return res; } 347.2.3 collections.Counter \u8ba1\u6570api import collections class Solution: def topKFrequent(self, nums: List[int], k: int) -> List[int]: \"\"\" https://docs.python.org/3.6/library/collections.html#collections.Counter A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages. \"\"\" return [key for key, val in collections.Counter(nums).most_common(k)] 375.\u731c\u6570\u5b57\u5927\u5c0fII[[\u63a8\u8350]] \u9898\u76ee\u63cf\u8ff0 \u6211\u4eec\u6b63\u5728\u73a9\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u6e38\u620f\u89c4\u5219\u5982\u4e0b\uff1a \u6211\u4ece 1 \u5230 n \u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\uff0c\u4f60\u6765\u731c\u6211\u9009\u4e86\u54ea\u4e2a\u6570\u5b57\u3002 \u6bcf\u6b21\u4f60\u731c\u9519\u4e86\uff0c\u6211\u90fd\u4f1a\u544a\u8bc9\u4f60\uff0c\u6211\u9009\u7684\u6570\u5b57\u6bd4\u4f60\u7684\u5927\u4e86\u6216\u8005\u5c0f\u4e86\u3002 \u7136\u800c\uff0c\u5f53\u4f60\u731c\u4e86\u6570\u5b57 x \u5e76\u4e14\u731c\u9519\u4e86\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u652f\u4ed8\u91d1\u989d\u4e3a x \u7684\u73b0\u91d1\u3002\u76f4\u5230\u4f60\u731c\u5230\u6211\u9009\u7684\u6570\u5b57\uff0c\u4f60\u624d\u7b97\u8d62\u5f97\u4e86\u8fd9\u4e2a\u6e38\u620f\u3002 \u793a\u4f8b: n = 10, \u6211\u9009\u62e9\u4e868. \u7b2c\u4e00\u8f6e: \u4f60\u731c\u6211\u9009\u62e9\u7684\u6570\u5b57\u662f5\uff0c\u6211\u4f1a\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5927\u4e00\u4e9b\uff0c\u7136\u540e\u4f60\u9700\u8981\u652f\u4ed85\u5757\u3002 \u7b2c\u4e8c\u8f6e: \u4f60\u731c\u662f7\uff0c\u6211\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5927\u4e00\u4e9b\uff0c\u4f60\u652f\u4ed87\u5757\u3002 \u7b2c\u4e09\u8f6e: \u4f60\u731c\u662f9\uff0c\u6211\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5c0f\u4e00\u4e9b\uff0c\u4f60\u652f\u4ed89\u5757\u3002 \u6e38\u620f\u7ed3\u675f\u30028 \u5c31\u662f\u6211\u9009\u7684\u6570\u5b57\u3002 \u4f60\u6700\u7ec8\u8981\u652f\u4ed8 5 + 7 + 9 = 21 \u5757\u94b1\u3002 \u7ed9\u5b9a n \u2265 1\uff0c\u8ba1\u7b97\u4f60\u81f3\u5c11\u9700\u8981\u62e5\u6709\u591a\u5c11\u73b0\u91d1\u624d\u80fd\u786e\u4fdd\u4f60\u80fd\u8d62\u5f97\u8fd9\u4e2a\u6e38\u620f\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 dp \u9012\u5f52+\u8bb0\u5fc6\u5316 state: dp[s][e]: \u5728s\u5230e\u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u6570\u7684\u6700\u5c11\u80dc\u5229\u73b0\u91d1 state transfer: \u5728s\u5230e\u4e2d\u904d\u5386\u9009\u62e9\u4e00\u4e2a\u6570\u5b57, \u8ba1\u7b97\u6700\u5c11\u73b0\u91d1 \u4ece\u6240\u6709\u904d\u5386\u7ed3\u679c\u9009\u62e9\u6700\u5c0f\u7684 class Solution { public int getMoneyAmount(int n) { int[][] table = new int[n+1][n+1]; return DP(table, 1, n); } int DP(int[][] t, int s, int e){ if (s >= e) return 0; if (t[s][e] != 0) return t[s][e]; int res = Integer.MAX_VALUE; for (int x = s; x <= e; x++){ // key: state transfer int tmp = x + Math.max(DP(t, s, x - 1), DP(t, x + 1, e)); res = Math.min(res, tmp); } t[s][e] = res; return res; } } \u89e3\u6cd5\u4e8c dp trick state: dp[s][e]: \u5728s\u5230e\u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u6570\u7684\u6700\u5c11\u80dc\u5229\u73b0\u91d1 state transfer: \u5728s\u5230e\u4e2d\u904d\u5386\u9009\u62e9\u4e00\u4e2a\u6570\u5b57, \u8ba1\u7b97\u6700\u5c11\u73b0\u91d1 \u4ece\u6240\u6709\u904d\u5386\u7ed3\u679c\u9009\u62e9\u6700\u5c0f\u7684 trick: j\u4ece\u5c0f\u5230\u5927\u904d\u5386, i\u4ece\u5927\u5230\u5c0f\u904d\u5386 \u53ef\u4ee5\u627e\u5230gap\u7531\u5c0f\u5230\u5927\u7684dp class Solution { public int getMoneyAmount(int n) { int[][] dp = new int[n+1][n+1]; for (int j = 2; j < n + 1; j++){ for (int i = j - 1; i > 0; i--){ int global = Integer.MAX_VALUE; for (int k = i + 1; k < j; k++){ int local = k + Math.max(dp[i][k-1], dp[k+1][j]); global = Math.min(local, global); } // init: dp[i][i+1] = i dp[i][j] = i+1==j?i:global; } } return dp[1][n]; } } 378. \u6709\u5e8f\u77e9\u9635\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20 [\u63a8\u8350] 378.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n x n \u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u884c\u548c\u6bcf\u5217\u5143\u7d20\u5747\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u627e\u5230\u77e9\u9635\u4e2d\u7b2ck\u5c0f\u7684\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u5b83\u662f\u6392\u5e8f\u540e\u7684\u7b2ck\u5c0f\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2ck\u4e2a\u5143\u7d20\u3002 \u793a\u4f8b: matrix = [ [ 1, 5, 9], [10, 11, 13], [12, 13, 15] ], k = 8, \u8fd4\u56de 13\u3002 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe k \u7684\u503c\u6c38\u8fdc\u662f\u6709\u6548\u7684, 1 \u2264 k \u2264 n2 \u3002 378.2 \u89e3\u6cd5 378.2.1 \u65b9\u6cd5\u4e00 \u53d8\u62101\u7ef4\u5217\u8868 partition O(z) \u53d6\u5de7 import random class Solution(object): def kthSmallest(self, matrix, k): \"\"\" :type matrix: List[List[int]] :type k: int :rtype: int \u65b9\u6cd51: \u53d8\u62101\u7ef4\u5217\u8868 partition O(z) \u5176\u4e2d z=n**2 \"\"\" def random_partition(nums, start, end): x = random.randint(start, end) nums[x], nums[end] = nums[end], nums[x] item = nums[end] i = start - 1 for j in range(start, end): if nums[j] < item: i += 1 nums[i], nums[j] = nums[j], nums[i] nums[i+1], nums[end] = nums[end], nums[i+1] return i + 1 def findKthSmallest(nums, start, end, k): # 2.\u8c03\u7528\u968f\u673a\u5316partition t = random_partition(nums, start, end) if t == k: return nums[k] elif t > k: return findKthSmallest(nums, start, t-1, k) else: return findKthSmallest(nums, t+1, end, k) # 1.\u53d8\u62101\u7ef4\u5217\u8868 nums = [] for i in matrix: nums.extend(i) # \u7b2ck\u4e2a\u5143\u7d20\u5728\u7b2ck-1\u4f4d return findKthSmallest(nums, 0, len(nums)-1, k-1) 378.2.2 min_heap \u5229\u7528\u4e86\u9898\u76ee\u4e2d\u77e9\u9635\u7684\u89c4\u5f8b O(klogk) Since the matrix is sorted, we do not need to put all the elements in heap at one time. We can simply pop and put for k times. By observation, if we look at the matrix diagonally, we can tell that if we do not pop matrix[i][j], we do not need to put on matrix[i][j + 1] and matrix[i + 1][j] since they are bigger. e.g., given the matrix below: 1 2 4 3 5 7 6 8 9 We put 1 first, then pop 1 and put 2 and 3, then pop 2 and put 4 and 5, then pop 3 and put 6\u2026(\u659c\u7740\u770b) \u9760\u4f18\u5148\u7ea7\u961f\u5217\u6765\u6392\u5e8f class Solution(object): def kthSmallest(self, matrix, k): \"\"\" :type matrix: List[List[int]] :type k: int :rtype: int \"\"\" result, heap = None, [] # (element, row, index) heapq.heappush(heap, (matrix[0][0], 0, 0)) while k > 0: # key: pop kth \u5f97\u5230\u7ed3\u679c result, i, j = heapq.heappop(heap) # key: i != 0 \u65f6 \u5143\u7d20\u5df2\u7ecf\u653e\u5165\u8fc7\u4e86 if i == 0 and j + 1 < len(matrix): heapq.heappush(heap, (matrix[i][j + 1], i, j + 1)) if i + 1 < len(matrix): heapq.heappush(heap, (matrix[i + 1][j], i + 1, j)) k -= 1 return result 378.2.3 \u4e8c\u5206\u6cd5 \u601d\u8def\u975e\u5e38\u7b80\u5355\uff1a 1.\u627e\u51fa\u4e8c\u7ef4\u77e9\u9635\u4e2d\u6700\u5c0f\u7684\u6570left\uff0c\u6700\u5927\u7684\u6570right\uff0c\u90a3\u4e48\u7b2ck\u5c0f\u7684\u6570\u5fc5\u5b9a\u5728left~right\u4e4b\u95f4 2.mid=(left+right) / 2\uff1b\u5728\u4e8c\u7ef4\u77e9\u9635\u4e2d\u5bfb\u627e\u5c0f\u4e8e\u7b49\u4e8emid\u7684\u5143\u7d20\u4e2a\u6570count 3.\u82e5\u8fd9\u4e2acount\u5c0f\u4e8ek\uff0c\u8868\u660e\u7b2ck\u5c0f\u7684\u6570\u5728\u53f3\u534a\u90e8\u5206\u4e14\u4e0d\u5305\u542bmid\uff0c\u5373left=mid+1, right=right\uff0c\u53c8\u4fdd\u8bc1\u4e86\u7b2ck\u5c0f\u7684\u6570\u5728left~right\u4e4b\u95f4 4.\u82e5\u8fd9\u4e2acount\u5927\u4e8ek\uff0c\u8868\u660e\u7b2ck\u5c0f\u7684\u6570\u5728\u5de6\u534a\u90e8\u5206\u4e14\u53ef\u80fd\u5305\u542bmid\uff0c\u5373left=left, right=mid\uff0c\u53c8\u4fdd\u8bc1\u4e86\u7b2ck\u5c0f\u7684\u6570\u5728left~right\u4e4b\u95f4 5.\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u4e2d\u90fd\u4fdd\u8bc1\u4e86\u7b2ck\u5c0f\u7684\u6570\u5728left~right\u4e4b\u95f4\uff0c\u5f53left==right\u65f6\uff0c\u7b2ck\u5c0f\u7684\u6570\u5373\u88ab\u627e\u51fa\uff0c\u7b49\u4e8eright \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684left mid right\u662f\u6570\u503c\uff0c\u4e0d\u662f\u7d22\u5f15\u4f4d\u7f6e\u3002 public int kthSmallest(int[][] matrix, int k) { int row = matrix.length; int col = matrix[0].length; int left = matrix[0][0]; int right = matrix[row - 1][col - 1]; while (left < right) { // \u6bcf\u6b21\u5faa\u73af\u90fd\u4fdd\u8bc1\u7b2cK\u5c0f\u7684\u6570\u5728start~end\u4e4b\u95f4\uff0c\u5f53start==end\uff0c\u7b2ck\u5c0f\u7684\u6570\u5c31\u662fstart int mid = (left + right) / 2; // \u627e\u4e8c\u7ef4\u77e9\u9635\u4e2d<=mid\u7684\u5143\u7d20\u603b\u4e2a\u6570 int count = findNotBiggerThanMid(matrix, mid, row, col); if (count < k) { // \u7b2ck\u5c0f\u7684\u6570\u5728\u53f3\u534a\u90e8\u5206\uff0c\u4e14\u4e0d\u5305\u542bmid left = mid + 1; } else { // \u7b2ck\u5c0f\u7684\u6570\u5728\u5de6\u534a\u90e8\u5206\uff0c\u53ef\u80fd\u5305\u542bmid right = mid; } } return right; } private int findNotBiggerThanMid(int[][] matrix, int mid, int row, int col) { // \u4ee5\u5217\u4e3a\u5355\u4f4d\u627e\uff0c\u627e\u5230\u6bcf\u4e00\u5217\u6700\u540e\u4e00\u4e2a<=mid\u7684\u6570\u5373\u77e5\u9053\u6bcf\u4e00\u5217\u6709\u591a\u5c11\u4e2a\u6570<=mid int i = row - 1; int j = 0; int count = 0; while (i >= 0 && j < col) { if (matrix[i][j] <= mid) { // \u7b2cj\u5217\u6709i+1\u4e2a\u5143\u7d20<=mid count += i + 1; j++; } else { // \u7b2cj\u5217\u76ee\u524d\u7684\u6570\u5927\u4e8emid\uff0c\u9700\u8981\u7ee7\u7eed\u5728\u5f53\u524d\u5217\u5f80\u4e0a\u627e i--; } } return count; } 380. \u5e38\u6570\u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20 [\u63a8\u8350] \u9898\u76ee\u63cf\u8ff0 \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u5728\u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6 O(1) \u4e0b\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002 insert(val)\uff1a\u5f53\u5143\u7d20 val \u4e0d\u5b58\u5728\u65f6\uff0c\u5411\u96c6\u5408\u4e2d\u63d2\u5165\u8be5\u9879\u3002 remove(val)\uff1a\u5143\u7d20 val \u5b58\u5728\u65f6\uff0c\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u8be5\u9879\u3002 getRandom\uff1a\u968f\u673a\u8fd4\u56de\u73b0\u6709\u96c6\u5408\u4e2d\u7684\u4e00\u9879\u3002\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u6709\u76f8\u540c\u7684\u6982\u7387\u88ab\u8fd4\u56de\u3002 \u793a\u4f8b : // \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u96c6\u5408\u3002 RandomizedSet randomSet = new RandomizedSet(); // \u5411\u96c6\u5408\u4e2d\u63d2\u5165 1 \u3002\u8fd4\u56de true \u8868\u793a 1 \u88ab\u6210\u529f\u5730\u63d2\u5165\u3002 randomSet.insert(1); // \u8fd4\u56de false \uff0c\u8868\u793a\u96c6\u5408\u4e2d\u4e0d\u5b58\u5728 2 \u3002 randomSet.remove(2); // \u5411\u96c6\u5408\u4e2d\u63d2\u5165 2 \u3002\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [1,2] \u3002 randomSet.insert(2); // getRandom \u5e94\u968f\u673a\u8fd4\u56de 1 \u6216 2 \u3002 randomSet.getRandom(); // \u4ece\u96c6\u5408\u4e2d\u79fb\u9664 1 \uff0c\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [2] \u3002 randomSet.remove(1); // 2 \u5df2\u5728\u96c6\u5408\u4e2d\uff0c\u6240\u4ee5\u8fd4\u56de false \u3002 randomSet.insert(2); // \u7531\u4e8e 2 \u662f\u96c6\u5408\u4e2d\u552f\u4e00\u7684\u6570\u5b57\uff0cgetRandom \u603b\u662f\u8fd4\u56de 2 \u3002 randomSet.getRandom(); \u89e3\u6cd5 \u89e3\u6cd5\u4e00 set\u6cd5 getRandom\u4e0d\u662fO(1) class RandomizedSet: \"\"\" \u53cc\u5411Hash \"\"\" def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.hash = set() def insert(self, val: int) -> bool: \"\"\" Inserts a value to the set. Returns true if the set did not already contain the specified element. \"\"\" if val in self.hash: return False else: self.hash.add(val) return True def remove(self, val: int) -> bool: \"\"\" Removes a value from the set. Returns true if the set contained the specified element. \"\"\" if val in self.hash: self.hash.remove(val) return True else: return False def getRandom(self) -> int: \"\"\" Get a random element from the set. \"\"\" rand_i = random.randint(len(self.hash)) return list(self.hash)[rand_i] # Your RandomizedSet object will be instantiated and called as such: # obj = RandomizedSet() # param_1 = obj.insert(val) # param_2 = obj.remove(val) # param_3 = obj.getRandom() \u89e3\u6cd5\u4e8c \u7d22\u5f15hash \u5b58\u50a8\u5404\u5143\u7d20\u7684\u7d22\u5f15\u5b57\u5178\uff0c\u5982\u679c\u79fb\u9664\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e class RandomizedSet: \"\"\" \u53cc\u5411Hash \"\"\" def __init__(self): \"\"\" Initialize your data structure here. \"\"\" # pos \u5b58\u50a8\u5728nums\u4e0a\u7684\u7d22\u5f15 self.nums, self.pos = [], {} def insert(self, val: int) -> bool: \"\"\" Inserts a value to the set. Returns true if the set did not already contain the specified element. \"\"\" if val not in self.pos: self.nums.append(val) self.pos[val] = len(self.nums) - 1 return True return False def remove(self, val: int) -> bool: \"\"\" Removes a value from the set. Returns true if the set contained the specified element. \"\"\" if val in self.pos: idx, last = self.pos[val], self.nums[-1] self.nums[idx], self.pos[last] = last, idx self.nums.pop(); self.pos.pop(val, 0) return True return False def getRandom(self) -> int: \"\"\" Get a random element from the set. \"\"\" return self.nums[random.randint(0, len(self.nums) - 1)] # Your RandomizedSet object will be instantiated and called as such: # obj = RandomizedSet() # param_1 = obj.insert(val) # param_2 = obj.remove(val) # param_3 = obj.getRandom() 384.\u6253\u4e71\u6570\u7ec4 \u9898\u76ee\u63cf\u8ff0 \u6253\u4e71\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\u3002 \u793a\u4f8b: // \u4ee5\u6570\u5b57\u96c6\u5408 1, 2 \u548c 3 \u521d\u59cb\u5316\u6570\u7ec4\u3002 int[] nums = {1,2,3}; Solution solution = new Solution(nums); // \u6253\u4e71\u6570\u7ec4 [1,2,3] \u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u4efb\u4f55 [1,2,3]\u7684\u6392\u5217\u8fd4\u56de\u7684\u6982\u7387\u5e94\u8be5\u76f8\u540c\u3002 solution.shuffle(); // \u91cd\u8bbe\u6570\u7ec4\u5230\u5b83\u7684\u521d\u59cb\u72b6\u6001[1,2,3]\u3002 solution.reset(); // \u968f\u673a\u8fd4\u56de\u6570\u7ec4[1,2,3]\u6253\u4e71\u540e\u7684\u7ed3\u679c\u3002 solution.shuffle(); \u89e3\u6cd5 \u89e3\u6cd5\u4e00 Fisher\u2013Yates shuffle \u6d17\u724c\u7b97\u6cd5 \u7b49\u6982\u7387\u6570\u7ec4\u968f\u673a\u6392\u5217 \u5199\u4e0b\u4ece 1 \u5230 N \u7684\u6570\u5b57 \u53d6\u4e00\u4e2a\u4ece 1 \u5230\u5269\u4e0b\u7684\u6570\u5b57\uff08\u5305\u62ec\u8fd9\u4e2a\u6570\u5b57\uff09\u7684\u968f\u673a\u6570 k \u4ece\u4f4e\u4f4d\u5f00\u59cb\uff0c\u5f97\u5230\u7b2c k \u4e2a\u6570\u5b57\uff08\u8fd9\u4e2a\u6570\u5b57\u8fd8\u6ca1\u6709\u88ab\u53d6\u51fa\uff09\uff0c\u628a\u5b83\u5199\u5728\u72ec\u7acb\u7684\u4e00\u4e2a\u5217\u8868\u7684\u6700\u540e\u4e00\u4f4d \u91cd\u590d\u7b2c 2 \u6b65\uff0c\u76f4\u5230\u6240\u6709\u7684\u6570\u5b57\u90fd\u88ab\u53d6\u51fa \u7b2c 3 \u6b65\u5199\u51fa\u7684\u8fd9\u4e2a\u5e8f\u5217\uff0c\u73b0\u5728\u5c31\u662f\u539f\u59cb\u6570\u5b57\u7684\u968f\u673a\u6392\u5217 **\u73b0\u4ee3\u7248\u672c\u7684\u63cf\u8ff0\u4e0e\u539f\u59cb\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u5982\u679c\u6309\u7167\u539f\u59cb\u65b9\u6cd5\uff0c\u611a\u8822\u7684\u8ba1\u7b97\u673a\u4f1a\u82b1\u5f88\u591a\u65e0\u7528\u7684\u65f6\u95f4\u53bb\u8ba1\u7b97\u4e0a\u8ff0\u7b2c 3 \u6b65\u7684\u5269\u4f59\u6570\u5b57\u3002\u8fd9\u91cc\u7684\u65b9\u6cd5\u662f\u5728\u6bcf\u6b21\u8fed\u4ee3\u65f6\u4ea4\u6362\u8fd9\u4e2a\u88ab\u53d6\u51fa\u7684\u6570\u5b57\u5230\u539f\u59cb\u5217\u8868\u7684\u6700\u540e\u3002\u8fd9\u6837\u5c31\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4ece O(n^2) \u51cf\u5c0f\u5230\u4e86 O(n)\u3002 -- To shuffle an array a of n elements (indices 0..n-1): for i from n\u22121 downto 1 do j \u2190 random integer such that 0 \u2264 j \u2264 i exchange a[j] and a[i] import random class Solution: def __init__(self, nums: List[int]): self.nums = nums self.backup = list(nums) def reset(self) -> List[int]: \"\"\" Resets the array to its original configuration and return it. \"\"\" self.nums = list(self.backup) return self.nums def shuffle(self) -> List[int]: \"\"\" Returns a random shuffling of the array. \"\"\" def shuffle(self): for i in range(len(self.nums)): swap_idx = random.randrange(i, len(self.nums)) self.nums[i], self.nums[swap_idx] = self.nums[swap_idx], self.nums[i] return self.nums # Your Solution object will be instantiated and called as such: # obj = Solution(nums) # param_1 = obj.reset() # param_2 = obj.shuffle() \u89e3\u6cd5\u4e8c 406.\u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 [\u63a8\u8350] \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u6709\u6253\u4e71\u987a\u5e8f\u7684\u4e00\u7fa4\u4eba\u7ad9\u6210\u4e00\u4e2a\u961f\u5217\u3002 \u6bcf\u4e2a\u4eba\u7531\u4e00\u4e2a\u6574\u6570\u5bf9(h, k)\u8868\u793a\uff0c\u5176\u4e2dh\u662f\u8fd9\u4e2a\u4eba\u7684\u8eab\u9ad8\uff0ck\u662f\u6392\u5728\u8fd9\u4e2a\u4eba\u524d\u9762\u4e14\u8eab\u9ad8\u5927\u4e8e\u6216\u7b49\u4e8eh\u7684\u4eba\u6570\u3002 \u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u91cd\u5efa\u8fd9\u4e2a\u961f\u5217\u3002 \u6ce8\u610f\uff1a \u603b\u4eba\u6570\u5c11\u4e8e1100\u4eba\u3002 \u793a\u4f8b \u8f93\u5165: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]] \u8f93\u51fa: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5148\u6392\u5e8f \u518d\u8865\u4f4d\u7f6e h\u5347\u5e8f k\u5347\u5e8f class Solution(object): def reconstructQueue(self, people): \"\"\" :type people: List[List[int]] :rtype: List[List[int]] \"\"\" nums = sorted(people, key=lambda x: (x[0], x[1])) res = [None for _ in range(len(nums))] for h, k in nums: j = 0 for i in range(len(res)): if k == j and res[i] == None: res[i] = [h, k] break if res[i] == None or res[i][0] >= h: j += 1 return res \u89e3\u6cd5\u4e8c \u5148\u6392\u5e8f \u518d\u63d2\u5165 h\u964d\u5e8f\uff0c k\u5347\u5e8f \u5047\u8bbe\u5019\u9009\u961f\u5217\u4e3a A\uff0c\u5df2\u7ecf\u7ad9\u597d\u961f\u7684\u961f\u5217\u4e3a B. \u4ece A \u91cc\u6311\u8eab\u9ad8\u6700\u9ad8\u7684\u4eba x \u51fa\u6765\uff0c\u63d2\u5165\u5230 B. \u56e0\u4e3a B \u4e2d\u6bcf\u4e2a\u4eba\u7684\u8eab\u9ad8\u90fd\u6bd4 x \u8981\u9ad8\uff0c\u56e0\u6b64 x \u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u770b x \u524d\u9762\u5e94\u8be5\u6709\u591a\u5c11\u4eba\u5c31\u884c\u4e86\u3002\u6bd4\u5982 x \u524d\u9762\u6709 5 \u4e2a\u4eba\uff0c\u90a3 x \u5c31\u63d2\u5165\u5230\u961f\u5217 B \u7684\u7b2c 5 \u4e2a\u4f4d\u7f6e\u3002 class Solution(object): def reconstructQueue(self, people): \"\"\" :type people: List[List[int]] :rtype: List[List[int]] \"\"\" nums = sorted(people, key=lambda x: (-x[0], x[1])) res = [] for h, k in nums: res.insert(k, (h, k)) return res 416.\u5206\u5272\u7b49\u548c\u5b50\u96c6[\u63a8\u8350] \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6b63\u6574\u6570\u7684\u975e\u7a7a\u6570\u7ec4\u3002\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002 \u6ce8\u610f: \u6bcf\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e0d\u4f1a\u8d85\u8fc7 100 \u6570\u7ec4\u7684\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7 200 \u793a\u4f8b 1: \u8f93\u5165: [1, 5, 11, 5] \u8f93\u51fa: true \u89e3\u91ca: \u6570\u7ec4\u53ef\u4ee5\u5206\u5272\u6210 [1, 5, 5] \u548c [11]. \u793a\u4f8b 2: \u8f93\u5165: [1, 2, 3, 5] \u8f93\u51fa: false \u89e3\u91ca: \u6570\u7ec4\u4e0d\u80fd\u5206\u5272\u6210\u4e24\u4e2a\u5143\u7d20\u548c\u76f8\u7b49\u7684\u5b50\u96c6. \u89e3\u6cd5 \u53ea\u5305\u542b\u6b63\u6574\u6570 \u5206\u6210\u5143\u7d20\u548c\u60f3\u7b49 \u90a3\u4e48\u6bcf\u4e2a\u96c6\u5408\u90fd\u662f sum(nums) // 2 \uff08\u5728sum(nums)\u4e3a\u5076\u6570 \uff0c\u5947\u6570\u6ca1\u7b54\u6848 \u95ee\u9898\u53d8\u6210\u54ea\u51e0\u4e2a\u5143\u7d20\u548c\u7b49\u4e8e sum(nums) // 2 \u89e3\u6cd5\u4e00 \u5e26\u7ed3\u679c\u56de\u6eaf\u6cd5 \u56de\u6eaf + \u9006\u6392\u5e8f class Solution: def canPartition(self, nums: List[int]) -> bool: total = sum(nums) if total & 1: return False n = len(nums) nums = sorted(nums, reverse=True) def generate(i, target): if target == 0: return True if i < n and target < nums[i]: return False for j in range(i, n): if generate(j + 1, target - nums[i]): return True return False return generate(0, total // 2) \u89e3\u6cd5\u4e8c DP 01\u80cc\u5305\u95ee\u9898 \u8fd9\u662f\u4e00\u9053\u4ee5 0-1 \u80cc\u5305\u95ee\u9898\u4e3a\u80cc\u666f\u7684\u7b97\u6cd5\u7ec3\u4e60\u9898\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u9898\u76ee\u7ffb\u8bd1\u4e00\u4e0b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6b63\u6574\u6570\u7684\u975e\u7a7a\u6570\u7ec4\u3002\u662f\u5426\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u6311\u9009\u51fa\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e\u6574\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u548c\u7684\u4e00\u534a\u3002 0-1 \u80cc\u5305\u95ee\u9898\u4e5f\u662f\u6700\u57fa\u7840\u7684\u80cc\u5305\u95ee\u9898\uff0c\u5b83\u7684\u7279\u70b9\u662f\uff1a\u5f85\u6311\u9009\u7684\u7269\u54c1\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\uff0c\u53ef\u4ee5\u9009\u62e9\u4e5f\u53ef\u4ee5\u4e0d\u9009\u62e9\u3002\u4e0b\u9762\u6211\u4eec\u5b9a\u4e49\u72b6\u6001\uff0c\u4e0d\u59a8\u5c31\u7528\u95ee\u9898\u7684\u95ee\u6cd5\u5b9a\u4e49\u72b6\u6001\u8bd5\u8bd5\u770b\u3002 dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 \u6839\u636e\u6211\u4eec\u5b66\u4e60\u7684 0-1 \u80cc\u5305\u95ee\u9898\u7684\u72b6\u6001\u8f6c\u79fb\u63a8\u5bfc\u8fc7\u7a0b\uff0c\u65b0\u6765\u4e00\u4e2a\u6570\uff0c\u4f8b\u5982\u662f nums[i]\uff0c\u6839\u636e\u8fd9\u4e2a\u6570\u53ef\u80fd\u9009\u62e9\u4e5f\u53ef\u80fd\u4e0d\u88ab\u9009\u62e9\uff1a \u5982\u679c\u4e0d\u9009\u62e9 nums[i]\uff0c\u5728 [0, i - 1] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u5df2\u7ecf\u6709\u4e00\u90e8\u5206\u5143\u7d20\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e3a j \uff0c\u90a3\u4e48 dp[i][j] = true\uff1b \u5982\u679c\u9009\u62e9 nums[i]\uff0c\u5728 [0, i - 1] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u5c31\u5f97\u627e\u5230\u4e00\u90e8\u5206\u5143\u7d20\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e3a j - nums[i] \uff0c\u6211\u65e2\u7136\u8fd9\u6837\u5199\u51fa\u6765\u4e86\uff0c\u4f60\u5c31\u5e94\u8be5\u77e5\u9053\uff0c\u8fd9\u91cc\u8ba8\u8bba\u7684\u524d\u63d0\u6761\u4ef6\u662f nums[i] <= j\u3002 \u4ee5\u4e0a\u4e8c\u8005\u6210\u7acb\u4e00\u6761\u90fd\u884c\u3002\u4e8e\u662f\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\uff1a dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]], (nums[i] <= j) \u4e8e\u662f\u6309\u7167 0-1 \u80cc\u5305\u95ee\u9898\u7684\u6a21\u677f\uff0c\u6211\u4eec\u4e0d\u96be\u5199\u51fa\u4ee5\u4e0b\u4ee3\u7801\u3002 class Solution: def canPartition(self, nums: List[int]) -> bool: \"\"\" \u65b9\u6cd5\u4e09\uff1aDP-01\u80cc\u5305\u95ee\u9898 dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 \"\"\" total = sum(nums) if total & 1: return False n = len(nums) target = total // 2 # dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 dp = [[False for _ in range(target + 1)] for _ in range(n)] # \u5148\u5199\u7b2c 1 \u884c\uff1a\u770b\u770b\u7b2c 1 \u4e2a\u6570\u662f\u4e0d\u662f\u80fd\u591f\u521a\u597d\u586b\u6ee1\u5bb9\u91cf\u4e3a target for j in range(target + 1): dp[0][j] = True if nums[0] == j else False # i \u8868\u793a\u7269\u54c1\u7d22\u5f15 for i in range(1, n): # \u8868\u793a\u5bb9\u91cf for j in range(target + 1): dp[i][j] = dp[i-1][j] or (j >= nums[i] and dp[i-1][j - nums[i]]) return dp[-1][-1] \u590d\u6742\u5ea6\u5206\u6790: \u65f6\u95f4\u590d\u6742\u5ea6:O(NC):\u8fd9\u91ccN\u662f\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570,C\u662f\u6570\u7ec4\u5143\u7d20\u7684\u548c\u7684\u4e00\u534a\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6:O(NC) \u89e3\u6cd5\u4e09 DP \u7c7b\u4f3c01\u80cc\u5305 \u4e8c\u7ef4\u53d8\u4e00\u7ef4 \u5728\u7f16\u5199\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8fd8\u53d1\u73b0\uff1a 1\u3001\u586b\u5199\u7b2c 1 \u4e2a\u7269\u54c1\u662f\u5426\u6ee1\u8db3\u72b6\u6001\u7684\u65f6\u5019\uff0c\u56e0\u4e3a nums[0] \u662f\u4e0d\u53d8\u7684\uff0c\u800c j \u5728\u4e0d\u65ad\u589e\u52a0\uff0c\u53ea\u8981\u6ee1\u8db3 nums[0] == j \u6210\u7acb\uff0c\u540e\u9762\u7684 j \u5c31\u4e0d\u5fc5\u505a\u5224\u65ad\u4e86\uff0c\u56e0\u4e3a\u4e00\u5b9a\u6709 nums[0] < j \u6210\u7acb\uff1b 2\u3001\u4ece\u540e\u5411\u524d\u5199\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u65e6 j >= nums[i] \u4e0d\u6ee1\u8db3\uff0c\u53ef\u4ee5\u9a6c\u4e0a\u9000\u51fa\u5f53\u524d\u5faa\u73af\uff0c\u56e0\u4e3a\u540e\u9762 j \u80af\u5b9a\u8d8a\u6765\u8d8a\u5c0f\uff0c\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u505a\u5224\u65ad\uff0c\u76f4\u63a5\u8fdb\u5165\u5916\u5c42\u5faa\u73af\u7684\u4e0b\u4e00\u5c42\u3002 \u4ee5\u4e0b\u4ee3\u7801\u6839\u636e\u4e0a\u9762\u7684\u201c\u53c2\u8003\u4ee3\u7801 1\u201d\u4fee\u6539\uff0c\u4fee\u6539\u548c\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff0c\u6211\u90fd\u52a0\u4e86\u6ce8\u91ca\u3002 class Solution: def canPartition(self, nums: List[int]) -> bool: total = sum(nums) if total & 1: return False n = len(nums) target = total // 2 # dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 dp = [False for _ in range(target + 1)] # \u5148\u5199\u7b2c 1 \u884c\uff1a\u770b\u770b\u7b2c 1 \u4e2a\u6570\u662f\u4e0d\u662f\u80fd\u591f\u521a\u597d\u586b\u6ee1\u5bb9\u91cf\u4e3a target for j in range(target + 1): if nums[0] == j: dp[j] = True # \u5982\u679c\u7b49\u4e8e\uff0c\u540e\u9762\u5c31\u4e0d\u7528\u505a\u5224\u65ad\u4e86\uff0c\u56e0\u4e3a j \u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u80af\u5b9a\u4e0d\u7b49\u4e8e nums[0] break # \u6ce8\u610f\uff1a\u56e0\u4e3a\u540e\u9762\u7684DP\u53c2\u8003\u4e86\u524d\u9762\u4e00\u5c42\u7684DP\uff0c\u6211\u4eec\u4ece\u540e\u5411\u524d\u8ba1\u7b97 for i in range(1, n): # \u8868\u793a\u5bb9\u91cf for j in range(target, -1, -1): if j >= nums[i]: dp[j] = dp[j] or dp[j -nums[i]] else: break return dp[-1] \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6:ONO):\u8fd9\u91ccN\u662f\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570,C\u662f\u6570\u7ec4\u5143\u7d20\u7684\u548c\u7684\u4e00\u534a \u7a7a\u95f4\u590d\u6742\u5ea6:O(C):\u51cf\u5c11\u4e86\u7269\u54c1\u90a3\u4e2a\u7ef4\u5ea6,\u65e0\u8bba\u6765\u591a\u5c11\u4e2a\u6570,\u7528\u4e00\u884c\u8868\u793a\u72b6\u6001\u5c31\u591f\u4e86 \u89e3\u6cd5\u56db DP\u4f18\u5316\u4e8c\uff1a\u6ce8\u610f\u5230\u672c\u9898\u7684\u7279\u6b8a\u6027\uff0c\u63d0\u524d\u7ed3\u675f\u5faa\u73af class Solution: def canPartition(self, nums: List[int]) -> bool: \"\"\" \u53ea\u5305\u542b\u6b63\u6574\u6570 \u5206\u6210\u5143\u7d20\u548c\u60f3\u7b49 \u90a3\u4e48\u6bcf\u4e2a\u96c6\u5408\u90fd\u662f sum(nums) // 2 \uff08\u5728sum(nums)\u4e3a\u5076\u6570 \uff0c\u5947\u6570\u6ca1\u7b54\u6848 \u95ee\u9898\u53d8\u6210\u54ea\u51e0\u4e2a\u5143\u7d20\u548c\u7b49\u4e8e sum(nums) // 2 \u65b9\u6cd5\u4e00\uff1a DFS + \u8bb0\u5fc6\u5316 + \u9006\u6392\u5e8f\u6570\u7ec4 \u8d85\u65f6 X \u65b9\u6cd5\u4e8c\uff1a\u56de\u6eaf + \u9006\u6392\u5e8f \u8d85\u8fc7100% \u65b9\u6cd5\u4e09\uff1aDP-01\u80cc\u5305\u95ee\u9898 dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 \"\"\" total = sum(nums) if total & 1: return False n = len(nums) target = total // 2 # dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 dp = [False for _ in range(target + 1)] # \u5148\u5199\u7b2c 1 \u884c\uff1a\u770b\u770b\u7b2c 1 \u4e2a\u6570\u662f\u4e0d\u662f\u80fd\u591f\u521a\u597d\u586b\u6ee1\u5bb9\u91cf\u4e3a target for j in range(target + 1): if nums[0] == j: dp[j] = True # \u5982\u679c\u7b49\u4e8e\uff0c\u540e\u9762\u5c31\u4e0d\u7528\u505a\u5224\u65ad\u4e86\uff0c\u56e0\u4e3a j \u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u80af\u5b9a\u4e0d\u7b49\u4e8e nums[0] break # \u6ce8\u610f\uff1a\u56e0\u4e3a\u540e\u9762\u7684DP\u53c2\u8003\u4e86\u524d\u9762\u4e00\u5c42\u7684DP\uff0c\u6211\u4eec\u4ece\u540e\u5411\u524d\u8ba1\u7b97 for i in range(1, n): # \u5148\u770b\u6700\u540e\u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u8fd4\u56de True\uff0c\u5982\u679c\u662f\u540e\u9762\u5c31\u6ca1\u6709\u5fc5\u8981\u8ba1\u7b97\u4e86\uff0c\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de True # **\u5373\u5728\u4e0a\u4e00\u8f6e [0, i]\u5df2\u7ecf\u6ee1\u8db3\u4e86\u627e\u5230target\u7684\u8981\u6c42** if dp[-1] or dp[target - nums[i]]: return True # \u8868\u793a\u5bb9\u91cf for j in range(target, -1, -1): if j >= nums[i]: dp[j] = dp[j] or dp[j -nums[i]] else: break return dp[-1] 448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u5728 1 \u2264 a[i] \u2264 n ( n = \u6570\u7ec4\u5927\u5c0f ) \u7684 \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e00\u4e9b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u53e6\u4e00\u4e9b\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u627e\u5230\u6240\u6709\u5728 [1, n] \u8303\u56f4\u4e4b\u95f4\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u3002 \u60a8\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002 \u793a\u4f8b: \u8f93\u5165: [4,3,2,7,8,2,3,1] \u8f93\u51fa: [5,6] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def findDisappearedNumbers(self, nums: List[int]) -> List[int]: \"\"\" \u6cd51.\u6392\u5e8f nlogn \u6cd52.\u628a\u6570\u7ec4(\u503c - 1)\u53d8\u6210\u7d22\u5f15, \u628a\u5bf9\u5e94\u7d22\u5f15\u7684\u6570\u53d8\u6210\u8d1f\u6570 \"\"\" res = [] for i in range(len(nums)): if nums[abs(nums[i]) - 1] < 0: continue nums[abs(nums[i]) - 1] = -nums[abs(nums[i]) - 1] for i in range(len(nums)): if nums[i] > 0: res.append(i + 1) return res \u89e3\u6cd5\u4e8c 453. \u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u4f7f\u6570\u7ec4\u5143\u7d20\u76f8\u7b49[tag:math] 453.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684 \u975e\u7a7a \u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u8ba9\u6570\u7ec4\u6240\u6709\u5143\u7d20\u76f8\u7b49\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u3002\u6bcf\u6b21\u79fb\u52a8\u53ef\u4ee5\u4f7f n - 1 \u4e2a\u5143\u7d20\u589e\u52a0 1\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3] \u8f93\u51fa: 3 \u89e3\u91ca: \u53ea\u9700\u89813\u6b21\u79fb\u52a8\uff08\u6ce8\u610f\u6bcf\u6b21\u79fb\u52a8\u4f1a\u589e\u52a0\u4e24\u4e2a\u5143\u7d20\u7684\u503c\uff09\uff1a [1,2,3] => [2,3,3] => [3,4,3] => [4,4,4] 453.2 \u89e3\u6cd5 453.2.1 \u65b9\u6cd5\u4e00 class Solution: def minMoves(self, nums: List[int]) -> int: \"\"\" \u6bcf\u6b21\u9009\u62e9\u6700\u5c0f\u7684n-1\u4e2a\u6570\u5411\u4e0a\u79fb\u52a8 <--> \u6bcf\u6b21\u51cf\u5c0f\u6700\u5927\u503c \u95ee\u9898\u53d8\u5316\u6210 \u975e\u6700\u5c0f\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u503c\u4e4b\u548c \"\"\" return sum(nums) - min(nums) * len(nums) 454.\u56db\u6570\u76f8\u52a0 II \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u56db\u4e2a\u5305\u542b\u6574\u6570\u7684\u6570\u7ec4\u5217\u8868 A , B , C , D ,\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5143\u7ec4 (i, j, k, l) \uff0c\u4f7f\u5f97 A[i] + B[j] + C[k] + D[l] = 0\u3002 \u4e3a\u4e86\u4f7f\u95ee\u9898\u7b80\u5355\u5316\uff0c\u6240\u6709\u7684 A, B, C, D \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6 N\uff0c\u4e14 0 \u2264 N \u2264 500 \u3002\u6240\u6709\u6574\u6570\u7684\u8303\u56f4\u5728 -228 \u5230 228 - 1 \u4e4b\u95f4\uff0c\u6700\u7ec8\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7 231 - 1 \u3002 \u4f8b\u5982: \u8f93\u5165: A = [ 1, 2] B = [-2,-1] C = [-1, 2] D = [ 0, 2] \u8f93\u51fa: 2 \u89e3\u91ca: \u4e24\u4e2a\u5143\u7ec4\u5982\u4e0b: 1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0 2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 def fourSumCount(self, A, B, C, D): AB = collections.Counter(a+b for a in A for b in B) return sum(AB[-c-d] for c in C for d in D) \u89e3\u6cd5\u4e8c 455 \u5206\u53d1\u997c\u5e72 455.1 \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u4f60\u662f\u4e00\u4f4d\u5f88\u68d2\u7684\u5bb6\u957f\uff0c\u60f3\u8981\u7ed9\u4f60\u7684\u5b69\u5b50\u4eec\u4e00\u4e9b\u5c0f\u997c\u5e72\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u5b69\u5b50\u6700\u591a\u53ea\u80fd\u7ed9\u4e00\u5757\u997c\u5e72\u3002\u5bf9\u6bcf\u4e2a\u5b69\u5b50 i \uff0c\u90fd\u6709\u4e00\u4e2a\u80c3\u53e3\u503c gi \uff0c\u8fd9\u662f\u80fd\u8ba9\u5b69\u5b50\u4eec\u6ee1\u8db3\u80c3\u53e3\u7684\u997c\u5e72\u7684\u6700\u5c0f\u5c3a\u5bf8\uff1b\u5e76\u4e14\u6bcf\u5757\u997c\u5e72 j \uff0c\u90fd\u6709\u4e00\u4e2a\u5c3a\u5bf8 sj \u3002\u5982\u679c sj >= gi \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u997c\u5e72 j \u5206\u914d\u7ed9\u5b69\u5b50 i \uff0c\u8fd9\u4e2a\u5b69\u5b50\u4f1a\u5f97\u5230\u6ee1\u8db3\u3002\u4f60\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u6ee1\u8db3\u8d8a\u591a\u6570\u91cf\u7684\u5b69\u5b50\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u6570\u503c\u3002 \u6ce8\u610f\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe\u80c3\u53e3\u503c\u4e3a\u6b63\u3002 \u4e00\u4e2a\u5c0f\u670b\u53cb\u6700\u591a\u53ea\u80fd\u62e5\u6709\u4e00\u5757\u997c\u5e72\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3], [1,1] \u8f93\u51fa: 1 \u89e3\u91ca: \u4f60\u6709\u4e09\u4e2a\u5b69\u5b50\u548c\u4e24\u5757\u5c0f\u997c\u5e72\uff0c3\u4e2a\u5b69\u5b50\u7684\u80c3\u53e3\u503c\u5206\u522b\u662f\uff1a1,2,3\u3002 \u867d\u7136\u4f60\u6709\u4e24\u5757\u5c0f\u997c\u5e72\uff0c\u7531\u4e8e\u4ed6\u4eec\u7684\u5c3a\u5bf8\u90fd\u662f1\uff0c\u4f60\u53ea\u80fd\u8ba9\u80c3\u53e3\u503c\u662f1\u7684\u5b69\u5b50\u6ee1\u8db3\u3002 \u6240\u4ee5\u4f60\u5e94\u8be5\u8f93\u51fa1\u3002 \u8f93\u5165: [1,2], [1,2,3] \u8f93\u51fa: 2 \u89e3\u91ca: \u4f60\u6709\u4e24\u4e2a\u5b69\u5b50\u548c\u4e09\u5757\u5c0f\u997c\u5e72\uff0c2\u4e2a\u5b69\u5b50\u7684\u80c3\u53e3\u503c\u5206\u522b\u662f1,2\u3002 \u4f60\u62e5\u6709\u7684\u997c\u5e72\u6570\u91cf\u548c\u5c3a\u5bf8\u90fd\u8db3\u4ee5\u8ba9\u6240\u6709\u5b69\u5b50\u6ee1\u8db3\u3002 \u6240\u4ee5\u4f60\u5e94\u8be5\u8f93\u51fa2. class Solution: def findContentChildren(self, g: List[int], s: List[int]) -> int: \"\"\" \u8d2a\u5fc3\u7b97\u6cd5 \u7ed9\u5b69\u5b50\u6570\u7ec4\u548c\u997c\u5e72\u6570\u7ec4\u9006\u5e8f\u6392\u5217 \u5c3d\u53ef\u80fd\u628a\u6700\u5927\u7684\u997c\u5e72\u5206\u7ed9\u80c3\u53e3\u5927\u7684\u5b69\u5b50 \u8981\u6c42\u4e00:\u81ea\u5df1\u5199\u6392\u5e8f\u7b97\u6cd5 \"\"\" g.sort(reverse=True) s.sort(reverse=True) cnt = 0 index = 0 for sj in s: for j in range(index, len(g)): if sj >= g[j]: cnt += 1 index = j+1 break return cnt # Thanks! short&beautiful! def findContentChildren(self, g, s): \"\"\" :type g: List[int] :type s: List[int] :rtype: int \"\"\" g.sort() s.sort() childi = 0 cookiei = 0 while cookiei < len(s) and childi < len(g): if s[cookiei] >= g[childi]: childi += 1 cookiei += 1 return childi \u6b63\u5e8f, \u9006\u5e8f\u6bd4\u8f83\u7686\u53ef\u4ee5 455.2 \u89e3\u6cd5 \u793a\u4f8b 2: 461.\u6c49\u660e\u8ddd\u79bb \u9898\u76ee\u63cf\u8ff0 \u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002 \u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 x \u548c y\uff0c\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002 \u6ce8\u610f\uff1a 0 \u2264 x, y < 231. \u793a\u4f8b: \u8f93\u5165: x = 1, y = 4 \u8f93\u51fa: 2 \u89e3\u91ca: 1 (0 0 0 1) 4 (0 1 0 0) \u2191 \u2191 \u4e0a\u9762\u7684\u7bad\u5934\u6307\u51fa\u4e86\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4f4d\u8fd0\u7b97 x &= x-1 \u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u4e2d\u7684\u6700\u540e\u4f4d\u76841\u8f6c\u6362\u4e3a0.\u3010\u53ef\u7528\u4e8e\u8ba1\u7b97\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570\u3011 class Solution: def hammingDistance(self, x: int, y: int) -> int: \"\"\" ^ \u6309\u4f4d\u5f02\u6216\u540e\u6c42\u4e8c\u8fdb\u5236\u4e2d1\u7684\u6570\u91cf \"\"\" c = x ^ y cnt = 0 while c: c = c & (c - 1) cnt += 1 return cnt \u89e3\u6cd5\u4e8c 462. \u6700\u5c11\u79fb\u52a8\u6b21\u6570\u4f7f\u6570\u7ec4\u5143\u7d20\u76f8\u7b49 II[tag:math] 462.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u4f7f\u6240\u6709\u6570\u7ec4\u5143\u7d20\u76f8\u7b49\u6240\u9700\u7684\u6700\u5c0f\u79fb\u52a8\u6570\uff0c\u5176\u4e2d\u6bcf\u6b21\u79fb\u52a8\u53ef\u5c06\u9009\u5b9a\u7684\u4e00\u4e2a\u5143\u7d20\u52a01\u6216\u51cf1\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u7684\u957f\u5ea6\u6700\u591a\u4e3a10000\u3002 \u4f8b\u5982: \u8f93\u5165: [1,2,3] \u8f93\u51fa: 2 \u8bf4\u660e\uff1a \u53ea\u6709\u4e24\u4e2a\u52a8\u4f5c\u662f\u5fc5\u8981\u7684\uff08\u8bb0\u5f97\u6bcf\u4e00\u6b65\u4ec5\u53ef\u4f7f\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u52a01\u6216\u51cf1\uff09\uff1a [1,2,3] => [2,2,3] => [2,2,2] 462.2 \u89e3\u6cd5 \u8fd9\u9053\u9898\u7684\u5173\u952e\u662f\u627e\u5230\u4e2d\u4f4d\u6570 \u53ef\u4ee5\u7528\u5feb\u901f\u6392\u5e8f\u4e2dpartition\u601d\u60f3\u627e\u5230medium 462.2.1 \u65b9\u6cd5\u4e00 class Solution: def minMoves2(self, nums: List[int]) -> int: \"\"\" \u627e\u4e2d\u4f4d\u6570 \u8ba1\u7b97\u6bcf\u4e2a\u4f4d\u548c\u4e2d\u4f4d\u6570\u7edd\u5bf9\u5dee\u503c\u4e4b\u548c partition O(n) \"\"\" nums = sorted(nums) medium_val = nums[len(nums)>>1] return sum([abs(num - medium_val) for num in nums]) 462.2.2 \u65b9\u6cd5\u4e8c def minMoves2(self, nums): nums.sort() # ~x == -x - 1 return sum(nums[~i] - nums[i] for i in range(len(nums) / 2)) 494.\u76ee\u6807\u548c \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0ca1, a2, ..., an, \u548c\u4e00\u4e2a\u76ee\u6807\u6570\uff0cS\u3002\u73b0\u5728\u4f60\u6709\u4e24\u4e2a\u7b26\u53f7 + \u548c -\u3002\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6574\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u4ece + \u6216 -\u4e2d\u9009\u62e9\u4e00\u4e2a\u7b26\u53f7\u6dfb\u52a0\u5728\u524d\u9762\u3002 \u8fd4\u56de\u53ef\u4ee5\u4f7f\u6700\u7ec8\u6570\u7ec4\u548c\u4e3a\u76ee\u6807\u6570 S \u7684\u6240\u6709\u6dfb\u52a0\u7b26\u53f7\u7684\u65b9\u6cd5\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums: [1, 1, 1, 1, 1], S: 3 \u8f93\u51fa: 5 \u89e3\u91ca: -1+1+1+1+1 = 3 +1-1+1+1+1 = 3 +1+1-1+1+1 = 3 +1+1+1-1+1 = 3 +1+1+1+1-1 = 3 \u4e00\u5171\u67095\u79cd\u65b9\u6cd5\u8ba9\u6700\u7ec8\u76ee\u6807\u548c\u4e3a3\u3002 \u6ce8\u610f: \u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc720\uff0c\u5e76\u4e14\u6570\u7ec4\u4e2d\u7684\u503c\u5168\u4e3a\u6b63\u6570\u3002 \u521d\u59cb\u7684\u6570\u7ec4\u7684\u548c\u4e0d\u4f1a\u8d85\u8fc71000\u3002 \u4fdd\u8bc1\u8fd4\u56de\u7684\u6700\u7ec8\u7ed3\u679c\u4e3a32\u4f4d\u6574\u6570\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DFS + \u8bb0\u5fc6\u6cd5 class Solution: def findTargetSumWays(self, nums: List[int], S: int) -> int: \"\"\" \u8fb9\u754c\u6761\u4ef6\uff1a-\u975e\u8d1f\u6574\u6570 \u76f4\u63a5\u56de\u6eaf\u8d85\u65f6 \u9012\u5f52 + \u8bb0\u5fc6\u5316 DP\uff1a \u5b50\u51fd\u6570\u4e2d\u4f7f\u7528\u51fd\u6570\u7684\u53d8\u91cf \"\"\" memo = dict() def dfs(i, S): if i == len(nums): return 1 if S == 0 else 0 if (i, S) in memo: return memo[(i, S)] ans1 = dfs(i+1, S - nums[i]) ans2 = dfs(i+1, S + nums[i]) memo[(i, S)] = ans1 + ans2 return memo[(i, S)] if not nums: return 0 return dfs(0, S) \u89e3\u6cd5\u4e8c DP 01\u80cc\u5305\u95ee\u9898 todo 560.\u548c\u4e3aK\u7684\u5b50\u6570\u7ec4[\u63a8\u8350] \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u627e\u5230\u8be5\u6570\u7ec4\u4e2d\u548c\u4e3a k \u7684\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u7684\u4e2a\u6570\u3002 \u793a\u4f8b 1 : \u8f93\u5165:nums = [1,1,1], k = 2 \u8f93\u51fa: 2 , [1,1] \u4e0e [1,1] \u4e3a\u4e24\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u3002 \u8bf4\u660e : \u6570\u7ec4\u7684\u957f\u5ea6\u4e3a [1, 20,000]\u3002 \u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u662f [-1000, 1000] \uff0c\u4e14\u6574\u6570 k \u7684\u8303\u56f4\u662f [-1e7, 1e7]\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9010\u5143\u7d20\u7d2f\u52a0 \u6216 bruce class Solution: def subarraySum(self, nums: List[int], k: int) -> int: \"\"\" Bruce O(n**2) java \u2705 \u9010\u5143\u7d20\u7d2f\u52a0 \u8d85\u65f6 java \u2705 \u8fb9\u754c\u6761\u4ef6\uff1a \u6574\u6570\u6709\u8d1f\u6570 \"\"\" if not nums: return 0 forward = [0] for num in nums: forward.append(forward[-1] + num) ans = 0 le = len(nums) for i in range(le): for j in range(i + 1, le + 1): if (forward[j] - forward[i]) == k: ans = ans + 1 return ans \u89e3\u6cd5\u4e8c HashMap \u6709\u96be\u5ea6 \u3010\u5e38\u601d\u8003\u3011 \u4ece\u89e3\u51b3\u65b9\u68481\u4e2d\uff0c\u6211\u4eec\u77e5\u9053\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u5173\u952e\u662fSUM [i\uff0cj]\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053SUM [0\uff0ci - 1]\u548cSUM [0\uff0cj]\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5f97\u5230SUM [i\uff0cj]\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u6570\u7ec4\uff0c\u8ba1\u7b97\u5f53\u524d\u603b\u548c\u5e76\u5c06\u6240\u6709\u770b\u5230\u7684PreSum\u7684\u6570\u91cf\u4fdd\u5b58\u5230HashMap\u3002\u65f6\u95f4\u590d\u6742\u5ea6O\uff08n\uff09\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O\uff08n\uff09\u3002 \u8fd9\u79cd\u65b9\u6cd5\u80cc\u540e\u7684\u60f3\u6cd5\u5982\u4e0b\uff1a 1.\u5982\u679c\u4e24\u4e2a\u7d22\u5f15\u95f4\u7d2f\u79ef\u548c\u76f8\u540c\uff0c\u5373sum [i] = sum [j] \u8fd9\u4e9b\u6307\u6570\u4e4b\u95f4\u7684\u5143\u7d20\u4e4b\u548c\u4e3a\u96f6\u3002\uff08\u4f5c\u7528\u662f\u53ef\u4ee5\u7d2f\u8ba1\u6b21\u6570\uff09 2.\u5982\u679c\u7d2f\u79ef\u603b\u548c\u8fbe\u5230\u4e24\u4e2a\u6307\u6570\uff0c\u6bd4\u5982i\u548cj\u662fk\u7684\u5dee\u503c\uff0c\u5373\u5982\u679csum [i] -sum [j] = k\uff0c\u5219\u603b\u548c\u4f4d\u4e8e\u6307\u6570i\u548cj\u4e4b\u95f4\u7684\u5143\u7d20\u662fk\u3002 \u57fa\u4e8e\u8fd9\u4e9b\u60f3\u6cd5\uff0c\u6211\u4eec\u4f7f\u7528hashmap\uff0c\u7528\u4e8e\u5b58\u50a8\u53ef\u80fd\u7684\u6240\u6709\u7d22\u5f15\u7684\u7d2f\u79ef\u603b\u548c\u4ee5\u53ca\u76f8\u540c\u603b\u548c\u53d1\u751f\u7684\u6b21\u6570\u3002 \u6211\u4eec\u904d\u5386\u6570\u7ec4nums\u5e76\u7ee7\u7eed\u67e5\u627e\u7d2f\u79ef\u603b\u548c\u3002\u6bcf\u5f53\u6211\u4eec\u9047\u5230\u4e00\u4e2a\u65b0\u7684\u548c\u65f6\uff0c\u6211\u4eec\u5728hashmap\u4e2d\u521b\u5efa\u4e00\u4e2a\u4e0e\u8be5\u603b\u548c\u76f8\u5bf9\u5e94\u7684\u65b0\u6761\u76ee\u3002\u5982\u679c\u518d\u6b21\u51fa\u73b0\u76f8\u540c\u7684\u548c\uff08\u4e0e\u4e0a\u4e00\u4e2a\u76f8\u540c\u7684\u7d2f\u52a0\u548c\u7684\u7d22\u5f15\u4e2d\u95f4\u7684\u7d2f\u52a0\u548c\u4e3a0\uff09\uff0c\u6211\u4eec\u589e\u52a0\u4e0ehashmap\u4e2d\u7684\u548c\u76f8\u5bf9\u5e94\u7684\u8ba1\u6570\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u9047\u5230\u7684\u6bcf\u4e2a\u548c\uff0c\u6211\u4eec\u8fd8\u786e\u5b9a\u603bsum-k\u5df2\u7ecf\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u56e0\u4e3a\u5b83\u5c06\u786e\u5b9a\u5177\u6709\u548ck\u7684\u5b50\u9635\u5217\u53d1\u751f\u5230\u5f53\u524d\u7d22\u5f15\u7684\u6b21\u6570\u3002\u6211\u4eec\u5c06count\u589e\u52a0\u76f8\u540c\u7684\u6570\u91cf\u3002 \u904d\u5386\u5b8c\u6574\u6570\u7ec4\u540e\uff0ccount\u5c06\u63d0\u4f9b\u6240\u9700\u7684\u7ed3\u679c\u3002 class Solution(object): def subarraySum(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: int \"\"\" sumv = 0 # \u524d\u7f00\u548c: \u51fa\u73b0\u6b21\u6570 dic = {0: 1} res = 0 for i in range(len(nums)): sumv += nums[i] if sumv - k in dic: res += dic[sumv - k] dic.setdefault(sumv, 0) dic[sumv] += 1 return res 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad s2 \u662f\u5426\u5305\u542b s1 \u7684\u6392\u5217\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6392\u5217\u4e4b\u4e00\u662f\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002 \u793a\u4f8b1: \u8f93\u5165: s1 = \"ab\" s2 = \"eidbaooo\" \u8f93\u51fa: True \u89e3\u91ca: s2 \u5305\u542b s1 \u7684\u6392\u5217\u4e4b\u4e00 (\"ba\"). \u793a\u4f8b2: \u8f93\u5165: s1= \"ab\" s2 = \"eidboaoo\" \u8f93\u51fa: False \u6ce8\u610f\uff1a \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u90fd\u5728 [1, 10,000] \u4e4b\u95f4 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u7edf\u8ba1\u8bcd\u9891 class Solution: def checkInclusion(self, s1: str, s2: str) -> bool: \"\"\" 1.s1\u9884\u5904\u7406\u751f\u6210\u6240\u6709\u7684\u6392\u5217\u662f\u6307\u6570\u7ea7\u522b\u590d\u6742\u5ea6 2.\u7edf\u8ba1\u5b50\u5b57\u7b26\u4e32\u7684\u5404\u5b57\u7b26\u6570\u91cf \"\"\" if len(s1) > len(s2): return False def get_char_num(s): char_dic = [0] *26 for c in s: char_dic[ord(c) - ord('a')] += 1 return char_dic i, j = 0, len(s1) s1_dic = get_char_num(s1) s2_dic = get_char_num(s2[i: j]) if s2_dic == s1_dic: return True while j < len(s2): s2_dic[ord(s2[j]) - ord('a')] += 1 s2_dic[ord(s2[i]) - ord('a')] -= 1 if s2_dic == s1_dic: return True i += 1 j += 1 return False \u89e3\u6cd5\u4e8c \u5728\u7b2c\u4e00\u79cd\u89e3\u6cd5\u4e0a\u4f18\u5316 581. \u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5bfb\u627e\u4e00\u4e2a\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\uff0c\u5982\u679c\u5bf9\u8fd9\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u6570\u7ec4\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002 \u4f60\u627e\u5230\u7684\u5b50\u6570\u7ec4\u5e94\u662f\u6700\u77ed\u7684\uff0c\u8bf7\u8f93\u51fa\u5b83\u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: [2, 6, 4, 8, 10, 9, 15] \u8f93\u51fa: 5 \u89e3\u91ca: \u4f60\u53ea\u9700\u8981\u5bf9 [6, 4, 8, 10, 9] \u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u8868\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002 \u8bf4\u660e : \u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u5728 [1, 10,000]\u3002 \u8f93\u5165\u7684\u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20 \uff0c\u6240\u4ee5\u5347\u5e8f\u7684\u610f\u601d\u662f<=\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u6392\u5e8f \u6bd4\u8f83 O(nlogn) def findUnsortedSubarray(self, nums: List[int]) -> int: \"\"\" \u65b9\u6cd5\u4e00: \u6392\u5e8f \u627e\u5230\u4e0d\u76f8\u7b49\u7684\u7b2c\u4e00\u4e2a\u70b9 \u548c\u6700\u540e\u4e00\u4e2a\u70b9 O(NlogN) \u65b9\u6cd5\u4e8c: \u5b58\u5165\u5c71\u8c37\u7684\u533a\u95f4 \u627e\u5230\u8fb9\u754c O(N) \"\"\" nums_sorted = sorted(nums) start_i = -1 end_i = -1 for i in range(len(nums)): if nums_sorted[i] != nums[i]: if start_i == -1: start_i = i else: end_i = i return end_i - start_i + 1 if start_i != -1 else 0 \u89e3\u6cd5\u4e8c \u4f7f\u7528\u6808 O(n) \u65b9\u6cd5 4\uff1a\u4f7f\u7528\u6808 \u7b97\u6cd5 \u8fd9\u4e2a\u65b9\u6cd5\u80cc\u540e\u7684\u60f3\u6cd5\u4ecd\u7136\u662f\u9009\u62e9\u6392\u5e8f\u3002\u6211\u4eec\u9700\u8981\u627e\u5230\u65e0\u5e8f\u5b50\u6570\u7ec4\u4e2d\u6700\u5c0f\u5143\u7d20\u548c\u6700\u5927\u5143\u7d20\u5206\u522b\u5bf9\u5e94\u7684\u6b63\u786e\u4f4d\u7f6e\uff0c\u6765\u6c42\u5f97\u6211\u4eec\u60f3\u8981\u7684\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u8fb9\u754c\u3002 \u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\uff0c\u6b64\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 \u6808\u6808 \u3002\u6211\u4eec\u4ece\u5934\u904d\u5386 numsnums \u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u7684\u6570\u5b57\u5927\u5c0f\u4e00\u76f4\u662f\u5347\u5e8f\u7684\uff0c\u6211\u4eec\u5c31\u4e0d\u65ad\u628a\u5bf9\u5e94\u7684\u4e0b\u6807\u538b\u5165\u6808\u4e2d\uff0c\u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u56e0\u4e3a\u8fd9\u4e9b\u5143\u7d20\u5728\u76ee\u524d\u90fd\u662f\u5904\u4e8e\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002\u4e00\u65e6\u6211\u4eec\u9047\u5230\u524d\u9762\u7684\u6570\u6bd4\u540e\u9762\u7684\u6570\u5927\uff0c\u4e5f\u5c31\u662f nums[j]\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 nums[j]\u4e00\u5b9a\u4e0d\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002 \u4e3a\u4e86\u627e\u5230 nums[j]\u7684\u6b63\u786e\u4f4d\u7f6e\uff0c\u6211\u4eec\u4e0d\u65ad\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u76f4\u5230\u6808\u9876\u5143\u7d20\u6bd4 nums[j] \u5c0f\uff0c\u6211\u4eec\u5047\u8bbe\u6808\u9876\u5143\u7d20\u5bf9\u5e94\u7684\u4e0b\u6807\u4e3a k \uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053 nums[j]nums[j] \u7684\u6b63\u786e\u4f4d\u7f6e\u4e0b\u6807\u5e94\u8be5\u662f k + 1 \u3002 \u6211\u4eec\u91cd\u590d\u8fd9\u4e00\u8fc7\u7a0b\u5e76\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u6700\u5c0f\u7684 k\uff0c \u5b83\u4e5f\u662f\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u5de6\u8fb9\u754c\u3002 \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u9006\u5e8f\u904d\u5386\u4e00\u904d nums \u6570\u7ec4\u6765\u627e\u5230\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\u3002\u8fd9\u4e00\u6b21\u6211\u4eec\u5c06\u964d\u5e8f\u7684\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u5982\u679c\u9047\u5230\u4e00\u4e2a\u5347\u5e8f\u7684\u5143\u7d20\uff0c\u6211\u4eec\u50cf\u4e0a\u9762\u6240\u8ff0\u7684\u65b9\u6cd5\u4e00\u6837\u4e0d\u65ad\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20\uff0c\u4ee5\u6b64\u627e\u5230\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u4e0b\u56fe\u4f5c\u4e3a\u53c2\u8003\u3002\u6211\u4eec\u89c2\u5bdf\u5230\u4e0a\u5347\u8fd8\u662f\u4e0b\u964d\u51b3\u5b9a\u4e86\u76f8\u5bf9\u987a\u5e8f\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u89c2\u5bdf\u5230\u6307\u9488 bb \u5728\u4e0b\u6807 0 \u540e\u9762\u6807\u8bb0\u7740\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u5de6\u8fb9\u754c\uff0c\u6307\u9488 aa \u5728\u4e0b\u6807 7 \u524d\u9762\u6807\u8bb0\u7740\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\u3002 class Solution: def findUnsortedSubarray(self, nums: List[int]) -> int: stack = [] min_i = len(nums) for i in range(len(nums)): while stack and nums[stack[-1]] > nums[i]: j = stack.pop() min_i = min(min_i, j) stack.append(i) stack = [] max_i = -1 for i in range(len(nums) - 1, -1, -1): while stack and nums[stack[-1]] < nums[i]: j = stack.pop() max_i = max(max_i, j) stack.append(i) return max_i - min_i + 1 if max_i != -1 else 0 \u89e3\u6cd5\u4e09 \u4e0d\u7528\u6808 \u8fd9\u4e2a\u7b97\u6cd5\u80cc\u540e\u7684\u601d\u60f3\u662f\u65e0\u5e8f\u5b50\u6570\u7ec4\u4e2d\u6700\u5c0f\u5143\u7d20\u7684\u6b63\u786e\u4f4d\u7f6e\u53ef\u4ee5\u51b3\u5b9a\u5de6\u8fb9\u754c\uff0c\u6700\u5927\u5143\u7d20\u7684\u6b63\u786e\u4f4d\u7f6e\u53ef\u4ee5\u51b3\u5b9a\u53f3\u8fb9\u754c\u3002 \u56e0\u6b64\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u627e\u5230\u539f\u6570\u7ec4\u5728\u54ea\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u4e0d\u662f\u5347\u5e8f\u7684\u3002\u6211\u4eec\u4ece\u5934\u5f00\u59cb\u904d\u5386\u6570\u7ec4\uff0c\u4e00\u65e6\u9047\u5230\u964d\u5e8f\u7684\u5143\u7d20\uff0c\u6211\u4eec\u8bb0\u5f55\u6700\u5c0f\u5143\u7d20\u4e3a minmin \u3002 \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u9006\u5e8f\u626b\u63cf\u6570\u7ec4 numsnums\uff0c\u5f53\u6570\u7ec4\u51fa\u73b0\u5347\u5e8f\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8bb0\u5f55\u6700\u5927\u5143\u7d20\u4e3a maxmax\u3002 \u7136\u540e\uff0c\u6211\u4eec\u518d\u6b21\u904d\u5386 numsnums \u6570\u7ec4\u5e76\u901a\u8fc7\u4e0e\u5176\u4ed6\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u6765\u627e\u5230 minmin \u548c maxmax \u5728\u539f\u6570\u7ec4\u4e2d\u7684\u6b63\u786e\u4f4d\u7f6e\u3002\u6211\u4eec\u53ea\u9700\u8981\u4ece\u5934\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e minmin \u7684\u5143\u7d20\uff0c\u4ece\u5c3e\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e maxmax \u7684\u5143\u7d20\uff0c\u5b83\u4eec\u4e4b\u95f4\u5c31\u662f\u6700\u77ed\u65e0\u5e8f\u5b50\u6570\u7ec4\u3002 \u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u4f7f\u7528\u4e0b\u56fe\u4f5c\u4e3a\u8bf4\u660e\uff1a class Solution: def findUnsortedSubarray(self, nums: List[int]) -> int: \"\"\" \u65b9\u6cd5\u4e00: \u6392\u5e8f \u627e\u5230\u4e0d\u76f8\u7b49\u7684\u7b2c\u4e00\u4e2a\u70b9 \u548c\u6700\u540e\u4e00\u4e2a\u70b9 O(NlogN) \u65b9\u6cd5\u4e8c: \u5b58\u5165\u5c71\u8c37\u7684\u533a\u95f4 \u6808 \"\"\" min_v = float('inf') max_v = float('-inf') flag = False # 1.\u627e\u5230\u964d\u5e8f\u540e\u5143\u7d20\u6700\u5c0f\u503c for i in range(1, len(nums)): if nums[i] < nums[i-1] or flag: flag = True min_v = min(nums[i], min_v) # 2.\u9006\u5e8f\u904d\u5386\u627e\u5230\u5347\u5e8f\u540e\u5143\u7d20\u6700\u5927\u503c flag = False for i in range(len(nums) - 2, -1, -1): if nums[i] > nums[i + 1] or flag: flag = True max_v = max(nums[i], max_v) left = -1 right = -1 # 3.\u6211\u4eec\u53ea\u9700\u8981\u4ece\u5934\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e min \u7684\u5143\u7d20\uff0c\u4ece\u5c3e\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e max \u7684\u5143\u7d20\uff0c\u5b83\u4eec\u4e4b\u95f4\u5c31\u662f\u6700\u77ed\u65e0\u5e8f\u5b50\u6570\u7ec4\u3002 for i in range(len(nums)): if nums[i] > min_v: left = i break for i in range(len(nums) - 1, -1, -1): if nums[i] < max_v: right = i break return right - left + 1 if left != -1 else 0 621.\u4efb\u52a1\u8c03\u5ea6\u5668 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u7528\u5b57\u7b26\u6570\u7ec4\u8868\u793a\u7684 CPU \u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\u3002\u5176\u4e2d\u5305\u542b\u4f7f\u7528\u5927\u5199\u7684 A - Z \u5b57\u6bcd\u8868\u793a\u768426 \u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6267\u884c\u5b8c\u3002CPU \u5728\u4efb\u4f55\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u90fd\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002 \u7136\u800c\uff0c\u4e24\u4e2a\u76f8\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u6709\u957f\u5ea6\u4e3a n \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u56e0\u6b64\u81f3\u5c11\u6709\u8fde\u7eed n \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185 CPU \u5728\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002 \u4f60\u9700\u8981\u8ba1\u7b97\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u8981\u7684\u6700\u77ed\u65f6\u95f4\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2 \u8f93\u51fa: 8 \u6267\u884c\u987a\u5e8f: A -> B -> (\u5f85\u547d) -> A -> B -> (\u5f85\u547d) -> A -> B. \u6ce8\uff1a \u4efb\u52a1\u7684\u603b\u4e2a\u6570\u4e3a [1, 10000]\u3002 n \u7684\u53d6\u503c\u8303\u56f4\u4e3a [0, 100]\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5b8c\u6210\u6240\u6709\u4efb\u52a1\u7684\u6700\u77ed\u65f6\u95f4\u53d6\u51b3\u4e8e \u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4efb\u52a1\u6570\u91cf \u56e0\u4e3a\u76f8\u540c\u4efb\u52a1\u5fc5\u987b\u8981\u6709\u65f6\u95f4\u7247\u4e3a n \u7684\u95f4\u9694\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u628a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4efb\u52a1 A \u5b89\u6392\u4e0a \u8ba1\u7b97\u51fa\u6709\u591a\u5c11\u7a7a\u69fd\uff0c\u7528\u5176\u5b83\u4efb\u52a1\u586b\u6ee1 \u6709\u4e2a\u6ce8\u610f\uff0c\u5982\u679c\u6709n\u4e2a\u548c\u6b21\u6570\u6700\u591a\u7684\u4eba\u7269\u4e00\u6837\u591a\u7684\u4efb\u52a1\uff0c\u5728\u6700\u540e\u4e00\u4e2aA\u540e\u9762\u8981+n class Solution(object): def leastInterval(self, tasks, n): # 1.\u8ba1\u7b97\u5404\u5b57\u6bcd\u9891\u6570\u5e76\u6392\u5e8f charmap = [0] * 26 for c in tasks: charmap[ord(c) - ord('A')] += 1 charmap = sorted(charmap, reverse=True) # 2.\u6c42\u7a7a\u69fd\u6570\u91cf space_nums = (charmap[0] - 1) * n # 3.\u586b\u5145\u7a7a\u69fd for num in charmap[1:]: space_nums -= min(num, charmap[0] - 1) # 4.\u7ed3\u679c = \u7a7a\u69fd\u6570+ task\u6570 return space_nums + len(tasks) if space_nums > 0 else len(tasks) \u89e3\u6cd5\u4e8c 704.\u4e8c\u5206\u67e5\u627e\u3010\u7ecf\u5178\u3011 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u5143\u7d20\u6709\u5e8f\u7684\uff08\u5347\u5e8f\uff09\u6574\u578b\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u641c\u7d22 nums \u4e2d\u7684 target\uff0c\u5982\u679c\u76ee\u6807\u503c\u5b58\u5728\u8fd4\u56de\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [-1,0,3,5,9,12], target = 9 \u8f93\u51fa: 4 \u89e3\u91ca: 9 \u51fa\u73b0\u5728 nums \u4e2d\u5e76\u4e14\u4e0b\u6807\u4e3a 4 \u793a\u4f8b 2: \u8f93\u5165: nums = [-1,0,3,5,9,12], target = 2 \u8f93\u51fa: -1 \u89e3\u91ca: 2 \u4e0d\u5b58\u5728 nums \u4e2d\u56e0\u6b64\u8fd4\u56de -1 \u63d0\u793a\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe nums \u4e2d\u7684\u6240\u6709\u5143\u7d20\u662f\u4e0d\u91cd\u590d\u7684\u3002 n \u5c06\u5728 [1, 10f000]\u4e4b\u95f4\u3002 nums \u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c06\u5728 [-9999, 9999]\u4e4b\u95f4\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4e8c\u5206\u67e5\u627e\u6a21\u7248\u4ee3\u7801 \u5de6\u95ed\u53f3\u5f00 class Solution(object): def search(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: int \"\"\" l, r = 0, len(nums) while l < r: mid = l + ((r - l) >> 1) if nums[mid] < target: l = mid + 1 else: r = mid if l == len(nums) or nums[l] != target: return -1 return l \u89e3\u6cd5\u4e8c 739.\u6bcf\u65e5\u6e29\u5ea6 \u9898\u76ee\u63cf\u8ff0 \u6839\u636e\u6bcf\u65e5 \u6c14\u6e29 \u5217\u8868\uff0c\u8bf7\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8f93\u5165\u662f\u4f60\u9700\u8981\u518d\u7b49\u5f85\u591a\u4e45\u6e29\u5ea6\u624d\u4f1a\u5347\u9ad8\u8d85\u8fc7\u8be5\u65e5\u7684\u5929\u6570\u3002\u5982\u679c\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528 0 \u6765\u4ee3\u66ff\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]\uff0c\u4f60\u7684\u8f93\u51fa\u5e94\u8be5\u662f [1, 1, 4, 2, 1, 1, 0, 0]\u3002 \u63d0\u793a\uff1a\u6c14\u6e29 \u5217\u8868\u957f\u5ea6\u7684\u8303\u56f4\u662f [1, 30000]\u3002\u6bcf\u4e2a\u6c14\u6e29\u7684\u503c\u7684\u5747\u4e3a\u534e\u6c0f\u5ea6\uff0c\u90fd\u662f\u5728 [30, 100] \u8303\u56f4\u5185\u7684\u6574\u6570\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u753b\u56fe \u6808 class Solution: def dailyTemperatures(self, T: List[int]) -> List[int]: \"\"\" bruce O(n**2) \u753b\u56fe \u5347\u5e8f\u90e8\u5206\u5747\u4e3a1 \u964d\u5e8f\u90e8\u5206\u7d22\u5f15\u653e\u5165stack\u4e2d \"\"\" ans = [0] * len(T) stack = [] for i in range(len(T) - 1): if T[i + 1] - T[i] > 0: while stack: if T[stack[-1]] < T[i + 1]: index = stack.pop() ans[index] = i + 1 - index else: break ans[i] = 1 else: stack.append(i) return ans \u89e3\u6cd5\u4e8c 1124.\u987a\u6b21\u6570 \u9898\u76ee\u63cf\u8ff0 \u6211\u4eec\u5b9a\u4e49\u300c\u987a\u6b21\u6570\u300d\u4e3a\uff1a\u6bcf\u4e00\u4f4d\u4e0a\u7684\u6570\u5b57\u90fd\u6bd4\u524d\u4e00\u4f4d\u4e0a\u7684\u6570\u5b57\u5927 1 \u7684\u6574\u6570\u3002 \u8bf7\u4f60\u8fd4\u56de\u7531 [low, high] \u8303\u56f4\u5185\u6240\u6709\u987a\u6b21\u6570\u7ec4\u6210\u7684 \u6709\u5e8f \u5217\u8868\uff08\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u51fa\uff1alow = 100, high = 300 \u8f93\u51fa\uff1a[123,234] \u793a\u4f8b 2\uff1a \u8f93\u51fa\uff1alow = 1000, high = 13000 \u8f93\u51fa\uff1a[1234,2345,3456,4567,5678,6789,12345] \u63d0\u793a\uff1a 10 <= low <= high <= 10^9 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def sequentialDigits(self, low: int, high: int) -> List[int]: if low > high: return [] lLen, rLen = len(str(low)), len(str(high)) res = [] for Len in range(lLen, rLen + 1): for i in range(1, 11 - Len): val = i for j in range(i + 1, i + Len): val = val * 10 + j if val >= low and val <= high: res.append(val) return res \u89e3\u6cd5\u4e8c \u5148\u4fdd\u5b58\u5728\u9009\u53d6 class Solution2 { private var sequentialDigits = [12,23,34,45,56,67,78,89,123,234,345,456,567,678,789,1234,2345,3456,4567,5678,6789,12345,23456,34567,45678,56789,123456,234567,345678,456789,1234567,2345678,3456789,12345678,23456789,123456789] func sequentialDigits(_ low: Int, _ high: Int) -> [Int] { return sequentialDigits.filter { $0 >= low && $0 <= high} } } 1275. \u627e\u51fa\u4e95\u5b57\u68cb\u7684\u83b7\u80dc\u8005 \u9898\u76ee\u63cf\u8ff0 A \u548c B \u5728\u4e00\u4e2a 3 x 3 \u7684\u7f51\u683c\u4e0a\u73a9\u4e95\u5b57\u68cb\u3002 \u4e95\u5b57\u68cb\u6e38\u620f\u7684\u89c4\u5219\u5982\u4e0b\uff1a \u73a9\u5bb6\u8f6e\u6d41\u5c06\u68cb\u5b50\u653e\u5728\u7a7a\u65b9\u683c (\" \") \u4e0a\u3002 \u7b2c\u4e00\u4e2a\u73a9\u5bb6 A \u603b\u662f\u7528 \"X\" \u4f5c\u4e3a\u68cb\u5b50\uff0c\u800c\u7b2c\u4e8c\u4e2a\u73a9\u5bb6 B \u603b\u662f\u7528 \"O\" \u4f5c\u4e3a\u68cb\u5b50\u3002 \"X\" \u548c \"O\" \u53ea\u80fd\u653e\u5728\u7a7a\u65b9\u683c\u4e2d\uff0c\u800c\u4e0d\u80fd\u653e\u5728\u5df2\u7ecf\u88ab\u5360\u7528\u7684\u65b9\u683c\u4e0a\u3002 \u53ea\u8981\u6709 3 \u4e2a\u76f8\u540c\u7684\uff08\u975e\u7a7a\uff09\u68cb\u5b50\u6392\u6210\u4e00\u6761\u76f4\u7ebf\uff08\u884c\u3001\u5217\u3001\u5bf9\u89d2\u7ebf\uff09\u65f6\uff0c\u6e38\u620f\u7ed3\u675f\u3002 \u5982\u679c\u6240\u6709\u65b9\u5757\u90fd\u653e\u6ee1\u68cb\u5b50\uff08\u4e0d\u4e3a\u7a7a\uff09\uff0c\u6e38\u620f\u4e5f\u4f1a\u7ed3\u675f\u3002 \u6e38\u620f\u7ed3\u675f\u540e\uff0c\u68cb\u5b50\u65e0\u6cd5\u518d\u8fdb\u884c\u4efb\u4f55\u79fb\u52a8\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 moves\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u5927\u5c0f\u4e3a 2 \u7684\u53e6\u4e00\u4e2a\u6570\u7ec4\uff08\u5143\u7d20\u5206\u522b\u5bf9\u5e94\u7f51\u683c\u7684\u884c\u548c\u5217\uff09\uff0c\u5b83\u6309\u7167 A \u548c B \u7684\u884c\u52a8\u987a\u5e8f\uff08\u5148 A \u540e B\uff09\u8bb0\u5f55\u4e86\u4e24\u4eba\u5404\u81ea\u7684\u68cb\u5b50\u4f4d\u7f6e\u3002 \u5982\u679c\u6e38\u620f\u5b58\u5728\u83b7\u80dc\u8005\uff08A \u6216 B\uff09\uff0c\u5c31\u8fd4\u56de\u8be5\u6e38\u620f\u7684\u83b7\u80dc\u8005\uff1b\u5982\u679c\u6e38\u620f\u4ee5\u5e73\u5c40\u7ed3\u675f\uff0c\u5219\u8fd4\u56de \"Draw\"\uff1b\u5982\u679c\u4ecd\u4f1a\u6709\u884c\u52a8\uff08\u6e38\u620f\u672a\u7ed3\u675f\uff09\uff0c\u5219\u8fd4\u56de \"Pending\"\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe moves \u90fd \u6709\u6548\uff08\u9075\u5faa\u4e95\u5b57\u68cb\u89c4\u5219\uff09\uff0c\u7f51\u683c\u6700\u521d\u662f\u7a7a\u7684\uff0cA \u5c06\u5148\u884c\u52a8\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1amoves = [[0,0],[2,0],[1,1],[2,1],[2,2]] \u8f93\u51fa\uff1a\"A\" \u89e3\u91ca\uff1a\"A\" \u83b7\u80dc\uff0c\u4ed6\u603b\u662f\u5148\u8d70\u3002 \"X \" \"X \" \"X \" \"X \" \"X \" \" \" -> \" \" -> \" X \" -> \" X \" -> \" X \" \" \" \"O \" \"O \" \"OO \" \"OOX\" \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1amoves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]] \u8f93\u51fa\uff1a\"B\" \u89e3\u91ca\uff1a\"B\" \u83b7\u80dc\u3002 \"X \" \"X \" \"XX \" \"XXO\" \"XXO\" \"XXO\" \" \" -> \" O \" -> \" O \" -> \" O \" -> \"XO \" -> \"XO \" \" \" \" \" \" \" \" \" \" \" \"O \" \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1amoves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]] \u8f93\u51fa\uff1a\"Draw\" \u8f93\u51fa\uff1a\u7531\u4e8e\u6ca1\u6709\u529e\u6cd5\u518d\u884c\u52a8\uff0c\u6e38\u620f\u4ee5\u5e73\u5c40\u7ed3\u675f\u3002 \"XXO\" \"OOX\" \"XOX\" \u793a\u4f8b 4\uff1a \u8f93\u5165\uff1amoves = [[0,0],[1,1]] \u8f93\u51fa\uff1a\"Pending\" \u89e3\u91ca\uff1a\u6e38\u620f\u8fd8\u6ca1\u6709\u7ed3\u675f\u3002 \"X \" \" O \" \" \" \u63d0\u793a\uff1a 1 <= moves.length <= 9 moves[i].length == 2 0 <= moves[i][j] <= 2 moves \u91cc\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 moves \u9075\u5faa\u4e95\u5b57\u68cb\u7684\u89c4\u5219\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u66b4\u529b class Solution: def tictactoe(self, moves: List[List[int]]) -> str: \"\"\" \"\"\" def dfs(board): for i in range(3): if sum(board[i]) == 3: return True if sum([board[j][i] for j in range(3)]) == 3: return True if sum([board[i][i] for i in range(3)]) == 3: return True if sum([board[i][2-i] for i in range(3)]) == 3: return True return False # 1.\u521d\u59cb\u5316\u65b9\u683c As = [[0] * 3 for _ in range(3)] for x, y in moves[:: 2]: As[x][y] = 1 if dfs(As): return 'A' Bs = [[0] * 3 for _ in range(3)] for x, y in moves[1::2]: Bs[x][y] = 1 if dfs(Bs): return 'B' if len(moves) == 9: return \"Draw\" else: return \"Pending\" \u89e3\u6cd5\u4e8c 1277. \u7edf\u8ba1\u5168\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u5b50\u77e9\u9635 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u4f60\u4e00\u4e2a m * n \u7684\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u4e0d\u662f 0 \u5c31\u662f 1 \uff0c\u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de\u5176\u4e2d\u5b8c\u5168\u7531 1 \u7ec4\u6210\u7684 \u6b63\u65b9\u5f62 \u5b50\u77e9\u9635\u7684\u4e2a\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1amatrix = [ [0,1,1,1], [1,1,1,1], [0,1,1,1] ] \u8f93\u51fa\uff1a15 \u89e3\u91ca\uff1a \u8fb9\u957f\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u6709 10 \u4e2a\u3002 \u8fb9\u957f\u4e3a 2 \u7684\u6b63\u65b9\u5f62\u6709 4 \u4e2a\u3002 \u8fb9\u957f\u4e3a 3 \u7684\u6b63\u65b9\u5f62\u6709 1 \u4e2a\u3002 \u6b63\u65b9\u5f62\u7684\u603b\u6570 = 10 + 4 + 1 = 15. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1amatrix = [ [1,0,1], [1,1,0], [1,1,0] ] \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a \u8fb9\u957f\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u6709 6 \u4e2a\u3002 \u8fb9\u957f\u4e3a 2 \u7684\u6b63\u65b9\u5f62\u6709 1 \u4e2a\u3002 \u6b63\u65b9\u5f62\u7684\u603b\u6570 = 6 + 1 = 7. \u63d0\u793a\uff1a 1 <= arr.length <= 300 1 <= arr[0].length <= 300 0 <= arr[i][j] <= 1 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 dp class Solution: def countSquares(self, matrix: List[List[int]]) -> int: m = len(matrix) if m == 0: return 0 n = len(matrix[0]) if n == 0: return 0 dp = [[0] * (n + 1) for _ in range(m + 1)] res = 0 for i in range(1, m + 1): for j in range(1, n + 1): if matrix[i-1][j-1] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 res += dp[i][j] return res \u89e3\u6cd5\u4e8c 1282.\u7528\u6237\u5206\u7ec4 \u9898\u76ee\u63cf\u8ff0 \u6709 n \u4f4d\u7528\u6237\u53c2\u52a0\u6d3b\u52a8\uff0c\u4ed6\u4eec\u7684 ID \u4ece 0 \u5230 n - 1\uff0c\u6bcf\u4f4d\u7528\u6237\u90fd \u6070\u597d \u5c5e\u4e8e\u67d0\u4e00\u7528\u6237\u7ec4\u3002\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 groupSizes\uff0c\u5176\u4e2d\u5305\u542b\u6bcf\u4f4d\u7528\u6237\u6240\u5904\u7684\u7528\u6237\u7ec4\u7684\u5927\u5c0f\uff0c\u8bf7\u4f60\u8fd4\u56de\u7528\u6237\u5206\u7ec4\u60c5\u51b5\uff08\u5b58\u5728\u7684\u7528\u6237\u7ec4\u4ee5\u53ca\u6bcf\u4e2a\u7ec4\u4e2d\u7528\u6237\u7684 ID\uff09\u3002 \u4f60\u53ef\u4ee5\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u89e3\u51b3\u65b9\u6848\uff0cID \u7684\u987a\u5e8f\u4e5f\u4e0d\u53d7\u9650\u5236\u3002\u6b64\u5916\uff0c\u9898\u76ee\u7ed9\u51fa\u7684\u6570\u636e\u4fdd\u8bc1\u81f3\u5c11\u5b58\u5728\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1agroupSizes = [3,3,3,3,3,1,3] \u8f93\u51fa\uff1a[[5],[0,1,2],[3,4,6]] \u89e3\u91ca\uff1a \u5176\u4ed6\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u6709 [[2,1,6],[5],[0,4,3]] \u548c [[5],[0,6,2],[4,3,1]]\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1agroupSizes = [2,1,3,3,3,2] \u8f93\u51fa\uff1a[[1],[0,5],[2,3,4]] \u63d0\u793a\uff1a groupSizes.length == n 1 <= n <= 500 1 <= groupSizes[i] <= n \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def groupThePeople(self, groupSizes: List[int]) -> List[List[int]]: res = [] dic = collections.defaultdict(list) for i, g in enumerate(groupSizes): dic[g].append(i) for key, values in dic.items(): vLen = len(values) if key == vLen: res.append(values) else: res.extend([values[i: i+key] for i in range(0, vLen, key)]) return res \u89e3\u6cd5\u4e8c class Solution: def groupThePeople(self, groupSizes: List[int]) -> List[List[int]]: groupdict={} ans=[] for i,gs in enumerate(groupSizes): if gs==1: ans.append([i]) else: if gs in groupdict: groupdict[gs].append(i) if len(groupdict[gs])==gs: ans.append(groupdict[gs]) del groupdict[gs] else: groupdict[gs]=[i] return ans 1283. \u4f7f\u7ed3\u679c\u4e0d\u8d85\u8fc7\u9608\u503c\u7684\u6700\u5c0f\u9664\u6570 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6b63\u6574\u6570 threshold \uff0c\u4f60\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u6b63\u6574\u6570\u4f5c\u4e3a\u9664\u6570\uff0c\u7136\u540e\u5c06\u6570\u7ec4\u91cc\u6bcf\u4e2a\u6570\u90fd\u9664\u4ee5\u5b83\uff0c\u5e76\u5bf9\u9664\u6cd5\u7ed3\u679c\u6c42\u548c\u3002 \u8bf7\u4f60\u627e\u51fa\u80fd\u591f\u4f7f\u4e0a\u8ff0\u7ed3\u679c\u5c0f\u4e8e\u7b49\u4e8e\u9608\u503c threshold \u7684\u9664\u6570\u4e2d \u6700\u5c0f \u7684\u90a3\u4e2a\u3002 \u6bcf\u4e2a\u6570\u9664\u4ee5\u9664\u6570\u540e\u90fd\u5411\u4e0a\u53d6\u6574\uff0c\u6bd4\u65b9\u8bf4 7/3 = 3 \uff0c 10/2 = 5 \u3002 \u9898\u76ee\u4fdd\u8bc1\u4e00\u5b9a\u6709\u89e3\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anums = [1,2,5,9], threshold = 6 \u8f93\u51fa\uff1a5 \u89e3\u91ca\uff1a\u5982\u679c\u9664\u6570\u4e3a 1 \uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u548c\u4e3a 17 \uff081+2+5+9\uff09\u3002 \u5982\u679c\u9664\u6570\u4e3a 4 \uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u548c\u4e3a 7 (1+1+2+3) \u3002\u5982\u679c\u9664\u6570\u4e3a 5 \uff0c\u548c\u4e3a 5 (1+1+1+2)\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1anums = [2,3,5,7,11], threshold = 11 \u8f93\u51fa\uff1a3 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1anums = [19], threshold = 5 \u8f93\u51fa\uff1a4 \u63d0\u793a\uff1a 1 <= nums.length <= 5 * 10^4 1 <= nums[i] <= 10^6 nums.length <= threshold <= 10^6 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4e8c\u5206\u7b54\u6848\u6cd5 class Solution: def smallestDivisor(self, nums: List[int], threshold: int) -> int: def check(divider): res = 0 for num in nums: res += math.ceil(num / divider) return res <= threshold l, r = 1, max(nums) while l < r: mid = l + (r - l) // 2 res = check(mid) print(mid, res) if res: r = mid else: l = mid + 1 return l \u89e3\u6cd5\u4e8c 1285. \u5143\u7d20\u548c\u5c0f\u4e8e\u7b49\u4e8e\u9608\u503c\u7684\u6b63\u65b9\u5f62\u7684\u6700\u5927\u8fb9\u957f \u9898\u76ee\u63cf\u8ff0 \u7ed9\u4f60\u4e00\u4e2a\u5927\u5c0f\u4e3a m x n \u7684\u77e9\u9635 mat \u548c\u4e00\u4e2a\u6574\u6570\u9608\u503c threshold\u3002 \u8bf7\u4f60\u8fd4\u56de\u5143\u7d20\u603b\u548c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u9608\u503c\u7684\u6b63\u65b9\u5f62\u533a\u57df\u7684\u6700\u5927\u8fb9\u957f\uff1b\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u6b63\u65b9\u5f62\u533a\u57df\uff0c\u5219\u8fd4\u56de 0 \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1amat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u603b\u548c\u5c0f\u4e8e 4 \u7684\u6b63\u65b9\u5f62\u7684\u6700\u5927\u8fb9\u957f\u4e3a 2\uff0c\u5982\u56fe\u6240\u793a\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1amat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1 \u8f93\u51fa\uff1a0 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1amat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6 \u8f93\u51fa\uff1a3 \u793a\u4f8b 4\uff1a \u8f93\u5165\uff1amat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184 \u8f93\u51fa\uff1a2 \u63d0\u793a\uff1a 1 <= m, n <= 300 m == mat.length n == mat[i].length 0 <= mat[i][j] <= 10000 0 <= threshold <= 10^5 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u884c\u524d\u7f00\u548c + \u904d\u5386 \u4e3a\u4e86\u7edf\u8ba1\u6b63\u65b9\u5f62\u77e9\u9635\u7684\u9762\u79ef\uff0c\u53ef\u4ee5\u5047\u5b9a\u5f53\u524d\u4f4d\u7f6eij\u4e3a\u6b63\u65b9\u5f62\u7684\u53f3\u4e0b\u89d2\u70b9\uff0c\u8fd9\u4e2a\u6b63\u65b9\u5f62\u53ef\u80fd\u7684\u6700\u5927\u8fb9\u957f\u4e3amaxlen = Math.min(i, j) + 1\u3002 \u6cbf\u7740\u540c\u4e00\u5217j\u5411\u4e0a\u904d\u5386\uff0c\u904d\u5386\u884c\u6570\u5373\u4e3a\u5f53\u524d\u6b63\u65b9\u5f62\u7684\u8fb9\u957flen\uff0c\u5229\u7528\u524d\u7f00\u548c\u53ef\u4ee5\u6c42\u5f97\u5f53\u524d\u6b63\u65b9\u5f62\u7684\u6bcf\u4e00\u884c\u7684\u9762\u79efrowarea\u3002 class Solution { public int maxSideLength(int[][] mat, int threshold) { int result = 0; for(int i = 0; i < mat.length; i++){ for (int j = 0; j < mat[0].length; j++){ if (j != 0){ mat[i][j] += mat[i][j - 1]; } int len = 0; int maxLen = Math.min(i, j) + 1; while (len < maxLen){ int area = 0; for (int k = 0; k < len + 1; k++) { int prefix = j-len-1 < 0 ? 0 : mat[i-k][j-len-1]; area += mat[i-k][j] - prefix; } if (area > threshold){ break; } len++; } result = len > result ? len : result; } } return result; } } \u89e3\u6cd5\u4e8c Hash 39.\u6709\u6548\u7684\u6570\u72ec \u9898\u76ee\u63cf\u8ff0 \u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002 \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: [ [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: false \u89e3\u91ca: \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece 5 \u6539\u4e3a 8 \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002 \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002 \u8bf4\u660e: \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002 \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57 1-9 \u548c\u5b57\u7b26 '.' \u3002 \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f 9x9 \u5f62\u5f0f\u7684\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u904d\u5386\u8be5 9 x 9 \u6570\u72ec \u4e09 \u6b21\uff0c\u4ee5\u786e\u4fdd\uff1a \u884c\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\u3002 \u5217\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\u3002 3 x 3 \u5b50\u6570\u72ec\u5185\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\u3002 class Solution: def isValidSudoku(self, board: List[List[str]]) -> bool: # 1.\u6821\u9a8c\u6240\u6709\u884c for i in range(9): aset = set() for num in board[i]: if num == '.': continue if num in aset: return False else: aset.add(num) # 2.\u6821\u9a8c\u6240\u6709\u5217 for j in range(9): aset = set() for i in range(9): if board[i][j] == '.': continue if board[i][j] in aset: return False else: aset.add(board[i][j]) # \u6821\u9a8c9\u5bab\u683c for i_add in range(3): for j_add in range(3): aset = set() for i in range(3): for j in range(3): num = board[3 * i_add + i][3 * j_add + j] if num == '.': continue if num in aset: print(aset) return False else: aset.add(num) return True \u89e3\u6cd5\u4e8c \u5b9e\u9645\u4e0a\uff0c\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u53ef\u4ee5\u5728\u4e00\u6b21\u8fed\u4ee3\u4e2d\u5b8c\u6210\u3002 class Solution: def isValidSudoku(self, board): \"\"\" :type board: List[List[str]] :rtype: bool \"\"\" # init data rows = [{} for i in range(9)] columns = [{} for i in range(9)] boxes = [{} for i in range(9)] # validate a board for i in range(9): for j in range(9): num = board[i][j] if num != '.': num = int(num) box_index = (i // 3 ) * 3 + j // 3 # keep the current cell value rows[i][num] = rows[i].get(num, 0) + 1 columns[j][num] = columns[j].get(num, 0) + 1 boxes[box_index][num] = boxes[box_index].get(num, 0) + 1 # check if this value has been already seen before if rows[i][num] > 1 or columns[j][num] > 1 or boxes[box_index][num] > 1: return False return True 49.\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5c06\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b: \u8f93\u5165: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], \u8f93\u51fa: [ [\"ate\",\"eat\",\"tea\"], [\"nat\",\"tan\"], [\"bat\"] ] \u8bf4\u660e\uff1a \u6240\u6709\u8f93\u5165\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 \u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 2.\u89e3\u6cd5 2.1 \u65b9\u6cd5\u4e00 Hash sort \u601d\u8def\uff1a\u5229\u7528HashMap \u952e\u4e3a\u6392\u5e8f\u540e\u76f8\u7b49\u7684\u5f02\u4f4d\u8bcd \u503c\u4e3aList \u91cc\u9762\u88c5\u7684\u662f\u6240\u6709\u6392\u5e8f\u540e\u76f8\u7b49\u7684\u5f02\u6216\u8bcd\u96c6\u5408 Time Complexity: O(NK log K\uff09 Space Complexity: O(NK) class Solution(object): def groupAnagrams(self, strs): \"\"\" :type strs: List[str] :rtype: List[List[str]] \"\"\" dic = collections.defaultdict(list) for s in strs: ss = \"\".join(sorted(list(s))) dic[ss].append(s) return list(dic.values()) 2.2 \u65b9\u6cd5\u4e8c Categorize by Count \u7edf\u8ba1bagOfWord\u7684\u8bcd\u9891\u6570\u4f5c\u4e3akey Time Complexity: O(NK) Space Complexity: O(NK) class Solution(object): def groupAnagrams(self, strs): \"\"\" :type strs: List[str] :rtype: List[List[str]] \"\"\" dic = collections.defaultdict(list) for s in strs: cnts = [0] * 26 for c in s: cnts[ord(c) - ord('a')] += 1 dic[tuple(cnts)].append(s) return list(dic.values()) 290.\u5355\u8bcd\u6a21\u5f0f 290.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u79cd pattern(\u6a21\u5f0f) \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 str \uff0c\u5224\u65ad str \u662f\u5426\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\u3002 \u8fd9\u91cc\u7684 \u9075\u5faa \u6307\u5b8c\u5168\u5339\u914d\uff0c\u4f8b\u5982\uff0c pattern \u91cc\u7684\u6bcf\u4e2a\u5b57\u6bcd\u548c\u5b57\u7b26\u4e32 str \u4e2d\u7684\u6bcf\u4e2a\u975e\u7a7a\u5355\u8bcd\u4e4b\u95f4\u5b58\u5728\u7740\u53cc\u5411\u8fde\u63a5\u7684\u5bf9\u5e94\u6a21\u5f0f\u3002 \u793a\u4f8b1: \u8f93\u5165: pattern = \"abba\", str = \"dog cat cat dog\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165:pattern = \"abba\", str = \"dog cat cat fish\" \u8f93\u51fa: false \u793a\u4f8b 3: \u8f93\u5165: pattern = \"aaaa\", str = \"dog cat cat dog\" \u8f93\u51fa: false \u793a\u4f8b 4: \u8f93\u5165: pattern = \"abba\", str = \"dog dog dog dog\" \u8f93\u51fa: false \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe pattern \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\uff0c str \u5305\u542b\u4e86\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u5c0f\u5199\u5b57\u6bcd\u3002 290.2.\u89e3\u6cd5 290.2.1 \u65b9\u6cd5\u4e00 import java.util.HashMap; class Solution { public boolean wordPattern(String pattern, String str) { String[] strArray = str.split(\" \"); if(strArray.length != pattern.length()){ return false; } HashMap<String, Character> map = new HashMap<>(); HashMap<Character, String> cmap = new HashMap<>(); for(int i = 0; i < pattern.length(); i++){ if(map.containsKey(strArray[i])){ if(pattern.charAt(i) != map.get(strArray[i])){ return false; } }else{ map.put(strArray[i], pattern.charAt(i)); } if(cmap.containsKey(pattern.charAt(i))){ if(!strArray[i].equals(cmap.get(pattern.charAt(i)))){ return false; } }else{ cmap.put(pattern.charAt(i), strArray[i]); } } return true; } } public boolean wordPattern(String pattern, String str) { String[] words = str.split(\" \"); if (words.length != pattern.length()) return false; Map index = new HashMap(); for (Integer i=0; i<words.length; ++i) // the previous value associated with `key`, or `null` if there was no mapping for `key`. (A `null` return can also indicate that the map previously associated `null` with `key`.) if (!Objects.equals(index.put(pattern.charAt(i), i), index.put(words[i], i))) return false; return true; } public class Solution { public boolean wordPattern(String pattern, String str) { String[] arr= str.split(\" \"); HashMap<Character, String> map = new HashMap<Character, String>(); if(arr.length!= pattern.length()) return false; for(int i=0; i<arr.length; i++){ char c = pattern.charAt(i); if(map.containsKey(c)){ if(!map.get(c).equals(arr[i])) return false; }else{ if(map.containsValue(arr[i])) return false; map.put(c, arr[i]); } } return true; } } 290.2.2 \u65b9\u6cd5\u4e8c 187.\u91cd\u590d\u7684DNA\u5e8f\u5217 187.1.\u9898\u76ee\u63cf\u8ff0 \u6240\u6709 DNA \u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a A\uff0cC\uff0cG \u548c T \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a\u201cACGAATTCCG\u201d\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e DNA \u5206\u5b50\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u591a\u4e00\u6b21\u768410\u4e2a\u5b57\u6bcd\u957f\u7684\u5e8f\u5217\uff08\u5b50\u4e32\uff09\u3002 \u793a\u4f8b: \u8f93\u5165: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\" \u8f93\u51fa: [\"AAAAACCCCC\", \"CCCCCAAAAA\"] 187.2.\u89e3\u6cd5 187.2.1 \u65b9\u6cd5\u4e00 class Solution(object): def findRepeatedDnaSequences(self, s): \"\"\"s :type s: str :rtype: List[str] \"\"\" sset = set() res = set() for i in range(len(s) - 9): if s[i: i + 10] in sset: res.add(s[i: i + 10]) else: sset.add(s[i: i + 10]) return list(res) 187.2.2 \u65b9\u6cd5\u4e8c \u4f4d\u8fd0\u7b97 class Solution { public List<String> findRepeatedDnaSequences(String s) { Set<Integer> words = new HashSet<>(); Set<Integer> doubleWords = new HashSet<>(); List<String> ans = new ArrayList<>(); char[] map = new char[26]; map['A' - 'A'] = 0; map['C' - 'A'] = 1; map['G' - 'A'] = 2; map['T' - 'A'] = 3; for(int i = 0; i < s.length() - 9; i++){ int v = 0; for(int j = i; j < i + 10; j++){ // --- \u6bcf\u4e2a\u5b57\u7b26\u5360\u4e24\u4f4d -- v <<= 2; v |= map[s.charAt(j) - 'A']; // --- v\u5373\u662f\u6700\u540e\u6211\u4eec\u8981\u7684\u5b57\u7b26 -- } if(!words.add(v) && doubleWords.add(v)){ ans.add(s.substring(i, i+10)); } } return ans; } } \u56de\u6eaf 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 17.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002 \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002 \u793a\u4f8b: \u8f93\u5165\uff1a\"23\" \u8f93\u51fa\uff1a[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. \u8bf4\u660e: \u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 17.2.\u89e3\u6cd5 \u9012\u5f52\u6cd5 17.2.1 \u65b9\u6cd5\u4e00 \u56de\u6eaf class Solution: def letterCombinations(self, digits: str) -> List[str]: \"7:15\" def generate(i, item, result, nums): \"\"\" (x - a)//3 + 2 \"\"\" if i == len(nums): result.append(''.join(item)) return for v in dic[nums[i]]: item.append(v) generate(i+1, item, result, nums) item.pop() dic = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']} nums = list(digits) item = [] result = [] if nums: generate(0, item, result, nums) return result 17.2.2 \u65b9\u6cd5\u4e8c \u56de\u6eaf class Solution: def letterCombinations(self, digits): \"\"\" :type digits: str :rtype: List[str] \"\"\" phone = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']} def backtrack(combination, next_digits): # if there is no more digits to check if len(next_digits) == 0: # the combination is done output.append(combination) # if there are still digits to check else: # iterate over all letters which map # the next available digit for letter in phone[next_digits[0]]: # append the current letter to the combination # and proceed to the next digits backtrack(combination + letter, next_digits[1:]) output = [] if digits: backtrack(\"\", digits) return output Complexity Analysis Time complexity : O(3N\u00d74M)where N is the number of digits in the input that maps to 3 letters ( e.g. 2, 3, 4, 5, 6, 8 ) and M is the number of digits in the input that maps to 4 letters ( e.g. 7, 9 ), and N+M is the total number digits in the input. Space complexity : O(3N\u00d74M) since one has to keep 3N\u00d74M3 N \u00d74 M solutions. 78 \u5b50\u96c6 78.1 \u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u7ec4\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u8bf4\u660e\uff1a\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002 \u793a\u4f8b: \u8f93\u5165: nums = [1,2,3] \u8f93\u51fa: [ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], [] ] 78.2 \u601d\u8def \u9996\u5148 \uff0c\u8fd9\u4e2a\u9898\u662fNP\u95ee\u9898\uff0c\u6ca1\u6709\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u7684\u7b97\u6cd5\uff0c\u53ea\u80fd\u7528\u641c\u7d22\u89e3\u51b3\u7684\u95ee\u9898 \u9009\u62e9\u7528DFS-backtracking \u7684\u9012\u5f52\u65b9\u5f0f\u89e3\u51b3 78.2.1 \u9012\u5f52\u6cd5 import copy class Solution: def subsets(self, nums: List[int]) -> List[List[int]]: result = [] if len(nums) == 0: return [[]] # \u5f85\u5224\u65ad\u662f\u5426\u653e\u5165\u96c6\u5408\u7684\u5143\u7d20 sub_result = self.subsets(nums[1:]) result.extend(copy.deepcopy(sub_result)) for item in sub_result: item.append(nums[0]) result.append(item) return result 78.2.2 \u56de\u6eaf(\u66b4\u529b\u641c\u7d22\u6cd5O(2^n))(\u7279\u6b8a\u65b9\u6cd5 \u4e0d\u6e05\u695a\u7684\u5f88\u96be\u81ea\u5df1\u60f3\u51fa) \u56de\u6eaf\u6cd5: \u5229\u7528\u56de\u6eaf\u6cd5\u751f\u6210\u5b50\u96c6, \u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20, \u90fd\u6709\u8bd5\u63a2\u653e\u5165\u6216\u4e0d\u653e\u5165\u96c6\u5408\u4e2d\u7684\u4e24\u4e2a\u9009\u62e9: \u653e\u5165\u8be5\u5143\u7d20, \u9012\u5f52\u7684\u8fdb\u884c\u540e\u7eed\u5143\u7d20\u7684\u9009\u62e9, \u5b8c\u6210\u653e\u5165\u8be5\u5143\u7d20\u7684\u540e\u7eed\u6240\u6709\u5143\u7d20\u7684\u8bd5\u63a2 \u4e0d\u653e\u5165\u8be5\u5143\u7d20, \u9012\u5f52\u7684\u8fdb\u884c\u540e\u7eed\u5143\u7d20\u7684\u9009\u62e9, \u5b8c\u6210\u4e0d\u653e\u5165\u8be5\u5143\u7d20\u7684\u6240\u6709\u5143\u7d20\u7684\u8bd5\u63a2 \u4f8b\u5982 nums=[1, 2, 3, 4, 5], \u82e5\u653e\u51651, subset =[1], \u7ee7\u7eed\u9012\u5f52\u5904\u7406[2, 3, 4, 5]; \u82e5\u7ee7\u7eed\u653e\u51652, item=[1, 2] \u82e5\u4e0d\u653e\u51651, subset = [], \u7ee7\u7eed\u9012\u5f52\u5904\u7406[2, 3, 4, 5] \u672c\u89e3\u6cd5\u91c7\u7528\u56de\u6eaf\u7b97\u6cd5\u5b9e\u73b0\uff0c\u56de\u6eaf\u7b97\u6cd5\u7684\u57fa\u672c\u5f62\u5f0f\u662f\u201c**\u9012\u5f52+\u5faa\u73af**\u201d\uff0c\u6b63\u56e0\u4e3a\u5faa\u73af\u4e2d\u5d4c\u5957\u7740\u9012\u5f52\uff0c\u9012\u5f52\u4e2d\u5305\u542b\u5faa\u73af\uff0c\u8fd9\u624d\u4f7f\u5f97\u56de\u6eaf\u6bd4\u4e00\u822c\u7684\u9012\u5f52\u548c\u5355\u7eaf\u7684\u5faa\u73af\u66f4\u96be\u7406\u89e3\uff0c\u5176\u5b9e\u6211\u4eec\u719f\u6089\u4e86\u5b83\u7684\u57fa\u672c\u5f62\u5f0f\uff0c\u5c31\u4f1a\u89c9\u5f97\u8fd9\u6837\u7684\u7b97\u6cd5\u96be\u5ea6\u4e5f\u4e0d\u662f\u5f88\u5927\u3002\u539f\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u6709\u4e24\u79cd\u72b6\u6001\uff1a\u5b58\u5728\u548c\u4e0d\u5b58\u5728\u3002 \u2460 \u5916\u5c42\u5faa\u73af\u9010\u4e00\u5f80\u4e2d\u95f4\u96c6\u5408 temp \u4e2d\u52a0\u5165\u5143\u7d20 nums[i]\uff0c\u4f7f\u8fd9\u4e2a\u5143\u7d20\u5904\u4e8e\u5b58\u5728\u72b6\u6001 \u2461 \u5f00\u59cb\u9012\u5f52\uff0c\u9012\u5f52\u4e2d\u643a\u5e26\u52a0\u5165\u65b0\u5143\u7d20\u7684 temp\uff0c\u5e76\u4e14\u4e0b\u4e00\u6b21\u5faa\u73af\u7684\u8d77\u59cb\u662f i \u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\uff0c\u56e0\u800c\u9012\u5f52\u4e2d\u66f4\u65b0 i \u503c\u4e3a i + 1 \u2462 \u5c06\u8fd9\u4e2a\u4ece\u4e2d\u95f4\u96c6\u5408 temp \u4e2d\u79fb\u9664\uff0c\u4f7f\u8be5\u5143\u7d20\u5904\u4e8e\u4e0d\u5b58\u5728\u72b6\u6001 ** \u6e05\u6670 ** \u63a8\u8350 ** def generate(i, nums, item, result): if i == len(nums): return item.append(nums[i]) result.append(copy.deepcopy(item)) generate(i+1, nums, item, result) item.pop() generate(i+1, nums, item, result) item = [] result = [] result.append(item) generate(0, nums, item, result) return result class Solution: def subsets(self, nums): # \u662f\u4e0a\u9762\u89e3\u9898\u5f62\u5f0f\u7684\u53d8\u79cd \u4e0d\u597d\u7406\u89e3 \u53ef\u4ee5\u8bb0\u4f5c\u4e00\u79cd\u5957\u8def \u8fed\u4ee3+\u9012\u5f52 def generate(i, nums, item, result): result.append(list(item)) for j in range(i, len(nums)): item.append(nums[j]) generate(j+1, nums, item, result) item.pop() result = [] generate(0, nums, [], result) return result 78.2.3 \u4f4d\u8fd0\u7b97\u6cd5(\u7279\u6b8a\u65b9\u6cd5 \u4e0d\u6e05\u695a\u7684\u5f88\u96be\u81ea\u5df1\u60f3\u51fa) & | ^ ~ << >> \u672c\u9898\u4f7f\u7528\u5230 & and << public: std::vector<std::vector<int>> subsets(std::vector<int>& nums){ // \u8bbe\u7f6e\u5168\u90e8\u96c6\u5408\u7684\u6700\u5927\u503c + 1 \u5373(2 ^ nums.size()+1 int all_set = 1 << nums.size() // \u6574\u6570i\u4ee3\u8868\u4ece0\u81f32^n-1\u8fd9\u6240\u6709\u7684\u96c6\u5408 // (1<<j)\u5373\u4e3a\u6784\u9020nums\u6570\u7ec4\u7684\u7b2cj\u4e2a\u5143\u7d20 // \u82e5i & (1<<j) \u4e3a\u771f\u5219nums[j]\u653e\u5165item for(int i = 0; i < all_set; i++){ std::vector<int> item; // j\u662f ABC\u662f\u5426\u51fa\u73b0 \u51fa\u73b0\u5219\u5c06\u8be5\u5143\u7d20push\u5165\u96c6\u5408 for int j = 0; j < nums.size(); j++){ // \u82e5i \u548c 100 010 001 \u4f4d\u4e0e(&)\u8fd0\u7b97\u540e\u4e3a1 push\u5165item if(i & (1 << j)){ item.push_back(nums[j]) } } // \u6839\u636e\u4e0a\u4e00\u4e2afor loop\u5f97\u77e5\u8fd9\u4e00\u4e2a\u96c6\u5408\u662f\u4ec0\u4e48 \u653e\u5165result\u4e2d result.push_back(item) } } 78.3 \u95ee\u9898 \u6570\u7ec4\u6d45\u62f7\u8d1d\u6df1\u62f7\u8d1d\u95ee\u9898 result.extend(copy.deepcopy(sub_result)) 1\u3001copy.copy \u6d45\u62f7\u8d1d \u53ea\u62f7\u8d1d\u7236\u5bf9\u8c61\uff0c\u4e0d\u4f1a\u62f7\u8d1d\u5bf9\u8c61\u7684\u5185\u90e8\u7684\u5b50\u5bf9\u8c61\u3002 2\u3001copy.deepcopy \u6df1\u62f7\u8d1d \u62f7\u8d1d\u5bf9\u8c61\u53ca\u5176\u5b50\u5bf9\u8c61 \u66f4\u63a8\u8350\u7684\u5199\u6cd5 result.extend(list(sub_result)) 90 \u5b50\u96c6II 90.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 *nums *\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u8bf4\u660e\uff1a \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,2] \u8f93\u51fa: [ [2], [1], [1,2,2], [2,2], [1,2], [] ] 90.2 \u89e3\u6cd5 90.2.1 \u65b9\u6cd5\u4e00 \u56de\u6eaf class Solution: def subsetsWithDup(self, nums: List[int]) -> List[List[int]]: \"\"\" \u548c\u5b50\u96c6I\u533a\u522b\u5728\u4e8e\u6709\u91cd\u590d \u91cd\u590d\u5206\u4e24\u79cd \u4e00\u79cd\u662f\u96c6\u5408\u76f8\u540c\u4f46\u4f4d\u7f6e\u4e0d\u540c \u53ef\u901a\u8fc7\u6392\u5e8f\u89e3\u51b3 \u4e00\u79cd\u662f\u96c6\u5408\u76f8\u540c\u4f4d\u7f6e\u4e5f\u76f8\u540c \u53ef\u901a\u8fc7\u7ed3\u679c\u7528set\u4fdd\u5b58 set \u76f4\u63a5\u5b58list \u8fd4\u56de type error: unhashable type: list \"\"\" def generate(i, nums, item, result): result.append(list(item)) for j in range(i, len(nums)): item.append(nums[j]) generate(j+1, nums, item, result) item.pop() # \u505a\u6392\u5e8f \u9632\u6b62\u7b2c\u4e00\u79cd\u91cd\u590d nums = sorted(nums) result = [] item = [] generate(0, nums, item, result) ## \u5982\u4f55\u5bf9\u5217\u8868\u4e2d\u7684\u5217\u8868\u53bb\u91cd \u6216\u8005\u7a0b\u5e8f\u4e2d\u5982\u4f55\u505a\u5224\u65ad\u9632\u6b62\u76f8\u540c\u7684\u5217\u8868\u8fdb\u5165 result = [list(j) for j in set([tuple(item) for item in result])] return result 90.2.2 \u65b9\u6cd5\u4e8c \u9012\u5f52 class Solution: def subsetsWithDup(self, nums: List[int]) -> List[List[int]]: if not nums: return [[]] nums = sorted(nums) num = nums[0] subsets = self.subsetsWithDup(nums[1:]) subsets = subsets + [i+[num] for i in subsets] subsets = [list(j) for j in set([tuple(item) for item in subsets])] return subsets 90.4 \u95ee\u9898 unhash able type list 90.4.1 unhash able type list set\u4e2d\u5b58\u6709\u7684\u662fhash\u5316\u7684\u5bf9\u8c61, \u7136\u800clist\u7b49\u503c\u53ef\u4ee5\u6539\u53d8\u7684\u5bf9\u8c61\u96be\u4ee5hash, \u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u653e\u5165 90.4.2 \u5bf9\u5217\u8868\u4e2d\u7684\u5217\u8868(\u4e8c\u7ea7\u5217\u8868)\u53bb\u91cd result = [list(j) for j in set([tuple(item) for item in result])] 39.\u7ec4\u5408\u603b\u548c 29.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a \u65e0\u91cd\u590d\u5143\u7d20 \u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target \uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: \u8f93\u5165: candidates = [2,3,6,7], target = 7, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [7], [2,2,3] ] \u793a\u4f8b 2: \u8f93\u5165: candidates = [2,3,5], target = 8, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [2,2,2,2], [2,3,3], [3,5] ] 29.2.\u89e3\u6cd5 29.2.1 \u65b9\u6cd5\u4e00 \u56de\u6eaf ** class Solution: def combinationSum(self, candidates, target): def generate(i, item, result, candidates, target): if target < 0: return elif target == 0: result.append(list(item)) else: for j in range(i, len(candidates)): item.append(candidates[j]) # not i + 1 because we can reuse same elements generate(j, item, result, candidates, target - candidates[j]) item.pop() item = [] result = [] candidates = sorted(candidates) generate(0, item, result, candidates, target) return result sol = Solution() print(sol.combinationSum([2,3,5], 8)) 40 \u7ec4\u5408\u603b\u548cII 40.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: \u8f93\u5165: candidates = [10,1,2,7,6,1,5], target = 8, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ] \u793a\u4f8b 2: \u8f93\u5165: candidates = [2,5,2,1,2], target = 5, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1,2,2], [5] ] 40.2 \u89e3\u6cd5 import copy class Solution: def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]: \"\"\" \u8fb9\u754c\u6761\u4ef6: candidates\u4e2d\u53ef\u80fd\u542b\u6709\u91cd\u590d\u503c \u524d\u7f6e\u9898\u76ee: 78 \u5b50\u96c6 90 \u5b50\u96c6II \u672c\u9898\u521b\u65b0\u70b9: \u5982\u4f55\u526a\u679d \u601d\u8003: \u5f53\u5b50\u96c6\u7d2f\u8ba1\u503c\u5927\u4e8e >= target\u65f6 \u526a\u679d(\u56e0\u4e3a\u6240\u6709\u6570\u5b57\u90fd\u662f\u6b63\u6574\u6570) \u9632\u6b62\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408: \u4e24\u79cd\u91cd\u590d: 1.\u96c6\u5408\u4e2d\u5143\u7d20\u4f4d\u7f6e\u4e0d\u540c \u503c\u76f8\u540c(\u5148\u6392\u5e8f) 2.\u96c6\u5408\u4e2d\u5143\u7d20\u76f8\u540c(\u4e8c\u91cd\u5217\u8868\u53bb\u91cd \u6216\u9632\u6b62\u91cd\u590d\u96c6\u5408\u8fdb\u5165\u7ed3\u679c\u96c6) \u6700\u540e\u8ba1\u7b97\u5269\u4f59\u96c6\u5408\u4e2d\u5143\u7d20\u548c\u7b49\u4e8etarget\u7684\u5b50\u96c6 Note: deepcopy \"\"\" def back_track(i, item, candidates, set_sum, result): \"\"\" set_sum: \u5f85\u4f20\u5165\u7684\u5b50\u96c6\u7684\u548c \u4e0esubsets\u9898\u76ee\u76f8\u6bd4 \u589e\u52a0\u4e2a\u526a\u679d \u5982\u4f55\u526a\u679d \u589e\u52a0set_sum\u53d8\u91cf\u6765\u5224\u65ad \"\"\" # \u8df3\u51fa\u6761\u4ef6 if i >= len(candidates) or set_sum > target: return # *** \u526a\u679d *** set_sum = candidates[i] + set_sum item.append(candidates[i]) if set_sum == target: result.append(copy.deepcopy(item)) back_track(i+1, item, candidates, set_sum, result) # ** back_track ** \u8fd9\u4e2a\u5730\u65b9\u5bb9\u6613\u56de\u6eaf\u65f6\u5bb9\u6613\u5fd8\u8bb0\u51cf\u6389\u4e0d\u52a0\u5165\u7684\u5143\u7d20\u503c set_sum = set_sum - candidates[i] item.pop() back_track(i+1, item, candidates, set_sum, result) result = [] # \u6392\u5e8f\u9632\u6b62\u7b2c\u4e00\u79cd\u91cd\u590d candidates.sort() # \u5b50\u96c6 item = [] back_track(0, item, candidates, 0, result) final_result = [] # \u5bf9result\u53bb\u91cd\u4e14\u4fdd\u7559\u7b49\u4e8etarget\u7684\u5b50\u96c6 final_result = list(set([tuple(f) for f in result])) final_result = [list(f) for f in final_result] return final_result def combinationSum2(self, candidates, target): # Sorting is really helpful, se we can avoid over counting easily candidates.sort() result = [] self.combine_sum_2(candidates, 0, [], result, target) return result def combine_sum_2(self, nums, start, path, result, target): # Base case: if the sum of the path satisfies the target, we will consider # it as a solution, and stop there if not target: result.append(path) return for i in xrange(start, len(nums)): # Very important here! We don't use `i > 0` because we always want # to count the first element in this recursive step even if it is the same # as one before. To avoid overcounting, we just ignore the duplicates # after the first element. if i > start and nums[i] == nums[i - 1]: continue # If the current element is bigger than the assigned target, there is # no need to keep searching, since all the numbers are positive if nums[i] > target: break # We change the start to `i + 1` because one element only could # be used once self.combine_sum_2(nums, i + 1, path + [nums[i]], result, target - nums[i]) 42.2.2 \u56de\u6eaf \uff08\u63a8\u8350\uff09 class Solution: def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]: def generate(start, item, result, nums, target): if target < 0: return if target == 0: result.append(list(item)) return for j in range(start, len(nums)): if j > start and nums[j] == nums[j-1]: continue item.append(nums[j]) generate(j+1, item, result, nums, target - nums[j]) item.pop() nums = sorted(candidates) item = [] result = [] generate(0, item, result, nums, target) return result 216. \u7ec4\u5408\u603b\u548c III 216.1.\u9898\u76ee\u63cf\u8ff0 \u627e\u51fa\u6240\u6709\u76f8\u52a0\u4e4b\u548c\u4e3a n \u7684 k \u4e2a\u6570\u7684\u7ec4\u5408 \u3002 \u7ec4\u5408\u4e2d\u53ea\u5141\u8bb8\u542b\u6709 1 - 9 \u7684\u6b63\u6574\u6570\uff0c\u5e76\u4e14\u6bcf\u79cd\u7ec4\u5408\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u6570\u5b57\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: \u8f93\u5165: k = 3, n = 7 \u8f93\u51fa: [[1,2,4]] \u793a\u4f8b 2: \u8f93\u5165: k = 3, n = 9 \u8f93\u51fa: [[1,2,6], [1,3,5], [2,3,4]] 216.2.\u89e3\u6cd5 216.2.1 \u65b9\u6cd5\u4e00 class Solution: def combinationSum3(self, k: int, n: int) -> List[List[int]]: def generate(start, item, result, nums, n): if n < 0 or len(item) > k: return if n == 0 and len(item) == k: result.append(list(item)) return for j in range(start, len(nums)): item.append(nums[j]) generate(j+1, item, result, nums, n-nums[j]) item.pop() nums = range(1, min(10, n)) item = [] result = [] generate(0, item, result, nums, n) return result 216.2.2 \u65b9\u6cd5\u4e8c 377. \u7ec4\u5408\u603b\u548c \u2163 DP[\u63a8\u8350] 377.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u4e14\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u4e3a\u7ed9\u5b9a\u76ee\u6807\u6b63\u6574\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\u3002 \u793a\u4f8b: nums = [1, 2, 3] target = 4 \u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u4e3a\uff1a (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) \u8bf7\u6ce8\u610f\uff0c\u987a\u5e8f\u4e0d\u540c\u7684\u5e8f\u5217\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u7ec4\u5408\u3002 \u56e0\u6b64\u8f93\u51fa\u4e3a 7\u3002 \u8fdb\u9636\uff1a \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u4e2d\u542b\u6709\u8d1f\u6570\u4f1a\u600e\u4e48\u6837\uff1f \u95ee\u9898\u4f1a\u4ea7\u751f\u4ec0\u4e48\u53d8\u5316\uff1f \u6211\u4eec\u9700\u8981\u5728\u9898\u76ee\u4e2d\u6dfb\u52a0\u4ec0\u4e48\u9650\u5236\u6765\u5141\u8bb8\u8d1f\u6570\u7684\u51fa\u73b0\uff1f 377.2.\u89e3\u6cd5 377.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52 \u8d85\u51fa\u65f6\u95f4\u9650\u5236 class Solution { public int combinationSum4(int[] nums, int target) { if (target == 0){ return 1; } int res = 0; for(int i = 0; i < nums.length; i++){ if(target >= nums[i]){ res += combinationSum4(nums, target- nums[i]); } } return res; } } 377.2.2 \u65b9\u6cd5\u4e8c DP class Solution: def combinationSum4(self, nums: List[int], target: int) -> int: dp = [0] * (target+1) dp[0] = 1 for i in range(1, target+1): for num in nums: if i >= num: dp[i] += dp[i-num] return dp[target] 46.\u5168\u6392\u5217 46.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 \u8fdb\u9636\uff1a\u6709\u91cd\u590d\u6570\u5b57 \u793a\u4f8b: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] 46.2.\u89e3\u6cd5 46.2.1 \u65b9\u6cd5\u4e00 class Solution: def permute(self, nums: List[int]) -> List[List[int]]: def generate(item, result, nums): if len(item) == len(nums): result.append(list(item)) else: for j in range(len(nums)): if nums[j] not in item: item.append(nums[j]) generate(item, result, nums) item.pop() item = [] result = [] generate(item, result, nums) return result 46.2.2 \u65b9\u6cd5\u4e8c 47. \u5168\u6392\u5217 II 47.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002 \u793a\u4f8b: \u8f93\u5165: [1,1,2] \u8f93\u51fa: [ [1,1,2], [1,2,1], [2,1,1] ] 47.2 \u89e3\u6cd5 47.2.1 \u56de\u6eaf(\u57fa\u4e8e\u6570\u7ec4\u4f4d\u7f6e) \u5173\u952e : \u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u5178\u6765\u8bb0\u5f55\u662f\u5426\u67d0\u4e2a\u4f4d\u7f6e\u7684\u503c\u5df2\u7ecf\u88ab\u4f7f\u7528\u4e86 result\u4f7f\u7528set class Solution: def permuteUnique(self, nums: List[int]) -> List[List[int]]: \"\"\"\u8fd4\u56de\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217(\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57) \"\"\" def backtrack(nums, i, items, result, dic): \"\"\" nums(list): \u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217 i, \u5e8f\u5217\u5305\u542b\u51e0\u4e2a\u6570\u5b57 \"\"\" if len(items) == len(nums): # \u662f\u5426\u91cd\u590d result.add(tuple(items)) return for i in range(len(nums)): if dic[i]: continue items.append(nums[i]) dic[i] = True backtrack(nums, i+1, items, result, dic) dic[i] = False items.pop() result = set() items = [] dic = dict((i, False) for i in range(len(nums))) backtrack(nums, 0, items, result, dic) result = [list(x) for x in result] return result result\u4f7f\u7528list (nums\u5148\u6392\u5e8f, dfs\u505a\u6821\u9a8c if(i>0 &&nums[i-1]==nums[i] && !used[i-1]) continue;) public class Solution { public List<List<Integer>> permuteUnique(int[] nums) { List<List<Integer>> res = new ArrayList<List<Integer>>(); if(nums==null || nums.length==0) return res; boolean[] used = new boolean[nums.length]; List<Integer> list = new ArrayList<Integer>(); // result\u4f7f\u7528list Arrays.sort(nums); dfs(nums, used, list, res); return res; } public void dfs(int[] nums, boolean[] used, List<Integer> list, List<List<Integer>> res){ if(list.size()==nums.length){ res.add(new ArrayList<Integer>(list)); return; } for(int i=0;i<nums.length;i++){ if(used[i]) continue; // result\u4f7f\u7528list\u5bfc\u81f4\u8981\u6821\u9a8c\u91cd\u590d\u60c5\u51b5 (\u526a\u679d) if(i>0 &&nums[i-1]==nums[i] && !used[i-1]) continue; used[i]=true; list.add(nums[i]); dfs(nums,used,list,res); used[i]=false; list.remove(list.size()-1); } } } 47.2.2 \u56de\u6eaf(\u57fa\u4e8e\u5404\u5b57\u6bcd\u7684\u6570\u91cf) 47.2.3 (todo: ) https://leetcode.com/problems/permutations-ii/discuss/18602/9-line-python-solution-with-1-line-to-handle-duplication-beat-99-of-others-%3A-) Great solution! Here is a short (casual) proof about why break can avoid the duplication. Argument: Assume ans is a list of unique permutations with each item length k , then new_ans is a list of unique permutation with length k+1 . When k=0 , it holds. Then we prove it will also holds in each iteration using proof by contradiction. Suppose duplicate happens when inserting n into the i th location, the result is [l2[:i], n, l2[i:]] , and it duplicates with the item [l1[:j], n, l1[j:]] Suppose i < j , then we have l1[i] ==n , however, we will break when l1[i]==n , and thus n will not be inserted after l1[:j] -> contradiction, Suppose i > j , then we have l2[j] == n , however we will break when l2[j] == n , and thus n will not be inserted after l2[:i] -> contradiction. Suppose i==j , then we have l1==l2 , which contradicts the assumption that ans is a list of unique permutations. Thus the argument hold. def permuteUnique(self, nums): ans = [[]] for n in nums: new_ans = [] for l in ans: for i in xrange(len(l)+1): new_ans.append(l[:i]+[n]+l[i:]) if i<len(l) and l[i]==n: break #handles duplication ans = new_ans return ans 22.\u62ec\u53f7\u751f\u6210 22.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa n = 3\uff0c\u751f\u6210\u7ed3\u679c\u4e3a\uff1a [ \"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\" ] 22.2 \u89e3\u6cd5 import copy class Solution: def generateParenthesis(self, n: int) -> List[str]: \"\"\" 1.\u641c\u7d22\u6240\u6709\u7684\u60c5\u51b5(\u4e0d\u8003\u8651\u62ec\u53f7\u5bf9\u9519) 2.\u526a\u679d: 2.1 \u5de6\u62ec\u53f7\u6570 > n or \u53f3\u62ec\u53f7\u6570 > n 2.2 \u5de6\u62ec\u53f7\u6570 > \u53f3\u62ec\u53f7\u6570 \"\"\" # def search(n, item, result): # \"\"\" # \u641c\u7d22\u6240\u6709\u7684\u60c5\u51b5(\u4e0d\u8003\u8651\u62ec\u53f7\u5bf9\u9519) # item(str): \u62ec\u53f7\u4e32 # \"\"\" # if len(item) == 2 * n: # result.append(item) # return # search(n-1, item+'(', result) # search(n-1, item+')', result) def search_condition(item, left, right, result): \"\"\" item(str): \u62ec\u53f7\u4e32 left(int): \u5de6\u62ec\u53f7\u5269\u4f59\u6570\u91cf right(int): \u53f3\u62ec\u53f7\u5269\u4f59\u6570\u91cf result(list) \"\"\" if left == 0 and right == 0: result.append(copy.deepcopy(item)) if left > 0: search_condition(item+'(', left-1, right, result) if right > 0 and left < right: search_condition(item+')', left, right-1, result) result = [] search_condition(\"\", n, n, result) return result \u5176\u4ed6\u89e3\u6cd5 # \u6cd5\u4e00 def generateParenthesis(self, n): def generate(p, left, right, parens=[]): \"\"\" p is the parenthesis-string built so far, left and right tell the number of left and right parentheses still to add, parens collects the parentheses. \u89e3\u6cd5\u548c\u4e0a\u9762\u89e3\u6cd5\u4e00\u81f4 \"\"\" if left: generate(p + '(', left-1, right) if right > left: generate(p + ')', left, right-1) if not right: parens += p, return parens return generate('', n, n) # \u6cd5\u4e8c Here I wrote an actual Python generator. I allow myself to put the yield q at the end of the line because it's not that bad and because in \"real life\" I use Python 3 where I just say yield from generate(...). def generateParenthesis(self, n): def generate(p, left, right): if right >= left >= 0: if not right: yield p for q in generate(p + '(', left-1, right): yield q for q in generate(p + ')', left, right-1): yield q return list(generate('', n, n)) # \u6cd5\u4e09 Improved version of this. Parameter open tells the number of \"already opened\" parentheses, and I continue the recursion as long as I still have to open parentheses (n > 0) and I haven't made a mistake yet (open >= 0). def generateParenthesis(self, n, open=0): if n > 0 <= open: return ['(' + p for p in self.generateParenthesis(n-1, open+1)] + \\ [')' + p for p in self.generateParenthesis(n, open-1)] return [')' * open] * (not n) class Solution(object): def generateParenthesis(self, n): \"\"\" :type n: int :rtype: List[str] \"\"\" def generate(l, r, item, res): if r < l or l < 0 or r < 0: return elif l == 0 and r == 0: res.append(item) else: if l > 0: generate(l - 1, r, item + \"(\", res) if r > 0: generate(l, r - 1, item + \")\", res) item = \"\" res = [] generate(n, n, item, res) return res 51.N\u7687\u540e 51.1 \u9898\u76ee\u63cf\u8ff0 n \u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n \u00d7 n* \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u660e\u786e\u7684 n \u7687\u540e\u95ee\u9898\u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d 'Q' \u548c '.' \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002 \u793a\u4f8b: \u8f93\u5165: 4 \u8f93\u51fa: [ [\".Q..\", // \u89e3\u6cd5 1 \"...Q\", \"Q...\", \"..Q.\"], [\"..Q.\", // \u89e3\u6cd5 2 \"Q...\", \"...Q\", \".Q..\"] ] \u89e3\u91ca: 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002 51.2 \u89e3\u6cd5 51.2.1 \u65b9\u6cd5\u4e00 import copy class Solution: def solveNQueens(self, n: int) -> List[List[str]]: \"\"\" 1.\u521d\u59cb\u5316\u4e00\u4e2a n * n \u7684\u68cb\u76d8\u77e9\u9635 2.\u653e\u7f6e\u7687\u540e\u7684\u7b56\u7565: \u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u4efb\u9009\u4e00\u4e2a\u4f4d\u7f6e\u5f53\u505a\u7687\u540e\u5e76\u66f4\u65b0\u68cb\u76d8\u7b2c\u4e00\u4e2a\u7687\u540e\u7684\u653b\u51fb\u8303\u56f4 \u8fb9\u754c\u6761\u4ef6: \"\"\" def put_down_queen(x, y, n, board): \"\"\" O(n**2) \u4f5c\u7528: \u653e\u4e0b\u4e00\u4e2a\u7687\u540e, \u66f4\u65b0\u68cb\u76d8\u77e9\u9635\u7684\u503c \u6b65\u9aa4: \u6784\u5efa\u65b9\u5411\u6570\u7ec4\u7528\u6765\u66f4\u65b0\u68cb\u76d8 \"\"\" dx = [-1, -1, 0, 1, 1, 1, 0, -1] dy = [0, 1, 1, 1, 0, -1, -1, -1] # \u653e\u7f6e\u7687\u540e board[x][y] = 1 # \u7f6e\u7687\u540e\u7684\u653b\u51fb\u8303\u56f4\u5747\u4e3a1 for i in range(8): for j in range(n): if (x + dx[i] * j) >= 0 and (x + dx[i] * j) < n and (y + dy[i] * j) >= 0 and (y + dy[i] * j) < n: board[x+dx[i]*j][y+dy[i]*j] = 1 return board def dfsHelper(i, n, board, queen_board, result): # i == n \u5b58\u5165board if i == n: queen_str = [''.join(lst) for lst in queen_board] result.append(copy.deepcopy(queen_str)) return # \u8fd9\u4e00\u5217\u503c\u5168\u4e3a1 \u6ca1\u6709\u7687\u540e\u53ef\u653e\u7f6e\u4f4d\u7f6e if sum(board[i]) == n: return for j in range(n): if board[i][j] == 0: tmp = copy.deepcopy(board) queen_board[i][j] = 'Q' board = put_down_queen(i, j, n, board) dfsHelper(i+1, n, board, queen_board, result) board = copy.deepcopy(tmp) queen_board[i][j] = '.' # 1.\u521d\u59cb\u5316n * n\u7684\u68cb\u76d8 board = [[0 for j in range(n)] for i in range(n)] queen_board = [['.' for j in range(n)] for i in range(n)] result = [] dfsHelper(0, n, board, queen_board, result) return result 51.2.2 \u65b9\u6cd5\u4e8c [\u540e\u9762\u7684\u65b9\u6cd5\u601d\u8def\u90fd\u7c7b\u4f3c\u4e8e\u65b9\u6cd5\u4e8c, \u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u4f4e] In this problem, we can go row by row, and in each position, we need to check if the column , the 45\u00b0 diagonal and the 135\u00b0 diagonal had a queen before. Solution A: Directly check the validity of each position, 12ms : class Solution { public: std::vector<std::vector<std::string> > solveNQueens(int n) { std::vector<std::vector<std::string> > res; std::vector<std::string> nQueens(n, std::string(n, '.')); solveNQueens(res, nQueens, 0, n); return res; } private: void solveNQueens(std::vector<std::vector<std::string> > &res, std::vector<std::string> &nQueens, int row, int &n) { if (row == n) { res.push_back(nQueens); return; } for (int col = 0; col != n; ++col) if (isValid(nQueens, row, col, n)) { nQueens[row][col] = 'Q'; solveNQueens(res, nQueens, row + 1, n); nQueens[row][col] = '.'; } } bool isValid(std::vector<std::string> &nQueens, int row, int col, int &n) { // \u65f6\u95f4\u590d\u6742\u5ea6 O(n) //check if the column had a queen before. for (int i = 0; i != row; ++i) if (nQueens[i][col] == 'Q') return false; //check if the 45\u00b0 diagonal had a queen before. for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) if (nQueens[i][j] == 'Q') return false; //check if the 135\u00b0 diagonal had a queen before. for (int i = row - 1, j = col + 1; i >= 0 && j < n; --i, ++j) if (nQueens[i][j] == 'Q') return false; return true; } }; 52.2.3 \u65b9\u6cd5\u4e09(\u63a8\u8350\u638c\u63e1 \u5f88\u89c4\u8303) https://www.youtube.com/watch?v=wGbuCyNpxIg 52.2.4 \u65b9\u6cd5\u56db Use the DFS helper function to find solutions recursively. A solution will be found when the length of queens is equal to n ( queens is a list of the indices of the queens). In this problem, whenever a location (x, y ) is occupied, any other locations (p, q ) where p + q == x + y or p - q == x - y would be invalid. We can use this information to keep track of the indicators ( xy_dif and xy_sum ) of the invalid positions and then call DFS recursively with valid positions only. At the end, we convert the result (a list of lists; each sublist is the indices of the queens) into the desire format. def solveNQueens(self, n): def DFS(queens, xy_dif, xy_sum): \"\"\" queens(list): \u6bcf\u4e00\u79cd\u68cb\u76d8 \u6bcf\u4e00\u4e2a\u5143\u7d20\u662fqueen\u5728\u6bcf\u4e00\u884c\u7684index `queens` is a list of the indices of the queens xy_dif(list): x - y xy_sum(list): x + y result \u8bb0\u5f55\u7684\u662f \"\"\" # p\u884c\u6570 q\u5217\u6570 p = len(queens) if p==n: result.append(queens) return None for q in range(n): # \u9650\u5236\u6761\u4ef6 `p + q == x + y` or `p - q == x - y` is invalid if q not in queens and p-q not in xy_dif and p+q not in xy_sum: DFS(queens+[q], xy_dif+[p-q], xy_sum+[p+q]) result = [] DFS([],[],[]) return [ [\".\"*i + \"Q\" + \".\"*(n-i-1) for i in sol] for sol in result] 131.\u5206\u5272\u5b57\u7b26\u4e32 \u3010\u91cd\u70b9\u3011 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002 \u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002 \u793a\u4f8b: \u8f93\u5165: \"aab\" \u8f93\u51fa: [ [\"aa\",\"b\"], [\"a\",\"a\",\"b\"] ] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u56de\u6eaf \u5982\u679c\u8f93\u5165\u662f\u201caab\u201d\uff0c\u68c0\u67e5[0,0]\u201ca\u201d\u662f\u5426\u662f\u56de\u6587\u3002\u7136\u540e\u68c0\u67e5[0,1]\u201caa\u201d\uff0c\u7136\u540e\u68c0\u67e5[0,2]\u201caab\u201d\u3002 \u5728\u68c0\u67e5[0,0]\u65f6\uff0c\u5b57\u7b26\u4e32\u7684\u5176\u4f59\u90e8\u5206\u4e3a\u201cab\u201d\uff0c\u4f7f\u7528ab\u4f5c\u4e3a\u8f93\u5165\u6765\u8fdb\u884c\u9012\u5f52\u8c03\u7528\u3002 \u5982\u679c\u8f93\u5165\u662f\u201caab\u201d\uff0c\u68c0\u67e5[0,0]\u201ca\u201d\u662f\u5426\u662f\u56de\u6587\u3002\u7136\u540e\u68c0\u67e5[0,1]\u201caa\u201d\uff0c\u7136\u540e\u68c0\u67e5[0,2]\u201caab\u201d\u3002\u5728\u68c0\u67e5[0,0]\u65f6\uff0c\u5b57\u7b26\u4e32\u7684\u5176\u4f59\u90e8\u5206\u4e3a\u201cab\u201d\uff0c\u4f7f\u7528ab\u4f5c\u4e3a\u8f93\u5165\u6765\u8fdb\u884c\u9012\u5f52\u8c03\u7528 class Solution: def partition(self, s: str) -> List[List[str]]: def isPalindrome(l, r): if l == r: return True while l < r: if s[l] != s[r]: return False l += 1 r -= 1 return True def generate(i, item, s, result): if i == len(s): result.append(item) else: for j in range(i, len(s)): # key: \u5982\u679c\u5df2\u6709\u7684\u662f\u56de\u6587\u5b50\u4e32 \u5269\u4e0b\u7684\u7ee7\u7eed\u56de\u6eaf if isPalindrome(i, j): generate(j + 1, item + [s[i: j + 1]], s, result) item = [] result = [] generate(0, item, s, result) return result \u89e3\u6cd5\u4e8c 89.\u683c\u96f7\u7f16\u7801 \u9898\u76ee\u63cf\u8ff0 \u683c\u96f7\u7f16\u7801\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5b57\u7cfb\u7edf\uff0c\u5728\u8be5\u7cfb\u7edf\u4e2d\uff0c\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u503c\u4ec5\u6709\u4e00\u4e2a\u4f4d\u6570\u7684\u5dee\u5f02\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u7f16\u7801\u603b\u4f4d\u6570\u7684\u975e\u8d1f\u6574\u6570 n\uff0c\u6253\u5370\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u3002\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5fc5\u987b\u4ee5 0 \u5f00\u5934\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 \u8f93\u51fa: [0,1,3,2] \u89e3\u91ca: 00 - 0 01 - 1 11 - 3 10 - 2 \u5bf9\u4e8e\u7ed9\u5b9a\u7684 n\uff0c\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5e76\u4e0d\u552f\u4e00\u3002 \u4f8b\u5982\uff0c[0,2,3,1] \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u3002 00 - 0 10 - 2 11 - 3 01 - 1 \u793a\u4f8b 2: \u8f93\u5165: 0 \u8f93\u51fa: [0] \u89e3\u91ca: \u6211\u4eec\u5b9a\u4e49\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5fc5\u987b\u4ee5 0 \u5f00\u5934\u3002 \u7ed9\u5b9a\u7f16\u7801\u603b\u4f4d\u6570\u4e3a n \u7684\u683c\u96f7\u7f16\u7801\u5e8f\u5217\uff0c\u5176\u957f\u5ea6\u4e3a 2n\u3002\u5f53 n = 0 \u65f6\uff0c\u957f\u5ea6\u4e3a 20 = 1\u3002 \u56e0\u6b64\uff0c\u5f53 n = 0 \u65f6\uff0c\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u4e3a [0]\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u56de\u6eaf O(2**n) class Solution: def grayCode(self, n: int) -> List[int]: def generate(item, visited): res.append(int(item, 2)) for j in range(0, n): if item[:j] + str(1 - int(item[j])) + item[j + 1:] not in visited: item = item[:j] + str(1 - int(item[j])) + item[j + 1:] visited.add(item) generate(item, visited) if n == 0: return [0] item = \"0\" * n res = [] visited = {item} generate(item, visited) return res \u89e3\u6cd5\u4e8c \u955c\u9762\u53cd\u5c04\u6cd5(\u52a8\u6001\u89c4\u5212) O(2**n) class Solution: def grayCode(self, n: int) -> List[int]: res, head = [0], 1 for i in range(n): for j in range(len(res) - 1, -1, -1): res.append(head + res[j]) head <<= 1 return res DFS 79.\u5355\u8bcd\u641c\u7d22 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u548c\u4e00\u4e2a\u5355\u8bcd\uff0c\u627e\u51fa\u8be5\u5355\u8bcd\u662f\u5426\u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: board = [ ['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E'] ] \u7ed9\u5b9a word = \"ABCCED\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"SEE\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"ABCB\", \u8fd4\u56de false. \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DFS class Solution(object): def exist(self, board, word): \"\"\" :type board: List[List[str]] :type word: str :rtype: bool \"\"\" def dfs(i, j, board, word): if not word: return True directions = [(0, -1), (-1, 0), (0, 1), (1, 0)] for dx, dy in directions: if i >= 0 and i < m and j >= 0 and j < n and board[i][j] == word[0]: temp = board[i][j] board[i][j] = '#' if dfs(i + dx, j + dy, board, word[1:]): return True board[i][j] = temp return False if not board or len(board) == 0: return False m = len(board) n = len(board[0]) for i in range(m): for j in range(n): if dfs(i, j, board, word): return True return False \u89e3\u6cd5\u4e8c \u63a8\u8350 class Solution(object): def exist(self,board,word): if not board: return False for i in range(len(board)): for j in range(len(board[0])): if self.dfs(board,i,j,word): return True return False def dfs(self,board,i,j,word): if len(word)==0: return True # \u7ec8\u6b62\u6761\u4ef6 if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or word[0] != board[i][j]: return False tmp = board[i][j] # \u6807\u8bb0 board[i][j] = '#' res = self.dfs(board, i + 1, j, word[1:]) or self.dfs(board, i - 1, j, word[1:]) \\ or self.dfs(board, i, j + 1, word[1:]) or self.dfs(board, i, j - 1, word[1:]) # \u6062\u590d\u6807\u8bb0 board[i][j] = tmp return res \u89e3\u6cd5\u4e09 class Solution(object): # \u5b9a\u4e49\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u884c\u8d70\u65b9\u5411 directs = [(0, 1), (0, -1), (1, 0), (-1, 0)] def exist(self, board, word): \"\"\" :type board: List[List[str]] :type word: str :rtype: bool \"\"\" m = len(board) if m == 0: return False n = len(board[0]) mark = [[0 for _ in range(n)] for _ in range(m)] for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == word[0]: # \u5c06\u8be5\u5143\u7d20\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528 mark[i][j] = 1 if self.backtrack(i, j, mark, board, word[1:]) == True: return True else: # \u56de\u6eaf mark[i][j] = 0 return False def backtrack(self, i, j, mark, board, word): if len(word) == 0: return True for direct in self.directs: cur_i = i + direct[0] cur_j = j + direct[1] if cur_i >= 0 and cur_i < len(board) and cur_j >= 0 and cur_j < len(board[0]) and board[cur_i][cur_j] == word[0]: # \u5982\u679c\u662f\u5df2\u7ecf\u4f7f\u7528\u8fc7\u7684\u5143\u7d20\uff0c\u5ffd\u7565 if mark[cur_i][cur_j] == 1: continue # \u5c06\u8be5\u5143\u7d20\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528 mark[cur_i][cur_j] = 1 if self.backtrack(cur_i, cur_j, mark, board, word[1:]) == True: return True else: # \u56de\u6eaf mark[cur_i][cur_j] = 0 return False \u89e3\u6cd5\u56db \u56de\u6eaf class Solution: def exist(self, board: List[List[str]], word: str) -> bool: row = len(board) col = len(board[0]) def helper(i, j, k, visited): #print(i,j, k,visited) if k == len(word): return True for x, y in [(-1, 0), (1, 0), (0, 1), (0, -1)]: tmp_i = x + i tmp_j = y + j if 0 <= tmp_i < row and 0 <= tmp_j < col and (tmp_i, tmp_j) not in visited \\ and board[tmp_i][tmp_j] == word[k]: visited.add((tmp_i, tmp_j)) if helper(tmp_i, tmp_j, k+1, visited): return True visited.remove((tmp_i, tmp_j)) # \u56de\u6eaf return False for i in range(row): for j in range(col): if board[i][j] == word[0] and helper(i, j, 1,{(i, j)}) : return True return False 100.\u76f8\u540c\u7684\u6811 100.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002 \u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1 1 / \\ / \\ 2 3 2 3 [1,2,3], [1,2,3] \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: 1 1 / \\ 2 2 [1,2], [1,null,2] \u8f93\u51fa: false \u793a\u4f8b 3: \u8f93\u5165: 1 1 / \\ / \\ 2 1 1 2 [1,2,1], [1,1,2] \u8f93\u51fa: false 100.2.\u89e3\u6cd5 100.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52 class Solution: def isSameTree(self, p: TreeNode, q: TreeNode) -> bool: \"\"\" \u65b9\u6cd5\u4e00: \u9012\u5f52 \"\"\" if not p and not q: return True if not p or not q: return False if p.val != q.val: return False return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right) 100.2.2 \u65b9\u6cd5\u4e8c BFS from collections import deque class Solution: def isSameTree(self, p, q): \"\"\" :type p: TreeNode :type q: TreeNode :rtype: bool \"\"\" def check(p, q): if not p and not q: return True if not q or not p: return False if p.val != q.val: return False return True deq = deque([(p, q),]) while deq: p, q = deq.popleft() if not check(p, q): return False if p: deq.append((p.left, q.left)) deq.append((p.right, q.right)) return True 100.2.3 \u65b9\u6cd5\u4e09 DFS class Solution: def isSameTree(self, p, q): \"\"\" :type p: TreeNode :type q: TreeNode :rtype: bool \"\"\" def check(p, q): if not p and not q: return True if not q or not p: return False if p.val != q.val: return False return True stack = [(p, q)] while stack: p, q = stack.pop() if not check(p, q): return False if p: stack.append((p.left, q.left)) stack.append((p.right, q.right)) return True 101. \u5bf9\u79f0\u4e8c\u53c9\u6811 101. 1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002 \u4f8b\u5982\uff0c\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3] \u662f\u5bf9\u79f0\u7684\u3002 1 / \\\u00b712 2 2 / \\ / \\ 3 4 4 3 \u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a [1,2,2,null,3,null,3] \u5219\u4e0d\u662f\u955c\u50cf\u5bf9\u79f0\u7684: 1 / \\ 2 2 \\ \\ 3 3 101. 2.\u89e3\u6cd5 101. 2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52\u6cd5 class Solution: def isSymmetric(self, root: TreeNode) -> bool: \"\"\" \u9012\u5f52 \"\"\" def symSame(p, q): if not p and not q: return True if not p or not q: return False if p.val != q.val: return False return symSame(p.left, q.right) and symSame(p.right, q.left) if not root: return True return symSame(root.left, root.right) 101. 2.2 \u65b9\u6cd5\u4e8c BFS from collections import deque class Solution: def isSymmetric(self, root: TreeNode) -> bool: def check(p, q): if not p and not q: return True if not p or not q: return False if p.val != q.val: return False return True if not root: return True deq = deque([(root.left, root.right)]) while deq: p, q = deq.popleft() if not check(p, q): return False if p: deq.append((p.left, q.right)) deq.append((p.right, q.left)) return True 101.2.3 \u65b9\u6cd51\u4e09 DFS class Solution: def isSymmetric(self, root: TreeNode) -> bool: def check(p, q): if not p and not q: return True if not p or not q: return False if p.val != q.val: return False return True if not root: return True stack = [(root.left, root.right)] while stack: p, q = stack.pop() if not check(p, q): return False if p: stack.append((p.left, q.right)) stack.append((p.right, q.left)) return True 104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 104.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7] \uff0c 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u5b83\u7684\u6700\u5927\u6df1\u5ea6 3 104.2.\u89e3\u6cd5 104.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52 class Solution: def maxDepth(self, root: TreeNode) -> int: if not root: return 0 return max(1+self.maxDepth(root.left), 1+self.maxDepth(root.right)) 104.2.2 \u65b9\u6cd5\u4e8c BFS from collections import deque class Solution: def maxDepth(self, root: TreeNode) -> int: if not root: return 0 max_v = 0 deq = deque([(root, 1)]) while deq: p, cur_v = deq.popleft() if p: max_v = max(max_v, cur_v) deq.append((p.left, cur_v+1)) deq.append((p.right, cur_v+1)) return max_v 104.2.3 \u65b9\u6cd5\u4e09 DFS class Solution: def maxDepth(self, root: TreeNode) -> int: if not root: return 0 max_v = 0 stack = [(root, 1)] while stack: p, cur_v = stack.pop() if p: max_v = max(max_v, cur_v) stack.append((p.left, cur_v+1)) stack.append((p.right, cur_v+1)) return max_v 108. \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811 108.1.\u9898\u76ee\u63cf\u8ff0 \u5c06\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u8f6c\u6362\u4e3a\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u6307\u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u6709\u5e8f\u6570\u7ec4: [-10,-3,0,5,9], \u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f\uff1a[0,-3,9,-10,null,5]\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u4e0b\u9762\u8fd9\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1a 0 / \\ -3 9 / / -10 5 108.2.\u89e3\u6cd5 108.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52 class Solution: def sortedArrayToBST(self, nums: List[int]) -> TreeNode: if not nums: return None mid = len(nums) >> 1 root = TreeNode(nums[mid]) root.left = self.sortedArrayToBST(nums[:mid]) root.right = self.sortedArrayToBST(nums[mid+1:]) return root 110.\u5e73\u8861\u4e8c\u53c9\u6811 110.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a \u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7] 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de true \u3002 \u793a\u4f8b 2: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [1,2,2,3,3,null,null,4,4] 1 / \\ 2 2 / \\ 3 3 / \\ 4 4 \u8fd4\u56de false \u3002 110.2.\u89e3\u6cd5 110.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52 class Solution: def isBalanced(self, root: TreeNode) -> bool: \"\"\" \u9012\u5f52 \"\"\" def helper(root): if not root: return 0 l_len = helper(root.left) if l_len == -1: return -1 r_len = helper(root.right) if r_len == -1: return -1 if abs(l_len - r_len) <= 1: return max(l_len, r_len) + 1 else: return -1 return helper(root) >= 0 111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6 111.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002 \u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7] , 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u5b83\u7684\u6700\u5c0f\u6df1\u5ea6 2. 111.2.\u89e3\u6cd5 111.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52 class Solution: def minDepth(self, root: TreeNode) -> int: if not root: return 0 l_len = self.minDepth(root.left) r_len = self.minDepth(root.right) if l_len == 0 or r_len == 0: return max(l_len, r_len) + 1 return min(l_len, r_len) + 1 112. \u8def\u5f84\u603b\u548c 112.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811\uff0c\u4ee5\u53ca\u76ee\u6807\u548c sum = 22 \uff0c 5 / \\ 4 8 / / \\ 11 13 4 / \\ \\ 7 2 1 \u8fd4\u56de true , \u56e0\u4e3a\u5b58\u5728\u76ee\u6807\u548c\u4e3a 22 \u7684\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84 5->4->11->2 \u3002 112.2.\u89e3\u6cd5 112.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52 class Solution: def hasPathSum(self, root: TreeNode, sum: int) -> bool: if not root: return False sum -= root.val if not root.left and not root.right: return sum == 0 return self.hasPathSum(root.left, sum) or self.hasPathSum(root.right, sum) 112.2.2 \u65b9\u6cd5\u4e8c dfs class Solution: def hasPathSum(self, root: TreeNode, sum: int) -> bool: if not root: return False stack = [(root, sum - root.val)] while stack: node, sum = stack.pop() if not node.left and not node.right and sum == 0: return True if node.left: stack.append((node.left, sum - node.left.val)) if node.right: stack.append((node.right, sum - node.right.val)) return False 113. \u8def\u5f84\u603b\u548c II \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811\uff0c\u4ee5\u53ca\u76ee\u6807\u548c sum = 22\uff0c 5 / \\ 4 8 / / \\ 11 13 4 / \\ / \\ 7 2 5 1 \u8fd4\u56de: [ [5,4,11,2], [5,8,4,5] ] \u5728\u771f\u5b9e\u7684\u9762\u8bd5 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 dfs # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]: if not root: return [] parents = {root: None} stack = [(root, sum - root.val)] ends = [] while stack: root, sum = stack.pop() if not root.left and not root.right and sum == 0: ends.append(root) if root.left: parents[root.left] = root stack.append((root.left, sum - root.left.val)) if root.right: parents[root.right] = root stack.append((root.right, sum - root.right.val)) res = [] for end in ends: lst = [] while end: lst.append(end.val) end = parents[end] res.append(lst[::-1]) return res \u89e3\u6cd5\u4e8c \u9012\u5f52 class Solution: def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]: if not root: return [] res = [] def dfs(root, sum, tmp): if not root: return if not root.left and not root.right and sum - root.val == 0 : tmp += [root.val] res.append(tmp) dfs(root.left, sum - root.val, tmp + [root.val]) dfs(root.right, sum - root.val, tmp + [root.val]) dfs(root, sum, []) return res 200.\u5c9b\u5c7f\u6570\u91cf \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u7531 '1'\uff08\u9646\u5730\uff09\u548c '0'\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8ba1\u7b97\u5c9b\u5c7f\u7684\u6570\u91cf\u3002\u4e00\u4e2a\u5c9b\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u5b83\u662f\u901a\u8fc7\u6c34\u5e73\u65b9\u5411\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u800c\u6210\u7684\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u7f51\u683c\u7684\u56db\u4e2a\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002 \u793a\u4f8b 1: \u8f93\u5165: 11110 11010 11000 00000 \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: 11000 11000 00100 00011 \u8f93\u51fa: 3 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DFS \u601d\u8def\u4e00\uff1a\u9047\u5230\u4e00\u4e2a'1' \u628a\u548c\u8fd9\u4e2a'1'\u76f8\u8fde\u7684\u6240\u6709'1'\u53d8\u4e3a0 \u7ed3\u679c\u7d2f\u52a01 \u65b9\u6cd5\uff1aDFS or BFS \u601d\u8def\u4e8c: \u78b0\u5230\u4e00\u4e2a\u65b0\u7684'1'(\u5373\u5de6\u9762\u548c\u4e0a\u9762\u5747\u6ca1\u6709'1')\u7d2f\u52a01 class Solution: def numIslands(self, grid: List[List[str]]) -> int: \"\"\" \u601d\u8def\u4e00\uff1a\u9047\u5230\u4e00\u4e2a'1' \u628a\u548c\u8fd9\u4e2a'1'\u76f8\u8fde\u7684\u6240\u6709'1'\u53d8\u4e3a0 \u7ed3\u679c\u7d2f\u52a01 \u601d\u8def\u4e8c: \u78b0\u5230\u4e00\u4e2a\u65b0\u7684'1'(\u5373\u5de6\u9762\u548c\u4e0a\u9762\u5747\u6ca1\u6709'1')\u7d2f\u52a01 \"\"\" def dfs(grid, i, j): # \u8bb0\u5f55\u5df2\u8bbf\u95ee grid[i][j] = 0 # \u5de6 \u4e0a \u53f3 \u4e0b directions = [(0, -1), (-1, 0), (0, 1), (1, 0)] for dx, dy in directions: if (i + dx) >= 0 and (i + dx) < length and (j + dy) >= 0 and (j + dy) < width and grid[i + dx][j + dy] == '1': dfs(grid, i + dx, j + dy) if not grid: return 0 length = len(grid) width = len(grid[0]) res = 0 for i in range(length): for j in range(width): if grid[i][j] == '1': res += 1 dfs(grid, i, j) return res \u89e3\u6cd5\u4e8c BFS from typing import List from collections import deque class Solution: # x-1,y # x,y-1 x,y x,y+1 # x+1,y # \u65b9\u5411\u6570\u7ec4\uff0c\u5b83\u8868\u793a\u4e86\u76f8\u5bf9\u4e8e\u5f53\u524d\u4f4d\u7f6e\u7684 4 \u4e2a\u65b9\u5411\u7684\u6a2a\u3001\u7eb5\u5750\u6807\u7684\u504f\u79fb\u91cf\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6280\u5de7 directions = [(-1, 0), (0, -1), (1, 0), (0, 1)] def numIslands(self, grid: List[List[str]]) -> int: m = len(grid) # \u7279\u5224 if m == 0: return 0 n = len(grid[0]) marked = [[False for _ in range(n)] for _ in range(m)] count = 0 # \u4ece\u7b2c 1 \u884c\u3001\u7b2c 1 \u683c\u5f00\u59cb\uff0c\u5bf9\u6bcf\u4e00\u683c\u5c1d\u8bd5\u8fdb\u884c\u4e00\u6b21 DFS \u64cd\u4f5c for i in range(m): for j in range(n): # \u53ea\u8981\u662f\u9646\u5730\uff0c\u4e14\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 BFS \u53d1\u73b0\u4e0e\u4e4b\u76f8\u8fde\u7684\u9646\u5730\uff0c\u5e76\u8fdb\u884c\u6807\u8bb0 if not marked[i][j] and grid[i][j] == '1': # count \u53ef\u4ee5\u7406\u89e3\u4e3a\u8fde\u901a\u5206\u91cf\uff0c\u4f60\u53ef\u4ee5\u5728\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u518d\u8ba1\u6570\uff0c # \u5373\u8fd9\u884c\u4ee3\u7801\u653e\u5728\u3010\u4f4d\u7f6e 1\u3011\u4e5f\u662f\u53ef\u4ee5\u7684 count += 1 queue = deque() queue.append((i, j)) # \u6ce8\u610f\uff1a\u8fd9\u91cc\u8981\u6807\u8bb0\u4e0a\u5df2\u7ecf\u8bbf\u95ee\u8fc7 marked[i][j] = True while queue: cur_x, cur_y = queue.popleft() # \u5f97\u5230 4 \u4e2a\u65b9\u5411\u7684\u5750\u6807 for direction in self.directions: new_i = cur_x + direction[0] new_j = cur_y + direction[1] # \u5982\u679c\u4e0d\u8d8a\u754c\u3001\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u3001\u5e76\u4e14\u8fd8\u8981\u662f\u9646\u5730\uff0c\u6211\u5c31\u7ee7\u7eed\u653e\u5165\u961f\u5217\uff0c\u653e\u5165\u961f\u5217\u7684\u540c\u65f6\uff0c\u8981\u8bb0\u5f97\u6807\u8bb0\u5df2\u7ecf\u8bbf\u95ee\u8fc7 if 0 <= new_i < m and 0 <= new_j < n and not marked[new_i][new_j] and grid[new_i][new_j] == '1': queue.append((new_i, new_j)) #\u3010\u7279\u522b\u6ce8\u610f\u3011\u5728\u653e\u5165\u961f\u5217\u4ee5\u540e\uff0c\u8981\u9a6c\u4e0a\u6807\u8bb0\u6210\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u8bed\u4e49\u4e5f\u662f\u5341\u5206\u6e05\u695a\u7684\uff1a\u53cd\u6b63\u53ea\u8981\u8fdb\u5165\u4e86\u961f\u5217\uff0c\u4f60\u8fdf\u65e9\u90fd\u4f1a\u904d\u5386\u5230\u5b83 # \u800c\u4e0d\u662f\u5728\u51fa\u961f\u5217\u7684\u65f6\u5019\u518d\u6807\u8bb0 #\u3010\u7279\u522b\u6ce8\u610f\u3011\u5982\u679c\u662f\u51fa\u961f\u5217\u7684\u65f6\u5019\u518d\u6807\u8bb0\uff0c\u4f1a\u9020\u6210\u5f88\u591a\u91cd\u590d\u7684\u7ed3\u70b9\u8fdb\u5165\u961f\u5217\uff0c\u9020\u6210\u91cd\u590d\u7684\u64cd\u4f5c\uff0c\u8fd9\u53e5\u8bdd\u5982\u679c\u4f60\u6ca1\u6709\u5199\u5bf9\u5730\u65b9\uff0c\u4ee3\u7801\u4f1a\u4e25\u91cd\u8d85\u65f6\u7684 marked[new_i][new_j] = True #\u3010\u4f4d\u7f6e 1\u3011 return count 236.\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u767e\u5ea6\u767e\u79d1\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a\u201c\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\uff09\u3002\u201d \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811: root = [3,5,1,6,2,0,8,null,null,7,4 \u793a\u4f8b 1: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 \u8f93\u51fa: 3 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 1 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 \u8f93\u51fa: 5 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 5\u3002\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002 \u8bf4\u660e: \u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002 p\u3001q \u4e3a\u4e0d\u540c\u8282\u70b9\u4e14\u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e2d\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 \u5f53\u4f60\u9047\u5230\u8282\u70b9 p \u6216 q \u65f6\uff0c\u8fd4\u56de\u4e00\u4e9b\u5e03\u5c14\u6807\u8bb0\u3002\u8be5\u6807\u5fd7\u6709\u52a9\u4e8e\u786e\u5b9a\u662f\u5426\u5728\u4efb\u4f55\u8def\u5f84\u4e2d\u627e\u5230\u4e86\u6240\u9700\u7684\u8282\u70b9\u3002\u6700\u4e0d\u5e38\u89c1\u7684\u7956\u5148\u5c06\u662f\u4e24\u4e2a\u5b50\u6811\u9012\u5f52\u90fd\u8fd4\u56de\u771f\u6807\u5fd7\u7684\u8282\u70b9\u3002\u5b83\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u672c\u8eab\u662fp\u6216q\u4e2d\u7684\u4e00\u4e2a\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u8282\u70b9,\u5b50\u6811\u9012\u5f52\u8fd4\u56de\u4e00\u4e2a\u771f\u6807\u5fd7\u3002 class Solution: def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode': \"\"\" \u601d\u8def1: \u9012\u5f52 \u601d\u8def1: \u67d0\u7ed3\u70b9\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7ed3\u70b9\u7684\u7956\u5148\u7ed3\u70b9 n * n \u601d\u8def2: DFS \u601d\u8def3: \u6309\u7167\u6807\u53f7\u96642 \"\"\" # 1.\u7ec8\u6b62\u6761\u4ef6 if not root: return root if root == p or root == q: return root # 2.\u9012\u5f52 left = self.lowestCommonAncestor(root.left, p, q) right = self.lowestCommonAncestor(root.right, p, q) # 3.\u9012\u5f52\u7ed3\u679c\u5904\u7406 if left and right: return root elif left: return left elif right: return right return None \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO\\big(N\\big)O(N)\uff0cNN \u662f\u4e8c\u53c9\u6811\u4e2d\u7684\u8282\u70b9\u6570\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u8bbf\u95ee\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8282\u70b9\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(N)O(N)\uff0c\u8fd9\u662f\u56e0\u4e3a\u9012\u5f52\u5806\u6808\u4f7f\u7528\u7684\u6700\u5927\u7a7a\u95f4\u4f4d NN,\u659c\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u53ef\u4ee5\u662f NN\u3002 \u89e3\u6cd5\u4e8c \u5b57\u5178\u5b58\u50a8\u53cc\u4eb2\u7ed3\u70b9 + DFS class Solution: def lowestCommonAncestor(self, root, p, q): # 1.dfs\u904d\u5386 \u5b58\u50a8\u6bcf\u4e2a\u7236\u4eb2\u7ed3\u70b9 stack = [root] parent= {root:None} while p not in parent or q not in parent: node = stack.pop() if node.left: parent[node.left] = node stack.append(node.left) if node.right: parent[node.right] = node stack.append(node.right) # 2.\u5148\u627e\u5230p\u7684\u6240\u6709\u7956\u5148\u7ed3\u70b9\u653e\u5165set ancestors = set() while p: ancestors.add(p) p = parent[p] # 3.\u5224\u65adq\u7684\u7956\u5148\u7ed3\u70b9\u662f\u5426\u662fp\u7684\u7956\u5148\u7ed3\u70b9 while q not in ancestors: q = parent[q] return def lowestCommonAncestor(self, root, p, q): if not root: return None parents = {root: None} stack = [root] while stack: node = stack.pop() if node.left: parents[node.left] = node stack.append(node.left) if node.right: parents[node.right] = node stack.append(node.right) left_set = set() while p: left_set.add(p) p = parents[p] while q: if q in left_set: return q else: q = parents[q] return None \u89e3\u6cd5\u4e09 BFS + \u6811\u7d22\u5f15\u6027\u8d28 \u7c7b\u4f3c\u89e3\u6cd5\u4e8c BFS\u904d\u5386\u5b58\u50a8\u6240\u6709\u7ed3\u70b9\u7684\u7d22\u5f15 \u4ece1\u5f00\u59cb \u7c7b\u7528\u7236\u4eb2\u7ed3\u70b9\u662f\u5b69\u5b50\u7ed3\u70b9\u76841/2\u6765\u5224\u65ad class Solution: def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode': tree = dict() # 1. BFS\u904d\u5386\u5b58\u50a8\u6240\u6709\u7ed3\u70b9\u7684\u7d22\u5f15 \u4ece1\u5f00\u59cb que = queue.Queue() que.put((root, 1)) p_index = -1 q_index = -1 while not que.empty(): node, index = que.get() if p == node: p_index = index elif q == node: q_index = index tree[index] = node if node.left: que.put((node.left, 2 * index)) if node.right: que.put((node.right, 2 * index + 1)) p_set = set() # 2.\u8ba1\u7b97\u6240\u6709p\u7684\u7956\u5148\u7ed3\u70b9\uff08\u5305\u62ec\u81ea\u5df1\uff09 while p_index: p_set.add(p_index) p_index = p_index >> 1 # 3. \u5224\u65adp q\u7684\u516c\u5171\u7956\u5148\u7ed3\u70b9 while q_index: if q_index in p_set: return tree[q_index] q_index= q_index >> 1 \u94fe\u8868 2. \u4e24\u6570\u76f8\u52a0 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\u7528\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5176\u4e2d\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u4f4d\u6570\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u5982\u679c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u52a0\u8d77\u6765\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u8868\u793a\u5b83\u4eec\u7684\u548c\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a(2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a7 -> 0 -> 8 \u539f\u56e0\uff1a342 + 465 = 807 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: jinwei = 0 head = None tail = None while l1 or l2: l1_val = l1.val if l1 else 0 l2_val = l2.val if l2 else 0 val = (l1_val + l2_val + jinwei) % 10 jinwei = (l1_val + l2_val + jinwei) // 10 if head: tail.next = ListNode(val) tail = tail.next else: head = ListNode(val) tail = head l1 = l1.next if l1 else l1 l2 = l2.next if l2 else l2 if jinwei: tail.next = ListNode(jinwei) return head \u89e3\u6cd5\u4e8c 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c n = 2. \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5. \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode: f, cur, p = None, head, head for i in range(n): p = p.next if not p: return head.next while p: f = cur cur = cur.next p = p.next if cur and cur.next: f.next = cur.next elif cur: f.next = None return head \u89e3\u6cd5\u4e8c \u63a8\u8350 class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode: \"\"\" \u8fb9\u754c\u6761\u4ef6: \u5220\u9664\u672b\u5c3e \"\"\" dummy = ListNode(0) dummy.next = head first, second = dummy, dummy while n + 1: first = first.next n -= 1 while first: first = first.next second = second.next second.next = second.next.next return dummy.next 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a1->2->4, 1->3->4 \u8f93\u51fa\uff1a1->1->2->3->4->4 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def mergeTwoLists(self, l1, l2): dummy = ListNode(-1) prev = dummy while l1 and l2: if l1.val <= l2.val: prev.next = l1 l1 = l1.next else: prev.next = l2 l2 = l2.next prev = prev.next prev.next = l1 if l1 is not None else l2 return dummy.next \u89e3\u6cd5\u4e8c \u9012\u5f52 class Solution: def mergeTwoLists(self, l1, l2): if l1 is None: return l2 elif l2 is None: return l1 elif l1.val < l2.val: l1.next = self.mergeTwoLists(l1.next, l2) return l1 else: l2.next = self.mergeTwoLists(l1, l2.next) return l2 24.\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u793a\u4f8b: \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3. \u89e3\u6cd5 \u89e3\u6cd5\u4e00 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def swapPairs(self, head: ListNode) -> ListNode: if not head: return head dummy = ListNode(-1) dummy.next = head p = dummy while p.next and p.next.next: second = p.next.next p.next.next = second.next second.next = p.next p.next = second p = p.next.next return dummy.next \u89e3\u6cd5\u4e8c 61.\u65cb\u8f6c\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL, k = 2 \u8f93\u51fa: 4->5->1->2->3->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 5->1->2->3->4->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 4->5->1->2->3->NULL \u793a\u4f8b 2: \u8f93\u5165: 0->1->2->NULL, k = 4 \u8f93\u51fa: 2->0->1->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 2->0->1->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 1->2->0->NULL \u5411\u53f3\u65cb\u8f6c 3 \u6b65: 0->1->2->NULL \u5411\u53f3\u65cb\u8f6c 4 \u6b65: 2->0->1->NULL \u5728\u771f\u5b9e\u7684\u9762\u8bd5\u4e2d\u9047\u5230\u8fc7\u8fd9\u9053\u9898\uff1f \u89e3\u6cd5 \u89e3\u6cd5\u4e00 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def rotateRight(self, head: ListNode, k: int) -> ListNode: \"\"\" \u6cd5\u4e00 \u9006\u8f6c\u94fe\u8868 \u4e14\u628a\u524dk\u4e2a\u518d\u6b21\u9006\u8f6c, \u518d\u628a\u5269\u4e0b\u7684\u9006\u8f6c \u8fb9\u754c\u6761\u4ef6: k\u5927\u4e8e\u94fe\u8868\u957f\u5ea6 \"\"\" def getLength(head): cnt = 0 while head: cnt += 1 head = head.next return cnt if not head: return None # \u8ba1\u7b97\u957f\u5ea6 Len = getLength(head) k = k % Len first, second = head, head while k: first = first.next k -= 1 if not first: return head while first.next: first = first.next second = second.next first.next = head res = second.next second.next = None return res \u89e3\u6cd5\u4e8c \u5148\u5c06\u94fe\u8868\u95ed\u5408\u6210\u73af \u627e\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u65ad\u5f00\u8fd9\u4e2a\u73af\uff0c\u786e\u5b9a\u65b0\u7684\u94fe\u8868\u5934\u548c\u94fe\u8868\u5c3e def rotateRight(self, head: 'ListNode', k: 'int') -> 'ListNode': # base cases if not head: return None if not head.next: return head # close the linked list into the ring old_tail = head n = 1 while old_tail.next: old_tail = old_tail.next n += 1 old_tail.next = head # find new tail : (n - k % n - 1)th node # and new head : (n - k % n)th node new_tail = head for i in range(n - k % n - 1): new_tail = new_tail.next new_head = new_tail.next # break the ring new_tail.next = None return new_head 86.\u5206\u9694\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002 \u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002 \u793a\u4f8b: \u8f93\u5165: head = 1->4->3->2->5->2, x = 3 \u8f93\u51fa: 1->2->2->4->3->5 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution(object): def partition(self, head, x): \"\"\" :type head: ListNode :type x: int :rtype: ListNode \"\"\" f_dummy, s_dummy = ListNode(-1), ListNode(-1) first, second = f_dummy, s_dummy while head: if head.val < x: first.next = head first = first.next else: second.next = head second = second.next head = head.next second.next = None first.next = s_dummy.next return f_dummy.next \u89e3\u6cd5\u4e8c 92. \u53cd\u8f6c\u94fe\u8868 II [\u63a8\u8350] 92.1 \u9898\u76ee\u63cf\u8ff0 \u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002 \u8bf4\u660e: 1 \u2264 m \u2264 n \u2264 \u94fe\u8868\u957f\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL, m = 2, n = 4 \u8f93\u51fa: 1->4->3->2->5->NULL 92.2 \u89e3\u6cd5 92.2.1 \u65b9\u6cd5\u4e00 \u7ef4\u62a4\u4e2a\u524d\u7ed3\u70b9 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def reverseBetween(self, head, m, n): \"\"\" :type head: ListNode :type m: int :type n: int :rtype: ListNode \"\"\" if not head: return head cur, prev = head, None while m > 1: prev = cur cur = cur.next m, n = m-1, n-1 tail, con = cur, prev while n: third = cur.next cur.next = prev prev = cur cur = third n -= 1 if con: con.next = prev else: head = prev tail.next = cur return head 138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488\uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002 \u8981\u6c42\u8fd4\u56de\u8fd9\u4e2a\u94fe\u8868\u7684\u6df1\u62f7\u8d1d\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a {\"$id\":\"1\",\"next\":{\"$id\":\"2\",\"next\":null,\"random\":{\"$ref\":\"2\"},\"val\":2},\"random\":{\"$ref\":\"2\"},\"val\":1} \u89e3\u91ca\uff1a \u8282\u70b9 1 \u7684\u503c\u662f 1\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u548c\u968f\u673a\u6307\u9488\u90fd\u6307\u5411\u8282\u70b9 2 \u3002 \u8282\u70b9 2 \u7684\u503c\u662f 2\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u6307\u5411 null\uff0c\u968f\u673a\u6307\u9488\u6307\u5411\u5b83\u81ea\u5df1\u3002 \u63d0\u793a\uff1a \u4f60\u5fc5\u987b\u8fd4\u56de\u7ed9\u5b9a\u5934\u7684\u62f7\u8d1d\u4f5c\u4e3a\u5bf9\u514b\u9686\u5217\u8868\u7684\u5f15\u7528\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \"\"\" # Definition for a Node. class Node: def __init__(self, val, next, random): self.val = val self.next = next self.random = random \"\"\" class Solution: def copyRandomList(self, head: 'Node') -> 'Node': if not head: return None node_index_dic = dict() index_node_dic = dict() cur = head i = 0 dummy = ListNode(-1) new_cur = dummy while cur: node_index_dic[cur] = i new_cur.next = ListNode(cur.val) cur = cur.next new_cur = new_cur.next index_node_dic[i] = new_cur i += 1 cur = head new_cur = dummy.next while cur: new_cur.random = index_node_dic[node_index_dic[cur.random]] if cur.random else None new_cur = new_cur.next cur = cur.next return dummy.next \u89e3\u6cd5\u4e8c 141. \u73af\u5f62\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002 \u5982\u679c pos \u662f -1\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [3,2,0,-4], pos = 1 \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1ahead = [1,2], pos = 0 \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1ahead = [1], pos = -1 \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u7528 O(1)\uff08\u5373\uff0c\u5e38\u91cf\uff09\u5185\u5b58\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5feb\u6162\u6307\u9488 def hasCycle(self, head: ListNode) -> bool: if not head: return False slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False \u89e3\u6cd5\u4e8c 142. \u73af\u5f62\u94fe\u8868 II \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de null\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002 \u5982\u679c pos \u662f -1\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002 \u8bf4\u660e\uff1a\u4e0d\u5141\u8bb8\u4fee\u6539\u7ed9\u5b9a\u7684\u94fe\u8868\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [3,2,0,-4], pos = 1 \u8f93\u51fa\uff1atail connects to node index 1 \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1ahead = [1,2], pos = 0 \u8f93\u51fa\uff1atail connects to node index 0 \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1ahead = [1], pos = -1 \u8f93\u51fa\uff1ano cycle \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6ca1\u6709\u73af \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5feb\u6162\u6307\u9488 class Solution: def detectCycle(self, head: ListNode) -> ListNode: if not head: return None slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break if not fast or not fast.next: return None fast = head while fast != slow: slow = slow.next fast = fast.next return fast \u89e3\u6cd5\u4e8c 148.\u6392\u5e8f\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u5728 O(n log n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c \u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6 \uff08\u6ca1\u6cd5\u7528\u9012\u5f52\uff09\u4e0b\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: 4->2->1->3 \u8f93\u51fa: 1->2->3->4 \u793a\u4f8b 2: \u8f93\u5165: -1->5->3->4->0 \u8f93\u51fa: -1->0->3->4->5 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5f52\u5e76 \u5229\u7528\u4e86\u9012\u5f52 \u4e0d\u662f\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def sortList(self, head: ListNode) -> ListNode: \"\"\" \u5f52\u5e76 \"\"\" if not head or not head.next: return head # 1.\u8ba1\u7b97\u94fe\u8868\u957f\u5ea6 length = 0 p = head while p: p = p.next length += 1 # 2.\u628a\u539f\u59cb\u94fe\u8868\u5e73\u5747\u62c6\u5206\u6210\u4e24\u90e8\u5206 head1 = head head2 = head prev = None for _ in range(length//2): prev = head2 head2 = head2.next prev.next = None # 3.\u628a\u4e24\u90e8\u5206\u94fe\u8868\u9012\u5f52\u6392\u5e8f head1 = self.sortList(head1) head2 = self.sortList(head2) dummy = ListNode(-1) p = dummy # 4.\u5408\u5e76\u4e24\u4e2a\u94fe\u8868 while head1 and head2: if head1.val < head2.val: p.next = head1 head1 = head1.next else: p.next = head2 head2 = head2.next p = p.next if not head1: p.next = head2 if not head2: p.next = head1 return dummy.next \u89e3\u6cd5\u4e8c bottom-to-up\u5f52\u5e76 \u5e38\u6570\u7ea7\u7a7a\u95f4 160.\u76f8\u4ea4\u94fe\u8868 160.1 \u9898\u76ee\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u5230\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002 \u5982\u4e0b\u9762\u7684\u4e24\u4e2a\u94fe\u8868 \uff1a \u5728\u8282\u70b9 c1 \u5f00\u59cb\u76f8\u4ea4\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1aintersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3 \u8f93\u51fa\uff1aReference of the node with value = 8 \u8f93\u5165\u89e3\u91ca\uff1a\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e3a 8 \uff08\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u5217\u8868\u76f8\u4ea4\u5219\u4e0d\u80fd\u4e3a 0\uff09\u3002\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [4,1,8,4,5]\uff0c\u94fe\u8868 B \u4e3a [5,0,1,8,4,5]\u3002\u5728 A \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 2 \u4e2a\u8282\u70b9\uff1b\u5728 B \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 3 \u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aintersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1 \u8f93\u51fa\uff1aReference of the node with value = 2 \u8f93\u5165\u89e3\u91ca\uff1a\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e3a 2 \uff08\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u5217\u8868\u76f8\u4ea4\u5219\u4e0d\u80fd\u4e3a 0\uff09\u3002\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [0,9,1,2,4]\uff0c\u94fe\u8868 B \u4e3a [3,2,4]\u3002\u5728 A \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 3 \u4e2a\u8282\u70b9\uff1b\u5728 B \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 1 \u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1aintersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2 \u8f93\u51fa\uff1anull \u8f93\u5165\u89e3\u91ca\uff1a\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [2,6,4]\uff0c\u94fe\u8868 B \u4e3a [1,5]\u3002\u7531\u4e8e\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5 intersectVal \u5fc5\u987b\u4e3a 0\uff0c\u800c skipA \u548c skipB \u53ef\u4ee5\u662f\u4efb\u610f\u503c\u3002 \u89e3\u91ca\uff1a\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\uff0c\u56e0\u6b64\u8fd4\u56de null\u3002 \u6ce8\u610f\uff1a \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de null . \u5728\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u4e24\u4e2a\u94fe\u8868\u4ecd\u987b\u4fdd\u6301\u539f\u6709\u7684\u7ed3\u6784\u3002 \u53ef\u5047\u5b9a\u6574\u4e2a\u94fe\u8868\u7ed3\u6784\u4e2d\u6ca1\u6709\u5faa\u73af\u3002 \u7a0b\u5e8f\u5c3d\u91cf\u6ee1\u8db3 O( n ) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e14\u4ec5\u7528 O( 1 ) \u5185\u5b58\u3002 160.2 \u89e3\u6cd5 Approach 1: Brute Force For each node ai in list A, traverse the entire list B and check if any node in list B coincides with ai. Complexity Analysis Time complexity : O(mn)O Space complexity : O(1) Approach 2: Hash Table Traverse list A and store the address / reference to each node in a hash set. Then check every node bi in list B: if biappears in the hash set, then bi is the intersection node. Complexity Analysis Time complexity : O(m+n) Space complexity : O(m) or O(n) Approach 3: Two Pointers [todo] Maintain two pointers pA and pB initialized at the head of A and B, respectively. Then let them both traverse through the lists, one node at a time. When pA reaches the end of a list, then redirect it to the head of B (yes, B, that's right.); similarly when pB reaches the end of a list, redirect it the head of A. If at any point pA meets pB, then pA/pB is the intersection node. To see why the above trick would work, consider the following two lists: A = {1,3,5,7,9,11} and B = {2,4,9,11}, which are intersected at node '9'. Since B.length (=4) < A.length (=6), pB would reach the end of the merged list first, because pB traverses exactly 2 nodes less than pA does. By redirecting pB to head A, and pA to head B, we now ask pB to travel exactly 2 more nodes than pA would. So in the second iteration, they are guaranteed to reach the intersection node at the same time. If two lists have intersection, then their last nodes must be the same one. So when pA/pB reaches the end of a list, record the last element of A/B respectively. If the two last elements are not the same one, then the two lists have no intersections. Complexity Analysis Time complexity : O(m+n) Space complexity : O(1) \u6211\u53d1\u73b0\u5927\u591a\u6570\u89e3\u51b3\u65b9\u6848\u5728\u8fd9\u91cc\u9884\u5904\u7406\u94fe\u63a5\u5217\u8868\u4ee5\u83b7\u5f97len\u7684\u5dee\u5f02\u3002 \u5b9e\u9645\u4e0a\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u5dee\u5f02\u7684\u201c\u4ef7\u503c\u201d\uff0c\u6211\u4eec\u53ea\u60f3\u786e\u4fdd\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u5230\u8fbe\u4ea4\u53c9\u70b9\u8282\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u6b21\u8fed\u4ee3\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u5230\u8fbe\u5c3e\u8282\u70b9\u4e4b\u540e\u5c06\u4e00\u4e2a\u94fe\u8868\u7684\u6307\u9488\u91cd\u7f6e\u5230\u53e6\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u3002\u5728\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u76f4\u5230\u5b83\u4eec\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\u3002\u6211\u4eec\u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\u7684\u64cd\u4f5c\u5c06\u5e2e\u52a9\u6211\u4eec\u62b5\u6d88\u5dee\u5f02\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u76f8\u4ea4\uff0c\u5219\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\u7684\u4f1a\u5408\u70b9\u5fc5\u987b\u662f\u4ea4\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\u7684\u4f1a\u8bae\u6307\u9488\u5fc5\u987b\u662f\u4e24\u4e2a\u5217\u7684\u5c3e\u8282\u70b9\uff0c\u5373null # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def getIntersectionNode(self, headA, headB): \"\"\" 1.\u8ba1\u7b97\u6bcf\u4e2a\u94fe\u8868\u957f\u5ea6, \u8ba1\u7b97\u94fe\u8868\u957f\u5ea6\u5dee\u503c, \u957f\u94fe\u8868\u5148\u8d70\u5dee\u503c\u6b65 tO(m+n) sO(1) 2.\u904d\u5386\u4e00\u4e2a\u94fe\u8868, \u653e\u5165map\u4e2d, \u53e6\u4e00\u4e2a\u7ed3\u70b9\u904d\u5386\u5224\u65ad\u662f\u5426\u5728map\u4e2d tO(m+n) sO(m) 3.\u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u5230\u8fbe\u5c3e\u8282\u70b9\u4e4b\u540e\u5c06\u4e00\u4e2a\u94fe\u8868\u7684\u6307\u9488\u91cd\u7f6e\u5230\u53e6\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u3002\u5728\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u76f4\u5230\u5b83\u4eec\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\u3002 tO(m+n) sO(1) \"\"\" if not headA or not headB: return pa = headA pb = headB while pa != pb: pa = pa.next if pa else headB pb = pb.next if pb else headA return pa \u65b9\u6cd5\u56db [\u63a8\u8350] \u8ba1\u7b97\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6 \u628a\u957f\u94fe\u8868\u53bb\u6389\u957f\u5ea6\u5dee # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def getIntersectionNode(self, headA, headB): \"\"\" :type head1, head1: ListNode :rtype: ListNode \u601d\u8def1: set \u601d\u8def2: \u8ba1\u7b97\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6 \u628a\u957f\u94fe\u8868\u53bb\u6389\u957f\u5ea6\u5dee \"\"\" if not headA or not headB: return None def cal_len(head): linked_len = 0 while head: head = head.next linked_len = linked_len + 1 return linked_len def move_n_forward(head, n): for i in range(n): head = head.next return head if not headA or not headB: return None lenA = cal_len(headA) lenB = cal_len(headB) if lenA < lenB: headB = move_n_forward(headB, lenB - lenA) else: headA = move_n_forward(headA, lenA - lenB) while headA and headB: if headA is headB: return headA headA = headA.next headB = headB.next return None 206.\u53cd\u8f6c\u94fe\u8868 206.1 \u9898\u76ee\u63cf\u8ff0 \u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u8fdb\u9636: \u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f 206.2 \u89e3\u6cd5 206.2.1 \u65b9\u6cd5\u4e00 \u8fed\u4ee3 class Solution(object): def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" new_head = None while head: tmp = head head = head.next tmp.next = new_head new_head = tmp return new_head 206.2.2 \u65b9\u6cd5\u4e8c \u9012\u5f52 public ListNode reverseList(ListNode head) { if (head == null || head.next == null) return head; ListNode p = reverseList(head.next); head.next.next = head; head.next = null; return p; } 234.\u56de\u6587\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2 \u8f93\u51fa: false \u793a\u4f8b 2: \u8f93\u5165: 1->2->2->1 \u8f93\u51fa: true \u8fdb\u9636\uff1a \u4f60\u80fd\u5426\u7528 O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f \u89e3\u6cd5 \u89e3\u6cd5\u4e00 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def isPalindrome(self, head: ListNode) -> bool: \"\"\" \u524d\u534a\u90e8\u5206\u94fe\u8868\u9006\u5e8f \u4e4b\u540e\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u5f00\u59cb\u548c\u4e2d\u95f4 \u6216\u8005\u5feb\u6162\u6307\u9488\u627e\u4e2d\u70b9 \"\"\" # 1.\u8ba1\u7b97\u94fe\u8868\u957f\u5ea6 p = head Len = 0 while p: Len += 1 p = p.next cnt = (Len + 1) // 2 # 2.\u524d\u534a\u90e8\u5206\u9006\u5e8f p = head new_head = None while p and cnt: temp = p.next p.next = new_head new_head = p p = temp cnt -= 1 # 3.\u5bf9\u6bd4\u4e24\u7aef\u94fe\u8868 if Len & 1: new_head = new_head.next while new_head and p and new_head.val == p.val: new_head = new_head.next p = p.next if not new_head and not p: return True return False \u89e3\u6cd5\u4e8c 328.\u5947\u5076\u94fe\u8868 [\u63a8\u8350] \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002 \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 1->3->5->2->4->NULL \u793a\u4f8b 2: \u8f93\u5165: 2->1->3->5->6->4->7->NULL \u8f93\u51fa: 2->3->6->7->1->5->4->NULL \u8bf4\u660e: \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u53cc\u6307\u9488\u89e3\u6cd5 class Solution: def oddEvenList(self, head: ListNode) -> ListNode: if not head or not head.next: return head odd = head even_head = head.next even = even_head while even and even.next: odd.next = even.next odd = odd.next even.next = odd.next even = even.next odd.next = even_head return head \u89e3\u6cd5\u4e8c \u6808 155.\u6700\u5c0f\u6808 \u9898\u76ee\u63cf\u8ff0 \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push\uff0cpop\uff0ctop \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002 push(x) -- \u5c06\u5143\u7d20 x \u63a8\u5165\u6808\u4e2d\u3002 pop() -- \u5220\u9664\u6808\u9876\u7684\u5143\u7d20\u3002 top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20\u3002 getMin() -- \u68c0\u7d22\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u793a\u4f8b: MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --> \u8fd4\u56de -3. minStack.pop(); minStack.top(); --> \u8fd4\u56de 0. minStack.getMin(); --> \u8fd4\u56de -2. \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u8f85\u52a9\u6700\u5c0f\u6808 class MinStack: def __init__(self): \"\"\" initialize your data structure here. \"\"\" self.stack = [] self.min_stack = [] def push(self, x: int) -> None: self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) else: self.min_stack.append(self.min_stack[-1]) def pop(self) -> None: self.stack.pop() self.min_stack.pop() def top(self) -> int: return self.stack[-1] def getMin(self) -> int: return self.min_stack[-1] \u89e3\u6cd5\u4e8c 227.\u57fa\u672c\u8ba1\u7b97\u5668II \u9898\u76ee\u63cf\u8ff0 \u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u8ba1\u7b97\u5668\u6765\u8ba1\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u4ec5\u5305\u542b\u975e\u8d1f\u6574\u6570\uff0c+\uff0c - \uff0c*\uff0c/ \u56db\u79cd\u8fd0\u7b97\u7b26\u548c\u7a7a\u683c \u3002 \u6574\u6570\u9664\u6cd5\u4ec5\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"3+2*2\" \u8f93\u51fa: 7 \u793a\u4f8b 2: \u8f93\u5165: \" 3/2 \" \u8f93\u51fa: 1 \u793a\u4f8b 3: \u8f93\u5165: \" 3+5 / 2 \" \u8f93\u51fa: 5 \u8bf4\u660e\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u6709\u6548\u7684\u3002 \u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684\u5e93\u51fd\u6570 eval\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def calculate(self, s: str) -> int: \"\"\" 1.\u4e3a\u4ec0\u4e48\u4f1a\u6709\u7a7a\u683c 2.stack 3.\u4e58\u9664\u4f18\u5148\u7ea7\u9ad8 \u53ef\u4ee5\u5148\u6309\u7167\u7b26\u53f7 split \"\"\" def is_number(c): return c >= '0' and c <= '9' stack = [] sign_stack = [] signs = {'+', '-', '*', '/'} ans = 0 for i, c in enumerate(s): if c == ' ': continue elif c in signs: sign_stack.append(c) else: if i > 0 and is_number(s[i - 1]): stack[-1] = stack[-1] * 10 + int(c) else: stack.append(int(c)) if i + 1 < len(s) and is_number(s[i + 1]): continue if sign_stack and sign_stack[-1] in {'*', '/'}: num2 = stack.pop() num1 = stack.pop() op = sign_stack.pop() if op == '*': stack.append(num1 * num2) else: stack.append(num1 // num2) ans = stack[0] for i in range(len(sign_stack)): if sign_stack[i] == '+': ans += stack[i+1] elif sign_stack[i] == '-': ans -= stack[i+1] return ans \u89e3\u6cd5\u4e8c \u5148\u6309\u7167\u52a0\u51cfsplit, \u5269\u4e0b\u5c31\u5269\u4e58\u6cd5\u9664\u6cd5\u7684\u5148\u6309\u6b21\u5e8f\u7b97\u597d\u4e86\u3002\u518d\u56de\u5230\u5faa\u73af\u7d2f\u51cf\u518d\u7d2f\u52a0\u5c31\u597d\u4e86 import re class Solution: def calculate(self, s: str) -> int: \"\"\" \u5148\u52a0\u51cfsplit \u518d\u4e58\u9664 \"\"\" ss = re.split(\"[+-]\", s) add_plus = re.sub(\"[^+-]\", \"\", s) res = 0 for i in range(len(ss)): sss = re.split(\"[*/]\", ss[i]) mul_div = re.sub(\"[^*/]\", \"\", ss[i]) c = 0 for j in range(len(sss)): if j == 0: c = int(sss[j]) else: if mul_div[j - 1] == '*': c *= int(sss[j]) else: c //= int(sss[j]) if i == 0: res = c else: if add_plus[i - 1] == '+': res += c else: res -= c return res 232. \u7528\u6808\u5b9e\u73b0\u961f\u5217 232.1 \u9898\u76ee\u63cf\u8ff0 \u4f7f\u7528\u6808\u5b9e\u73b0\u961f\u5217\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a push(x) -- \u5c06\u4e00\u4e2a\u5143\u7d20\u653e\u5165\u961f\u5217\u7684\u5c3e\u90e8\u3002 pop() -- \u4ece\u961f\u5217\u9996\u90e8\u79fb\u9664\u5143\u7d20\u3002 peek() -- \u8fd4\u56de\u961f\u5217\u9996\u90e8\u7684\u5143\u7d20\u3002 empty() -- \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u3002 \u793a\u4f8b: MyQueue queue = new MyQueue(); queue.push(1); queue.push(2); queue.peek(); // \u8fd4\u56de 1 queue.pop(); // \u8fd4\u56de 1 queue.empty(); // \u8fd4\u56de false \u8bf4\u660e: \u4f60\u53ea\u80fd\u4f7f\u7528\u6807\u51c6\u7684\u6808\u64cd\u4f5c -- \u4e5f\u5c31\u662f\u53ea\u6709 push to top , peek/pop from top , size , \u548c is empty \u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u6808\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u6808\uff0c\u53ea\u8981\u662f\u6807\u51c6\u7684\u6808\u64cd\u4f5c\u5373\u53ef\u3002 \u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 peek \u64cd\u4f5c\uff09\u3002 232.2 \u89e3\u6cd5 class MyQueue(object): def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.stack = [] def push(self, x): \"\"\" Push element x to the back of queue. :type x: int :rtype: None \"\"\" tmp = self.stack[::-1] tmp.append(x) self.stack = tmp[::-1] def pop(self): \"\"\" Removes the element from in front of queue and returns that element. :rtype: int \u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 peek \u64cd\u4f5c\uff09 \"\"\" return self.stack.pop() def peek(self): \"\"\" Get the front element. :rtype: int \u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 peek \u64cd\u4f5c\uff09 \"\"\" return self.stack[-1] def empty(self): \"\"\" Returns whether the queue is empty. :rtype: bool \"\"\" return len(self.stack) == 0 # Your MyQueue object will be instantiated and called as such: # obj = MyQueue() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.peek() # param_4 = obj.empty() class MyQueue: def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.stack = [] self.asstack = [] def push(self, x: int) -> None: \"\"\" Push element x to the back of queue. \"\"\" while self.stack: self.asstack.append(self.stack.pop()) self.stack.append(x) while self.asstack: self.stack.append(self.asstack.pop()) def pop(self) -> int: \"\"\" Removes the element from in front of queue and returns that element. \"\"\" if self.stack: return self.stack.pop() def peek(self) -> int: \"\"\" Get the front element. \"\"\" if self.stack: return self.stack[-1] def empty(self) -> bool: \"\"\" Returns whether the queue is empty. \"\"\" return self.stack == [] # Your MyQueue object will be instantiated and called as such: # obj = MyQueue() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.peek() # param_4 = obj.empty() \u4e8c\u53c9\u6811 96.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 96.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u6c42\u4ee5 1 ... n \u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u591a\u5c11\u79cd\uff1f \u793a\u4f8b: \u8f93\u5165: 3 \u8f93\u51fa: 5 \u89e3\u91ca: \u7ed9\u5b9a n = 3, \u4e00\u5171\u6709 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811: 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3 96.2.\u89e3\u6cd5 96.2.1 \u65b9\u6cd5\u4e00 DP \u7ed3\u9898\u601d\u8def\uff1a\u5047\u8bben\u4e2a\u8282\u70b9\u5b58\u5728\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u4e2a\u6570\u662fG(n)\uff0c1\u4e3a\u6839\u8282\u70b9\uff0c2\u4e3a\u6839\u8282\u70b9\uff0c...\uff0cn\u4e3a\u6839\u8282\u70b9\uff0c\u5f531\u4e3a\u6839\u8282\u70b9\u65f6\uff0c\u5176\u5de6\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e3a0\uff0c\u53f3\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e3an-1\uff0c\u540c\u7406\u5f532\u4e3a\u6839\u8282\u70b9\u65f6\uff0c\u5176\u5de6\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e3a1\uff0c\u53f3\u5b50\u6811\u8282\u70b9\u4e3an-2\uff0c\u6240\u4ee5\u53ef\u5f97G(n) = G(0) G(n-1)+G(1) (n-2)+...+G(n-1)*G(0) class Solution: def numTrees(self, n: int) -> int: dp = [0] * (n+1) dp[0], dp[1] = 1, 1 for i in range(2, n+1): for j in range(1, i+1): dp[i] += dp[j-1]*dp[i-j] return dp[n] 98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 / \\ 1 3 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: 5 / \\ 1 4 / \\ 3 6 \u8f93\u51fa: false \u89e3\u91ca: \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002 \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u6700\u5c0f\u6700\u5927\u503c\u8f85\u52a9\u51fd\u6570 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def isValidBST(self, root: TreeNode) -> bool: # \u6807\u8bb0\u6821\u9a8c\u4e0d\u901a\u8fc7\u7684\u60c5\u51b5 minValue = float('-inf') # \u68c0\u9a8c\u662f\u5426\u662f\u4e8c\u53c9\u641c\u7d22\u6811 \u82e5\u662f\u8fd4\u56de\u6700\u5c0f\u6700\u5927\u503c \u82e5\u4e0d\u662f\u8fd4\u56de(minValue, minValue) def helper(root): if not root: return None, None lmin, lmax = helper(root.left) if lmin == minValue: return minValue, minValue if lmin != None and lmax >= root.val: return minValue, minValue rmin, rmax = helper(root.right) if rmin == minValue: return minValue, minValue if rmin != None and rmin <= root.val: return minValue, minValue return lmin if lmin else root.val, rmax if rmax else root.val if not root: return True return helper(root) != (minValue, minValue) \u89e3\u6cd5\u4e8c \u4e2d\u5e8f\u904d\u5386 \u4e2d\u5e8f\u904d\u5386 + \u4e8c\u53c9\u641c\u7d22\u6811 == \u6709\u5e8f class Solution: def isValidBST(self, root: TreeNode) -> bool: def inorder(root): if root: inorder(root.left) arr.append(root.val) inorder(root.right) arr = [] inorder(root) for i in range(1, len(arr)): if arr[i] <= arr[i-1]: return False return True # \u975e\u9012\u5f52\u7248 def isValidBST(self, root: TreeNode) -> bool: arr = [] stack = [] while stack or root: if root: stack.append(root) root = root.left else: root = stack.pop() arr.append(root.val) root = root.right for i in range(1, len(arr)): if arr[i] <= arr[i-1]: return False return True \u89e3\u6cd5\u4e09 \u533a\u95f4\u9a8c\u8bc1 class Solution: def isValidBST(self, root: TreeNode) -> bool: # \u9a8c\u8bc1\u8fd9\u4e2a\u4e8c\u53c9\u5e73\u8861\u6811(\u5b50\u6811)\u7684\u8303\u56f4 def isValidBST(root, minVal, maxVal): if not root: return True if root.val >= maxVal or root.val <= minVal: return False return isValidBST(root.left, minVal, root.val) and isValidBST(root.right, root.val, maxVal) return isValidBST(root, float('-inf'), float('inf')) 102.\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u6309\u5c42\u6b21\u904d\u5386\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002 \u4f8b\u5982: \u7ed9\u5b9a\u4e8c\u53c9\u6811: [3,9,20,null,null,15,7], 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a [ [3], [9,20], [15,7] ] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5c42\u6b21\u904d\u5386\u7684\u6539\u8fdb \u589e\u52a0\u4e86\u6811\u6df1\u5ea6 class Solution: def levelOrder(self, root: TreeNode) -> List[List[int]]: if not root: return [] que = [] que.append((root, 0)) ans = [] while que: node, depth = que[0] que = que[1:] if depth == len(ans): ans.append([]) ans[depth].append(node.val) if node.left: que.append((node.left, depth+1)) if node.right: que.append((node.right, depth+1)) return ans \u89e3\u6cd5\u4e8c 103.\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386\u3002\uff08\u5373\u5148\u4ece\u5de6\u5f80\u53f3\uff0c\u518d\u4ece\u53f3\u5f80\u5de6\u8fdb\u884c\u4e0b\u4e00\u5c42\u904d\u5386\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u4ea4\u66ff\u8fdb\u884c\uff09\u3002 \u4f8b\u5982\uff1a \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7], 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386\u5982\u4e0b\uff1a [ [3], [20,9], [15,7] ] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None import queue class Solution: def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]: \"\"\" \u5148\u5c42\u6b21\u904d\u5386 \u5728\u9006\u8f6c\u5947\u6570\u7d22\u5f15\u7684\u6570\u7ec4 \"\"\" def reverse(lst): return lst[::-1] if not root: return [] ans = [] que = queue.Queue() que.put((root, 0)) while not que.empty(): root, ls = que.get() if ls == len(ans): ans.append([]) ans[ls].append(root.val) if root.left: que.put((root.left, ls + 1)) if root.right: que.put((root.right, ls + 1)) # \u9006\u8f6c\u5947\u6570\u7d22\u5f15\u6570\u7ec4 for i in range(1, len(ans), 2): ans[i] = reverse(ans[i]) return ans \u89e3\u6cd5\u4e8c class Solution { public List<List<Integer>> zigzagLevelOrder(TreeNode root) { List<List<Integer>> result = new ArrayList<>(); if (root == null) return result; Queue<TreeNode> queue = new LinkedList<>(); queue.add(root); // \u8bb0\u5f55\u662f\u5426\u53cd\u8f6c boolean isReverse = false; while (!queue.isEmpty()) { LinkedList<Integer> oneLevel = new LinkedList<>(); // \u6bcf\u6b21\u90fd\u53d6\u51fa\u4e00\u5c42\u7684\u6240\u6709\u6570\u636e int count = queue.size(); for (int i = 0; i < count; i++) { TreeNode node = queue.poll(); if (!isReverse) oneLevel.add(node.val); else oneLevel.addFirst(node.val); if (node.left != null) queue.add(node.left); if (node.right != null) queue.add(node.right); } isReverse = !isReverse; result.add(oneLevel); } return result; } } 105.\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u9898\u76ee\u63cf\u8ff0 \u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u524d\u5e8f\u904d\u5386 preorder = [3,9,20,15,7] \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 class Solution(object): def buildTree(self, preorder, inorder): \"\"\" :type preorder: List[int] :type inorder: List[int] :rtype: TreeNode \"\"\" if len(inorder) == 0: return None # \u524d\u5e8f\u904d\u5386\u7b2c\u4e00\u4e2a\u503c\u4e3a\u6839\u8282\u70b9 root = TreeNode(preorder[0]) # \u56e0\u4e3a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6839\u636e\u503c\u6765\u67e5\u627e\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e mid = inorder.index(preorder[0]) # \u6784\u5efa\u5de6\u5b50\u6811 root.left = self.buildTree(preorder[1:mid+1], inorder[:mid]) # \u6784\u5efa\u53f3\u5b50\u6811 root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:]) return root \u89e3\u6cd5\u4e8c 106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u9898\u76ee\u63cf\u8ff0 \u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u540e\u5e8f\u904d\u5386 postorder = [9,15,7,20,3] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode: if not inorder or not postorder: return None root = TreeNode(postorder[-1]) mid = inorder.index(postorder[-1]) root.left = self.buildTree(inorder[:mid], postorder[: mid]) root.right = self.buildTree(inorder[mid + 1:], postorder[mid: -1]) return root \u89e3\u6cd5\u4e8c 110.\u5e73\u8861\u4e8c\u53c9\u6811 110.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a \u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7] 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de true \u3002 \u793a\u4f8b 2: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [1,2,2,3,3,null,null,4,4] 1 / \\ 2 2 / \\ 3 3 / \\ 4 4 \u8fd4\u56de false \u3002 110.2 \u89e3\u6cd5 This problem is generally believed to have two solutions: the top down approach and the bottom up way. 110.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52 \u81ea\u5e95\u5411\u4e0a The second method is based on DFS. Instead of calling depth() explicitly for each child node, we return the height of the current node in DFS recursion. When the sub tree of the current node (inclusive) is balanced, the function dfsHeight() returns a non-negative value as the height. Otherwise -1 is returned. According to the leftHeight and rightHeight of the two children, the parent node could check if the sub tree is balanced, and decides its return value. # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def isBalanced(self, root: TreeNode) -> bool: def treeHelper(sub_node): \"\"\" \u5982\u679c\u8be5\u5b50\u6811\u662fbalanced_tree \u8fd4\u56de\u6811\u7684\u9ad8\u5ea6 \u5426\u5219\u8fd4\u56de-1 \"\"\" if not sub_node: return 0 left_height = treeHelper(sub_node.left) if left_height == -1: return -1 right_height = treeHelper(sub_node.right) if right_height == -1: return -1 return max(left_height, right_height)+1 if abs(left_height-right_height) <= 1 else -1 return if treeHelper(root) != -1 110.2.2 \u9012\u5f52 \u81ea\u9876\u5411\u4e0b The first method checks whether the tree is balanced strictly according to the definition of balanced binary tree: the difference between the heights of the two sub trees are not bigger than 1, and both the left sub tree and right sub tree are also balanced. With the helper function depth(), we could easily write the code; For the current node root, calling depth() for its left and right children actually has to access all of its children, thus the complexity is O(N). We do this for each node in the tree, so the overall complexity of isBalanced will be O(N^2)\u274c. This is a top down approach. class solution { public: int depth (TreeNode *root) { if (root == NULL) return 0; return max (depth(root -> left), depth (root -> right)) + 1; } bool isBalanced (TreeNode *root) { if (root == NULL) return true; int left=depth(root->left); int right=depth(root->right); return abs(left - right) <= 1 && isBalanced(root->left) && isBalanced(root->right); } }; 114. \u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u539f\u5730\u5c06\u5b83\u5c55\u5f00\u4e3a\u94fe\u8868\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e8c\u53c9\u6811 \u200b 1 / \\ 2 5 / \\ \\ 3 4 6 \u5c06\u5176\u5c55\u5f00\u4e3a\uff1a 1 \\ 2 \\ 3 \\ 4 \\ 5 \\ 6 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52\u6cd5 class Solution: def flatten(self, root: TreeNode) -> None: if not root: return right = root.right left = root.left self.flatten(root.left) self.flatten(right) root.right = left p = root while p.right: p = p.right p.right = right root.left = None \u89e3\u6cd5\u4e8c \u524d\u5e8f\u904d\u5386 116. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u5176\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\uff0c\u6bcf\u4e2a\u7236\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u3002\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a struct Node { int val; Node left; Node right; Node *next; } \u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u8ba9\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u3002\u5982\u679c\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5219\u5c06 next \u6307\u9488\u8bbe\u7f6e\u4e3a NULL\u3002 \u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6240\u6709 next \u6307\u9488\u90fd\u88ab\u8bbe\u7f6e\u4e3a NULL\u3002 \u8f93\u5165\uff1a{\"$id\":\"1\",\"left\":{\"$id\":\"2\",\"left\":{\"$id\":\"3\",\"left\":null,\"next\":null,\"right\":null,\"val\":4},\"next\":null,\"right\":{\"$id\":\"4\",\"left\":null,\"next\":null,\"right\":null,\"val\":5},\"val\":2},\"next\":null,\"right\":{\"$id\":\"5\",\"left\":{\"$id\":\"6\",\"left\":null,\"next\":null,\"right\":null,\"val\":6},\"next\":null,\"right\":{\"$id\":\"7\",\"left\":null,\"next\":null,\"right\":null,\"val\":7},\"val\":3},\"val\":1} \u8f93\u51fa\uff1a{\"$id\":\"1\",\"left\":{\"$id\":\"2\",\"left\":{\"$id\":\"3\",\"left\":null,\"next\":{\"$id\":\"4\",\"left\":null,\"next\":{\"$id\":\"5\",\"left\":null,\"next\":{\"$id\":\"6\",\"left\":null,\"next\":null,\"right\":null,\"val\":7},\"right\":null,\"val\":6},\"right\":null,\"val\":5},\"right\":null,\"val\":4},\"next\":{\"$id\":\"7\",\"left\":{\"$ref\":\"5\"},\"next\":null,\"right\":{\"$ref\":\"6\"},\"val\":3},\"right\":{\"$ref\":\"4\"},\"val\":2},\"next\":null,\"right\":{\"$ref\":\"7\"},\"val\":1} \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4e8c\u53c9\u6811\u5982\u56fe A \u6240\u793a\uff0c\u4f60\u7684\u51fd\u6570\u5e94\u8be5\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u4ee5\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5982\u56fe B \u6240\u793a\u3002 \u63d0\u793a\uff1a \u4f60\u53ea\u80fd\u4f7f\u7528\u5e38\u91cf\u7ea7\u989d\u5916\u7a7a\u95f4\u3002 \u4f7f\u7528\u9012\u5f52\u89e3\u9898\u4e5f\u7b26\u5408\u8981\u6c42\uff0c\u672c\u9898\u4e2d\u9012\u5f52\u7a0b\u5e8f\u5360\u7528\u7684\u6808\u7a7a\u95f4\u4e0d\u7b97\u505a\u989d\u5916\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 BFS \u672a\u6ee1\u8db3\u5e38\u91cf\u7ea7\u8f85\u52a9\u7a7a\u95f4 \"\"\" # Definition for a Node. class Node: def __init__(self, val, left, right, next): self.val = val self.left = left self.right = right self.next = next \"\"\" import queue class Solution: def connect(self, root: 'Node') -> 'Node': \"\"\" BFS\u904d\u5386 \u5b58\u50a8\u4e0a\u4e00\u4e2a\u904d\u5386\u7684\u7ed3\u70b9 \"\"\" if not root: return root que = queue.Queue() que.put((root, 0)) last = None last_l = -1 while not que.empty(): node, ls = que.get() if ls != last_l: last_l = ls else: last.next = node last = node if node.left: que.put((node.left, ls + 1)) if node.right: que.put((node.right, ls + 1)) return root \u89e3\u6cd5\u4e8c \u5206\u6cbb\u6cd5 \"\"\" # Definition for a Node. class Node: def __init__(self, val, left, right, next): self.val = val self.left = left self.right = right self.next = next \"\"\" class Solution: def connect(self, root: 'Node') -> 'Node': if not root: return None leftT = self.connect(root.left) rightT = self.connect(root.right) while leftT and rightT: leftT.next = rightT leftT = leftT.right if leftT.right else leftT.left rightT = rightT.left if rightT.left else rightT.right return root \u89e3\u6cd5\u4e09 \u975e\u9012\u5f52\u6cd5 \"\"\" # Definition for a Node. class Node: def __init__(self, val, left, right, next): self.val = val self.left = left self.right = right self.next = next \"\"\" import queue class Solution: def connect(self, root: 'Node') -> 'Node': # \u6ce8\u610f\u9898\u76ee\u5b8c\u7f8e\u4e8c\u53c9\u6811 \u6240\u6709\u5c42\u90fd\u662f\u6ee1\u7684 layer_start_node = root while layer_start_node: p = layer_start_node # \u5904\u7406\u4e00\u5c42\u7684\u7ed3\u70b9 \u4ece\u8fd9\u4e00\u5c42\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u5904\u7406\u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 while p: if p.left: p.left.next = p.right if p.right and p.next: p.right.next = p.next.left p = p.next # \u8df3\u5230\u4e0b\u4e00\u5c42 layer_start_node = layer_start_node.left return root 117. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 II \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811 struct Node { int val; Node left; Node right; Node *next; } \u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u8ba9\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u3002\u5982\u679c\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5219\u5c06 next \u6307\u9488\u8bbe\u7f6e\u4e3a NULL\u3002 \u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6240\u6709 next \u6307\u9488\u90fd\u88ab\u8bbe\u7f6e\u4e3a NULL\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a{\"$id\":\"1\",\"left\":{\"$id\":\"2\",\"left\":{\"$id\":\"3\",\"left\":null,\"next\":null,\"right\":null,\"val\":4},\"next\":null,\"right\":{\"$id\":\"4\",\"left\":null,\"next\":null,\"right\":null,\"val\":5},\"val\":2},\"next\":null,\"right\":{\"$id\":\"5\",\"left\":null,\"next\":null,\"right\":{\"$id\":\"6\",\"left\":null,\"next\":null,\"right\":null,\"val\":7},\"val\":3},\"val\":1} \u8f93\u51fa\uff1a{\"$id\":\"1\",\"left\":{\"$id\":\"2\",\"left\":{\"$id\":\"3\",\"left\":null,\"next\":{\"$id\":\"4\",\"left\":null,\"next\":{\"$id\":\"5\",\"left\":null,\"next\":null,\"right\":null,\"val\":7},\"right\":null,\"val\":5},\"right\":null,\"val\":4},\"next\":{\"$id\":\"6\",\"left\":null,\"next\":null,\"right\":{\"$ref\":\"5\"},\"val\":3},\"right\":{\"$ref\":\"4\"},\"val\":2},\"next\":null,\"right\":{\"$ref\":\"6\"},\"val\":1} \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4e8c\u53c9\u6811\u5982\u56fe A \u6240\u793a\uff0c\u4f60\u7684\u51fd\u6570\u5e94\u8be5\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u4ee5\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5982\u56fe B \u6240\u793a\u3002 \u63d0\u793a\uff1a \u4f60\u53ea\u80fd\u4f7f\u7528\u5e38\u91cf\u7ea7\u989d\u5916\u7a7a\u95f4\u3002 \u4f7f\u7528\u9012\u5f52\u89e3\u9898\u4e5f\u7b26\u5408\u8981\u6c42\uff0c\u672c\u9898\u4e2d\u9012\u5f52\u7a0b\u5e8f\u5360\u7528\u7684\u6808\u7a7a\u95f4\u4e0d\u7b97\u505a\u989d\u5916\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5c42\u6b21\u94fe\u8868\u6cd5 \"\"\" # Definition for a Node. class Node: def __init__(self, val, left, right, next): self.val = val self.left = left self.right = right self.next = next \"\"\" class Solution: def connect(self, root: 'Node') -> 'Node': \"\"\" \u5c42\u5e8f\u904d\u5386 \u4f46\u8fdd\u53cd\u7a7a\u95f4\u9650\u5236 \u5c42\u5e8f\u904d\u5386\u53d8\u79cd \u6bcf\u5c42\u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf(\u76f8\u5f53\u4e8e\u6bcf\u5c42\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868) \"\"\" head = root while head: layer_head = Node(-1) layer_tail = layer_head node = head while node: if node.left: layer_tail.next = node.left layer_tail = layer_tail.next if node.right: layer_tail.next = node.right layer_tail = layer_tail.next node = node.next head = layer_head.next return root \u89e3\u6cd5\u4e8c 129. \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u653e\u4e00\u4e2a 0-9 \u7684\u6570\u5b57\uff0c\u6bcf\u6761\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 1->2->3 \u4ee3\u8868\u6570\u5b57 123\u3002 \u8ba1\u7b97\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u751f\u6210\u7684\u6240\u6709\u6570\u5b57\u4e4b\u548c\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3] 1 / \\ 2 3 \u8f93\u51fa: 25 \u89e3\u91ca: \u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 1->2 \u4ee3\u8868\u6570\u5b57 12. \u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 1->3 \u4ee3\u8868\u6570\u5b57 13. \u56e0\u6b64\uff0c\u6570\u5b57\u603b\u548c = 12 + 13 = 25. \u793a\u4f8b 2: \u8f93\u5165: [4,9,0,5,1] 4 / \\ 9 0 / \\ 5 1 \u8f93\u51fa: 1026 \u89e3\u91ca: \u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 4->9->5 \u4ee3\u8868\u6570\u5b57 495. \u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 4->9->1 \u4ee3\u8868\u6570\u5b57 491. \u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 4->0 \u4ee3\u8868\u6570\u5b57 40. \u56e0\u6b64\uff0c\u6570\u5b57\u603b\u548c = 495 + 491 + 40 = 1026. \u89e3\u6cd5 \u89e3\u6cd5\u4e00 dfs # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def sumNumbers(self, root: TreeNode) -> int: if not root: return 0 stack = [(root, root.val)] res = [] while stack: node, val = stack.pop() if not node.left and not node.right: res.append(val) if node.left: stack.append((node.left, val * 10 + node.left.val)) if node.right: stack.append((node.right, val * 10 + node.right.val)) return sum(res) \u89e3\u6cd5\u4e8c 144.\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 144.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \u524d\u5e8f \u904d\u5386\u3002 \u793a\u4f8b: \u8f93\u5165: [1,null,2,3] 1 \\ 2 / 3 \u8f93\u51fa: [1,2,3] \u8fdb\u9636: \u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f 144.2 \u89e3\u6cd5 \u524d\u5e8f\u904d\u5386\uff1a\u6839\u8282\u70b9->\u5de6\u5b50\u6811->\u53f3\u5b50\u6811 \u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\u5b50\u6811->\u6839\u8282\u70b9->\u53f3\u5b50\u6811 \u540e\u5e8f\u904d\u5386\uff1a\u5de6\u5b50\u6811->\u53f3\u5b50\u6811->\u6839\u8282\u70b9 144.2.1 \u9012\u5f52 def preorderTraversal(self, root: TreeNode) -> List[int]: def treeHelper(sub_root, res): if not sub_root: return res.append(sub_root.val) treeHelper(sub_root.left, res) treeHelper(sub_root.right, res) res = [] treeHelper(root, res) return res 144.2.2 \u975e\u9012\u5f52 def preorderTraversal(self, root: TreeNode) -> List[int]: if not root: return [] stack = [root] res = [] while stack: node = stack.pop() res.append(node.val) # \u5148\u53f3\u540e\u5de6 if node.right: stack.append(node.right) if node.left: stack.append(node.left) return res 144.2.3 \u975e\u9012\u5f52\u65b9\u6cd5\u4e8c \u5148\u904d\u5386\u5de6\u5b50\u6811 \u5728\u904d\u5386\u53f3\u5b50\u6811 def preorderTraversal(self, root: TreeNode) -> List[int]: stack = [] res = [] while stack or root: if root: res.append(root.val) stack.append(root) root = root.left else: root = stack.pop() root = root.right return res 173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668 \u9898\u76ee\u63cf\u8ff0 \u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668\u3002\u4f60\u5c06\u4f7f\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002 \u8c03\u7528 next() \u5c06\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002 \u793a\u4f8b\uff1a BSTIterator iterator = new BSTIterator(root); iterator.next(); // \u8fd4\u56de 3 iterator.next(); // \u8fd4\u56de 7 iterator.hasNext(); // \u8fd4\u56de true iterator.next(); // \u8fd4\u56de 9 iterator.hasNext(); // \u8fd4\u56de true iterator.next(); // \u8fd4\u56de 15 iterator.hasNext(); // \u8fd4\u56de true iterator.next(); // \u8fd4\u56de 20 iterator.hasNext(); // \u8fd4\u56de false \u63d0\u793a\uff1a next() \u548c hasNext() \u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u5e76\u4f7f\u7528 O(h) \u5185\u5b58\uff0c\u5176\u4e2d h \u662f\u6811\u7684\u9ad8\u5ea6\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe next() \u8c03\u7528\u603b\u662f\u6709\u6548\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u8c03\u7528 next() \u65f6\uff0cBST \u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class BSTIterator: # \u89c1\u5230\u4e8c\u53c9\u641c\u7d22\u6811\u60f3\u4e2d\u5e8f\u904d\u5386 def __init__(self, root: TreeNode): self.stack = [] while root: self.stack.append(root) root = root.left def next(self) -> int: \"\"\" @return the next smallest number \"\"\" root = self.stack.pop() res = root.val root = root.right while root: self.stack.append(root) root = root.left return res def hasNext(self) -> bool: \"\"\" @return whether we have a next smallest number \"\"\" return len(self.stack) != 0 # Your BSTIterator object will be instantiated and called as such: # obj = BSTIterator(root) # param_1 = obj.next() # param_2 = obj.hasNext() \u4f46\u662f\u5f88\u591a\u5c0f\u4f19\u4f34\u4f1a\u5bf9next()\u4e2d\u7684\u5faa\u73af\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u611f\u5230\u7591\u60d1\uff0c\u8ba4\u4e3a\u65e2\u7136\u52a0\u5165\u4e86\u5faa\u73af\u5728\u91cc\u9762\uff0c\u90a3\u65f6\u95f4\u590d\u6742\u5ea6\u80af\u5b9a\u662f\u5927\u4e8eO(1)\u4e0d\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u3002 \u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\uff0c\u8be5\u5faa\u73af\u53ea\u6709\u5728\u8282\u70b9\u6709\u53f3\u5b50\u6811\u7684\u65f6\u5019\u624d\u9700\u8981\u8fdb\u884c\uff0c\u4e5f\u5c31\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u64cd\u4f5c\u90fd\u9700\u8981\u5faa\u73af\u7684\uff0c\u5faa\u73af\u7684\u6b21\u6570\u52a0\u4e0a\u521d\u59cb\u5316\u7684\u5faa\u73af\u603b\u5171\u4f1a\u6709O(n)\u6b21\u64cd\u4f5c\uff0c\u5747\u644a\u5230\u6bcf\u4e00\u6b21next()\u7684\u8bdd\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5219\u662fO(n)/n=O(1)\uff0c\u56e0\u6b64\u53ef\u4ee5\u786e\u5b9a\u8be5\u5b9e\u73b0\u65b9\u5f0f\u6ee1\u8db3O(1)\u7684\u8981\u6c42\u3002 \u8fd9\u79cd\u5206\u6790\u65b9\u5f0f\u79f0\u4e3a\u644a\u8fd8\u5206\u6790\uff0c\u8be6\u7ec6\u7684\u5b66\u4e60\u53ef\u4ee5\u770b\u770b \u300a\u7b97\u6cd5\u5bfc\u8bba\u300b- \u7b2c17\u7ae0 \u644a\u8fd8\u5206\u6790 \u89e3\u6cd5\u4e8c 199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u60f3\u8c61\u81ea\u5df1\u7ad9\u5728\u5b83\u7684\u53f3\u4fa7\uff0c\u6309\u7167\u4ece\u9876\u90e8\u5230\u5e95\u90e8\u7684\u987a\u5e8f\uff0c\u8fd4\u56de\u4ece\u53f3\u4fa7\u6240\u80fd\u770b\u5230\u7684\u8282\u70b9\u503c\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3,null,5,null,4] \u8f93\u51fa: [1, 3, 4] \u89e3\u91ca: 1 <--- / \\ 2 3 <--- \\ \\ 5 4 <--- \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5c42\u6b21\u904d\u5386 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None import queue class Solution: def rightSideView(self, root: TreeNode) -> List[int]: if not root: return [] que = queue.Queue() que.put((root, 0)) last = -1 res = [] while not que.empty(): root, d = que.get() if d != last: res.append(root.val) last = d if root.right: que.put((root.right, d + 1)) if root.left: que.put((root.left, d + 1)) return res \u89e3\u6cd5\u4e8c dfs class Solution(object): def rightSideView(self, root): rightmost_value_at_depth = dict() # depth -> node.val max_depth = -1 stack = [(root, 0)] while stack: node, depth = stack.pop() if node is not None: # maintain knowledge of the number of levels in the tree. max_depth = max(max_depth, depth) # only insert into dict if depth is not already present. rightmost_value_at_depth.setdefault(depth, node.val) stack.append((node.left, depth+1)) stack.append((node.right, depth+1)) return [rightmost_value_at_depth[depth] for depth in range(max_depth+1)] 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) 208.1 \u9898\u76ee\u63cf\u8ff0 \u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b insert , search , \u548c startsWith \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002 \u793a\u4f8b: Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\"); // \u8fd4\u56de true trie.search(\"app\"); // \u8fd4\u56de false trie.startsWith(\"app\"); // \u8fd4\u56de true trie.insert(\"app\"); trie.search(\"app\"); // \u8fd4\u56de true \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd a-z \u6784\u6210\u7684\u3002 \u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002 208.2 \u89e3\u6cd5 208.1 \u65b9\u6cd5\u4e00 \u5b57\u5178\u5efa\u6811 class Trie: def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.root = dict() def insert(self, word: str) -> None: \"\"\" Inserts a word into the trie. \"\"\" node = self.root for c in word: if c in node: node = node[c] else: node[c] = dict() node = node[c] node['is_word'] = True def search(self, word: str) -> bool: \"\"\" Returns if the word is in the trie. \"\"\" node = self.root for c in word: if c in node: node = node[c] else: return False return 'is_word' in node def startsWith(self, prefix: str) -> bool: \"\"\" Returns if there is any word in the trie that starts with the given prefix. \"\"\" node = self.root for c in prefix: if c not in node: return False else: node = node[c] return True # Your Trie object will be instantiated and called as such: # obj = Trie() # obj.insert(word) # param_2 = obj.search(word) # param_3 = obj.startsWith(prefix) 230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20 230.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570 kthSmallest \u6765\u67e5\u627e\u5176\u4e2d\u7b2c k \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c1 \u2264 k \u2264 \u4e8c\u53c9\u641c\u7d22\u6811\u5143\u7d20\u4e2a\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: root = [3,1,4,null,2], k = 1 3 / \\ 1 4 \\ 2 \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: root = [5,3,6,2,4,null,null,1], k = 3 5 / \\ 3 6 / \\ 2 4 / 1 \u8f93\u51fa: 3 \u8fdb\u9636\uff1a \u5982\u679c\u4e8c\u53c9\u641c\u7d22\u6811\u7ecf\u5e38\u88ab\u4fee\u6539\uff08\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\uff09\u5e76\u4e14\u4f60\u9700\u8981\u9891\u7e41\u5730\u67e5\u627e\u7b2c k \u5c0f\u7684\u503c\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316 kthSmallest \u51fd\u6570\uff1f 230.2 \u89e3\u6cd5 230.2.1 \u65b9\u6cd5\u4e00 \u4e2d\u5e8f\u904d\u5386 \u9012\u5f52 class Solution: def kthSmallest(self, root: TreeNode, k: int) -> int: \"\"\" \u4e2d\u5e8f\u904d\u5386, \u904d\u5386\u5230\u7b2ck\u4e2a\u5143\u7d20\u65f6\u505c\u6b62 \"\"\" def treeHelper(sub_root, res): if not sub_root: return treeHelper(sub_root.left, res) res.append(sub_root.val) treeHelper(sub_root.right, res) res = [] treeHelper(root, res) return res[k-1] 230.2.1 \u65b9\u6cd5\u4e8c \u65b9\u6cd5\u4e00\u6539\u8fdb\u7248 def kthSmallest(self, root: TreeNode, k: int) -> int: \"\"\" \u4e2d\u5e8f\u904d\u5386, \u904d\u5386\u5230\u7b2ck\u4e2a\u5143\u7d20\u65f6\u505c\u6b62 \"\"\" def treeHelper(sub_root, res): if not sub_root: return treeHelper(sub_root.left, res) if len(res) == k: return res.append(sub_root.val) treeHelper(sub_root.right, res) res = [] treeHelper(root, res) return res[k-1] 230.2.3 \u65b9\u6cd5\u4e09 \u4e2d\u5e8f\u904d\u5386 \u975e\u9012\u5f52 def kthSmallest(self, root: TreeNode, k:int) -> int: stack = [] while stack or root: if root: stack.append(root) root = root.left else: root = stack.pop() k = k-1 if not k: return root.val root = root.right 230.2.4 \u65b9\u6cd5\u56db \u4e8c\u5206\u641c\u7d22 def kthSmallest(self, root: TreeNode, k:int) -> int: \"\"\" \u4e8c\u5206\u641c\u7d22 \"\"\" def cnt_nodes(sub_root): if not sub_root: return 0 return cnt_nodes(sub_root.left) + cnt_nodes(sub_root.right) + 1 left_num = cnt_nodes(root.left) if k == left_num + 1: return root.val elif k > left_num + 1: return self.kthSmallest(root.right, k - 1 - left_num) else: return self.kthSmallest(root.left, k) 230.2.5 \u65b9\u6cd5\u4e94 yield class Solution: # @param {TreeNode} root # @param {integer} k # @return {integer} def kthSmallest(self, root, k): for val in self.inorder(root): if k == 1: return val else: k -= 1 def inorder(self, root): if root is not None: for val in self.inorder(root.left): yield val yield root.val for val in self.inorder(root.right): yield val 437.\u8def\u5f84\u603b\u548cIII \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u653e\u7740\u4e00\u4e2a\u6574\u6570\u503c\u3002 \u627e\u51fa\u8def\u5f84\u548c\u7b49\u4e8e\u7ed9\u5b9a\u6570\u503c\u7684\u8def\u5f84\u603b\u6570\u3002 \u8def\u5f84\u4e0d\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e5f\u4e0d\u9700\u8981\u5728\u53f6\u5b50\u8282\u70b9\u7ed3\u675f\uff0c\u4f46\u662f\u8def\u5f84\u65b9\u5411\u5fc5\u987b\u662f\u5411\u4e0b\u7684\uff08\u53ea\u80fd\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\uff09\u3002 \u4e8c\u53c9\u6811\u4e0d\u8d85\u8fc71000\u4e2a\u8282\u70b9\uff0c\u4e14\u8282\u70b9\u6570\u503c\u8303\u56f4\u662f [-1000000,1000000] \u7684\u6574\u6570\u3002 \u793a\u4f8b\uff1a root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8 10 / \\ 5 -3 / \\ \\ 3 2 11 / \\ \\ 3 -2 1 \u8fd4\u56de 3\u3002\u548c\u7b49\u4e8e 8 \u7684\u8def\u5f84\u6709: 5 -> 3 5 -> 2 -> 1 -3 -> 11 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u53cc\u9012\u5f52\u6cd5 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def pathSum(self, root: TreeNode, sum: int) -> int: \"\"\" \u8fb9\u754c\u6761\u4ef6: \u8d1f\u6570 0 \u524d\u7f00\u548c \u9012\u5f52 \"\"\" def helper(root, sum): \"\"\" \u5305\u62ec\u6839\u8282\u70b9\u7684\u6307\u5b9a\u8def\u5f84\u6570\u91cf \"\"\" if not root: return 0 return helper(root.left, sum - root.val) + helper(root.right, sum - root.val) + (1 if sum == root.val else 0) if not root: return 0 return self.pathSum(root.left, sum) + self.pathSum(root.right, sum) + helper(root, sum) \u89e3\u6cd5\u4e8c 513. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c 513.1 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5728\u6811\u7684\u6700\u540e\u4e00\u884c\u627e\u5230\u6700\u5de6\u8fb9\u7684\u503c\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 / \\ 1 3 \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: 1 / \\ 2 3 / / \\ 4 5 6 / 7 \u8f93\u51fa: 7 \u6ce8\u610f: \u60a8\u53ef\u4ee5\u5047\u8bbe\u6811\uff08\u5373\u7ed9\u5b9a\u7684\u6839\u8282\u70b9\uff09\u4e0d\u4e3a NULL \u3002 513.2 \u89e3\u6cd5 513.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52\u81ea\u5e95\u5411\u4e0a # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def findBottomLeftValue(self, root: TreeNode) -> int: def treeHelper(sub_root): \"\"\" \u8fd4\u56de\u5b50\u6811\u7684\u9ad8\u5ea6\u4ee5\u53ca\u5de6\u4e0b\u89d2\u7684\u503c \"\"\" if not sub_root: return 0, None left_height, left_val = treeHelper(sub_root.left) right_height, right_val = treeHelper(sub_root.right) if not left_val and not right_val: return 1, sub_root.val return max(left_height, right_height)+1, right_val if right_height>left_height else left_val return treeHelper(root)[1] 513.2.2 BFS def findLeftMostNode(self, root): queue = [root] for node in queue: # queue += filter(None, (node.right, node.left)) if node.right: queue += node.right if node.left: queue += node.left return node.val 513.2.3 DFS class Solution { public: int findBottomLeftValue(TreeNode* root) { int bottomLeft = 0; int height = 0; dfs(root, 1, height, bottomLeft); return bottomLeft; } private: void dfs(TreeNode* node, int depth, int& height, int& res) { if (!node) { return; } if (depth > height) { res = node->val; // update res only when redefine the height height = depth; } dfs(node->left, depth + 1, height, res); dfs(node->right, depth + 1, height, res); } }; 513.2.4 DFS + stack #DFS + stack def findBottomLeftValue(self, root): if not root: return max_depth = 0 stack = [(root, 1)] while stack: curr, level = stack.pop() if curr: if level > max_depth: max_depth = level ans = curr.val stack.append((curr.right, level + 1)) stack.append((curr.left, level + 1)) return ans 538. \u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff08Binary Search Tree\uff09\uff0c\u628a\u5b83\u8f6c\u6362\u6210\u4e3a\u7d2f\u52a0\u6811\uff08Greater Tree)\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u662f\u539f\u6765\u7684\u8282\u70b9\u503c\u52a0\u4e0a\u6240\u6709\u5927\u4e8e\u5b83\u7684\u8282\u70b9\u503c\u4e4b\u548c\u3002 \u4f8b\u5982\uff1a \u8f93\u5165: \u4e8c\u53c9\u641c\u7d22\u6811: 5 / \\ 2 13 \u8f93\u51fa: \u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811: 18 / \\ 20 13 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9006\u4e2d\u5e8f\u904d\u5386 \"\"\" \u8fb9\u754c\u6761\u4ef6 :\u76f8\u7b49\u7684\u70b9 \u4e0d\u8981\u7d2f\u52a0 \u4e8c\u53c9\u641c\u7d22\u6811 \u5de6 < \u4e2d < \u53f3 \u4e2d\u5e8f\u904d\u5386 \u5de6 -> \u4e2d -> \u53f3 \u9006\u4e2d\u5e8f\u601d\u8def \u53f3 -> \u4e2d -> \u5de6 \u9012\u5f52\u7248 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def convertBST(self, root: TreeNode) -> TreeNode: \"\"\" \u8fb9\u754c\u6761\u4ef6 :\u76f8\u7b49\u7684\u70b9 \u4e0d\u8981\u7d2f\u52a0 \u4e8c\u53c9\u641c\u7d22\u6811 \u5de6 < \u4e2d < \u53f3 \u4e2d\u5e8f\u904d\u5386 \u5de6 -> \u4e2d -> \u53f3 \u9006\u4e2d\u5e8f\u601d\u8def \u53f3 -> \u4e2d -> \u5de6 \u9012\u5f52\u7248 \"\"\" p = root stack = [] cum = 0 last_v = 0 while stack or p: if p: stack.append(p) p = p.right else: p = stack.pop() if p.val == last_v: p.val = cum else: p.val += cum cum = p.val p = p.left return root \u89e3\u6cd5\u4e8c 543. \u4e8c\u53c9\u6811\u7684\u76f4\u5f84 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5b83\u7684\u76f4\u5f84\u957f\u5ea6\u3002\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u76f4\u5f84\u957f\u5ea6\u662f\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u8def\u5f84\u957f\u5ea6\u4e2d\u7684\u6700\u5927\u503c\u3002\u8fd9\u6761\u8def\u5f84\u53ef\u80fd\u7a7f\u8fc7\u6839\u7ed3\u70b9\u3002 \u793a\u4f8b : \u7ed9\u5b9a\u4e8c\u53c9\u6811 1 / \\ 2 3 / \\ 4 5 \u8fd4\u56de 3, \u5b83\u7684\u957f\u5ea6\u662f\u8def\u5f84 [4,2,1,3] \u6216\u8005 [5,2,1,3]\u3002 \u6ce8\u610f\uff1a\u4e24\u7ed3\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u662f\u4ee5\u5b83\u4eec\u4e4b\u95f4\u8fb9\u7684\u6570\u76ee\u8868\u793a\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u53cc\u91cd\u9012\u5f52 \u8ba1\u7b97\u5de6\u5b50\u6811\u7684\u6700\u5927\u76f4\u5f84 \u8ba1\u7b97\u53f3\u5b50\u6811\u7684\u6700\u5927\u76f4\u5f84 (\u8ba1\u7b97\u5de6\u5b50\u6811\u7684\u6df1\u5ea6 - 1 + \u53f3\u5b50\u6811\u7684\u6df1\u5ea6 - 1 + 2) \u4e09\u8005\u6700\u5927\u503c\u4e3a\u7ed3\u679c # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def diameterOfBinaryTree(self, root: TreeNode) -> int: \"\"\" \u9012\u5f52 \"\"\" def getDepth(root): if not root: return 0 return max(getDepth(root.left), getDepth(root.right)) + 1 if not root: return 0 leftmax = self.diameterOfBinaryTree(root.left) rightmax = self.diameterOfBinaryTree(root.right) return max(getDepth(root.left) + getDepth(root.right), leftmax, rightmax) \u89e3\u6cd5\u4e8c \u9012\u5f52 \u8ba1\u7b97\u6df1\u5ea6\u7684\u8fc7\u7a0b\u4e2d\u628a\u6240\u6709\u5b50\u6811\u7684\u6700\u5927\u76f4\u5f84\u4f5c\u6bd4\u8f83 \u627e\u5230\u6700\u5927\u7684 class Solution: def diameterOfBinaryTree(self, root: TreeNode) -> int: self.ans = 1 def depth(node): if not node: return 0 L = depth(node.left) R = depth(node.right) self.ans = max(self.ans, L + R + 1) return max(L, R) + 1 depth(root) return self.ans - 1 617.\u5408\u5e76\u4e8c\u53c9\u6811 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u60f3\u8c61\u5f53\u4f60\u5c06\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u8986\u76d6\u5230\u53e6\u4e00\u4e2a\u4e0a\u65f6\uff0c\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u4e00\u4e9b\u8282\u70b9\u4fbf\u4f1a\u91cd\u53e0\u3002 \u4f60\u9700\u8981\u5c06\u4ed6\u4eec\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u4e8c\u53c9\u6811\u3002\u5408\u5e76\u7684\u89c4\u5219\u662f\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u91cd\u53e0\uff0c\u90a3\u4e48\u5c06\u4ed6\u4eec\u7684\u503c\u76f8\u52a0\u4f5c\u4e3a\u8282\u70b9\u5408\u5e76\u540e\u7684\u65b0\u503c\uff0c\u5426\u5219\u4e0d\u4e3a NULL \u7684\u8282\u70b9\u5c06\u76f4\u63a5\u4f5c\u4e3a\u65b0\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: Tree 1 Tree 2 1 2 / \\ / \\ 3 2 1 3 / \\ \\ 5 4 7 \u8f93\u51fa: \u5408\u5e76\u540e\u7684\u6811: 3 / \\ 4 5 / \\ \\ 5 4 7 \u6ce8\u610f: \u5408\u5e76\u5fc5\u987b\u4ece\u4e24\u4e2a\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 Time complexity : O(m) O ( m ). A total of m m nodes need to be traversed. Here, m m represents the minimum number of nodes from the two given trees. Space complexity : O(m) O ( m ). The depth of the recursion tree can go upto m m in the case of a skewed tree. In average case, depth will be O(logm) O ( l o g m ). class Solution: def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode: if not t1: return t2 if not t2: return t1 head = TreeNode(t1.val + t2.val) head.left = self.mergeTrees(t1.left, t2.left) head.right = self.mergeTrees(t1.right, t2.right) return head \u89e3\u6cd5\u4e8c dfs Time complexity : O(n) O ( n ). We traverse over a total of n n nodes. Here, n n refers to the smaller of the number of nodes in the two trees. Space complexity : O(n) O ( n ). The depth of stack can grow upto n n in case of a skewed tree. /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ public class Solution { public TreeNode mergeTrees(TreeNode t1, TreeNode t2) { if (t1 == null) return t2; Stack < TreeNode[] > stack = new Stack < > (); stack.push(new TreeNode[] {t1, t2}); while (!stack.isEmpty()) { TreeNode[] t = stack.pop(); if (t[0] == null || t[1] == null) { continue; } t[0].val += t[1].val; if (t[0].left == null) { t[0].left = t[1].left; } else { stack.push(new TreeNode[] {t[0].left, t[1].left}); } if (t[0].right == null) { t[0].right = t[1].right; } else { stack.push(new TreeNode[] {t[0].right, t[1].right}); } } return t1; } } \u56fe \u56fe\u7684\u5e38\u7528\u89e3\u6cd5 BFS DFS \u62d3\u6251\u6392\u5e8f \u5e76\u67e5\u96c6 \u9ed1\u767d\u67d3\u8272\u6cd5 \u6700\u77ed\u8def\u5f84 \u4e00\u7b14\u753b\u95ee\u9898(\u6b27\u62c9\u56de\u8def \u6b27\u62c9\u8def\u5f84) \u62d3\u6251\u6392\u5e8f\u53ef\u4ee5\u89e3\u51b3\u6709\u5411\u65e0\u73af\u56fe \u627e\u56fe\u4e2d\u7684\u73af 127.\u5355\u8bcd\u63a5\u9f99 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08beginWord \u548c endWord\uff09\u548c\u4e00\u4e2a\u5b57\u5178\uff0c\u627e\u5230\u4ece beginWord \u5230 endWord \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a \u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002 \u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u8bf4\u660e: \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002 \u6240\u6709\u5355\u8bcd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002 \u6240\u6709\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002 \u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5355\u8bcd\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe beginWord \u548c endWord \u662f\u975e\u7a7a\u7684\uff0c\u4e14\u4e8c\u8005\u4e0d\u76f8\u540c\u3002 \u793a\u4f8b 1: \u8f93\u5165: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"] \u8f93\u51fa: 5 \u89e3\u91ca: \u4e00\u4e2a\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u662f \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", \u8fd4\u56de\u5b83\u7684\u957f\u5ea6 5\u3002 \u793a\u4f8b 2: \u8f93\u5165: beginWord = \"hit\" endWord = \"cog\" wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"] \u8f93\u51fa: 0 \u89e3\u91ca: endWord \"cog\" \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u8f6c\u6362\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 BFS 1.\u628a\u53ea\u5dee\u4e00\u4e2a\u5b57\u6bcd\u7684\u5355\u8bcd\u76f8\u8fde\uff0c\u53ef\u5f62\u6210\u4e00\u4e2a\u5173\u4e8eword\u7684\u56fe\uff0c\u7528BFS\u904d\u5386 2.\u5bf9wordList\u505a\u9884\u5904\u7406\uff0c\u751f\u6210\u4e00\u4e2akey\u4e3a\u67d0\u4e00\u5143\u7d20\u88ab*\u66ff\u4ee3\u7684\u901a\u7528\u5f62\u5f0f\uff0cvalue\u662f\u7b26\u5408\u901a\u7528\u5f62\u5f0f\u7684\u5177\u4f53\u7684\u5355\u8bcd import queue class Solution: def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int: \"\"\" 1.\u628a\u53ea\u5dee\u4e00\u4e2a\u5b57\u6bcd\u7684\u5355\u8bcd\u76f8\u8fde\uff0c\u53ef\u5f62\u6210\u4e00\u4e2a\u5173\u4e8eword\u7684\u56fe\uff0c\u7528BFS\u904d\u5386 2.\u5bf9wordList\u505a\u9884\u5904\u7406\uff0c\u751f\u6210\u4e00\u4e2akey\u4e3a\u67d0\u4e00\u5143\u7d20\u88ab*\u66ff\u4ee3\u7684\u901a\u7528\u5f62\u5f0f\uff0cvalue\u662f\u7b26\u5408\u901a\u7528\u5f62\u5f0f\u7684\u5177\u4f53\u7684\u5355\u8bcd \"\"\" # wordList\u9884\u5904\u7406 word_dic = dict() word_len = len(beginWord) for word in wordList: for i in range(word_len): key = word[:i] + '*' + word[i + 1:] if key in word_dic: word_dic[key].append(word) else: word_dic[key] = [word] # BFS visited = {beginWord} que = queue.Queue() que.put((beginWord, 1)) while not que.empty(): node, dist = que.get() # \u901a\u8fc7key\u627e\u5230\u76f8\u90bb\u7684\u7ed3\u70b9\u904d\u5386 for i in range(word_len): key = node[:i] + '*' + node[i + 1:] if key not in word_dic: continue for tail in word_dic[key]: if tail == endWord: return dist + 1 if tail not in visited: que.put((tail, dist + 1)) visited.add(tail) return 0 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(M\u00d7N)\uff0c\u5176\u4e2d M \u662f\u5355\u8bcd\u7684\u957f\u5ea6 N \u662f\u5355\u8bcd\u8868\u4e2d\u5355\u8bcd\u7684\u603b\u6570\u3002\u627e\u5230\u6240\u6709\u7684\u53d8\u6362\u9700\u8981\u5bf9\u6bcf\u4e2a\u5355\u8bcd\u505a MM\u6b21\u64cd\u4f5c\u3002\u540c\u65f6\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u4e5f\u8981\u8bbf\u95ee\u6240\u6709\u7684 N \u4e2a\u5355\u8bcd\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(M\u00d7N)\uff0c\u8981\u5728 all_combo_dict \u5b57\u5178\u4e2d\u8bb0\u5f55\u6bcf\u4e2a\u5355\u8bcd\u7684 M \u4e2a\u901a\u7528\u72b6\u6001\u3002\u8bbf\u95ee\u6570\u7ec4\u7684\u5927\u5c0f\u662f NN\u3002\u5e7f\u641c\u961f\u5217\u6700\u574f\u60c5\u51b5\u4e0b\u9700\u8981\u5b58\u50a8 NN \u4e2a\u5355\u8bcd\u3002 \u89e3\u6cd5\u4e8c \u53cc\u7aefBFS \u6839\u636e\u7ed9\u5b9a\u5b57\u5178\u6784\u9020\u7684\u56fe\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u800c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u641c\u7d22\u7a7a\u95f4\u5927\u5c0f\u4f9d\u8d56\u4e8e\u6bcf\u5c42\u8282\u70b9\u7684\u5206\u652f\u6570\u91cf\u3002\u5047\u5982\u6bcf\u4e2a\u8282\u70b9\u7684\u5206\u652f\u6570\u91cf\u76f8\u540c\uff0c\u641c\u7d22\u7a7a\u95f4\u4f1a\u968f\u7740\u5c42\u6570\u7684\u589e\u957f\u6307\u6570\u7ea7\u7684\u589e\u52a0\u3002\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e00\u5c42\u90fd\u662f\u6ee1\u4e8c\u53c9\u6811\u7684\u6269\u5c55\uff0c\u8282\u70b9\u7684\u6570\u91cf\u4f1a\u4ee5 2 \u4e3a\u5e95\u6570\u5448\u6307\u6570\u589e\u957f\u3002 \u5982\u679c\u4f7f\u7528\u4e24\u4e2a\u540c\u65f6\u8fdb\u884c\u7684\u5e7f\u641c\u53ef\u4ee5\u6709\u6548\u5730\u51cf\u5c11\u641c\u7d22\u7a7a\u95f4\u3002\u4e00\u8fb9\u4ece beginWord \u5f00\u59cb\uff0c\u53e6\u4e00\u8fb9\u4ece endWord \u5f00\u59cb\u3002\u6211\u4eec\u6bcf\u6b21\u4ece\u4e24\u8fb9\u5404\u6269\u5c55\u4e00\u4e2a\u8282\u70b9\uff0c\u5f53\u53d1\u73b0\u67d0\u4e00\u65f6\u523b\u4e24\u8fb9\u90fd\u8bbf\u95ee\u4e86\u67d0\u4e00\u9876\u70b9\u65f6\u5c31\u505c\u6b62\u641c\u7d22\u3002\u8fd9\u5c31\u662f\u53cc\u5411\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5b83\u53ef\u4ee5\u53ef\u89c2\u5730\u51cf\u5c11\u641c\u7d22\u7a7a\u95f4\u5927\u5c0f\uff0c\u4ece\u800c\u964d\u4f4e\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u7b97\u6cd5 \u7b97\u6cd5\u4e0e\u4e4b\u524d\u63cf\u8ff0\u7684\u6807\u51c6\u5e7f\u641c\u65b9\u6cd5\u76f8\u7c7b\u4f3c\u3002 \u552f\u4e00\u7684\u4e0d\u540c\u662f\u6211\u4eec\u4ece\u4e24\u4e2a\u8282\u70b9\u540c\u65f6\u5f00\u59cb\u641c\u7d22\uff0c\u540c\u65f6\u641c\u7d22\u7684\u7ed3\u675f\u6761\u4ef6\u4e5f\u6709\u6240\u53d8\u5316\u3002 \u6211\u4eec\u73b0\u5728\u6709\u4e24\u4e2a\u8bbf\u95ee\u6570\u7ec4\uff0c\u5206\u522b\u8bb0\u5f55\u4ece\u5bf9\u5e94\u7684\u8d77\u70b9\u662f\u5426\u5df2\u7ecf\u8bbf\u95ee\u4e86\u8be5\u8282\u70b9\u3002 \u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u8282\u70b9\u88ab\u4e24\u4e2a\u641c\u7d22\u540c\u65f6\u8bbf\u95ee\uff0c\u5c31\u7ed3\u675f\u641c\u7d22\u8fc7\u7a0b\u3002\u56e0\u4e3a\u6211\u4eec\u627e\u5230\u4e86\u53cc\u5411\u641c\u7d22\u7684\u4ea4\u70b9\u3002\u8fc7\u7a0b\u5982\u540c\u4ece\u4e2d\u95f4\u76f8\u9047\u800c\u4e0d\u662f\u6cbf\u7740\u641c\u7d22\u8def\u5f84\u4e00\u76f4\u8d70\u3002 \u53cc\u5411\u641c\u7d22\u7684\u7ed3\u675f\u6761\u4ef6\u662f\u627e\u5230\u4e00\u4e2a\u5355\u8bcd\u88ab\u4e24\u8fb9\u641c\u7d22\u90fd\u8bbf\u95ee\u8fc7\u4e86\u3002 \u6700\u77ed\u53d8\u6362\u5e8f\u5217\u7684\u957f\u5ea6\u5c31\u662f\u4e2d\u95f4\u8282\u70b9\u5728\u4e24\u8fb9\u7684\u5c42\u6b21\u4e4b\u548c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8bbf\u95ee\u6570\u7ec4\u4e2d\u8bb0\u5f55\u8282\u70b9\u7684\u5c42\u6b21\u3002 from collections import defaultdict class Solution(object): def __init__(self): self.length = 0 # Dictionary to hold combination of words that can be formed, # from any given word. By changing one letter at a time. self.all_combo_dict = defaultdict(list) def visitWordNode(self, queue, visited, others_visited): current_word, level = queue.pop(0) for i in range(self.length): # Intermediate words for current word intermediate_word = current_word[:i] + \"*\" + current_word[i+1:] # Next states are all the words which share the same intermediate state. for word in self.all_combo_dict[intermediate_word]: # If the intermediate state/word has already been visited from the # other parallel traversal this means we have found the answer. if word in others_visited: return level + others_visited[word] if word not in visited: # Save the level as the value of the dictionary, to save number of hops. visited[word] = level + 1 queue.append((word, level + 1)) return None def ladderLength(self, beginWord, endWord, wordList): \"\"\" :type beginWord: str :type endWord: str :type wordList: List[str] :rtype: int \"\"\" if endWord not in wordList or not endWord or not beginWord or not wordList: return 0 # Since all words are of same length. self.length = len(beginWord) for word in wordList: for i in range(self.length): # Key is the generic word # Value is a list of words which have the same intermediate generic word. self.all_combo_dict[word[:i] + \"*\" + word[i+1:]].append(word) # Queues for birdirectional BFS queue_begin = [(beginWord, 1)] # BFS starting from beginWord queue_end = [(endWord, 1)] # BFS starting from endWord # Visited to make sure we don't repeat processing same word visited_begin = {beginWord: 1} visited_end = {endWord: 1} ans = None # We do a birdirectional search starting one pointer from begin # word and one pointer from end word. Hopping one by one. while queue_begin and queue_end: # One hop from begin word ans = self.visitWordNode(queue_begin, visited_begin, visited_end) if ans: return ans # One hop from end word ans = self.visitWordNode(queue_end, visited_end, visited_begin) if ans: return ans return 0 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(M \\times N)O(M\u00d7N)\uff0c\u5176\u4e2d MM \u662f\u5355\u8bcd\u7684\u957f\u5ea6 NN \u662f\u5355\u8bcd\u8868\u4e2d\u5355\u8bcd\u7684\u603b\u6570\u3002\u4e0e\u5355\u5411\u641c\u7d22\u76f8\u540c\u7684\u662f\uff0c\u627e\u5230\u6240\u6709\u7684\u53d8\u6362\u9700\u8981 M * NM\u2217N \u6b21\u64cd\u4f5c\u3002\u4f46\u662f\u641c\u7d22\u65f6\u95f4\u4f1a\u88ab\u7f29\u5c0f\u4e00\u534a\uff0c\u56e0\u4e3a\u4e24\u4e2a\u641c\u7d22\u4f1a\u5728\u4e2d\u95f4\u67d0\u5904\u76f8\u9047\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(M \\times N)O(M\u00d7N)\uff0c\u8981\u5728 all_combo_dict \u5b57\u5178\u4e2d\u8bb0\u5f55\u6bcf\u4e2a\u5355\u8bcd\u7684 MM \u4e2a\u901a\u7528\u72b6\u6001\uff0c\u8fd9\u4e0e\u5355\u5411\u641c\u7d22\u76f8\u540c\u3002\u4f46\u662f\u56e0\u4e3a\u4f1a\u5728\u4e2d\u95f4\u76f8\u9047\uff0c\u6240\u4ee5\u53cc\u5411\u641c\u7d22\u7684\u641c\u7d22\u7a7a\u95f4\u53d8\u5c0f\u3002 133. \u514b\u9686\u56fe \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u65e0\u5411\u8fde\u901a\u56fe\u4e2d\u4e00\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8fd4\u56de\u8be5\u56fe\u7684\u6df1\u62f7\u8d1d\uff08\u514b\u9686\uff09\u3002\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u5b83\u7684\u503c val\uff08Int\uff09 \u548c\u5176\u90bb\u5c45\u7684\u5217\u8868\uff08list[Node]\uff09\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a {\"$id\":\"1\",\"neighbors\":[{\"$id\":\"2\",\"neighbors\":[{\"$ref\":\"1\"},{\"$id\":\"3\",\"neighbors\":[{\"$ref\":\"2\"},{\"$id\":\"4\",\"neighbors\":[{\"$ref\":\"3\"},{\"$ref\":\"1\"}],\"val\":4}],\"val\":3}],\"val\":2},{\"$ref\":\"4\"}],\"val\":1} \u89e3\u91ca\uff1a \u8282\u70b9 1 \u7684\u503c\u662f 1\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 2 \u548c 4 \u3002 \u8282\u70b9 2 \u7684\u503c\u662f 2\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 1 \u548c 3 \u3002 \u8282\u70b9 3 \u7684\u503c\u662f 3\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 2 \u548c 4 \u3002 \u8282\u70b9 4 \u7684\u503c\u662f 4\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 1 \u548c 3 \u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DFS \"\"\" # Definition for a Node. class Node: def __init__(self, val, neighbors): self.val = val self.neighbors = neighbors \"\"\" class Solution: def cloneGraph(self, node: 'Node') -> 'Node': copy = Node(node.val, []) stack = [node] cp_stack = [copy] visited = {node.val: copy} while stack: v = stack.pop() cp_v = cp_stack.pop() for adj_v in v.neighbors: if adj_v.val not in visited: stack.append(adj_v) cp_adj_v = Node(adj_v.val, []) visited[adj_v.val] = cp_adj_v cp_v.neighbors.append(cp_adj_v) cp_stack.append(cp_adj_v) else: cp_v.neighbors.append(visited[adj_v.val]) return copy \u89e3\u6cd5\u4e8c /* // Definition for a Node. class Node { public int val; public List<Node> neighbors; public Node() {} public Node(int _val,List<Node> _neighbors) { val = _val; neighbors = _neighbors; } }; */ 207.\u8bfe\u7a0b\u8868 \u9898\u76ee\u63cf\u8ff0 \u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 n-1\u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f \u793a\u4f8b 1: \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: true \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002 \u793a\u4f8b 2: \u8f93\u5165: 2, [[1,0],[0,1]] \u8f93\u51fa: false \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u8bf4\u660e: \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531\u8fb9\u7f18\u5217\u8868\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\u56fe\u7684\u8868\u793a\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 \u63d0\u793a: \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002 \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7 BFS \u5b8c\u6210\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u62d3\u6251\u6392\u5e8f import queue class Graph: def __init__(self, N): self.V = N # \u90bb\u63a5\u8868 self.adj_list = [[] for _ in range(N)] # \u7ef4\u6301\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9\u961f\u5217 self.que = queue.Queue() # \u5165\u5ea6 self.indegree = [0] * N def add_path(self, s, t): self.adj_list[s].append(t) self.indegree[t] += 1 def topological_sort(self): # 1.\u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u5165\u961f for i, d in enumerate(self.indegree): if d == 0: self.que.put(i) # 2.\u62d3\u6251\u6392\u5e8f count = 0 while not self.que.empty(): v = self.que.get() count += 1 for adj_v in self.adj_list[v]: self.indegree[adj_v] -= 1 if self.indegree[adj_v] == 0: self.que.put(adj_v) # 3. \u5224\u65ad\u73af if count < self.V: return False else: return True class Solution: def canFinish(self, a: int, prerequisites: List[List[int]]) -> bool: \"\"\" \u62d3\u6251\u6392\u5e8f \u5bfb\u627e\u6ca1\u6709\u5165\u5ea6\u7684\u70b9 DFS \u5224\u65ad\u904d\u5386\u6240\u6709\u70b9\u4e4b\u540e\u662f\u5426\u4f1a\u5b58\u5728\u5faa\u73af \"\"\" g = Graph(numCourses) for t, s in prerequisites: g.add_path(s, t) return g.topological_sort() import queue class Solution: def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool: # \u62d3\u6251\u6392\u5e8f # todo change c # 1.\u6784\u5efa\u56fe\u53ca\u4fdd\u5b58\u5165\u5ea6 graph = [[] for _ in range(N)] indegree = [0] * N for t, s in nums: indegree[t] += 1 graph[s].append(t) # 2.\u62d3\u6251\u6392\u5e8f\u5f00\u59cb\u4e4b\u524d\uff0c\u5148\u628a\u6240\u6709\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\u52a0\u5165\u5230\u4e00\u4e2a\u961f\u5217\u4e2d zero_que = queue.Queue() for i, d in enumerate(indegree): if d == 0: zero_que.put(i) # 3.\u62d3\u6251\u6392\u5e8f BFS\u9010\u6b65\u6d88\u9664\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9 cnt = 0 while not zero_que.empty(): node = zero_que.get() cnt += 1 for adj_v in graph[node]: indegree[adj_v] -= 1 if indegree[adj_v] == 0: zero_que.put(adj_v) return cnt == N \u89e3\u6cd5\u4e8c \u63a8\u8350 import queue class Solution: def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool: # \u62d3\u6251\u6392\u5e8f # todo change N = numCourses nums = prerequisites # 1.\u6784\u5efa\u56fe\u53ca\u4fdd\u5b58\u5165\u5ea6 graph = [[] for _ in range(N)] indegree = [0] * N for t, s in nums: indegree[t] += 1 graph[s].append(t) # 2.\u62d3\u6251\u6392\u5e8f\u5f00\u59cb\u4e4b\u524d\uff0c\u5148\u628a\u6240\u6709\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\u52a0\u5165\u5230\u4e00\u4e2a\u961f\u5217\u4e2d zero_que = queue.Queue() for i, d in enumerate(indegree): if d == 0: zero_que.put(i) # 3.\u62d3\u6251\u6392\u5e8f BFS\u9010\u6b65\u6d88\u9664\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9 cnt = 0 while not zero_que.empty(): node = zero_que.get() cnt += 1 for adj_v in graph[node]: indegree[adj_v] -= 1 if indegree[adj_v] == 0: zero_que.put(adj_v) return cnt == N 210.\u8bfe\u7a0b\u8868II \u9898\u76ee\u63cf\u8ff0 \u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 n-1\u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002 \u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: [0,1] \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a [0,1] \u3002 \u793a\u4f8b 2: \u8f93\u5165: 4, [[1,0],[2,0],[3,1],[3,2]] \u8f93\u51fa: [0,1,2,3] or [0,2,1,3] \u89e3\u91ca: \u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002 \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f [0,1,2,3] \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f [0,2,1,3] \u3002 \u8bf4\u660e: \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531\u8fb9\u7f18\u5217\u8868\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\u56fe\u7684\u8868\u793a\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 \u63d0\u793a: \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002 \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7 BFS \u5b8c\u6210 \u89e3\u6cd5 \u62d3\u6251\u6392\u5e8f \u89e3\u6cd5\u4e00 O(n) import queue class Graph: def __init__(self, N): self.V = N self.adj_list = [[] for _ in range(N)] self.que = queue.Queue() self.indegree = [0] * N def add_path(self, s, t): self.adj_list[s].append(t) self.indegree[t] += 1 def topological_sort(self): # 1.\u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u5165\u961f for i, d in enumerate(self.indegree): if d == 0: self.que.put(i) # 2.\u62d3\u6251\u6392\u5e8f orders = [] count = 0 while not self.que.empty(): v = self.que.get() count += 1 orders.append(v) for adj_v in self.adj_list[v]: self.indegree[adj_v] -= 1 if self.indegree[adj_v] == 0: self.que.put(adj_v) # 3. \u5224\u65ad\u73af if count < self.V: return [] else: return orders class Solution: def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]: g = Graph(numCourses) for t, s in prerequisites: g.add_path(s, t) return g.topological_sort() \u89e3\u6cd5\u4e8c \u63a8\u8350 import queue class Solution: def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]: N = numCourses nums = prerequisites # 1.\u521d\u59cb\u5316\u56fe & \u8bb0\u5f55\u5165\u5ea6 graph = [[] for _ in range(N)] indegree = [0] * N for t, s in nums: graph[s].append(t) indegree[t] += 1 # 2.\u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9\u653e\u5165\u96f6\u5165\u5ea6\u961f\u5217\u4e2d que = queue.Queue() for i, d in enumerate(indegree): if d == 0: que.put(i) # 3. BFS topo\u6392\u5e8f res = [] cnt = 0 while not que.empty(): node = que.get() cnt += 1 res.append(node) for adj_v in graph[node]: indegree[adj_v] -= 1 if indegree[adj_v] == 0: que.put(adj_v) return res if cnt == N else [] 332.\u91cd\u65b0\u5b89\u6392\u884c\u7a0b \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u673a\u7968\u7684\u5b57\u7b26\u4e32\u4e8c\u7ef4\u6570\u7ec4 [from, to]\uff0c\u5b50\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6210\u5458\u5206\u522b\u8868\u793a\u98de\u673a\u51fa\u53d1\u548c\u964d\u843d\u7684\u673a\u573a\u5730\u70b9\uff0c\u5bf9\u8be5\u884c\u7a0b\u8fdb\u884c\u91cd\u65b0\u89c4\u5212\u6392\u5e8f\u3002\u6240\u6709\u8fd9\u4e9b\u673a\u7968\u90fd\u5c5e\u4e8e\u4e00\u4e2a\u4eceJFK\uff08\u80af\u5c3c\u8fea\u56fd\u9645\u673a\u573a\uff09\u51fa\u53d1\u7684\u5148\u751f\uff0c\u6240\u4ee5\u8be5\u884c\u7a0b\u5fc5\u987b\u4ece JFK \u51fa\u53d1\u3002 \u8bf4\u660e: \u5982\u679c\u5b58\u5728\u591a\u79cd\u6709\u6548\u7684\u884c\u7a0b\uff0c\u4f60\u53ef\u4ee5\u6309\u5b57\u7b26\u81ea\u7136\u6392\u5e8f\u8fd4\u56de\u6700\u5c0f\u7684\u884c\u7a0b\u7ec4\u5408\u3002\u4f8b\u5982\uff0c\u884c\u7a0b [\"JFK\", \"LGA\"] \u4e0e [\"JFK\", \"LGB\"] \u76f8\u6bd4\u5c31\u66f4\u5c0f\uff0c\u6392\u5e8f\u66f4\u9760\u524d \u6240\u6709\u7684\u673a\u573a\u90fd\u7528\u4e09\u4e2a\u5927\u5199\u5b57\u6bcd\u8868\u793a\uff08\u673a\u573a\u4ee3\u7801\uff09\u3002 \u5047\u5b9a\u6240\u6709\u673a\u7968\u81f3\u5c11\u5b58\u5728\u4e00\u79cd\u5408\u7406\u7684\u884c\u7a0b\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[\"MUC\", \"LHR\"], [\"JFK\", \"MUC\"], [\"SFO\", \"SJC\"], [\"LHR\", \"SFO\"]] \u8f93\u51fa: [\"JFK\", \"MUC\", \"LHR\", \"SFO\", \"SJC\"] \u793a\u4f8b 2: \u8f93\u5165: [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]] \u8f93\u51fa: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"] \u89e3\u91ca: \u53e6\u4e00\u79cd\u6709\u6548\u7684\u884c\u7a0b\u662f [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"]\u3002\u4f46\u662f\u5b83\u81ea\u7136\u6392\u5e8f\u66f4\u5927\u66f4\u9760\u540e\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DFS class Solution: def findItinerary(self, tickets: List[List[str]]) -> List[str]: \"\"\" \u8fb9\u754c\u6761\u4ef6\uff1a\u53ef\u80fd\u6709\u73af dfs\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u6709\u601d\u8def \u8d70\u4e0d\u901a\u56de\u6eaf \"\"\" def DFS(s, path, paths): if len(path) == N: path.append(s) return path for v in g[s]: if (s, v) in paths and paths[(s, v)] != 0: paths[(s, v)] -= 1 ans = DFS(v, path + [s], paths) if ans: return ans paths[(s, v)] += 1 # 1.\u6784\u5efa\u56fe g = dict() paths = collections.defaultdict(int) for s, t in tickets: g.setdefault(s, []) g.setdefault(t, []) g[s].append(t) paths[(s, t)] += 1 for k, v in g.items(): g[k] = sorted(v) N = len(tickets) return DFS(\"JFK\", [], paths) \u89e3\u6cd5\u4e8c import java.util.*; class Solution { public List findItinerary(List> tickets) { // \u56e0\u4e3a\u9006\u5e8f\u63d2\u5165\uff0c\u6240\u4ee5\u7528\u94fe\u8868 List ans = new LinkedList<>(); if (tickets == null || tickets.size() == 0) return ans; Map<> graph = new HashMap<>(); for (List pair : tickets) { // \u56e0\u4e3a\u6d89\u53ca\u5220\u9664\u64cd\u4f5c\uff0c\u6211\u4eec\u7528\u94fe\u8868 PriorityQueue nbr = graph.computeIfAbsent(pair.get(0), k -> new PriorityQueue<>()); nbr.add(pair.get(1)); } visit(graph, \"JFK\", ans); return ans; } // DFS\u65b9\u5f0f\u904d\u5386\u56fe\uff0c\u5f53\u8d70\u5230\u4e0d\u80fd\u8d70\u4e3a\u6b62\uff0c\u518d\u5c06\u8282\u70b9\u52a0\u5165\u5230\u7b54\u6848 private void visit(Map> graph, String src, List ans) { PriorityQueue nbr = graph.get(src); while (nbr != null && nbr.size() > 0) { String dest = nbr.poll(); visit(graph, dest, ans); } ans.add(0, src); // \u9006\u5e8f\u63d2\u5165 } } 785.\u5224\u65ad\u4e8c\u5206\u56fe 785.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe graph \uff0c\u5f53\u8fd9\u4e2a\u56fe\u4e3a\u4e8c\u5206\u56fe\u65f6\u8fd4\u56de true \u3002 \u5982\u679c\u6211\u4eec\u80fd\u5c06\u4e00\u4e2a\u56fe\u7684\u8282\u70b9\u96c6\u5408\u5206\u5272\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u96c6A\u548cB\uff0c\u5e76\u4f7f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u4e2a\u6765\u81eaA\u96c6\u5408\uff0c\u4e00\u4e2a\u6765\u81eaB\u96c6\u5408\uff0c\u6211\u4eec\u5c31\u5c06\u8fd9\u4e2a\u56fe\u79f0\u4e3a\u4e8c\u5206\u56fe\u3002 graph \u5c06\u4f1a\u4ee5\u90bb\u63a5\u8868\u65b9\u5f0f\u7ed9\u51fa\uff0c graph[i] \u8868\u793a\u56fe\u4e2d\u4e0e\u8282\u70b9 i \u76f8\u8fde\u7684\u6240\u6709\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u5728 0 \u5230 graph.length-1 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u8fd9\u56fe\u4e2d\u6ca1\u6709\u81ea\u73af\u548c\u5e73\u884c\u8fb9\uff1a graph[i] \u4e2d\u4e0d\u5b58\u5728 i \uff0c\u5e76\u4e14 graph[i] \u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u503c\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[1,3], [0,2], [1,3], [0,2]] \u8f93\u51fa: true \u89e3\u91ca: \u65e0\u5411\u56fe\u5982\u4e0b: 0----1 | | | | 3----2 \u6211\u4eec\u53ef\u4ee5\u5c06\u8282\u70b9\u5206\u6210\u4e24\u7ec4: {0, 2} \u548c {1, 3}\u3002 \u793a\u4f8b 2: \u8f93\u5165: [[1,2,3], [0,2], [0,1,3], [0,2]] \u8f93\u51fa: false \u89e3\u91ca: \u65e0\u5411\u56fe\u5982\u4e0b: 0----1 | \\ | | \\ | 3----2 \u6211\u4eec\u4e0d\u80fd\u5c06\u8282\u70b9\u5206\u5272\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u96c6\u3002 \u6ce8\u610f: graph \u7684\u957f\u5ea6\u8303\u56f4\u4e3a [1, 100] \u3002 graph[i] \u4e2d\u7684\u5143\u7d20\u7684\u8303\u56f4\u4e3a [0, graph.length - 1] \u3002 graph[i] \u4e0d\u4f1a\u5305\u542b i \u6216\u8005\u6709\u91cd\u590d\u7684\u503c\u3002 \u56fe\u662f\u65e0\u5411\u7684: \u5982\u679c j \u5728 graph[i] \u91cc\u8fb9, \u90a3\u4e48 i \u4e5f\u4f1a\u5728 graph[j] \u91cc\u8fb9\u3002 785.2.\u89e3\u6cd5 785.2.1 \u65b9\u6cd5\u4e00 \u9ed1\u767d\u67d3\u8272\u6cd5 Our goal \u6b63\u5728\u5c1d\u8bd5\u4f7f\u7528\u4e24\u79cd\u989c\u8272\u4e3a\u56fe\u5f62\u7740\u8272\uff0c\u5e76\u67e5\u770b\u662f\u5426\u6709\u4efb\u4f55\u76f8\u90bb\u7684\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u989c\u8272\u3002 \u4e3a\u6bcf\u4e2a\u8282\u70b9\u521d\u59cb\u5316\u4e00\u4e2acolor []\u6570\u7ec4\u3002\u8fd9\u662f colors[] \u6570\u7ec4\u7684\u4e09\u79cd\u72b6\u6001\uff1a 0: Haven't been colored yet. 1: Blue. -1: Red. \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c \u5982\u679c\u5c1a\u672a\u7740\u8272\uff0c\u8bf7\u4f7f\u7528\u4e00\u79cd\u989c\u8272\u5bf9\u5176\u8fdb\u884c\u7740\u8272\u3002\u7136\u540e\u4f7f\u7528\u53e6\u4e00\u79cd\u989c\u8272\u4e3a\u5176\u6240\u6709\u76f8\u90bb\u8282\u70b9\uff08DFS\uff09\u7740\u8272\u3002 \u5982\u679c\u5df2\u7740\u8272\uff0c\u8bf7\u68c0\u67e5\u5f53\u524d\u989c\u8272\u662f\u5426\u4e0e\u5c06\u7528\u4e8e\u7740\u8272\u7684\u989c\u8272\u76f8\u540c class Solution: def isBipartite(self, graph: List[List[int]]) -> bool: color = {} def dfs(i): for adj in graph[i]: if adj in color: if color[adj] == color[i]: return False else: color[adj] = -color[i] if not dfs(adj): return False return True # his graph might be a disconnected graph. So check each unvisited node. for i in range(len(graph)): if i not in color: color[i] = 1 if not dfs(i): return False return True class Solution { public boolean isBipartite(int[][] graph) { int n = graph.length; int[] colors = new int[n]; for (int i = 0; i < n; i++) { //This graph might be a disconnected graph. So check each unvisited node. if (colors[i] == 0 && !validColor(graph, colors, 1, i)) { return false; } } return true; } public boolean validColor(int[][] graph, int[] colors, int color, int node) { if (colors[node] != 0) { return colors[node] == color; } colors[node] = color; for (int next : graph[node]) { if (!validColor(graph, colors, -color, next)) { return false; } } return true; } } 785.2.2 \u65b9\u6cd5\u4e8c 274.H\u6307\u6570 274.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4f4d\u7814\u7a76\u8005\u8bba\u6587\u88ab\u5f15\u7528\u6b21\u6570\u7684\u6570\u7ec4\uff08\u88ab\u5f15\u7528\u6b21\u6570\u662f\u975e\u8d1f\u6574\u6570\uff09\u3002\u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8ba1\u7b97\u51fa\u7814\u7a76\u8005\u7684 h \u6307\u6570\u3002 h \u6307\u6570\u7684\u5b9a\u4e49 : \u201ch \u4ee3\u8868\u201c\u9ad8\u5f15\u7528\u6b21\u6570\u201d\uff08high citations\uff09\uff0c\u4e00\u540d\u79d1\u7814\u4eba\u5458\u7684 h \u6307\u6570\u662f\u6307\u4ed6\u7684\u8f6e\u79cd\u6709 h \u7bc7\u8bba\u6587\u5206\u522b\u88ab\u5f15\u7528\u4e86 \u81f3\u5c11 h \u6b21\uff0c\u5176\u4f59\u7684 N - h \u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528\u6b21\u6570 \u5c0f\u4e8e h \u6b21 A scientist has index h if h of his/her N papers have at least h citations each, and the other N \u2212 h papers have no more than h citations each \u793a\u4f8b: \u8f93\u5165: citations = [3,0,6,1,5] \u8f93\u51fa: 3 \u89e3\u91ca: \u7ed9\u5b9a\u6570\u7ec4\u8868\u793a\u7814\u7a76\u8005\u603b\u5171\u6709 5 \u7bc7\u8bba\u6587\uff0c\u6bcf\u7bc7\u8bba\u6587\u76f8\u5e94\u7684\u88ab\u5f15\u7528\u4e86 3, 0, 6, 1, 5 \u6b21\u3002 \u7531\u4e8e\u7814\u7a76\u8005\u6709 3 \u7bc7\u8bba\u6587\u6bcf\u7bc7\u81f3\u5c11\u88ab\u5f15\u7528\u4e86 3 \u6b21\uff0c\u5176\u4f59\u4e24\u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528\u4e0d\u591a\u4e8e 3 \u6b21\uff0c\u6240\u4ee5\u5979\u7684 h \u6307\u6570\u662f 3\u3002 \u8bf4\u660e: \u5982\u679c h \u6709\u591a\u79cd\u53ef\u80fd\u7684\u503c\uff0c h \u6307\u6570\u662f\u5176\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u3002 274.2.\u89e3\u6cd5 274.2.1 \u65b9\u6cd5\u4e00 class Solution: def hIndex(self, citations: List[int]) -> int: for h in range(len(citations), -1, -1): cnt = 0 for num in citations: if num < h: cnt += 1 if cnt <= len(citations) - h: return h return 0 274.2.2 \u65b9\u6cd5\u4e8c class Solution: def hIndex(self, citations: List[int]) -> int: citations.sort() for i, num in enumerate(citations): if len(citations) - i <= num: return len(citations) - i return 0 class NumArray { int[] tree; int n; public NumArray(int[] nums) { if (nums.length > 0) { n = nums.length; tree = new int[n * 2]; buildTree(nums); } } private void buildTree(int[] nums) { for (int i = n, j = 0; i < 2 * n; i++, j++) tree[i] = nums[j]; for (int i = n - 1; i > 0; --i) tree[i] = tree[i * 2] + tree[i * 2 + 1]; } void update(int pos, int val) { pos += n; tree[pos] = val; while (pos > 0) { int left = pos; int right = pos; if (pos % 2 == 0) { right = pos + 1; } else { left = pos - 1; } // parent is updated after child is updated tree[pos / 2] = tree[left] + tree[right]; pos /= 2; } } public int sumRange(int l, int r) { // get leaf with value 'l' l += n; // get leaf with value 'r' r += n; int sum = 0; while (l <= r) { if ((l % 2) == 1) { sum += tree[l]; l++; } if ((r % 2) == 0) { sum += tree[r]; r--; } l /= 2; r /= 2; } return sum; } } /** * Your NumArray object will be instantiated and called as such: * NumArray obj = new NumArray(nums); * obj.update(i,val); * int param_2 = obj.sumRange(i,j); */ 399.\u9664\u6cd5\u6c42\u503c \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u65b9\u7a0b\u5f0f A / B = k, \u5176\u4e2d A \u548c B \u5747\u4e3a\u4ee3\u8868\u5b57\u7b26\u4e32\u7684\u53d8\u91cf\uff0c k \u662f\u4e00\u4e2a\u6d6e\u70b9\u578b\u6570\u5b57\u3002\u6839\u636e\u5df2\u77e5\u65b9\u7a0b\u5f0f\u6c42\u89e3\u95ee\u9898\uff0c\u5e76\u8fd4\u56de\u8ba1\u7b97\u7ed3\u679c\u3002\u5982\u679c\u7ed3\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1.0\u3002 \u793a\u4f8b : \u7ed9\u5b9a a / b = 2.0, b / c = 3.0 \u95ee\u9898: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? \u8fd4\u56de [6.0, 0.5, -1.0, 1.0, -1.0 ] \u8f93\u5165\u4e3a: vector > equations, vector & values, vector > queries(\u65b9\u7a0b\u5f0f\uff0c\u65b9\u7a0b\u5f0f\u7ed3\u679c\uff0c\u95ee\u9898\u65b9\u7a0b\u5f0f)\uff0c \u5176\u4e2d equations.size() == values.size()\uff0c\u5373\u65b9\u7a0b\u5f0f\u7684\u957f\u5ea6\u4e0e\u65b9\u7a0b\u5f0f\u7ed3\u679c\u957f\u5ea6\u76f8\u7b49\uff08\u7a0b\u5f0f\u4e0e\u7ed3\u679c\u4e00\u4e00\u5bf9\u5e94\uff09\uff0c\u5e76\u4e14\u7ed3\u679c\u503c\u5747\u4e3a\u6b63\u6570\u3002\u4ee5\u4e0a\u4e3a\u65b9\u7a0b\u5f0f\u7684\u63cf\u8ff0\u3002 \u8fd4\u56devector \u7c7b\u578b\u3002 \u57fa\u4e8e\u4e0a\u8ff0\u4f8b\u5b50\uff0c\u8f93\u5165\u5982\u4e0b\uff1a equations(\u65b9\u7a0b\u5f0f) = [ [\"a\", \"b\"], [\"b\", \"c\"] ], values(\u65b9\u7a0b\u5f0f\u7ed3\u679c) = [2.0, 3.0], queries(\u95ee\u9898\u65b9\u7a0b\u5f0f) = [ [\"a\", \"c\"], [\"b\", \"a\"], [\"a\", \"e\"], [\"a\", \"a\"], [\"x\", \"x\"] ]. \u8f93\u5165\u603b\u662f\u6709\u6548\u7684\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u6cd5\u8fd0\u7b97\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u9664\u6570\u4e3a0\u7684\u60c5\u51b5\uff0c\u4e14\u4e0d\u5b58\u5728\u4efb\u4f55\u77db\u76fe\u7684\u7ed3\u679c\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 import queue class Solution(object): def calcEquation(self, equations, values, queries): g = collections.defaultdict(dict) for [s, t], v in zip(equations, values): g[s][t] = v g[t][s] = 1 / v g[s][s] = 1.0 g[t][t] = 1.0 def find_path(s, t): if s not in g or t not in g: return -1. que = queue.Queue() que.put((s, 1.0)) visited = set() while not que.empty(): v, cur_product = que.get() if v == t: return cur_product visited.add(v) for adj_v, val in g[v].items(): if adj_v not in visited: # \u8fd9\u91cc\u662f\u4e58\u6cd5 que.put((adj_v, cur_product * val)) return -1.0 return [find_path(s, t) for s, t in queries] \u89e3\u6cd5\u4e8c \u9884\u5148\u5efa\u7acb\u6240\u6709\u7684\u8fde\u63a5 \u9677\u9631 \u987a\u5e8f\u4e0d\u4e00\u6837\u6709\u53ef\u80fd\u5bfc\u81f4\u4e0d\u80fd\u5efa\u7acb\u6240\u6709\u7684\u8fde\u63a5 class Solution: def calcEquation(self, equations, values, queries): path_w = collections.defaultdict(dict) for (num1, num2), val in zip(equations, values): path_w[num1][num1] = 1.0 path_w[num2][num2] = 1.0 path_w[num1][num2] = val path_w[num2][num1] = 1 / val # for k, i, j in itertools.permutations(quot, 3): for k in path_w: for i in path_w[k]: for j in path_w[k]: path_w[i][j] = path_w[i][k] * path_w[k][j] return [path_w[num1].get(num2, -1.0) for num1, num2 in queries] 684.\u5197\u4f59\u8fde\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5728\u672c\u95ee\u9898\u4e2d, \u6811\u6307\u7684\u662f\u4e00\u4e2a\u8fde\u901a\u4e14\u65e0\u73af\u7684\u65e0\u5411\u56fe\u3002 \u8f93\u5165\u4e00\u4e2a\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002 \u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5\u8fb9\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002\u6bcf\u4e00\u4e2a\u8fb9\u7684\u5143\u7d20\u662f\u4e00\u5bf9[u, v] \uff0c\u6ee1\u8db3 u < v\uff0c\u8868\u793a\u8fde\u63a5\u9876\u70b9u \u548cv\u7684\u65e0\u5411\u56fe\u7684\u8fb9\u3002 \u8fd4\u56de\u4e00\u6761\u53ef\u4ee5\u5220\u53bb\u7684\u8fb9\uff0c\u4f7f\u5f97\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9\u7684\u6811\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u8fb9\u3002\u7b54\u6848\u8fb9 [u, v] \u5e94\u6ee1\u8db3\u76f8\u540c\u7684\u683c\u5f0f u < v\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [[1,2], [1,3], [2,3]] \u8f93\u51fa: [2,3] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a: 1 / \\ 2 - 3 \u793a\u4f8b 2\uff1a \u8f93\u5165: [[1,2], [2,3], [3,4], [1,4], [1,5]] \u8f93\u51fa: [1,4] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a: 5 - 1 - 2 | | 4 - 3 \u6ce8\u610f: \u8f93\u5165\u7684\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u5728 3 \u5230 1000\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2dN\u662f\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u62d3\u6251\u6392\u5e8f import queue class Solution: def findRedundantConnection(self, edges: List[List[int]]) -> List[int]: \"\"\" \u62d3\u6251\u6392\u5e8f(\u65e0\u5411\u56fe) \"\"\" # 1.\u521d\u59cb\u5316\u56fe\u53ca\u5ea6 graph = [[] for _ in range(len(edges))] degree = [0] * len(edges) for s, t in edges: graph[s - 1].append(t - 1) graph[t - 1].append(s - 1) degree[s - 1] += 1 degree[t - 1] += 1 # 2.\u627e\u5230\u5ea6\u4e3a1\u7684\u70b9 que = queue.Queue() for i, d in enumerate(degree): if d == 1: print(i) que.put(i) # 3.\u62d3\u6251\u6392\u5e8f visited = set() while not que.empty(): node = que.get() visited.add(node) for adj in graph[node]: degree[node] -= 1 degree[adj] -= 1 if degree[adj] == 1: que.put(adj) not_visited = set(range(len(edges))) - visited for s, t in edges[::-1]: if s - 1 in not_visited and t - 1 in not_visited: return [s, t] # \u62d3\u6251\u6392\u5e8f \u65e0\u5411\u56fe \u6bcf\u4e00\u8bba\u53bb\u6389\u5ea6\u4e3a1\u7684\u70b9 import queue class Graph: def __init__(self, N): \"\"\" \u65e0\u5411\u56fe\u7684\u7c7b\u62d3\u6251\u6392\u5e8f V: \u9876\u70b9\u6570 node_list: \u90bb\u63a5\u8868 que: \u5ea6\u4e3a1\u7684\u9876\u70b9\u7684\u96c6\u5408 degree: \u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u7684\u5ea6 \"\"\" self.V = N self.adj_list = [[] for _ in range(N)] self.que = queue.Queue() self.degree = [0] * N self.visited = set() self.not_visited = set() def addEdge(self, s, t): self.adj_list[s].append(t) self.adj_list[t].append(s) self.degree[s] += 1 self.degree[t] += 1 # O(n + e) def topological_sort(self): # 1.\u5c06\u6240\u6709\u5165\u5ea6\u4e3a1\u7684\u70b9\u5165\u961f for i in range(self.V): if self.degree[i] == 1: self.que.put(i) # 2.\u8ba1\u6570\uff0c\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u8f93\u51fa\u7684\u9876\u70b9\u6570 count = 0 self.visited = set() while not self.que.empty(): v = self.que.get() self.visited.add(v) count += 1 # 2.1 \u5c06\u6240\u6709v\u6307\u5411\u7684\u9876\u70b9\u5ea6\u51cf\u4e00\uff0c\u540c\u65f6\u628a\u5ea6\u4e3a1\u7684\u70b9\u5165\u961f\u5217 for adj_v in self.adj_list[v]: self.degree[adj_v] -= 1 if self.degree[adj_v] == 1: self.que.put(adj_v) # 3.\u672a\u6d4f\u89c8\u8fc7\u7684\u7ed3\u70b9\u662f\u73af\u4e2d\u7ed3\u70b9 self.not_visited = set(range(self.V)) - self.visited # 4.\u5982\u679c\u6ca1\u6709\u5168\u90e8\u8f93\u51fa\u9876\u70b9\uff0c\u4ee3\u8868\u56fe\u4e2d\u6709\u73af\u8def if count < self.V: return False else: return True class Solution: def findRedundantConnection(self, edges: List[List[int]]) -> List[int]: \"\"\" \u9898\u76ee\u53ef\u8f6c\u53d8\u4e3a\u627e\u73af\uff0c\u5220\u6389\u73af\u7684\u4efb\u610f\u4e00\u4e2a\u8fb9 \u6cd5\u4e00\uff1a\u5e76\u67e5\u96c6 \u6cd5\u4e8c\uff1a\u62d3\u6251\u6392\u5e8f \"\"\" # 1.\u5efa\u90bb\u63a5\u8868 g = Graph(len(edges)) for s, t in edges: g.addEdge(s - 1, t - 1) g.topological_sort() # print(g.not_visited) for s, t in edges[::-1]: if s - 1 in g.not_visited and t - 1 in g.not_visited: return [s, t] \u89e3\u6cd5\u4e8c \u5e76\u67e5\u96c6 class DFU: def __init__(self, N): self.subsets = list(range(N)) # \u96c6\u5408\u4e2d\u5143\u7d20\u6570\u91cf\u6216\u6df1\u5ea6 self.rank = [1] * N def find(self, x): if self.subsets[x] != x: self.subsets[x] = self.find(self.subsets[x]) return self.subsets[x] def union(self, x, y): xp = self.find(x) yp = self.find(y) if xp != yp: if self.rank[x] <= self.rank[y]: self.subsets[xp] = yp elif self.rank[x] > self.rank[y]: self.subsets[yp] = xp self.rank[x] = self.rank[y] = self.rank[x] + self.rank[y] class Solution: def findRedundantConnection(self, edges: List[List[int]]) -> List[int]: \"\"\" \u62d3\u6251\u6392\u5e8f(\u65e0\u5411\u56fe) \u5e76\u67e5\u96c6 \"\"\" N = len(edges) dfu = DFU(N) for x, y in edges: if dfu.find(x - 1) == dfu.find(y - 1): return [x, y] else: dfu.union(x - 1, y - 1) 743.\u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4 [\u63a8\u8350 \u6700\u77ed\u8def\u5f84] \u9898\u76ee\u63cf\u8ff0 \u6709 N \u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a 1 \u5230 N\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 times\uff0c\u8868\u793a\u4fe1\u53f7\u7ecf\u8fc7\u6709\u5411\u8fb9\u7684\u4f20\u9012\u65f6\u95f4\u3002 times[i] = (u, v, w)\uff0c\u5176\u4e2d u \u662f\u6e90\u8282\u70b9\uff0cv \u662f\u76ee\u6807\u8282\u70b9\uff0c w \u662f\u4e00\u4e2a\u4fe1\u53f7\u4ece\u6e90\u8282\u70b9\u4f20\u9012\u5230\u76ee\u6807\u8282\u70b9\u7684\u65f6\u95f4\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5411\u5f53\u524d\u7684\u8282\u70b9 K \u53d1\u9001\u4e86\u4e00\u4e2a\u4fe1\u53f7\u3002\u9700\u8981\u591a\u4e45\u624d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u90fd\u6536\u5230\u4fe1\u53f7\uff1f\u5982\u679c\u4e0d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u6536\u5230\u4fe1\u53f7\uff0c\u8fd4\u56de -1\u3002 \u6ce8\u610f: N \u7684\u8303\u56f4\u5728 [1, 100] \u4e4b\u95f4\u3002 K \u7684\u8303\u56f4\u5728 [1, N] \u4e4b\u95f4\u3002 times \u7684\u957f\u5ea6\u5728 [1, 6000] \u4e4b\u95f4\u3002 \u6240\u6709\u7684\u8fb9 times[i] = (u, v, w) \u90fd\u6709 1 <= u, v <= N \u4e14 0 <= w <= 100\u3002 \u89e3\u6cd5 \u6700\u77ed\u8def\u5f84\u95ee\u9898 \u89e3\u6cd5\u4e00 \u6bcf\u6b21\u627e\u6700\u77ed\u7684\u8ddd\u79bb\u8fdb\u884c\u904d\u5386 \u4f18\u5148\u7ea7\u961f\u5217 O(E log N) class Solution: def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int: # 1.\u6784\u5efa\u56fe graph = collections.defaultdict(dict) for u, v, w in times: graph[u][v] = w heap = [(0, K)] visited = set() res = -1 # 2.\u6700\u77ed\u8def\u5f84\u95ee\u9898 \u904d\u5386 \u6bcf\u6b21\u627e\u8ddd\u6e90\u70b9\u6700\u77ed\u7684\u8ddd\u79bb\u904d\u5386 while heap: w, v = heapq.heappop(heap) if v not in visited: visited.add(v) res = w for adj in graph[v]: heapq.heappush(heap, (w + graph[v][adj], adj)) return res if len(visited) == N else -1 \u89e3\u6cd5\u4e8c DFS brute \u8f83\u6162 class Solution(object): def networkDelayTime(self, times, N, K): g = collections.defaultdict(list) for u, v, w in times: g[u].append((w, v)) dist = {v: float('inf') for v in range(1, N + 1)} def dfs(v, elapsed): if elapsed >= dist[v]: return dist[v] = elapsed # key sorted for w, adj_v in sorted(g[v]): dfs(adj_v, elapsed + w) dfs(K, 0) ans = max(dist.values()) return ans if ans < float('inf') else -1 \u89e3\u6cd5\u4e09 Bellman-Ford\u7b97\u6cd5 O(NE) class Solution(object): def networkDelayTime(self, times, N, K): def bellman_ford(edges, s): for _ in range(N - 1): for u, v, w in edges: dist[v] = min(dist[v], dist[u] + w) dist = {v: float('inf') for v in range(1, N + 1)} dist[K] = 0 bellman_ford(times, K) max_d = max(dist.values()) return max_d if max_d != float('inf') else -1 997.\u627e\u5230\u5c0f\u9547\u7684\u6cd5\u5b98 \u9898\u76ee\u63cf\u8ff0 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u5165\u5ea6\u51fa\u5ea6 \u627e\u5230\u5165\u8bfb\u4e3aN-1\u51fa\u5ea6\u4e3a0\u7684\u70b9 class Solution: def findJudge(self, N: int, trust: List[List[int]]) -> int: indegree = [0] * N outdegree = [0] * N for s, t in trust: indegree[t - 1] += 1 outdegree[s - 1] += 1 for i in range(N): if outdegree[i] == 0 and indegree[i] == N - 1 : return i + 1 return -1 \u89e3\u6cd5\u4e8c \u4f18\u5316 Consider trust as a graph, all pairs are directed edge. The point with in-degree - out-degree = N - 1 become the judge Explanation : Count the degree, and check at the end Time Complexity : Time O(T + N) , space O(N) class Solution: def findJudge(self, N, trust): count = [0] * (N + 1) for i, j in trust: count[i] -= 1 count[j] += 1 for i in range(1, N + 1): if count[i] == N - 1: return i return -1 1042. \u4e0d\u90bb\u63a5\u690d\u82b1 [\u63a8\u8350] \u9898\u76ee\u63cf\u8ff0 \u6709 N \u4e2a\u82b1\u56ed\uff0c\u6309\u4ece 1 \u5230 N \u6807\u8bb0\u3002\u5728\u6bcf\u4e2a\u82b1\u56ed\u4e2d\uff0c\u4f60\u6253\u7b97\u79cd\u4e0b\u56db\u79cd\u82b1\u4e4b\u4e00\u3002 paths[i] = [x, y] \u63cf\u8ff0\u4e86\u82b1\u56ed x \u5230\u82b1\u56ed y \u7684\u53cc\u5411\u8def\u5f84\u3002 \u53e6\u5916\uff0c\u6ca1\u6709\u82b1\u56ed\u6709 3 \u6761\u4ee5\u4e0a\u7684\u8def\u5f84\u53ef\u4ee5\u8fdb\u5165\u6216\u8005\u79bb\u5f00\u3002 \u4f60\u9700\u8981\u4e3a\u6bcf\u4e2a\u82b1\u56ed\u9009\u62e9\u4e00\u79cd\u82b1\uff0c\u4f7f\u5f97\u901a\u8fc7\u8def\u5f84\u76f8\u8fde\u7684\u4efb\u4f55\u4e24\u4e2a\u82b1\u56ed\u4e2d\u7684\u82b1\u7684\u79cd\u7c7b\u4e92\u4e0d\u76f8\u540c\u3002 \u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u9009\u62e9\u7684\u65b9\u6848\u4f5c\u4e3a\u7b54\u6848 answer\uff0c\u5176\u4e2d answer[i] \u4e3a\u5728\u7b2c (i+1) \u4e2a\u82b1\u56ed\u4e2d\u79cd\u690d\u7684\u82b1\u7684\u79cd\u7c7b\u3002\u82b1\u7684\u79cd\u7c7b\u7528 1, 2, 3, 4 \u8868\u793a\u3002\u4fdd\u8bc1\u5b58\u5728\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1aN = 3, paths = [[1,2],[2,3],[3,1]] \u8f93\u51fa\uff1a[1,2,3] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aN = 4, paths = [[1,2],[3,4]] \u8f93\u51fa\uff1a[1,2,1,2] \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1aN = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]] \u8f93\u51fa\uff1a[1,2,3,4] \u63d0\u793a\uff1a 1 <= N <= 10000 0 <= paths.size <= 20000 \u4e0d\u5b58\u5728\u82b1\u56ed\u6709 4 \u6761\u6216\u8005\u66f4\u591a\u8def\u5f84\u53ef\u4ee5\u8fdb\u5165\u6216\u79bb\u5f00\u3002 \u4fdd\u8bc1\u5b58\u5728\u7b54\u6848\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u90bb\u63a5\u8868 + \u904d\u5386 class Solution: def gardenNoAdj(self, N: int, paths: List[List[int]]) -> List[int]: graph = [[] for _ in range(N)] for x, y in paths: graph[x - 1].append(y - 1) graph[y - 1].append(x - 1) res = [0] * N for i in range(N): left = {1, 2, 3, 4} for j in graph[i]: left = left - {res[j]} res[i] = left.pop() return res \u89e3\u6cd5\u4e8c \u52a8\u89c4 01\u80cc\u5305\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u6709 $N$ \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f $V$ \u7684\u80cc\u5305\u3002\u6bcf\u4ef6\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u7b2c $i$ \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f $v_i$\uff0c\u4ef7\u503c\u662f $w_i$\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0c$N\uff0cV$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u6570\u91cf\u548c\u80cc\u5305\u5bb9\u79ef\u3002 \u63a5\u4e0b\u6765\u6709 $N$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 $v_i, w_i$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7b2c $i$ \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u4ef7\u503c\u3002 \u6570\u636e\u8303\u56f4 $0 \\lt N, V \\le 1000$ $0\\lt v_i, w_i \\le 1000$ \u8f93\u5165\u6837\u4f8b 4 5 1 2 2 4 3 4 4 5 \u8f93\u51fa\u6837\u4f8b\uff1a 8 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 dp /* f[i][j]: \u53ea\u653e\u524di\u4e2a\u7269\u54c1, \u603b\u4f53\u79ef\u662fj\u7684\u60c5\u51b5\u4e0b\u603b\u4ef7\u503c\u6700\u5927\u662f\u591a\u5c11 result = max(f[n][0~V]) f[i][j] = max(f[i-1][j], f[i-1][j-[i]] + w[i]) f[0][0] = 0 */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 1010; int n, m; int f[N][N]; int v[N], w[N]; int main() { cin >> n >> m; for (int i = 1; i <= n; i++) cin >> v[i] >> w[i]; for (int i = 1; i <= n; i++) for (int j = 0; j <= m; j++) { f[i][j] = f[i-1][j]; if (j >= v[i]) f[i][j] = max(f[i][j], f[i-1][j-v[i]] + w[i]); } cout << f[n][m] << endl; return 0; } \u89e3\u6cd5\u4e8c dp \u7a7a\u95f4\u4f18\u5316 \u7a7a\u95f4\u4f18\u5316\u5173\u952e\u662f\u4ece\u5927\u5230\u5c0f\u679a\u4e3e /* f[i][j]: \u53ea\u653e\u524di\u4e2a\u7269\u54c1, \u603b\u4f53\u79ef\u662fj\u7684\u60c5\u51b5\u4e0b\u603b\u4ef7\u503c\u6700\u5927\u662f\u591a\u5c11 result = max(f[n][0~V]) f[i][j] = max(f[i-1][j], f[i-1][j-[i]] + w[i]) f[0][0] = 0 */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 1010; int n, m; int f[N]; int v[N], w[N]; int main() { cin >> n >> m; for (int i = 1; i <= n; i++) cin >> v[i] >> w[i]; for (int i = 1; i <= n; i++) for (int j = m; j >= v[i]; j--) { // \u7a7a\u95f4\u4f18\u5316key: \u82e5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e, f[j-v[i]]\u4f7f\u7528\u7684\u662ff[i][j-v[i]], \u6240\u4ee5\u4ece\u5927\u5230\u5c0f\u679a\u4e3e f[j] = max(f[j], f[j-v[i]] + w[i]); } cout << f[m] << endl; return 0; } \u5b8c\u5168\u80cc\u5305\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u6709 $N$ \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f $V$ \u7684\u80cc\u5305\uff0c\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4ef6\u53ef\u7528\u3002 \u7b2c $i$ \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662f $v_i$\uff0c\u4ef7\u503c\u662f $w_i$\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0c$N\uff0cV$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u79cd\u6570\u548c\u80cc\u5305\u5bb9\u79ef\u3002 \u63a5\u4e0b\u6765\u6709 $N$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 $v_i, w_i$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7b2c $i$ \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u4ef7\u503c\u3002 \u6570\u636e\u8303\u56f4 $0 \\lt N, V \\le 1000$ $0 \\lt v_i, w_i \\le 1000$ \u8f93\u5165\u6837\u4f8b 4 5 1 2 2 4 3 4 4 5 \u8f93\u51fa\u6837\u4f8b\uff1a 10 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u89e3\u6cd5\u4e8c 53.\u6700\u5927\u5b50\u5e8f\u548c 53.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 \u793a\u4f8b: \u8f93\u5165: [-2,1,-3,4,-1,2,1,-5,4], \u8f93\u51fa: 6 \u89e3\u91ca: \u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6\u3002 \u8fdb\u9636: \u5982\u679c\u4f60\u5df2\u7ecf\u5b9e\u73b0\u590d\u6742\u5ea6\u4e3a O( n ) \u7684\u89e3\u6cd5\uff0c\u5c1d\u8bd5\u4f7f\u7528\u66f4\u4e3a\u7cbe\u5999\u7684\u5206\u6cbb\u6cd5\u6c42\u89e3\u3002 53.2.\u89e3\u6cd5 53.2.1 \u65b9\u6cd5\u4e00 DP state: \u4ee5i\u4e3a\u8fde\u7eed\u5b50\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7d22\u5f15\u7684\u548c class Solution { public int maxSubArray(int[] nums) { int[] dp = new int[nums.length+1]; int ans = Integer.MIN_VALUE; for(int i = 0; i < nums.length; i++){ if(dp[i] <= 0){ dp[i+1] = nums[i]; }else{ dp[i+1] = dp[i] + nums[i]; } if(dp[i+1] > ans){ ans = dp[i+1]; } } return ans; } } class Solution: def maxSubArray(self, nums: List[int]) -> int: if not nums: return 0 res = float('-inf') sumv = 0 for num in nums: sumv += num res = max(sumv, res) if sumv < 0: sumv = 0 return res 53.2.2 \u65b9\u6cd5\u4e8c D&C class Solution { public int maxSubArray(int[] nums) { return maxSubArray(nums, 0, nums.length-1); } private int maxSubArray(int[] nums, int left, int right){ // \u7ec8\u6b62\u6761\u4ef6 if(left == right){ return nums[left]; } int mid = (left + right) >> 1; int leftSum = maxSubArray(nums, left, mid); int rightSum = maxSubArray(nums, mid+1, right); int crossSum = crossSubArray(nums, left, right); return Math.max(Math.max(leftSum, rightSum), crossSum); } private int crossSubArray(int[] nums, int left, int right){ int mid = (left + right) >> 1; // \u6700\u5c0f\u503c int leftSum = Integer.MIN_VALUE; int rightSum = Integer.MIN_VALUE; int sum = 0; for(int i = mid; i >= left; i--){ sum += nums[i]; leftSum = Math.max(leftSum, sum); } sum = 0; for(int i = mid+1; i <= right; i++){ sum += nums[i]; rightSum = Math.max(rightSum, sum); } return leftSum + rightSum; } } 70.\u722c\u697c\u68af 70.1.\u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f \u6ce8\u610f\uff1a \u7ed9\u5b9a n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a 2 \u8f93\u51fa\uff1a 2 \u89e3\u91ca\uff1a \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 2. 2 \u9636 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a 3 \u8f93\u51fa\uff1a 3 \u89e3\u91ca\uff1a \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 + 1 \u9636 2. 1 \u9636 + 2 \u9636 3. 2 \u9636 + 1 \u9636 70.2.\u89e3\u6cd5 70.2.1 \u65b9\u6cd5\u4e00 DP class Solution { public int climbStairs(int n) { int[] dp = new int[n+1]; dp[0] = 1; dp[1] = 1; for(int i = 2; i <= n; i++){ dp[i] = dp[i-1] + dp[i-2]; } return dp[n]; } } 72. \u7f16\u8f91\u8ddd\u79bb \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c\u8ba1\u7b97\u51fa\u5c06 word1 \u8f6c\u6362\u6210 word2 \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570 \u3002 \u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26 \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 \u66ff\u6362\u4e00\u4e2a\u5b57\u7b26 \u793a\u4f8b 1: \u8f93\u5165: word1 = \"horse\", word2 = \"ros\" \u8f93\u51fa: 3 \u89e3\u91ca: horse -> rorse (\u5c06 'h' \u66ff\u6362\u4e3a 'r') rorse -> rose (\u5220\u9664 'r') rose -> ros (\u5220\u9664 'e') \u793a\u4f8b 2: \u8f93\u5165: word1 = \"intention\", word2 = \"execution\" \u8f93\u51fa: 5 \u89e3\u91ca: intention -> inention (\u5220\u9664 't') inention -> enention (\u5c06 'i' \u66ff\u6362\u4e3a 'e') enention -> exention (\u5c06 'n' \u66ff\u6362\u4e3a 'x') exention -> exection (\u5c06 'n' \u66ff\u6362\u4e3a 'c') exection -> execution (\u63d2\u5165 'u') \u89e3\u6cd5 \u89e3\u6cd5\u4e00 dp \u52a8\u6001\u89c4\u5212\uff1a dp[i][j] \u4ee3\u8868 word1 \u5230 i \u4f4d\u7f6e\u8f6c\u6362\u6210 word2 \u5230 j \u4f4d\u7f6e\u9700\u8981\u6700\u5c11\u6b65\u6570 \u6240\u4ee5\uff0c \u5f53 word1[i] == word2[j]\uff0cdp[i][j] = dp[i-1][j-1]\uff1b \u5f53 word1[i] != word2[j]\uff0cdp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1 \u5176\u4e2d\uff0cdp[i-1][j-1] \u8868\u793a\u66ff\u6362\u64cd\u4f5c\uff0cdp[i-1][j] \u8868\u793a\u5220\u9664\u64cd\u4f5c\uff0cdp[i][j-1] \u8868\u793a\u63d2\u5165\u64cd\u4f5c\u3002 \u6ce8\u610f\uff0c\u9488\u5bf9\u7b2c\u4e00\u884c\uff0c\u7b2c\u4e00\u5217\u8981\u5355\u72ec\u8003\u8651\uff0c\u6211\u4eec\u5f15\u5165 '' \u4e0b\u56fe\u6240\u793a\uff1a \u7b2c\u4e00\u884c\uff0c\u662f word1 \u4e3a\u7a7a\u53d8\u6210 word2 \u6700\u5c11\u6b65\u6570\uff0c\u5c31\u662f\u63d2\u5165\u64cd\u4f5c \u7b2c\u4e00\u5217\uff0c\u662f word2 \u4e3a\u7a7a\uff0c\u9700\u8981\u7684\u6700\u5c11\u6b65\u6570\uff0c\u5c31\u662f\u5220\u9664\u64cd\u4f5c \u2460\u5148\u5220\u9664\u5b57\u7b26\u4e32X \u7684\u7b2c i \u4e2a\u5b57\u7b26source[i] \u518d\u5c06\u6e90\u5b57\u7b26\u4e32X \u7684\u524d i-1 \u4e2a\u5b57\u7b26 X[1...i-1] \u8f6c\u6362\u6210 \u76ee\u6807\u5b57\u7b26\u4e32Y[1...j]\uff0c \u2461\u5148\u5c06 \u63d2\u5165\u5b57\u7b26\u4e32Y\u7684\u7b2c j \u4e2a\u5b57\u7b26 target[j] \uff0c\u7136\u540e\u518d \u2462\u5148\u5c06 \u6e90\u5b57\u7b26\u4e32\u4e2d\u7684 \u7b2c i \u4e2a\u5b57\u7b26X[i] \u66ff\u6362\u4e3a \u76ee\u6807\u5b57\u7b26\u4e32\u7684\u7b2c j \u4e2a\u5b57\u7b26 Y[j]\uff0c\u7136\u540e \u6e90\u5b57\u7b26\u4e32X[1...i-1] \u8f6c\u6362\u6210 \u76ee\u6807\u5b57\u7b26\u4e32Y[1...j-1] class Solution: def minDistance(self, word1: str, word2: str) -> int: \"\"\" \u52a8\u6001\u89c4\u5212: \"\"\" res1, res2 = [], [] m, n = len(word1), len(word2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j for i in range(1, m + 1): for j in range(1, n + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + 1) return dp[m][n] \u89e3\u6cd5\u4e8c 95.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II \u4e0d\u7528DP \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n\uff0c\u751f\u6210\u6240\u6709\u7531 1 ... n \u4e3a\u8282\u70b9\u6240\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u793a\u4f8b: \u8f93\u5165: 3 \u8f93\u51fa: [ [1,null,3,2], [3,2,null,1], [3,1,null,null,2], [2,1,3], [1,null,2,null,3] ] \u89e3\u91ca: \u4ee5\u4e0a\u7684\u8f93\u51fa\u5bf9\u5e94\u4ee5\u4e0b 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 \u6211\u4eec\u4ece\u5e8f\u5217 1 ..n \u4e2d\u53d6\u51fa\u6570\u5b57 i \uff0c\u4f5c\u4e3a\u5f53\u524d\u6811\u7684\u6811\u6839\u3002\u4e8e\u662f\uff0c\u5269\u4f59 i - 1 \u4e2a\u5143\u7d20\u53ef\u7528\u4e8e\u5de6\u5b50\u6811\uff0c n - i \u4e2a\u5143\u7d20\u7528\u4e8e\u53f3\u5b50\u6811\u3002 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def generateTrees(self, n: int) -> List[TreeNode]: \"\"\" \u52a8\u6001\u89c4\u5212 \u4ece1...n\u9009\u51fa\u4e00\u4e2a\u6570i\u4f5c\u4e3aroot, 1...i-1\u505a\u4e3a\u5de6\u5b50\u6811 i+1...n\u4f5c\u4e3a\u53f3\u5b50\u6811 \"\"\" def helper(m, n): if m > n: return [None,] res = [] for i in range(m, n + 1): left_trees = helper(m, i - 1) right_trees = helper(i + 1, n) for l in left_trees: for r in right_trees: root = TreeNode(i) root.left = l root.right = r res.append(root) return res return helper(1, n) if n else [] \u89e3\u6cd5\u4e8c 120.\u4e09\u89d2\u5f62\u5185\u89d2\u548c 120.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e09\u89d2\u5f62\uff1a [ [2], [3,4], [6,5,7], [4,1,8,3] ] \u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a 11 \uff08\u5373\uff0c 2 + 3 + 5 + 1 = 11\uff09\u3002 \u8bf4\u660e\uff1a \u5982\u679c\u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528 O ( n ) \u7684\u989d\u5916\u7a7a\u95f4\uff08 n \u4e3a\u4e09\u89d2\u5f62\u7684\u603b\u884c\u6570\uff09\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u7684\u7b97\u6cd5\u4f1a\u5f88\u52a0\u5206\u3002 120.2.\u89e3\u6cd5 120.2.1 \u65b9\u6cd5\u4e00 TO(n) state: \u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u8282\u70b9\u7684 class Solution { public int minimumTotal(List<List<Integer>> triangle) { int[] A = new int[triangle.size()+1]; for(int i = triangle.size() - 1; i >= 0; i--){ for(int j = 0; j < triangle.get(i).size(); j++){ A[j] = Math.min(A[j], A[j+1]) + triangle.get(i).get(j); } } return A[0]; } } 120.2.2 \u65b9\u6cd5\u4e8c 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a 121.1.\u9898\u76ee\u63cf\u8ff0d \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002 \u793a\u4f8b 2: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 121.2.\u89e3\u6cd5 121.2.1 \u65b9\u6cd5\u4e00 DP class Solution { public int maxProfit(int[] prices) { // \u8bb0\u5f55\u5230\u5f53\u524d\u65e5\u671f\u7684\u80a1\u7968\u6700\u4f4e\u4ef7\u683c // \u524di\u5929\u7684\u6700\u5927\u4ef7\u683c = max(\u524di-1\u5929\u7684\u6700\u5927\u4ef7\u683c, \u7b2ci\u5929\u7684\u4ef7\u683c-\u5230\u5f53\u524d\u65e5\u671f\u7684\u80a1\u7968\u6700\u4f4e\u4ef7\u683c\uff09 if(prices.length == 0){ return 0; } int[] dp = new int[prices.length]; int minPrice = prices[0]; for(int i = 1; i < prices.length; i++){ dp[i] = Math.max(dp[i-1], prices[i] - minPrice); minPrice = Math.min(minPrice, prices[i]); } return dp[prices.length-1]; } } 121.2.2 \u65b9\u6cd5\u4e8c \u7ef4\u6301\u4e24\u4e2a\u53d8\u91cf \"\u6700\u5c0f\u4ef7\u683c\" \"\u6700\u5927\u5229\u6da6\" class Solution { public int maxProfit(int[] prices) { int minprice = Integer.MAX_VALUE; int maxprofit = 0; for(int i = 0; i < prices.length; i++){ if(prices[i] < minprice){ minprice = prices[i]; }else if(prices[i] - minprice > maxprofit){ maxprofit = prices[i] - minprice } } return maxprofit; } } 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u8d2a\u5fc3 \u627e\u5230\u5c40\u90e8\u6700\u4f18\u5c31\u5356\u6389 class Solution: def maxProfit(self, prices: List[int]) -> int: \"\"\" \u8d2a\u5fc3 \u627e\u5230\u5c40\u90e8\u6700\u4f18\u5c31\u5356\u6389 \u6ce2\u5cf0\u6ce2\u8c37 \"\"\" if not prices: return 0 min_value = prices[0] ans = 0 for i in range(1, len(prices)): if min_value >= prices[i]: min_value = prices[i] else: if (i + 1 < len(prices) and prices[i] > prices[i+1]): ans = ans + prices[i] - min_value min_value = prices[i + 1] elif (i == len(prices) - 1 and prices[i] > min_value): ans += prices[i] - min_value return ans \u89e3\u6cd5\u4e8c \u8d2a\u5fc3\u4f18\u5316 \u8be5\u89e3\u51b3\u65b9\u6848\u9075\u5faa \u65b9\u6cd5\u4e8c \u7684\u672c\u8eab\u4f7f\u7528\u7684\u903b\u8f91\uff0c\u4f46\u6709\u4e00\u4e9b\u8f7b\u5fae\u7684\u53d8\u5316\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u7ee7\u7eed\u5728\u659c\u5761\u4e0a\u722c\u5347\u5e76\u6301\u7eed\u589e\u52a0\u4ece\u8fde\u7eed\u4ea4\u6613\u4e2d\u83b7\u5f97\u7684\u5229\u6da6\uff0c\u800c\u4e0d\u662f\u5728\u8c37\u4e4b\u540e\u5bfb\u627e\u6bcf\u4e2a\u5cf0\u503c\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u6709\u6548\u5730\u4f7f\u7528\u5cf0\u503c\u548c\u8c37\u503c\uff0c\u4f46\u6211\u4eec\u4e0d\u9700\u8981\u8ddf\u8e2a\u5cf0\u503c\u548c\u8c37\u503c\u5bf9\u5e94\u7684\u6210\u672c\u4ee5\u53ca\u6700\u5927\u5229\u6da6\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ee7\u7eed\u589e\u52a0\u52a0\u6570\u7ec4\u7684\u8fde\u7eed\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u5982\u679c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5927\u4e8e\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u83b7\u5f97\u7684\u603b\u548c\u5c06\u662f\u6700\u5927\u5229\u6da6\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c06\u7b80\u5316\u89e3\u51b3\u65b9\u6848\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u66f4\u6e05\u695a\u5730\u5c55\u73b0\u4e0a\u8ff0\u60c5\u51b5\uff1a [1, 7, 2, 3, 6, 7, 6, 7] \u4e0e\u6b64\u6570\u7ec4\u5bf9\u5e94\u7684\u56fe\u5f62\u662f\uff1a class Solution { public int maxProfit(int[] prices) { int maxprofit = 0; for (int i = 1; i < prices.length; i++) { if (prices[i] > prices[i - 1]) maxprofit += prices[i] - prices[i - 1]; } return maxprofit; } } 139.\u5355\u8bcd\u62c6\u5206 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5305\u542b\u975e\u7a7a\u5355\u8bcd\u5217\u8868\u7684\u5b57\u5178 wordDict\uff0c\u5224\u5b9a s \u662f\u5426\u53ef\u4ee5\u88ab\u7a7a\u683c\u62c6\u5206\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u5728\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002 \u8bf4\u660e\uff1a \u62c6\u5206\u65f6\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u5178\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5355\u8bcd\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: s = \"leetcode\", wordDict = [\"leet\", \"code\"] \u8f93\u51fa: true \u89e3\u91ca: \u8fd4\u56de true \u56e0\u4e3a \"leetcode\" \u53ef\u4ee5\u88ab\u62c6\u5206\u6210 \"leet code\"\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"] \u8f93\u51fa: true \u89e3\u91ca: \u8fd4\u56de true \u56e0\u4e3a \"applepenapple\" \u53ef\u4ee5\u88ab\u62c6\u5206\u6210 \"apple pen apple\"\u3002 \u6ce8\u610f\u4f60\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"] \u8f93\u51fa: false \u89e3\u6cd5 \u89e3\u6cd5\u4e00 dp dp[i] \u8868\u793ai\u524d\u9762\u7684\u5b57\u7b26\u4e32\u80fd\u5426\u62c6\u5206 class Solution: def wordBreak(self, s: str, wordDict: List[str]) -> bool: \"\"\" dp[i] \u8868\u793ai\u524d\u9762\u7684\u5b57\u7b26\u4e32\u80fd\u5426\u62c6\u5206 \"\"\" dp = [False] * (len(s) + 1) dp[0] = True wordset = set(wordDict) for i in range(1, len(s) + 1): for j in range(i - 1, -1, -1): if dp[j] and s[j: i] in wordset: dp[i] = True break return dp[len(s)] \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\u3002dp \u6570\u7ec4\u9700\u8981\u4e24\u91cd\u5faa\u73af \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u3002dp \u6570\u7ec4\u7684\u957f\u5ea6\u662f n+1 \u3002 \u89e3\u6cd5\u4e8c bruce \u6700\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u6cd5\u662f\u7528\u9012\u5f52\u548c\u56de\u6eaf\u3002\u4e3a\u4e86\u627e\u5230\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u5b57\u5178\u5355\u8bcd\u4e2d\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684\u53ef\u80fd\u524d\u7f00\uff0c\u5982\u679c\u5728\u5b57\u5178\u4e2d\u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u53bb\u6389\u8fd9\u4e2a\u524d\u7f00\u540e\u5269\u4f59\u90e8\u5206\u56de\u5f52\u8c03\u7528\u3002\u540c\u65f6\uff0c\u5982\u679c\u67d0\u6b21\u51fd\u6570\u8c03\u7528\u4e2d\u53d1\u73b0\u6574\u4e2a\u5b57\u7b26\u4e32\u90fd\u5df2\u7ecf\u88ab\u62c6\u5206\u4e14\u5728\u5b57\u5178\u4e2d\u51fa\u73b0\u8fc7\u4e86\uff0c\u51fd\u6570\u5c31\u8fd4\u56de true \u3002 public class Solution { public boolean wordBreak(String s, List<String> wordDict) { return word_Break(s, new HashSet(wordDict), 0); } public boolean word_Break(String s, Set<String> wordDict, int start) { if (start == s.length()) { return true; } for (int end = start + 1; end <= s.length(); end++) { if (wordDict.contains(s.substring(start, end)) && word_Break(s, wordDict, end)) { return true; } } return false; } } \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^n)\u3002\u8003\u8651\u6700\u574f\u60c5\u51b5 s = \\text{aaaaaaa}\u3002\u6bcf\u4e00\u4e2a\u524d\u7f00\u90fd\u5728\u5b57\u5178\u4e2d\uff0c\u6b64\u65f6\u56de\u6eaf\u6811\u7684\u590d\u6742\u5ea6\u4f1a\u8fbe\u5230 n^n\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u3002\u56de\u6eaf\u6811\u7684\u6df1\u5ea6\u6700\u6df1\u8fbe\u5230 n \u3002 \u89e3\u6cd5\u4e09 \u8bb0\u5fc6\u5316\u56de\u6eaf \u7531\u4e8e\u524d\u9762\u5355\u8bcd\u4e0d\u5b9a\u957f\uff0c\u6240\u4ee5\u540e\u4e00\u6b65\u7684\u9012\u5f52\u6709\u53ef\u80fd\u91cd\u590d\u88ab\u8c03\u7528\uff0c\u5229\u7528\u8bb0\u5fc6\u5316\u65b9\u6cd5\u63d0\u4ea4\u6548\u7387 public class Solution { public boolean wordBreak(String s, List<String> wordDict) { // Boolean[] \u521d\u59cb\u5316\u4e0d\u662f false \u800c\u662f null return word_Break(s, new HashSet(wordDict), 0, new Boolean[s.length()]); } public boolean word_Break(String s, Set<String> wordDict, int start, Boolean[] memo) { if (start == s.length()) { return true; } // \u5229\u7528\u8bb0\u5fc6\u5316 if(memo[start] != null){ return memo[start]; } for (int end = start + 1; end <= s.length(); end++) { if (wordDict.contains(s.substring(start, end)) && word_Break(s, wordDict, end, memo)){ // \u8fd4\u56de\u524d\u5b58\u50a8\u8bb0\u5fc6\u5316 memo[start] = true; return true; } } // \u8fd4\u56de\u524d\u5b58\u50a8\u8bb0\u5fc6\u5316 memo[start] = false; return false; } } \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\u3002\u56de\u6eaf\u6811\u7684\u5927\u5c0f\u6700\u591a\u8fbe\u5230 n^2\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u3002\u56de\u6eaf\u6811\u7684\u6df1\u5ea6\u6700\u6df1\u8fbe\u5230 n 198.\u6253\u5bb6\u52ab\u820d 198.1.\u9898\u76ee\u63cf\u8ff0 \u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c \u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c \u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3,1] \u8f93\u51fa: 4 \u89e3\u91ca: \u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [2,7,9,3,1] \u8f93\u51fa: 12 \u89e3\u91ca: \u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002 198.2.\u89e3\u6cd5 198.2.1 \u65b9\u6cd5\u4e00 class Solution { public int rob(int[] nums) { if(nums.length == 0){ return 0; }else if(nums.length == 1){ return nums[0]; } int[] dp = new int[nums.length]; dp[0] = nums[0]; dp[1] = Math.max(nums[1], nums[0]); for(int i = 2; i < nums.length; i++){ dp[i] = Math.max(dp[i-1], dp[i-2] + nums[i]); } return dp[nums.length-1]; } } 198.2.2 \u65b9\u6cd5\u4e8c \u8fed\u4ee3\u6cd5 class Solution(object): def rob(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" last = 0 now = 0 for i in nums: #\u8fd9\u662f\u4e00\u4e2a\u52a8\u6001\u89c4\u5212\u95ee\u9898 last, now = now, max(last + i, now) return now 213.\u6253\u5bb6\u52ab\u820dII \u9898\u76ee\u63cf\u8ff0 \u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\uff0c\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\u3002\u8fd9\u4e2a\u5730\u65b9\u6240\u6709\u7684\u623f\u5c4b\u90fd\u56f4\u6210\u4e00\u5708\uff0c\u8fd9\u610f\u5473\u7740\u7b2c\u4e00\u4e2a\u623f\u5c4b\u548c\u6700\u540e\u4e00\u4e2a\u623f\u5c4b\u662f\u7d27\u6328\u7740\u7684\u3002\u540c\u65f6\uff0c\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1: \u8f93\u5165: [2,3,2] \u8f93\u51fa: 3 \u89e3\u91ca: \u4f60\u4e0d\u80fd\u5148\u5077\u7a83 1 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 2\uff09\uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 2\uff09, \u56e0\u4e3a\u4ed6\u4eec\u662f\u76f8\u90bb\u7684\u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,1] \u8f93\u51fa: 4 \u89e3\u91ca: \u4f60\u53ef\u4ee5\u5148\u5077\u7a83 1 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 1\uff09\uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 3\uff09\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DP class Solution: def rob(self, nums: List[int]) -> int: \"\"\" \u95ee\u9898\u53d8\u6210 max(House[1]...House[n-1], House[2]...House[n]) \"\"\" if not nums: return 0 if len(nums) < 2: return nums[0] # House[1]...House[n-1] n = len(nums) dp = [0] * n dp[1] = nums[0] for i, num in enumerate(nums[1: n - 1]): dp[i + 2] = max(dp[i + 1], dp[i] + num) res = dp[n - 1] dp = [0] * n dp[1] = nums[1] for i, num in enumerate(nums[2:]): dp[i + 2] = max(dp[i + 1], dp[i] + num) res = max(dp[n - 1], res) return res \u89e3\u6cd5\u4e8c class Solution: def rob(self, nums: [int]) -> int: def my_rob(nums): cur, pre = 0, 0 for num in nums: cur, pre = max(pre + num, cur), cur return cur return max(my_rob(nums[:-1]),my_rob(nums[1:])) if len(nums) != 1 else nums[0] 221.1 \u6700\u5927\u6b63\u65b9\u5f62 1.\u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b 1 \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002 \u793a\u4f8b: \u8f93\u5165: 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 \u8f93\u51fa: 4 2.\u89e3\u6cd5 2.1 \u65b9\u6cd5\u4e00 \u6d41\u51fa\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u4f5c\u4e3a\u521d\u59cb\u5316 state: \u4ee5i, j\u4f4d\u7f6e\u4e0a\u5143\u7d20\u4e3a\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u6b63\u65b9\u5f62\u8fb9\u957f dp(i, j) = min{ dp(i-1, j-1), dp(i-1, j), dp(i, j-1) } public class Solution { public int maximalSquare(char[][] matrix) { int rows = matrix.length, cols = rows > 0 ? matrix[0].length : 0; int[][] dp = new int[rows + 1][cols + 1]; int maxsqlen = 0; for (int i = 1; i <= rows; i++) { for (int j = 1; j <= cols; j++) { if (matrix[i-1][j-1] == '1'){ dp[i][j] = Math.min(Math.min(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]) + 1; maxsqlen = Math.max(maxsqlen, dp[i][j]); } } } return maxsqlen * maxsqlen; } } \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn) O ( m n )\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(mn) O ( m n )\uff0c\u7528\u4e86\u4e00\u4e2a\u5927\u5c0f\u76f8\u540c\u7684\u77e9\u9635 dp\u3002 2.2 \u65b9\u6cd5\u4e8c public class Solution { public int maximalSquare(char[][] matrix) { int rows = matrix.length, cols = rows > 0 ? matrix[0].length : 0; int[] dp = new int[cols + 1]; int maxsqlen = 0, prev = 0; for (int i = 1; i <= rows; i++) { for (int j = 1; j <= cols; j++) { int temp = dp[j]; if (matrix[i - 1][j - 1] == '1') { dp[j] = Math.min(Math.min(dp[j - 1], prev), dp[j]) + 1; maxsqlen = Math.max(maxsqlen, dp[j]); } else { dp[j] = 0; } prev = temp; } } return maxsqlen * maxsqlen; } } 300.\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: [10,9,2,5,3,7,101,18] \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c\u5b83\u7684\u957f\u5ea6\u662f 4\u3002 \u8bf4\u660e: \u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u7ec4\u5408\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u5bf9\u5e94\u7684\u957f\u5ea6\u5373\u53ef\u3002 \u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a O(n2) \u3002 \u8fdb\u9636: \u4f60\u80fd\u5c06\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230 O(n log n) \u5417? \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DP O(n ** 2) class Solution: def lengthOfLIS(self, nums: List[int]) -> int: \"\"\" dp: \u4ee5nums[i]\u4e3a\u4e0a\u5347\u5b50\u5e8f\u5217\u6700\u540e\u4e00\u4e2a\u503c\u7684\u957f\u5ea6 \u8fdb\u9636\uff1a \u4fee\u6539logn\u65f6\u95f4\u627e\u5230\u5f85\u66f4\u65b0\u7684\u70b9 \"\"\" if not nums: return 0 res = 1 dp = [1] * len(nums) for i, num in enumerate(nums): for j in range(i - 1, -1, -1): if nums[j] < num: dp[i] = max(dp[j] + 1, dp[i]) res = max(dp[i], res) return res \u89e3\u6cd5\u4e8c \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e [\u8bb0\u4f4f] O(nlogn) \u8d2a\u5fc3\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\uff1a \u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u5982\u4e0b\uff1a \u5982\u679c\u524d\u9762\u7684\u6570\u8d8a\u5c0f\uff0c\u540e\u9762\u63a5\u4e0a\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u5c31\u4f1a\u6709\u66f4\u5927\u7684\u53ef\u80fd\u6027\u6784\u6210\u4e00\u4e2a\u66f4\u957f\u7684\u201c\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u3002 \u8fd9\u4e2a\u601d\u60f3\u4e5f\u4e0d\u96be\u7406\u89e3\uff0c\u6211\u4eec\u4e3e\u4f8b\u8bf4\u660e\uff1a\u5982\u679c\u524d\u9762\u7684\u6570\u662f 11\uff0c\u540e\u9762\u63a5\u4e0a\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u80fd\u591f\u6784\u6210\u957f\u5ea6\u4e3a 22 \u7684\u201c\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u7684\u53ef\u80fd\u6027\uff0c\u5c31\u8fdc\u8fdc\u5927\u4e8e\u524d\u9762\u7684\u6570\u662f 1000010000\uff0c\u540e\u9762\u63a5\u4e0a\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u80fd\u591f\u6784\u6210\u957f\u5ea6\u4e3a 22 \u7684\u201c\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u7684\u53ef\u80fd\u6027\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u601d\u60f3\uff0c\u6211\u4eec\u5148\u4ecb\u7ecd\u7b97\u6cd5\u7684\u6d41\u7a0b\uff0c\u7136\u540e\u518d\u505a\u603b\u7ed3\uff0c\u6700\u540e\u628a\u5176\u4e2d\u5173\u952e\u7684\u5730\u65b9\u5411\u5927\u5bb6\u6307\u51fa \u7b97\u6cd5\u7684\u6267\u884c\u6d41\u7a0b\uff1a 1 \u3001\u8bbe\u7f6e\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4 tail\uff0c\u521d\u59cb\u65f6\u4e3a\u7a7a\uff1b \u6570\u7ec4\u547d\u540d\u4e3a tail \u5927\u5bb6\u5148\u4e0d\u7528\u7ea0\u7ed3\uff0c\u53ea\u8981\u5148\u6709\u4e2a\u5370\u8c61\uff0c\u53cd\u6b63\u6709\u5e8f\u6570\u7ec4 tail \u4e0d\u662f\u201c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\uff08\u4e0b\u6587\u8fd8\u4f1a\u5f3a\u8c03\uff09\uff0c\u4e0d\u80fd\u547d\u540d\u4e3a LIS\uff0c\u6709\u5e8f\u6570\u7ec4 tail \u662f\u7528\u4e8e\u6c42\u89e3 LIS \u95ee\u9898\u7684\u8f85\u52a9\u6570\u7ec4\uff0c\u5982\u679c\u5927\u5bb6\u6709\u66f4\u8d34\u5207\u7684\u547d\u540d\uff0c\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u5411\u6211\u6307\u51fa\u3002 2\u3001\u5728\u904d\u5386\u6570\u7ec4 nums \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6765\u4e00\u4e2a\u65b0\u6570 num\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\uff08\u4e25\u683c\uff09\u5927\u4e8e\u6709\u5e8f\u6570\u7ec4 tail \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5c31\u628a num \u653e\u5728\u6709\u5e8f\u6570\u7ec4 tail \u7684\u540e\u9762\uff0c\u5426\u5219\u8fdb\u5165\u7b2c 3 \u70b9\uff1b \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u5927\u4e8e\u662f\u201c\u4e25\u683c\u5927\u4e8e\u201d\uff0c\u4e0d\u5305\u62ec\u7b49\u4e8e\u7684\u60c5\u51b5\u3002 3\u3001\u5728\u6709\u5e8f\u6570\u7ec4 tail \u4e2d\u67e5\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u7b49\u4e8e num \u7684\u90a3\u4e2a\u6570\uff0c\u8bd5\u56fe\u8ba9\u5b83\u53d8\u5c0f\uff1b \u201c\u8bd5\u56fe\u8ba9\u5b83\u53d8\u5c0f\u201d\u7684\u542b\u4e49\u662f\uff1a\u5982\u679c\u5728\u6709\u5e8f\u6570\u7ec4 tail \u4e2d\u67e5\u627e\u7b2c 1 \u4e2a\u7b49\u4e8e num \u7684\u90a3\u4e2a\u6570\uff0c\u7b49\u4e8e\u5c31\u6ca1\u6709\u529e\u6cd5\u8ba9\u5b83\u53d8\u5c0f\u5566\uff0c\u8fd9\u4e2a\u4f01\u56fe\u5931\u8d25\uff1b\u5982\u679c\u5728\u6709\u5e8f\u6570\u7ec4 tail \u4e2d\u67e5\u627e\u7b2c 1 \u4e2a\uff08\u4e25\u683c\uff09\u5927\u4e8e num \u7684\u90a3\u4e2a\u6570\uff0c\u5c31\u53ef\u4ee5\u8ba9\u5b83\u53d8\u5c0f\uff0c\u4f01\u56fe\u6210\u529f\uff1b \u5728\u6709\u5e8f\u6570\u7ec4 tail \u4e2d\u627e\u5927\u4e8e\u7b49\u4e8e num \u7684\u7b2c 1 \u4e2a\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u3002 4\u3001\u904d\u5386\u65b0\u7684\u6570 num \uff0c\u5148\u5c1d\u8bd5\u4e0a\u8ff0\u7b2c 2 \u70b9\uff0c\u7b2c 2 \u70b9\u884c\u4e0d\u901a\u5c31\u6267\u884c\u7b2c 3 \u70b9\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4 nums\uff0c\u6700\u7ec8\u6709\u5e8f\u6570\u7ec4 tail \u7684\u957f\u5ea6\uff0c\u5c31\u662f\u6240\u6c42\u7684\u201c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u7684\u957f\u5ea6\u3002 \u4ee5\u4e0a\u7b97\u6cd5\u80fd\u591f\u594f\u6548\u7684\u5173\u952e\u662f\uff1a \u6839\u636e\u6700\u5f00\u59cb\u63d0\u5230\u7684\u201c\u57fa\u672c\u601d\u60f3\u201d\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u79cd\u201c\u8d2a\u5fc3\u9009\u62e9\u201d\u7684\u601d\u60f3\uff1a\u53ea\u8981\u8ba9\u524d\u9762\u7684\u6570\u5c3d\u91cf\u5c0f\uff0c\u5728\u7b97\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u7b2c 2 \u70b9\u88ab\u6267\u884c\u7684\u673a\u4f1a\u5c31\u66f4\u591a\u3002 class Solution: def lengthOfLIS(self, nums: List[int]) -> int: # key: \u8f85\u52a9\u961f\u5217 \u5728j\u5143\u7d20\u5904 \u957f\u5ea6m\u662f\u5f53\u524d\u5217\u8868\u7684\u6700\u957f\u5b50\u5e8f\u5217\u957f\u5ea6 \u5185\u5bb9\u662ftop least m # \u76ee\u7684\u662f\u904d\u5386\u4e0b\u4e00\u4e2a\u5143\u7d20\u65f6\u80fd\u66f4\u5feb\u627e\u5230\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20 if len(nums) < 2: return len(nums) tail = [] for num in nums: if not tail or num > tail[-1]: tail.append(num) continue # \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5\uff0c\u5728\u6709\u5e8f\u6570\u7ec4 tail \u4e2d # \u627e\u5230\u7b2c 1 \u4e2a\u5927\u4e8e\u7b49\u4e8e nums[i] \u7684\u5143\u7d20\uff0c\u5c1d\u8bd5\u8ba9\u90a3\u4e2a\u5143\u7d20\u66f4\u5c0f left = 0 right = len(tail) - 1 while left < right: mid = left + ((right - left) >> 1) # \u8fd9\u6837\u627e\u7684\u5c31\u662f\u5de6\u8fb9\u754c, \u5373\u6bd4num\u66f4\u5927\u7684\u6570\u5b57\u4e2d\u7684\u6700\u5c0f\u503c if tail[mid] < num: left = mid + 1 else: right = mid tail[left] = num return len(tail) 303.\u533a\u57df\u548c\u68c0\u7d22-\u6570\u7ec4\u4e0d\u53ef\u53d8 303.1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15 i \u5230 j ( i \u2264 j ) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b i, j \u4e24\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a nums = [-2, 0, 3, -5, 2, -1]\uff0c\u6c42\u548c\u51fd\u6570\u4e3a sumRange() sumRange(0, 2) -> 1 sumRange(2, 5) -> -1 sumRange(0, 5) -> -3 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e0d\u53ef\u53d8\u3002 \u4f1a\u591a\u6b21\u8c03\u7528 sumRange \u65b9\u6cd5\u3002 303.2.\u89e3\u6cd5 303.2.1 \u65b9\u6cd5\u4e00 DP class NumArray { private int[] dp; public NumArray(int[] nums) { dp = new int[nums.length+1]; dp[0] = 0; for(int i = 0; i < nums.length; i++){ dp[i+1] = dp[i] + nums[i]; } } public int sumRange(int i, int j) { return dp[j+1] - dp[i]; } } /** * Your NumArray object will be instantiated and called as such: * NumArray obj = new NumArray(nums); * int param_1 = obj.sumRange(i,j); */ 303.2.2 \u65b9\u6cd5\u4e8c Imagine that sumRange is called one thousand times with the exact same arguments. How could we speed that up? We could trade in extra space for speed. By pre-computing all range sum possibilities and store its results in a hash table, we can speed up the query to constant time. import javafx.util.Pair; // \u7c7b\u4f3c\u4e8etuple class NumArray { private Map<Pair<Integer, Integer>, Integer> map = new HashMap<>(); public NumArray(int[] nums) { for (int i = 0; i < nums.length; i++) { int sum = 0; for (int j = i; j < nums.length; j++) { sum += nums[j]; map.put(Pair.create(i, j), sum); } } } public int sumRange(int i, int j) { return map.get(Pair.create(i, j)); } } /** * Your NumArray object will be instantiated and called as such: * NumArray obj = new NumArray(nums); * int param_1 = obj.sumRange(i,j); */ 309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f [\u63a8\u8350] \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c i \u4e2a\u5143\u7d20\u4ee3\u8868\u4e86\u7b2c i \u5929\u7684\u80a1\u7968\u4ef7\u683c \u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09: \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3,0,2] \u8f93\u51fa: 3 \u89e3\u91ca: \u5bf9\u5e94\u7684\u4ea4\u6613\u72b6\u6001\u4e3a: [\u4e70\u5165, \u5356\u51fa, \u51b7\u51bb\u671f, \u4e70\u5165, \u5356\u51fa] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DP O(n**2) python\u8d85\u65f6 class Solution: def maxProfit(self, prices: List[int]) -> int: \"\"\" \u8fb9\u754c\u6761\u4ef6 \u72b6\u6001: \u4ee5\u7b2ci\u5929\u7684\u6700\u5927\u5229\u6da6dp[i] \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b dp[i] \"\"\" if len(prices) < 2: return 0 dp = [0] * (len(prices) + 1) for i in range(2, len(prices) + 1): dp[i] = dp[i - 1] for j in range(i - 1, 0, -1): if prices[i - 1] - prices[j - 1] > 0: temp = dp[j - 2] if j > 2 else 0 dp[i] = max(dp[i], temp + prices[i - 1] - prices[j - 1]) return dp[-1] \u89e3\u6cd5\u4e8c dp hold unhold class Solution: def maxProfit(self, prices: List[int]) -> int: \"\"\" state: hold[i]: \u7b2ci\u5929\u6301\u6709\u80a1\u7968\u7684\u6700\u5927profit unhold[i]: \u7b2ci\u5929\u4e0d\u6301\u6709\u80a1\u7968\u7684\u6700\u5927profit state transfer: hold[i] = max(hold[i-1], unhold[i-2] - prices[i]) unhold[i] = max(unhold[i-1], hold[i-1] + prices[i]) base case: \"\"\" if len(prices) < 2: return 0 hold = [0] * len(prices) unhold = [0] * len(prices) hold[0] = -prices[0] unhold[0] = 0 for i in range(1, len(prices)): if i == 1: hold[i] = max(hold[i-1], -prices[i]) else: # \u6709\u4e00\u5929\u7684\u51b7\u51bb\u65f6\u95f4 hold[i] = max(hold[i-1], unhold[i-2] - prices[i]) unhold[i] = max(unhold[i-1], hold[i-1] + prices[i]) return unhold[-1] \u7a7a\u95f4\u4f18\u5316 \u53ef\u75283\u4e2a\u53d8\u91cf\u66ff\u6362\u4e24\u4e2adp\u6570\u7ec4 unhold[i-1] unhold[i-2] hold[i-1] 2.3 \u65b9\u6cd5\u4e09 \u65b9\u6cd5\u4e09 sell[i]\u8868\u793a\u622a\u81f3\u7b2ci\u5929\uff0c\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u662f\u5356\u65f6\u7684\u6700\u5927\u6536\u76ca\uff1b buy[i]\u8868\u793a\u622a\u81f3\u7b2ci\u5929\uff0c\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u662f\u4e70\u65f6\u7684\u6700\u5927\u6536\u76ca\uff1b cool[i]\u8868\u793a\u622a\u81f3\u7b2ci\u5929\uff0c\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u662f\u51b7\u51bb\u671f\u65f6\u7684\u6700\u5927\u6536\u76ca\uff1b \u9012\u63a8\u516c\u5f0f\uff1a sell[i] = max(buy[i-1]+prices[i], sell[i-1]) (\u7b2c\u4e00\u9879\u8868\u793a\u7b2ci\u5929\u5356\u51fa\uff0c\u7b2c\u4e8c\u9879\u8868\u793a\u7b2ci\u5929\u51b7\u51bb) buy[i] = max(cool[i-1]-prices[i], buy[i-1]) \uff08\u7b2c\u4e00\u9879\u8868\u793a\u7b2ci\u5929\u4e70\u8fdb\uff0c\u7b2c\u4e8c\u9879\u8868\u793a\u7b2ci\u5929\u51b7\u51bb\uff09 cool[i] = max(sell[i-1], buy[i-1], cool[i-1]) class Solution: def maxProfit(self, prices): n = len(prices) if n == 0: return 0 sell = [0 for _ in range(n)] buy = [0 for _ in range(n)] cool = [0 for _ in range(n)] buy[0] = -prices[0] for i in range(1,n): sell[i] = max(buy[i-1] + prices[i], sell[i-1]) buy[i] = max(cool[i-1] - prices[i], buy[i-1]) cool[i] = max(sell[i-1], buy[i-1],cool[i-1]) return sell[-1] 322. \u96f6\u94b1\u5151\u6362 322. 1.\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01 coins \u548c\u4e00\u4e2a\u603b\u91d1\u989d amount\u3002\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u7684\u786c\u5e01\u4e2a\u6570\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u786c\u5e01\u7ec4\u5408\u80fd\u7ec4\u6210\u603b\u91d1\u989d\uff0c\u8fd4\u56de -1 \u3002 \u793a\u4f8b 1: \u8f93\u5165: coins = [1, 2, 5], amount = 11 \u8f93\u51fa: 3 \u89e3\u91ca: 11 = 5 + 5 + 1 \u793a\u4f8b 2: \u8f93\u5165: coins = [2], amount = 3 \u8f93\u51fa: -1 \u8bf4\u660e : \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u79cd\u786c\u5e01\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\u3002 322. 2.\u89e3\u6cd5 322. 2.1 \u65b9\u6cd5\u4e00 DP class Solution { public int coinChange(int[] coins, int amount) { int[] dp = new int[amount+1]; // \u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u786c\u5e01\u7ec4\u5408\u80fd\u7ec4\u6210\u603b\u91d1\u989d\uff0c\u8fd4\u56de -1\u3002 // \u7531\u4e0a\u9762\u521d\u59cb\u5316dp\u4e3a-1 for(int i = 0; i <= amount; i++){ dp[i] = -1; } // \u4ee3\u8868i\u91d1\u989d\u6700\u5c11\u786c\u5e01\u4e2a\u6570 dp[0] = 0; for(int i = 1; i <= amount; i++){ for(int j = 0; j < coins.length; j++){ // \u5224\u65ad i - coins[j] \u662f\u5426\u6709\u503c if(i - coins[j] >= 0 && dp[i - coins[j]] != -1){ // \u82e5\u6709\u66f4\u5c0f\u7684\u786c\u5e01\u6570 \u66f4\u65b0dp if(dp[i] == -1 || dp[i] > dp[i -coins[j]] + 1){ dp[i] = dp[i - coins[j]] + 1; } } } } return dp[amount]; } } 337.\u6253\u5bb6\u52ab\u820dIII \u9898\u76ee\u63cf\u8ff0 \u5728\u4e0a\u6b21\u6253\u52ab\u5b8c\u4e00\u6761\u8857\u9053\u4e4b\u540e\u548c\u4e00\u5708\u623f\u5c4b\u540e\uff0c\u5c0f\u5077\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u533a\u3002\u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u201c\u6839\u201d\u3002 \u9664\u4e86\u201c\u6839\u201d\u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u201c\u7236\u201c\u623f\u5b50\u4e0e\u4e4b\u76f8\u8fde\u3002\u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230\u201c\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u7684\u6392\u5217\u7c7b\u4f3c\u4e8e\u4e00\u68f5\u4e8c\u53c9\u6811\u201d\u3002 \u5982\u679c\u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab\uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002 \u8ba1\u7b97\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b\uff0c\u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,2,3,null,3,null,1] 3 / \\ 2 3 \\ \\ 3 1 \u8f93\u51fa: 7 \u89e3\u91ca: \u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = 3 + 3 + 1 = 7. \u793a\u4f8b 2: \u8f93\u5165: [3,4,5,1,3,null,1] 3 / \\ 4 5 / \\ \\ 1 3 1 \u8f93\u51fa: 9 \u89e3\u91ca: \u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = 4 + 5 = 9. \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 + \u8bb0\u5fc6\u5316 import queue class Solution: memo = dict() def rob(self, root: TreeNode) -> int: \"\"\" bottom-to-up dp \u5e8f\u6570\u6cd5 \u9012\u5f52 \"\"\" # \u7ec8\u6b62\u6761\u4ef6 if not root: return 0 if not root.left and not root.right: return root.val if root in self.memo: return self.memo[root] left = 0 right = 0 lleft = 0 rleft = 0 lright = 0 rright = 0 if root.left: left = self.rob(root.left) lleft = self.rob(root.left.left) rleft = self.rob(root.left.right) if root.right: right = self.rob(root.right) lright = self.rob(root.right.left) rright = self.rob(root.right.right) rootv = root.val + lleft + rleft + lright + rright childv = left + right self.memo[root] = max(rootv, childv) return self.memo[root] \u89e3\u6cd5\u4e8c \u9012\u5f52 + \u8bb0\u5fc6\u5316 \"\"\" \u9009\u4e2droot, \u4e00\u5b9a\u4e0d\u53ef\u9009\u4ed6\u7684\u5de6\u53f3\u5b69\u5b50\u7ed3\u70b9 \u4e0d\u9009root, \u4e0d\u4e00\u5b9a\u9009\u4ed6\u7684\u5de6\u53f3\u5b69\u5b50\u7ed3\u70b9 \"\"\" cache = {} def max_with_root(node): return node.val + max_without_root(node.left) + max_without_root(node.right) if node else 0 def max_without_root(node): return helper(node.left) + helper(node.right) if node else 0 def helper(node): if node in cache: return cache[node] cache[node] = max(max_with_root(node), max_without_root(node)) if node else 0 return cache[node] class Solution(object): def rob(self, root): \"\"\" :type root: TreeNode :rtype: int \"\"\" return helper(root) 343. \u6574\u6570\u62c6\u5206 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0c\u5c06\u5176\u62c6\u5206\u4e3a\u81f3\u5c11\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\uff0c\u5e76\u4f7f\u8fd9\u4e9b\u6574\u6570\u7684\u4e58\u79ef\u6700\u5927\u5316\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1\u3002 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36\u3002 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe n \u4e0d\u5c0f\u4e8e 2 \u4e14\u4e0d\u5927\u4e8e 58\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 class Solution: def integerBreak(self, n: int) -> int: if n < 3: return 1 dp = [0] * (n + 1) dp[1] = 1 dp[2] = 1 for i in range(3, n + 1): for j in range(1, i): # **** dp[i] = max(dp[i], j * dp[i - j], j * (i - j)) return dp[n] \u89e3\u6cd5\u4e8c 357. \u8ba1\u7b97\u5404\u4e2a\u4f4d\u6570\u4e0d\u540c\u7684\u6570\u5b57\u4e2a\u6570 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 n\uff0c\u8ba1\u7b97\u5404\u4f4d\u6570\u5b57\u90fd\u4e0d\u540c\u7684\u6570\u5b57 x \u7684\u4e2a\u6570\uff0c\u5176\u4e2d 0 \u2264 x < 10n \u3002 \u793a\u4f8b: \u8f93\u5165: 2 \u8f93\u51fa: 91 \u89e3\u91ca: \u7b54\u6848\u5e94\u4e3a\u9664\u53bb 11,22,33,44,55,66,77,88,99 \u5916\uff0c\u5728 [0,100) \u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5b57\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 DP class Solution: def countNumbersWithUniqueDigits(self, n: int) -> int: \"\"\" DP n=1: res=10 n=2: res=9*9+10=91 # \u4e24\u4f4d\u6570\u7b2c\u4e00\u4f4d\u53ea\u80fd\u4e3a1-9\uff0c\u7b2c\u4e8c\u4f4d\u53ea\u80fd\u4e3a\u975e\u7b2c\u4e00\u4f4d\u7684\u6570\uff0c\u52a0\u4e0a\u4e00\u4f4d\u6570\u7684\u6240\u6709\u7ed3\u679c n=3: res=9 * 9 * 8+91=739 # \u4e09\u4f4d\u6570\u7b2c\u4e00\u4f4d\u53ea\u80fd\u4e3a1-9\uff0c\u7b2c\u4e8c\u4f4d\u53ea\u80fd\u4e3a\u975e\u7b2c\u4e00\u4f4d\u7684\u6570\uff0c\u7b2c\u4e09\u4f4d\u53ea\u80fd\u4e3a\u975e\u524d\u4e24\u4f4d\u7684\u6570\uff0c\u52a0\u4e0a\u4e24\u4f4d\u6570\u7684\u6240\u6709\u7ed3\u679c n=4: res=9 * 9 * 8 * 7+739=5275 # \u540c\u4e0a\u63a8\u6cd5 \"\"\" dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): dp[i] = 9 for j in range(i - 1): dp[i] = dp[i] * (9 - j) dp[i] += dp[i - 1] return dp[-1] \u89e3\u6cd5\u4e8c def countNumbersWithUniqueDigits(self, n: int) -> int: if not n: return 1 res, muls = 10, 9 for i in range(1, min(n,10)): muls *= 10 - i res += muls return res 368.\u6700\u5927\u6574\u6570\u5b50\u96c6 [\u63a8\u8350] \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u7531\u65e0\u91cd\u590d\u7684\u6b63\u6574\u6570\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5927\u7684\u6574\u9664\u5b50\u96c6\uff0c\u5b50\u96c6\u4e2d\u4efb\u610f\u4e00\u5bf9 (Si\uff0cSj) \u90fd\u8981\u6ee1\u8db3\uff1aSi % Sj = 0 \u6216 Sj % Si = 0\u3002 \u5982\u679c\u6709\u591a\u4e2a\u76ee\u6807\u5b50\u96c6\uff0c\u8fd4\u56de\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5747\u53ef\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [1,2] (\u5f53\u7136, [1,3] \u4e5f\u6b63\u786e) \u793a\u4f8b 2: \u8f93\u5165: [1,2,4,8] \u8f93\u51fa: [1,2,4,8] \u89e3\u6cd5 \u89e3\u6cd5\u4e00 dp dp[i] \u5b58\u50a8\u7684\u662f\u5230\u6392\u5e8f\u540e\u7684\u7b2ci\u4e2a\u6700\u957f\u5b50\u96c6 class Solution(object): def largestDivisibleSubset(self, nums): \"\"\" :type nums: List[int] :rtype: List[int] \"\"\" if not nums: return nums if len(nums) == 1: return nums l = len(nums) nums.sort() dp = [[i] for i in nums] for i in range(1, l): for j in range(i-1, -1, -1): if nums[i]%nums[j] == 0: dp[i] = max(dp[j] + [nums[i]], dp[i],key=len) return max(dp,key=len) 392. \u5224\u65ad\u5b50\u5e8f\u5217 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u5224\u65ad s \u662f\u5426\u4e3a t \u7684\u5b50\u5e8f\u5217\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a s \u548c t \u4e2d\u4ec5\u5305\u542b\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u3002\u5b57\u7b26\u4e32 t \u53ef\u80fd\u4f1a\u5f88\u957f\uff08\u957f\u5ea6 ~= 500,000\uff09\uff0c\u800c s \u662f\u4e2a\u77ed\u5b57\u7b26\u4e32\uff08\u957f\u5ea6 <=100\uff09\u3002 \u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u800c\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c\"ace\"\u662f\"abcde\"\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c\"aec\"\u4e0d\u662f\uff09\u3002 \u793a\u4f8b 1: s = \"abc\", t = \"ahbgdc\" \u8fd4\u56de true. \u793a\u4f8b 2: s = \"axc\", t = \"ahbgdc\" \u8fd4\u56de false. \u540e\u7eed\u6311\u6218 : \u5982\u679c\u6709\u5927\u91cf\u8f93\u5165\u7684 S\uff0c\u79f0\u4f5cS1, S2, ... , Sk \u5176\u4e2d k >= 10\u4ebf\uff0c\u4f60\u9700\u8981\u4f9d\u6b21\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u4e3a T \u7684\u5b50\u5e8f\u5217\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u600e\u6837\u6539\u53d8\u4ee3\u7801\uff1f \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u53cc\u6307\u9488 O(N) class Solution: def isSubsequence(self, s: str, t: str) -> bool: \"\"\" \u5b50\u5e8f\u5217 \"\"\" i = 0 j = 0 while i < len(s) and j < len(t): if s[i] == t[j]: i += 1 j += 1 return i == len(s) \u89e3\u6cd5\u4e8c ? class Solution: def isSubsequence(self, s: str, t: str) -> bool: for cs in s: if cs not in t: return False else: t = t[t.index(cs)+1:] return True 746.\u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af 746.1.\u9898\u76ee\u63cf\u8ff0 \u6570\u7ec4\u7684\u6bcf\u4e2a\u7d22\u5f15\u505a\u4e3a\u4e00\u4e2a\u9636\u68af\uff0c\u7b2c i \u4e2a\u9636\u68af\u5bf9\u5e94\u7740\u4e00\u4e2a\u975e\u8d1f\u6570\u7684\u4f53\u529b\u82b1\u8d39\u503c cost[i] (\u7d22\u5f15\u4ece0\u5f00\u59cb)\u3002 \u6bcf\u5f53\u4f60\u722c\u4e0a\u4e00\u4e2a\u9636\u68af\u4f60\u90fd\u8981\u82b1\u8d39\u5bf9\u5e94\u7684\u4f53\u529b\u82b1\u8d39\u503c\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u9009\u62e9\u7ee7\u7eed\u722c\u4e00\u4e2a\u9636\u68af\u6216\u8005\u722c\u4e24\u4e2a\u9636\u68af\u3002 \u60a8\u9700\u8981\u627e\u5230\u8fbe\u5230\u697c\u5c42\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002 \u793a\u4f8b 1: \u8f93\u5165: cost = [10, 15, 20] \u8f93\u51fa: 15 \u89e3\u91ca: \u6700\u4f4e\u82b1\u8d39\u662f\u4ececost[1]\u5f00\u59cb\uff0c\u7136\u540e\u8d70\u4e24\u6b65\u5373\u53ef\u5230\u9636\u68af\u9876\uff0c\u4e00\u5171\u82b1\u8d3915\u3002 \u793a\u4f8b 2: \u8f93\u5165: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] \u8f93\u51fa: 6 \u89e3\u91ca: \u6700\u4f4e\u82b1\u8d39\u65b9\u5f0f\u662f\u4ececost[0]\u5f00\u59cb\uff0c\u9010\u4e2a\u7ecf\u8fc7\u90a3\u4e9b1\uff0c\u8df3\u8fc7cost[3]\uff0c\u4e00\u5171\u82b1\u8d396\u3002 \u6ce8\u610f\uff1a cost \u7684\u957f\u5ea6\u5c06\u4f1a\u5728 [2, 1000] \u3002 \u6bcf\u4e00\u4e2a cost[i] \u5c06\u4f1a\u662f\u4e00\u4e2aInteger\u7c7b\u578b\uff0c\u8303\u56f4\u4e3a [0, 999] \u3002 746.2.\u89e3\u6cd5 \u9898\u76ee\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u9876\u5c42\u4e0d\u662f\u6700\u540e\u4e00\u7ea7\u53f0\u9636 746.2.1 \u65b9\u6cd5\u4e00 DP class Solution { public int minCostClimbingStairs(int[] cost) { if(cost.length == 0){ return 0; } if(cost.length == 1){ return cost[0]; } int[] dp = new int[cost.length+1]; dp[0] = 0; dp[1] = cost[0]; for(int i = 2; i <= cost.length; i++){ dp[i] = Math.min(dp[i-1], dp[i-2]) + cost[i-1]; } return Math.min(dp[cost.length], dp[cost.length-1]); } } 746.2.2 \u65b9\u6cd5\u4e8c class Solution { public int minCostClimbingStairs(int[] cost) { int f1 = 0, f2 = 0; for(int i = cost.length - 1; i >= 0; --i){ int f0 = cost[i] + Math.min(f1, f2); f2 = f1; f1 = f0; } return Math.min(f1, f2); } } 1025.\u9664\u6570\u535a\u5f08 \u770b\u5230\u8fd9\u7c7b\u9898\u5148\u8bd5\u7740\u6253\u5370\u7ed3\u679c [\u627e\u89c4\u5f8b] 1025.1.\u9898\u76ee\u63cf\u8ff0 \u7231\u4e3d\u4e1d\u548c\u9c8d\u52c3\u4e00\u8d77\u73a9\u6e38\u620f\uff0c\u4ed6\u4eec\u8f6e\u6d41\u884c\u52a8\u3002\u7231\u4e3d\u4e1d\u5148\u624b\u5f00\u5c40\u3002 \u6700\u521d\uff0c\u9ed1\u677f\u4e0a\u6709\u4e00\u4e2a\u6570\u5b57 N \u3002\u5728\u6bcf\u4e2a\u73a9\u5bb6\u7684\u56de\u5408\uff0c\u73a9\u5bb6\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u9009\u51fa\u4efb\u4e00 x \uff0c\u6ee1\u8db3 0 < x < N \u4e14 N % x == 0 \u3002 \u7528 N - x \u66ff\u6362\u9ed1\u677f\u4e0a\u7684\u6570\u5b57 N \u3002 \u5982\u679c\u73a9\u5bb6\u65e0\u6cd5\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u5c31\u4f1a\u8f93\u6389\u6e38\u620f\u3002 \u53ea\u6709\u5728\u7231\u4e3d\u4e1d\u5728\u6e38\u620f\u4e2d\u53d6\u5f97\u80dc\u5229\u65f6\u624d\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de false \u3002\u5047\u8bbe\u4e24\u4e2a\u73a9\u5bb6\u90fd\u4ee5\u6700\u4f73\u72b6\u6001\u53c2\u4e0e\u6e38\u620f\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a2 \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u7231\u4e3d\u4e1d\u9009\u62e9 1\uff0c\u9c8d\u52c3\u65e0\u6cd5\u8fdb\u884c\u64cd\u4f5c\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a3 \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a\u7231\u4e3d\u4e1d\u9009\u62e9 1\uff0c\u9c8d\u52c3\u4e5f\u9009\u62e9 1\uff0c\u7136\u540e\u7231\u4e3d\u4e1d\u65e0\u6cd5\u8fdb\u884c\u64cd\u4f5c\u3002 \u63d0\u793a\uff1a * 1 <= N <= 1000 1025.2.\u89e3\u6cd5 1025.2.1 \u65b9\u6cd5\u4e00 \u6570\u5b66\u5f52\u7eb3\u6cd5 class Solution { public boolean divisorGame(int N) { //\u9898\u89e3\u601d\u8def\uff1a\u4e24\u4eba\u9009\u62e9\u7684\u6bcf\u4e00\u6b65\u90fd\u662f\u8981\u8003\u8651\u9009\u62e9\u6b64\u6b65\u662f\u5426\u5bf9\u81ea\u5df1\u6709\u5229\uff08\u540e\u7eed\u6bcf\u6b65\u7684\u64cd\u4f5c\uff09\uff0c\u5206\u6790\u53ef\u77e5\uff0c\u82e5N\u662f\u5076\u6570\uff0c\u5728\u7231\u4e3d\u4e1d\u6bcf\u6b65\u90fd\u662f\u4ee5\u6700\u4f73\u72b6\u6001 // \u9009\u62e9\u7684\u60c5\u51b5\u4e0b\uff0c\u7231\u4e3d\u4e1d\u53ef\u4ee5\u8d62\u5f97\u6bd4\u8d5b\uff1b\u82e5N\u662f\u5947\u6570\uff0c\u5728\u9c8d\u52c3\u4ee5\u6700\u4f73\u72b6\u6001\u9009\u62e9\u7684\u60c5\u51b5\u4e0b\uff0c\u9c8d\u52c3\u53ef\u4ee5\u8d62\u5f97\u6bd4\u8d5b return N % 2 == 0; } } 1025.2.2 \u65b9\u6cd5\u4e8c DP class Solution { public boolean divisorGame(int N) { // \u521d\u59cb\u5316\u7684\u503c\u5747\u4e3afalse boolean[] dp = new boolean[N+1]; dp[0] = false; dp[1] = false; for(int i = 2; i <= N; i++){ // \u5728\u67d0\u4e00\u4e2a\u6570\u4e2d\u627e\u5230\u5bf9\u65b9\u4e0d\u5229\u7684\u7ed3\u679c for(int j = 1; j < i; j++){ if(i % j == 0 && dp[i-j] == false){ dp[i] = true; break; }else{ dp[i] = false; } } } return dp[N]; } \u8bbe\u8ba1 146.LRU\u7f13\u5b58\u673a\u5236 [\u9ad8\u9891\u9762\u8bd5\u9898] \u9898\u76ee\u63cf\u8ff0 \u8fd0\u7528\u4f60\u6240\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u4e2a LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58\u673a\u5236\u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u83b7\u53d6\u6570\u636e get \u548c \u5199\u5165\u6570\u636e put \u3002 \u83b7\u53d6\u6570\u636e get(key) - \u5982\u679c\u5bc6\u94a5 (key) \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u5bc6\u94a5\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 \u5199\u5165\u6570\u636e put(key, value) - \u5982\u679c\u5bc6\u94a5\u4e0d\u5b58\u5728\uff0c\u5219\u5199\u5165\u5176\u6570\u636e\u503c\u3002\u5f53\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u5199\u5165\u65b0\u6570\u636e\u4e4b\u524d\u5220\u9664\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u503c\uff0c\u4ece\u800c\u4e3a\u65b0\u7684\u6570\u636e\u503c\u7559\u51fa\u7a7a\u95f4\u3002 \u8fdb\u9636: \u4f60\u662f\u5426\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff1f \u793a\u4f8b: LRUCache cache = new LRUCache( 2 / \u7f13\u5b58\u5bb9\u91cf / ); cache.put(1, 1); cache.put(2, 2); cache.get(1); // \u8fd4\u56de 1 cache.put(3, 3); // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 2 \u4f5c\u5e9f cache.get(2); // \u8fd4\u56de -1 (\u672a\u627e\u5230) cache.put(4, 4); // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 1 \u4f5c\u5e9f cache.get(1); // \u8fd4\u56de -1 (\u672a\u627e\u5230) cache.get(3); // \u8fd4\u56de 3 cache.get(4); // \u8fd4\u56de 4 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u53cc\u5411\u94fe\u8868+\u54c8\u5e0c\u8868 class ListNode: def __init__(self, key=None, value=None): self.key = key self.value = value self.prev = None self.next = None # \u8fd9\u9898\u76ee\u91cd\u7684\u5220\u9664\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u4e0d\u662f\u6309\u7167\u6b21\u6570\uff0c\u800c\u662f\u6309\u7167put\u548cget\u7684\u65f6\u95f4 # \u89e3\u51b3\u65b9\u6cd5 hashmap + bi_linked_list(\u53cc\u5411\u94fe\u8868) class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.hashmap = dict() # \u65b0\u5efa\u4e24\u4e2a\u7ed3\u70b9 \u5934\u7ed3\u70b9 \u5c3e\u7ed3\u70b9 self.head = ListNode() self.tail = ListNode() # \u521d\u59cb\u5316\u94fe\u8868\u4e3ahead <-> tail self.head.next = self.tail self.tail.prev = self.head # \u56e0\u4e3aget\u4e0eput\u64cd\u4f5c\u90fd\u53ef\u80fd\u9700\u8981\u5c06\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\u79fb\u5230\u672b\u5c3e\uff0c\u6240\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5 # key: ** O(1) def move_node_to_tail(self, key): node = self.hashmap[key] node.prev.next = node.next node.next.prev = node.prev node.prev = self.tail.prev node.next = self.tail self.tail.prev.next = node self.tail.prev = node def get(self, key: int) -> int: if key in self.hashmap: self.move_node_to_tail(key) res = self.hashmap.get(key, -1) if res == -1: return res else: return res.value def put(self, key: int, value: int) -> None: if key in self.hashmap: # \u5982\u679ckey\u672c\u8eab\u5df2\u7ecf\u5728\u54c8\u5e0c\u8868\u4e2d\u4e86\u5c31\u4e0d\u9700\u8981\u5728\u94fe\u8868\u4e2d\u52a0\u5165\u65b0\u7684\u8282\u70b9 # \u4f46\u662f\u9700\u8981\u66f4\u65b0\u5b57\u5178\u8be5\u503c\u5bf9\u5e94\u8282\u70b9\u7684value self.hashmap[key].value = value # \u4e4b\u540e\u5c06\u8be5\u8282\u70b9\u79fb\u5230\u672b\u5c3e self.move_node_to_tail(key) else: if len(self.hashmap) == self.capacity: # \u53bb\u6389\u54c8\u5e0c\u8868\u5bf9\u5e94\u9879 self.hashmap.pop(self.head.next.key) # \u53bb\u6389\u6700\u4e45\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u5373\u5934\u8282\u70b9\u4e4b\u540e\u7684\u8282\u70b9 self.head.next = self.head.next.next self.head.next.prev = self.head # \u5982\u679c\u4e0d\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230\u5c3e\u8282\u70b9\u524d new = ListNode(key, value) self.hashmap[key] = new new.prev = self.tail.prev new.next = self.tail self.tail.prev.next = new self.tail.prev = new # Your LRUCache object will be instantiated and called as such: # obj = LRUCache(capacity) # param_1 = obj.get(key) # obj.put(key,value) \u89e3\u6cd5\u4e8c ****","title":"LeetCode\u9898\u76ee\u603b\u7ed3"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_1","text":"","title":"\u77e5\u8bc6\u70b9"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs-stack","text":"\u5224\u51fa\u53e3\uff08\u7ec8\u70b9\u3001\u8d8a\u754c\uff09->\u526a\u679d->\u6269\u5c55->\u6807\u8bb0->\u9012\u5f52->\u8fd8\u539f void dfs(int \u5f53\u524d\u72b6\u6001) { if(\u5f53\u524d\u72b6\u6001\u4e3a\u8fb9\u754c\u72b6\u6001) { \u8bb0\u5f55\u6216\u8f93\u51fa return; } for(i=0;i<n;i++) //\u6a2a\u5411\u904d\u5386\u89e3\u7b54\u6811\u6240\u6709\u5b50\u8282\u70b9 { //\u6269\u5c55\u51fa\u4e00\u4e2a\u5b50\u72b6\u6001\u3002 \u4fee\u6539\u4e86\u5168\u5c40\u53d8\u91cf if(\u5b50\u72b6\u6001\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6) { dfs(\u5b50\u72b6\u6001) } \u6062\u590d\u5168\u5c40\u53d8\u91cf//\u56de\u6eaf\u90e8\u5206 } void dfs(...) { // \u7ed3\u675f\u9012\u5f52\u7684\u6761\u4ef6 if (...) { ..... // \u628a\u201c\u5f53\u524d\u7ed3\u679c\u201d \u52a0\u5165 \u201c\u7ed3\u679c\u96c6\u5bb9\u5668\u201d \u4e2d return; } // \u7ee7\u7eed\u9012\u5f52\uff0c\u91cc\u9762\u53ef\u80fd\u6709\u56de\u6eaf\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709 if (...) { ... // \u5728\u5bb9\u5668\u4e2d\u4fdd\u5b58\u5f53\u524d\u6570\u636e dfs() ... // \u5728\u5bb9\u5668\u4e2d\u5220\u9664\u4e0a\u9762\u4fdd\u5b58\u7684\u6570\u636e\uff08\u6ce8\uff1a\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u79f0\u4e3a\u56de\u6eaf\uff0c\u5f88\u660e\u663e\u5b83\u662fdfs\u7684\u4e00\u4e2a\u6b65\u9aa4\uff09 } } void dfs()//\u53c2\u6570\u7528\u6765\u8868\u793a\u72b6\u6001 { if(\u5230\u8fbe\u7ec8\u70b9\u72b6\u6001) { ...//\u6839\u636e\u9898\u610f\u6dfb\u52a0 return; } if(\u8d8a\u754c\u6216\u8005\u662f\u4e0d\u5408\u6cd5\u72b6\u6001) return; if(\u7279\u6b8a\u72b6\u6001)//\u526a\u679d return ; for(\u6269\u5c55\u65b9\u5f0f) { if(\u6269\u5c55\u65b9\u5f0f\u6240\u8fbe\u5230\u72b6\u6001\u5408\u6cd5) { \u4fee\u6539\u64cd\u4f5c;//\u6839\u636e\u9898\u610f\u6765\u6dfb\u52a0 \u6807\u8bb0\uff1b dfs\uff08\uff09\uff1b (\u8fd8\u539f\u6807\u8bb0)\uff1b //\u662f\u5426\u8fd8\u539f\u6807\u8bb0\u6839\u636e\u9898\u610f //\u5982\u679c\u52a0\u4e0a\uff08\u8fd8\u539f\u6807\u8bb0\uff09\u5c31\u662f \u56de\u6eaf\u6cd5 } } }","title":"[\u7b97\u6cd5] DFS\u539f\u7406\u53ca\u6a21\u677f stack"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bfs-queue","text":"","title":"[\u7b97\u6cd5] BFS\u539f\u7406\u53ca\u6a21\u677f queue"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_2","text":"\u5173\u4e8e\u56de\u6eaf\u65f6\u95f4\u7684\u601d\u8003\uff0c\u7531\u4e8e\u56de\u6eaf\u591a\u6b21\u8c03\u7528\u9012\u5f52\uff0c\u5bfc\u81f4\u6211\u66fe\u7ecf\u4ee5\u4e3a\u5f88\u591a\u51fd\u6570\u5e76\u884c\u6267\u884c\uff0c\u5176\u5b9e\u4ecd\u662f\u5355\u6838\u6267\u884c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8","title":"[\u7b97\u6cd5] \u56de\u6eaf"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_3","text":"\u5f53\u8f93\u5165\u7684\u5143\u7d20\u662f \u4e2a \u5230 \u4e4b\u95f4\u7684\u6574\u6570\u65f6\uff0c\u5b83\u7684\u8fd0\u884c\u65f6\u95f4\u662f \u3002\u8ba1\u6570\u6392\u5e8f\u4e0d\u662f \u6bd4\u8f83\u6392\u5e8f \uff0c\u6392\u5e8f\u7684\u901f\u5ea6\u5feb\u4e8e\u4efb\u4f55\u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5. \u627e\u51fa\u5f85\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u6700\u5927\u548c\u6700\u5c0f\u7684\u5143\u7d20 \u7edf\u8ba1\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u503c\u4e3a \u7684\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5b58\u5165\u6570\u7ec4 \u7684\u7b2c \u9879 \u5bf9\u6240\u6709\u7684\u8ba1\u6570\u7d2f\u52a0\uff08\u4ece \u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6bcf\u4e00\u9879\u548c\u524d\u4e00\u9879\u76f8\u52a0\uff09 \u53cd\u5411\u586b\u5145\u76ee\u6807\u6570\u7ec4\uff1a\u5c06\u6bcf\u4e2a\u5143\u7d20 \u653e\u5728\u65b0\u6570\u7ec4\u7684\u7b2c \u9879\uff0c\u6bcf\u653e\u4e00\u4e2a\u5143\u7d20\u5c31\u5c06 \u51cf\u53bb1 public static int[] countSort(int []a){ int b[] = new int[a.length]; int max = a[0], min = a[0]; for(int i : a){ if(i > max){ max = i; } if(i < min){ min = i; } } //\u8fd9\u91cck\u7684\u5927\u5c0f\u662f\u8981\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\uff0c\u5143\u7d20\u5927\u5c0f\u7684\u6781\u503c\u5dee+1 int k = max - min + 1; int c[] = new int[k]; for(int i = 0; i < a.length; ++i){ c[a[i]-min] += 1;//\u4f18\u5316\u8fc7\u7684\u5730\u65b9\uff0c\u51cf\u5c0f\u4e86\u6570\u7ec4c\u7684\u5927\u5c0f } for(int i = 1; i < c.length; ++i){ c[i] = c[i] + c[i-1]; } for(int i = a.length-1; i >= 0; --i){ b[--c[a[i]-min]] = a[i];//\u6309\u5b58\u53d6\u7684\u65b9\u5f0f\u53d6\u51fac\u7684\u5143\u7d20 } return b; }","title":"[\u7b97\u6cd5] \u8ba1\u6570\u6392\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_4","text":"# This function takes last element as pivot, places # the pivot element at its correct position in sorted # array, and places all smaller (smaller than pivot) # to left of pivot and all greater elements to right # of pivot def partition(arr,low,high): i = ( low-1 ) # index of smaller element pivot = arr[high] # pivot for j in range(low , high): # If current element is smaller than or # equal to pivot if arr[j] <= pivot: # increment index of smaller element i = i+1 arr[i],arr[j] = arr[j],arr[i] arr[i+1],arr[high] = arr[high],arr[i+1] return ( i+1 ) # key: \u964d\u4f4e\u6700\u574f\u60c5\u51b5\u51fa\u73b0\u7684\u6982\u7387 def partition_r(arr[], low, hig) r = Random Number from low to high Swap arr[r] and arr[hi] return partition(arr, low, high) # The main function that implements QuickSort # arr[] --> Array to be sorted, # low --> Starting index, # high --> Ending index # Function to do Quick sort def quickSort(arr,low,high): if low < high: # pi is partitioning index, arr[p] is now # at right place pi = partition(arr,low,high) # Separately sort elements before # partition and after partition quickSort(arr, low, pi-1) quickSort(arr, pi+1, high)","title":"[\u7b97\u6cd5] \u6392\u5e8f\u6392\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#todo","text":"","title":"[\u7b97\u6cd5] \u6700\u5927\u56e2\u95ee\u9898 todo"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#data-structure","text":"\u4e8c\u53c9\u641c\u7d22\u6811 \u3001 \u6709\u5e8f\u4e8c\u53c9\u6811 \uff08ordered binary tree\uff09\u6216 \u6392\u5e8f\u4e8c\u53c9\u6811 \u4e8c\u53c9\u67e5\u627e\u6811\u76f8\u6bd4\u4e8e\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u7684\u4f18\u52bf\u5728\u4e8e\u67e5\u627e\u3001\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u4f4e\u3002\u4e3a \u3002\u4e8c\u53c9\u67e5\u627e\u6811\u662f\u57fa\u7840\u6027\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u6784\u5efa\u66f4\u4e3a\u62bd\u8c61\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5982 \u96c6\u5408 \u3001 \u591a\u91cd\u96c6 \u3001 \u5173\u8054\u6570\u7ec4 \u7b49\u3002 \u867d\u7136\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6700\u574f\u6548\u7387\u662f \uff0c\u4f46\u5b83\u652f\u6301\u52a8\u6001\u67e5\u8be2\uff0c\u4e14\u6709\u5f88\u591a\u6539\u8fdb\u7248\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u53ef\u4ee5\u4f7f\u6811\u9ad8\u4e3a \uff0c\u4ece\u800c\u5c06\u6700\u574f\u6548\u7387\u964d\u81f3 \uff0c\u5982 AVL\u6811 \u3001 \u7ea2\u9ed1\u6811 \u7b49\u3002 \u82e5\u4efb\u610f\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u8282\u70b9\u7684\u503c\uff1b \u82e5\u4efb\u610f\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u8282\u70b9\u7684\u503c\uff1b \u4efb\u610f\u8282\u70b9\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u5206\u522b\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811\uff1b \u6ca1\u6709\u952e\u503c\u76f8\u7b49\u7684\u8282\u70b9\u3002","title":"[DATA STRUCTURE] \u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#data-structure_1","text":"\u6709\u4e24\u79cd\u901a\u7528\u7684\u904d\u5386\u6811\u7684\u7b56\u7565\uff1a \u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff08BFS\uff09 \u6211\u4eec\u6309\u7167\u9ad8\u5ea6\u987a\u5e8f\u4e00\u5c42\u4e00\u5c42\u7684\u8bbf\u95ee\u6574\u68f5\u6811\uff0c\u9ad8\u5c42\u6b21\u7684\u8282\u70b9\u5c06\u4f1a\u6bd4\u4f4e\u5c42\u6b21\u7684\u8282\u70b9\u5148\u88ab\u8bbf\u95ee\u5230\u3002 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09 \u5728\u8fd9\u4e2a\u7b56\u7565\u4e2d\uff0c\u6211\u4eec\u91c7\u7528\u6df1\u5ea6\u4f5c\u4e3a\u4f18\u5148\u7ea7\uff0c\u4ee5\u4fbf\u4ece\u8ddf\u5f00\u59cb\u4e00\u76f4\u5230\u8fbe\u67d0\u4e2a\u786e\u5b9a\u7684\u53f6\u5b50\uff0c\u7136\u540e\u518d\u8fd4\u56de\u6839\u5230\u8fbe\u53e6\u4e00\u4e2a\u5206\u652f\u3002 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b56\u7565\u53c8\u53ef\u4ee5\u6839\u636e\u6839\u8282\u70b9\u3001\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u7684\u76f8\u5bf9\u987a\u5e8f\u88ab\u7ec6\u5206\u4e3a\u524d\u5e8f\u904d\u5386\uff0c\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u3002 \u4e0b\u56fe\u4e2d\u7684\u9876\u70b9\u6309\u7167\u8bbf\u95ee\u7684\u987a\u5e8f\u7f16\u53f7\uff0c\u6309\u7167 1-2-3-4-5 \u7684\u987a\u5e8f\u6765\u6bd4\u8f83\u4e0d\u540c\u7684\u7b56\u7565\u3002","title":"[DATA STRUCTURE] \u524d\u5e8f\u904d\u5386 \u4e2d\u5e8f\u904d\u5386 \u540e\u5e8f\u904d\u5386"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#data-structure_2","text":"\u5728 \u8ba1\u7b97\u673a\u79d1\u5b66 \u4e2d\uff0c trie \uff0c\u53c8\u79f0 \u524d\u7f00\u6811 \u6216 \u5b57\u5178\u6811 \uff0c\u662f\u4e00\u79cd\u6709\u5e8f \u6811 \uff0c\u7528\u4e8e\u4fdd\u5b58 \u5173\u8054\u6570\u7ec4 \uff0c\u5176\u4e2d\u7684\u952e\u901a\u5e38\u662f \u5b57\u7b26\u4e32 \u3002\u4e0e \u4e8c\u53c9\u67e5\u627e\u6811 \u4e0d\u540c\uff0c\u952e\u4e0d\u662f\u76f4\u63a5\u4fdd\u5b58\u5728\u8282\u70b9\u4e2d\uff0c\u800c\u662f\u7531\u8282\u70b9\u5728\u6811\u4e2d\u7684\u4f4d\u7f6e\u51b3\u5b9a\u3002\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u5b59\u90fd\u6709\u76f8\u540c\u7684 \u524d\u7f00 \uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u6839\u8282\u70b9\u5bf9\u5e94 \u7a7a\u5b57\u7b26\u4e32 \u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e0d\u662f\u6240\u6709\u7684\u8282\u70b9\u90fd\u6709\u5bf9\u5e94\u7684\u503c\uff0c\u53ea\u6709\u53f6\u5b50\u8282\u70b9\u548c\u90e8\u5206\u5185\u90e8\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u952e\u624d\u6709\u76f8\u5173\u7684\u503c\u3002 Trie\u8fd9\u4e2a\u672f\u8bed\u6765\u81ea\u4e8ere trie val\u3002\u6839\u636e \u8bcd\u6e90\u5b66 \uff0ctrie\u7684\u53d1\u660e\u8005Edward Fredkin\u628a\u5b83\u8bfb\u4f5c /\u02c8tri\u02d0/ \"tree\"\u3002[ 1] [ 2] \u4f46\u662f\uff0c\u5176\u4ed6\u4f5c\u8005\u628a\u5b83\u8bfb\u4f5c /\u02c8tra\u026a/ \"try\"\u3002[ 1] [ 2] [ 3] \u5728\u56fe\u793a\u4e2d\uff0c\u952e\u6807\u6ce8\u5728\u8282\u70b9\u4e2d\uff0c\u503c\u6807\u6ce8\u5728\u8282\u70b9\u4e4b\u4e0b\u3002\u6bcf\u4e00\u4e2a\u5b8c\u6574\u7684\u82f1\u6587\u5355\u8bcd\u5bf9\u5e94\u4e00\u4e2a\u7279\u5b9a\u7684\u6574\u6570\u3002Trie\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a \u786e\u5b9a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a \uff0c\u5c3d\u7ba1\u8fb9\u4e0a\u7684\u7b26\u53f7\u4e00\u822c\u662f\u9690\u542b\u5728\u5206\u652f\u7684\u987a\u5e8f\u4e2d\u7684\u3002 \u952e\u4e0d\u9700\u8981\u88ab\u663e\u5f0f\u5730\u4fdd\u5b58\u5728\u8282\u70b9\u4e2d\u3002\u56fe\u793a\u4e2d\u6807\u6ce8\u51fa\u5b8c\u6574\u7684\u5355\u8bcd\uff0c\u53ea\u662f\u4e3a\u4e86\u6f14\u793atrie\u7684\u539f\u7406\u3002 trie\u4e2d\u7684\u952e\u901a\u5e38\u662f\u5b57\u7b26\u4e32\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u5176\u5b83\u7684\u7ed3\u6784\u3002trie\u7684\u7b97\u6cd5\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4fee\u6539\u4e3a\u5904\u7406\u5176\u5b83\u7ed3\u6784\u7684\u6709\u5e8f\u5e8f\u5217\uff0c\u6bd4\u5982\u4e00\u4e32\u6570\u5b57\u6216\u8005\u5f62\u72b6\u7684\u6392\u5217\u3002\u6bd4\u5982\uff0c bitwise trie \u4e2d\u7684\u952e\u662f\u4e00\u4e32\u4f4d\u5143\uff0c\u53ef\u4ee5\u7528\u4e8e\u8868\u793a\u6574\u6570\u6216\u8005\u5185\u5b58\u5730\u5740\u3002","title":"[DATA STRUCTURE] \u524d\u7f00\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_5","text":"trie\u6811\u5e38\u7528\u4e8e\u641c\u7d22\u63d0\u793a\u3002\u5982\u5f53\u8f93\u5165\u4e00\u4e2a\u7f51\u5740\uff0c\u53ef\u4ee5\u81ea\u52a8\u641c\u7d22\u51fa\u53ef\u80fd\u7684\u9009\u62e9\u3002\u5f53\u6ca1\u6709\u5b8c\u5168\u5339\u914d\u7684\u641c\u7d22\u7ed3\u679c\uff0c\u53ef\u4ee5\u8fd4\u56de\u524d\u7f00\u6700\u76f8\u4f3c\u7684\u53ef\u80fd\u3002[ 4]","title":"\u5e94\u7528"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#summary","text":"This article is for intermediate level users. It introduces the following ideas: The data structure Trie (Prefix tree) and most common operations with it.","title":"Summary"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#solution","text":"","title":"Solution"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#applications","text":"Trie (we pronounce \"try\") or prefix tree is a tree data structure, which is used for retrieval of a key in a dataset of strings. There are various applications of this very efficient data structure such as :","title":"Applications"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1-autocomplete","text":"Figure 1. Google Suggest in action.","title":"1. Autocomplete"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2-spell-checker","text":"Figure 2. A spell checker used in word processor.","title":"2. Spell checker"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3-ip-routing-longest-prefix-matching","text":"Figure 3. Longest prefix matching algorithm uses Tries in Internet Protocol (IP) routing to select an entry from a forwarding table.","title":"3. IP routing (Longest prefix matching)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4-t9-predictive-text","text":"Figure 4. T9 which stands for Text on 9 keys, was used on phones to input texts during the late 1990s.","title":"4. T9 predictive text"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5-solving-word-games","text":"Figure 5. Tries is used to solve Boggle efficiently by pruning the search space. There are several other data structures, like balanced trees and hash tables, which give us the possibility to search for a word in a dataset of strings. Then why do we need trie? Although hash table has O(1) O (1) time complexity for looking for a key, it is not efficient in the following operations : Finding all keys with a common prefix. Enumerating a dataset of strings in lexicographical order. Another reason why trie outperforms hash table, is that as hash table increases in size, there are lots of hash collisions and the search time complexity could deteriorate to O(n) O ( n ), where n n is the number of keys inserted. Trie could use less space compared to Hash Table when storing many keys with the same prefix. In this case using trie has only O(m) O ( m ) time complexity, where m m is the key length. Searching for a key in a balanced tree costs O(m \\log n) O ( m log n ) time complexity.","title":"5. Solving word games"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#trie-node-structure","text":"Trie is a rooted tree. Its nodes have the following fields: Maximum of R R links to its children, where each link corresponds to one of R R character values from dataset alphabet. In this article we assume that R R is 26, the number of lowercase latin letters. Boolean field which specifies whether the node corresponds to the end of the key, or is just a key prefix.","title":"Trie node structure"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#api-collectionscounter","text":"https://docs.python.org/3.6/library/collections.html#collections.Counter A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages. elements () Return an iterator over elements repeating each as many times as its count. Elements are returned in arbitrary order. If an element\u2019s count is less than one, elements() will ignore it. most_common ([ n ]) Return a list of the n most common elements and their counts from the most common to the least. If n is omitted or None , most_common() returns all elements in the counter. Elements with equal counts are ordered arbitrarily:","title":"[API] collections.Counter \u8ba1\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#api","text":"\u8868\u8fbe\u5f0f\u4ece\u5de6\u81f3\u53f3\u8fd0\u7b97\uff0c\u82e5 or \u7684\u5de6\u4fa7\u903b\u8f91\u503c\u4e3a True \uff0c\u5219\u77ed\u8def or \u540e\u6240\u6709\u7684\u8868\u8fbe\u5f0f\uff08\u4e0d\u7ba1\u662f and \u8fd8\u662f or\uff09\uff0c\u76f4\u63a5\u8f93\u51fa or \u5de6\u4fa7\u8868\u8fbe\u5f0f \u3002 \u8868\u8fbe\u5f0f\u4ece\u5de6\u81f3\u53f3\u8fd0\u7b97\uff0c\u82e5 and \u7684\u5de6\u4fa7\u903b\u8f91\u503c\u4e3a False \uff0c\u5219\u77ed\u8def\u5176\u540e\u6240\u6709 and \u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u6709 or \u51fa\u73b0\uff0c\u8f93\u51fa and \u5de6\u4fa7\u8868\u8fbe\u5f0f\u5230 or \u7684\u5de6\u4fa7\uff0c\u53c2\u4e0e\u63a5\u4e0b\u6765\u7684\u903b\u8f91\u8fd0\u7b97\u3002 \u82e5 or \u7684\u5de6\u4fa7\u4e3a False \uff0c\u6216\u8005 and \u7684\u5de6\u4fa7\u4e3a True \u5219\u4e0d\u80fd\u4f7f\u7528\u77ed\u8def\u903b\u8f91\u3002","title":"[API] \u77ed\u8def\u903b\u8f91"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#api-map-filter-reduce","text":"","title":"[API] Map Filter Reduce"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#map","text":"Map` applies a function to all the items in an input_list. Here is the blueprint: Blueprint map(function_to_apply, list_of_inputs) items = [1, 2, 3, 4, 5] squared = [] for i in items: squared.append(i**2) Map allows us to implement this in a much simpler and nicer way. Here you go: items = [1, 2, 3, 4, 5] squared = list(map(lambda x: x**2, items)) Most of the times we use lambdas with map so I did the same. Instead of a list of inputs we can even have a list of functions! def multiply(x): return (x*x) def add(x): return (x+x) funcs = [multiply, add] for i in range(5): value = list(map(lambda x: x(i), funcs)) print(value) # Output: # [0, 0] # [1, 2] # [4, 4] # [9, 6] # [16, 8]","title":"Map"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#filter","text":"As the name suggests, filter creates a list of elements for which a function returns true. Here is a short and concise example: number_list = range(-5, 5) less_than_zero = list(filter(lambda x: x < 0, number_list)) print(less_than_zero) # Output: [-5, -4, -3, -2, -1] The filter resembles a for loop but it is a builtin function and faster. Note: If map & filter do not appear beautiful to you then you can read about list/dict/tuple comprehensions.","title":"Filter"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#reduce","text":"Reduce is a really useful function for performing some computation on a list and returning the result. It applies a rolling computation to sequential pairs of values in a list. For example, if you wanted to compute the product of a list of integers. So the normal way you might go about doing this task in python is using a basic for loop: product = 1 list = [1, 2, 3, 4] for num in list: product = product * num # product = 24 Now let\u2019s try it with reduce: from functools import reduce product = reduce((lambda x, y: x * y), [1, 2, 3, 4]) # Output: 24","title":"Reduce"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#-","text":"","title":"[\u5934\u6761] \u5e38\u8003\u9898\u578b-\u5168\u6392\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#api-ascii","text":"","title":"[API] \u5b57\u7b26\u6570\u5b57\u8f6c\u5316 ascii"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_6","text":"ord('a')","title":"\u5b57\u7b26\u8f6c\u6570\u5b57"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_7","text":"chr(97)","title":"\u6570\u5b57\u8f6c\u5b57\u7b26"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_8","text":"","title":"[\u5e38\u7528\u4f4d\u8fd0\u7b97]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1","text":"\u539f\u7801\u5c31\u662f\u7b26\u53f7\u4f4d\u52a0\u4e0a\u771f\u503c\u7684\u7edd\u5bf9\u503c, \u5373\u7528\u7b2c\u4e00\u4f4d\u8868\u793a\u7b26\u53f7, \u5176\u4f59\u4f4d\u8868\u793a\u503c. \u6bd4\u5982\u5982\u679c\u662f8\u4f4d\u4e8c\u8fdb\u5236: [+1]\u539f = 0000 0001 [-1]\u539f = 1000 0001 \u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d. \u56e0\u4e3a\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d, \u6240\u4ee58\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u53d6\u503c\u8303\u56f4\u5c31\u662f: [1111 1111 , 0111 1111] \u5373 [-127 , 127] \u539f\u7801\u662f\u4eba\u8111\u6700\u5bb9\u6613\u7406\u89e3\u548c\u8ba1\u7b97\u7684\u8868\u793a\u65b9\u5f0f.","title":"1. \u539f\u7801"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2","text":"\u53cd\u7801\u7684\u8868\u793a\u65b9\u6cd5\u662f: \u6b63\u6570\u7684\u53cd\u7801\u662f\u5176\u672c\u8eab \u8d1f\u6570\u7684\u53cd\u7801\u662f\u5728\u5176\u539f\u7801\u7684\u57fa\u7840\u4e0a, \u7b26\u53f7\u4f4d\u4e0d\u53d8\uff0c\u5176\u4f59\u5404\u4e2a\u4f4d\u53d6\u53cd. [+1] = [00000001]\u539f = [00000001]\u53cd [-1] = [10000001]\u539f = [11111110]\u53cd \u53ef\u89c1\u5982\u679c\u4e00\u4e2a\u53cd\u7801\u8868\u793a\u7684\u662f\u8d1f\u6570, \u4eba\u8111\u65e0\u6cd5\u76f4\u89c2\u7684\u770b\u51fa\u6765\u5b83\u7684\u6570\u503c. \u901a\u5e38\u8981\u5c06\u5176\u8f6c\u6362\u6210\u539f\u7801\u518d\u8ba1\u7b97.","title":"2. \u53cd\u7801"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3","text":"\u8865\u7801\u7684\u8868\u793a\u65b9\u6cd5\u662f: \u6b63\u6570\u7684\u8865\u7801\u5c31\u662f\u5176\u672c\u8eab \u8d1f\u6570\u7684\u8865\u7801\u662f\u5728\u5176\u539f\u7801\u7684\u57fa\u7840\u4e0a, \u7b26\u53f7\u4f4d\u4e0d\u53d8, \u5176\u4f59\u5404\u4f4d\u53d6\u53cd, \u6700\u540e+1. (\u5373\u5728\u53cd\u7801\u7684\u57fa\u7840\u4e0a+1) [+1] = [00000001]\u539f = [00000001]\u53cd = [00000001]\u8865 [-1] = [10000001]\u539f = [11111110]\u53cd = [11111111]\u8865 \u5bf9\u4e8e\u8d1f\u6570, \u8865\u7801\u8868\u793a\u65b9\u5f0f\u4e5f\u662f\u4eba\u8111\u65e0\u6cd5\u76f4\u89c2\u770b\u51fa\u5176\u6570\u503c\u7684. \u901a\u5e38\u4e5f\u9700\u8981\u8f6c\u6362\u6210\u539f\u7801\u5728\u8ba1\u7b97\u5176\u6570\u503c. a ^ a = 0 \u6574\u6570\u7684\u8865\u7801\u4e0d\u53d8","title":"3. \u8865\u7801"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4","text":"","title":"4.\u4e3a\u4f55\u8981\u4f7f\u7528\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_9","text":"\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u8ba1\u7b97\u673a\u53ef\u4ee5\u6709\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\u8868\u793a\u4e00\u4e2a\u6570. \u5bf9\u4e8e\u6b63\u6570\u56e0\u4e3a\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\u7684\u7ed3\u679c\u90fd\u76f8\u540c: [+1] = [00000001]\u539f = [00000001]\u53cd = [00000001]\u8865 \u6240\u4ee5\u4e0d\u9700\u8981\u8fc7\u591a\u89e3\u91ca. \u4f46\u662f\u5bf9\u4e8e\u8d1f\u6570: [-1] = [10000001]\u539f = [11111110]\u53cd = [11111111]\u8865 \u53ef\u89c1\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u662f\u5b8c\u5168\u4e0d\u540c\u7684. \u65e2\u7136\u539f\u7801\u624d\u662f\u88ab\u4eba\u8111\u76f4\u63a5\u8bc6\u522b\u5e76\u7528\u4e8e\u8ba1\u7b97\u8868\u793a\u65b9\u5f0f, \u4e3a\u4f55\u8fd8\u4f1a\u6709\u53cd\u7801\u548c\u8865\u7801\u5462? \u9996\u5148, \u56e0\u4e3a\u4eba\u8111\u53ef\u4ee5\u77e5\u9053\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d, \u5728\u8ba1\u7b97\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u6839\u636e\u7b26\u53f7\u4f4d, \u9009\u62e9\u5bf9\u771f\u503c\u533a\u57df\u7684\u52a0\u51cf. (\u771f\u503c\u7684\u6982\u5ff5\u5728\u672c\u6587\u6700\u5f00\u5934). \u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a, \u52a0\u51cf\u4e58\u6570\u5df2\u7ecf\u662f\u6700\u57fa\u7840\u7684\u8fd0\u7b97, \u8981\u8bbe\u8ba1\u7684\u5c3d\u91cf\u7b80\u5355. \u8ba1\u7b97\u673a\u8fa8\u522b\"\u7b26\u53f7\u4f4d\"\u663e\u7136\u4f1a\u8ba9\u8ba1\u7b97\u673a\u7684\u57fa\u7840\u7535\u8def\u8bbe\u8ba1\u53d8\u5f97\u5341\u5206\u590d\u6742! \u4e8e\u662f\u4eba\u4eec\u60f3\u51fa\u4e86\u5c06\u7b26\u53f7\u4f4d\u4e5f\u53c2\u4e0e\u8fd0\u7b97\u7684\u65b9\u6cd5. \u6211\u4eec\u77e5\u9053, \u6839\u636e\u8fd0\u7b97\u6cd5\u5219\u51cf\u53bb\u4e00\u4e2a\u6b63\u6570\u7b49\u4e8e\u52a0\u4e0a\u4e00\u4e2a\u8d1f\u6570, \u5373: 1-1 = 1 + (-1) = 0 , \u6240\u4ee5\u673a\u5668\u53ef\u4ee5\u53ea\u6709\u52a0\u6cd5\u800c\u6ca1\u6709\u51cf\u6cd5, \u8fd9\u6837\u8ba1\u7b97\u673a\u8fd0\u7b97\u7684\u8bbe\u8ba1\u5c31\u66f4\u7b80\u5355\u4e86. \u4e8e\u662f\u4eba\u4eec\u5f00\u59cb\u63a2\u7d22 \u5c06\u7b26\u53f7\u4f4d\u53c2\u4e0e\u8fd0\u7b97, \u5e76\u4e14\u53ea\u4fdd\u7559\u52a0\u6cd5\u7684\u65b9\u6cd5. \u9996\u5148\u6765\u770b\u539f\u7801: \u8ba1\u7b97\u5341\u8fdb\u5236\u7684\u8868\u8fbe\u5f0f: 1-1=0 1 - 1 = 1 + (-1) = [00000001]\u539f + [10000001]\u539f = [10000010]\u539f = -2 \u5982\u679c\u7528\u539f\u7801\u8868\u793a, \u8ba9\u7b26\u53f7\u4f4d\u4e5f\u53c2\u4e0e\u8ba1\u7b97, \u663e\u7136\u5bf9\u4e8e\u51cf\u6cd5\u6765\u8bf4, \u7ed3\u679c\u662f\u4e0d\u6b63\u786e\u7684.\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4f55\u8ba1\u7b97\u673a\u5185\u90e8\u4e0d\u4f7f\u7528\u539f\u7801\u8868\u793a\u4e00\u4e2a\u6570. \u4e3a\u4e86\u89e3\u51b3\u539f\u7801\u505a\u51cf\u6cd5\u7684\u95ee\u9898, \u51fa\u73b0\u4e86\u53cd\u7801: \u8ba1\u7b97\u5341\u8fdb\u5236\u7684\u8868\u8fbe\u5f0f: 1-1=0 1 - 1 = 1 + (-1) = [0000 0001]\u539f + [1000 0001]\u539f= [0000 0001]\u53cd + [1111 1110]\u53cd = [1111 1111]\u53cd = [1000 0000]\u539f = -0 \u53d1\u73b0\u7528\u53cd\u7801\u8ba1\u7b97\u51cf\u6cd5, \u7ed3\u679c\u7684\u771f\u503c\u90e8\u5206\u662f\u6b63\u786e\u7684. \u800c\u552f\u4e00\u7684\u95ee\u9898\u5176\u5b9e\u5c31\u51fa\u73b0\u5728\"0\"\u8fd9\u4e2a\u7279\u6b8a\u7684\u6570\u503c\u4e0a. \u867d\u7136\u4eba\u4eec\u7406\u89e3\u4e0a+0\u548c-0\u662f\u4e00\u6837\u7684, \u4f46\u662f0\u5e26\u7b26\u53f7\u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684. \u800c\u4e14\u4f1a\u6709[0000 0000]\u539f\u548c[1000 0000]\u539f\u4e24\u4e2a\u7f16\u7801\u8868\u793a0. \u4e8e\u662f\u8865\u7801\u7684\u51fa\u73b0, \u89e3\u51b3\u4e860\u7684\u7b26\u53f7\u4ee5\u53ca\u4e24\u4e2a\u7f16\u7801\u7684\u95ee\u9898: 1-1 = 1 + (-1) = [0000 0001]\u539f + [1000 0001]\u539f = [0000 0001]\u8865 + [1111 1111]\u8865 = [0000 0000]\u8865=[0000 0000]\u539f \u8fd9\u68370\u7528[0000 0000]\u8868\u793a, \u800c\u4ee5\u524d\u51fa\u73b0\u95ee\u9898\u7684-0\u5219\u4e0d\u5b58\u5728\u4e86.\u800c\u4e14\u53ef\u4ee5\u7528[1000 0000]\u8868\u793a-128: (-1) + (-127) = [1000 0001]\u539f + [1111 1111]\u539f = [1111 1111]\u8865 + [1000 0001]\u8865 = [1000 0000]\u8865 -1-127\u7684\u7ed3\u679c\u5e94\u8be5\u662f-128, \u5728\u7528\u8865\u7801\u8fd0\u7b97\u7684\u7ed3\u679c\u4e2d, [1000 0000]\u8865 \u5c31\u662f-128. \u4f46\u662f\u6ce8\u610f\u56e0\u4e3a\u5b9e\u9645\u4e0a\u662f\u4f7f\u7528\u4ee5\u524d\u7684-0\u7684\u8865\u7801\u6765\u8868\u793a-128, \u6240\u4ee5-128\u5e76\u6ca1\u6709\u539f\u7801\u548c\u53cd\u7801\u8868\u793a.(\u5bf9-128\u7684\u8865\u7801\u8868\u793a[1000 0000]\u8865\u7b97\u51fa\u6765\u7684\u539f\u7801\u662f[0000 0000]\u539f, \u8fd9\u662f\u4e0d\u6b63\u786e\u7684) \u4f7f\u7528\u8865\u7801, \u4e0d\u4ec5\u4ec5\u4fee\u590d\u4e860\u7684\u7b26\u53f7\u4ee5\u53ca\u5b58\u5728\u4e24\u4e2a\u7f16\u7801\u7684\u95ee\u9898, \u800c\u4e14\u8fd8\u80fd\u591f\u591a\u8868\u793a\u4e00\u4e2a\u6700\u4f4e\u6570. \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e488\u4f4d\u4e8c\u8fdb\u5236, \u4f7f\u7528\u539f\u7801\u6216\u53cd\u7801\u8868\u793a\u7684\u8303\u56f4\u4e3a[-127, +127], \u800c\u4f7f\u7528\u8865\u7801\u8868\u793a\u7684\u8303\u56f4\u4e3a[-128, 127]. \u56e0\u4e3a\u673a\u5668\u4f7f\u7528\u8865\u7801, \u6240\u4ee5\u5bf9\u4e8e\u7f16\u7a0b\u4e2d\u5e38\u7528\u5230\u768432\u4f4dint\u7c7b\u578b, \u53ef\u4ee5\u8868\u793a\u8303\u56f4\u662f: [-231, 231-1] \u56e0\u4e3a\u7b2c\u4e00\u4f4d\u8868\u793a\u7684\u662f\u7b26\u53f7\u4f4d.\u800c\u4f7f\u7528\u8865\u7801\u8868\u793a\u65f6\u53c8\u53ef\u4ee5\u591a\u4fdd\u5b58\u4e00\u4e2a\u6700\u5c0f\u503c.","title":"\u5728\u5f00\u59cb\u6df1\u5165\u5b66\u4e60\u524d, \u6211\u7684\u5b66\u4e60\u5efa\u8bae\u662f\u5148\"\u6b7b\u8bb0\u786c\u80cc\"\u4e0a\u9762\u7684\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u7684\u8868\u793a\u65b9\u5f0f\u4ee5\u53ca\u8ba1\u7b97\u65b9\u6cd5."},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5lowbitx-x-x-x-x-1","text":"lowbit \u8981\u7684\u662f\u4f60\u4ece\u672b\u5c3e\u5f00\u59cb\u7b2c1\u4e2a 1(\u5176\u4ed6\u4f4d\u7f6e\u90fd\u662f0) \u6240\u4ee3\u8868\u7684\u503c","title":"5.lowbit(x) = x &amp; (-x) == x &amp; (~x + 1)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#6x-x-0","text":"","title":"6.x ^ x = 0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#xor","text":"","title":"\u5f02\u6216XOR\u7684\u7279\u70b9"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3_1","text":"","title":"\u6309\u4f4d\u5f02\u6216\u76843\u4e2a\u7279\u70b9:"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1-000011-0","text":"","title":"(1) 0^0=0,0^1=1  0\u5f02\u6216\u4efb\u4f55\u6570\uff1d\u4efb\u4f55\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2-101110-1-","text":"","title":"(2) 1^0=1,1^1=0  1\u5f02\u6216\u4efb\u4f55\u6570\uff0d\u4efb\u4f55\u6570\u53d6\u53cd"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3-0","text":"","title":"(3) \u4efb\u4f55\u6570\u5f02\u6216\u81ea\u5df1\uff1d\u628a\u81ea\u5df1\u7f6e0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_10","text":"","title":"\u6309\u4f4d\u5f02\u6216\u7684\u51e0\u4e2a\u5e38\u89c1\u7528\u9014:"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1_1","text":"\u200b \u4f8b\u5982\u5bf9\u657010100001\u7684\u7b2c2\u4f4d\u548c\u7b2c3\u4f4d\u7ffb\u8f6c\uff0c\u5219\u53ef\u4ee5\u5c06\u8be5\u6570\u4e0e00000110\u8fdb\u884c\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u3002 \u3000\u3000\u3000\u3000\u3000 10100001^00000110 = 10100111","title":"(1) \u4f7f\u67d0\u4e9b\u7279\u5b9a\u7684\u4f4d\u7ffb\u8f6c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2_1","text":"\u200b \u4f8b\u5982\u4ea4\u6362\u4e24\u4e2a\u6574\u6570a=10100001\uff0cb=00000110\u7684\u503c\uff0c\u53ef\u901a\u8fc7\u4e0b\u5217\u8bed\u53e5\u5b9e\u73b0\uff1a \u3000\u3000\u3000\u3000a = a^b\uff1b \u3000\u3000//a=10100111 \u3000\u3000\u3000\u3000b = b^a\uff1b \u3000\u3000//b=10100001 \u3000\u3000\u3000\u3000a = a^b\uff1b \u3000\u3000//a=00000110","title":"(2) \u5b9e\u73b0\u4e24\u4e2a\u503c\u7684\u4ea4\u6362\uff0c\u800c\u4e0d\u5fc5\u4f7f\u7528\u4e34\u65f6\u53d8\u91cf\u3002"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3_2","text":"\u4e8c\u8fdb\u5236\u6570\u4e2d\u76841\u7684\u4e2a\u6570\u7684\u5947\u5076\u6027: \u5982\u679c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e2d\u76841\u7684\u4e2a\u6570\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u6bcf\u4e00\u4f4d\u6570\u7d2f\u6b21xor\u8fd4\u56de1\uff1b\u5982\u679c\u6bcf\u4e00\u4f4d\u6570\u7d2f\u6b21xor\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u8fd4\u56de0\u3002","title":"(3) \u5f02\u6216\u538b\u7f29\u5947\u5076\u6027\u4fe1\u606f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4-abxor1","text":"* (a\u76841s - b\u76841s) & 1 == 1 --> \u7ed3\u679c\u4e2d1s\u4e3a\u5947\u6570 * (a\u76841s - b\u76841s) & 1 == 0 --> \u7ed3\u679c\u4e2d1s\u4e3a\u5076\u6570","title":"(4) \u4e24\u6570a\u548cb\u7684xor\u8fd0\u7b97\u7ed3\u679c\uff08\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u4e2d1\u7684\u4e2a\u6570\u7684\u5947\u5076\u6027"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_11","text":"\u8bbe\u60f3\u4e00\u672c\u82f1\u8bed\u5b57\u5178\u91cc\u7684\u5355\u8bcd\uff0c\u54ea\u4e2a\u5728\u524d\u54ea\u4e2a\u5728\u540e\uff1f \u663e\u7136\u7684\u505a\u6cd5\u662f\u5148\u6309\u7167\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u3001\u4ee5 a\u3001b\u3001c\u2026\u2026z \u7684\u987a\u5e8f\u6392\u5217\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u4e00\u6837\uff0c\u90a3\u4e48\u6bd4\u8f83\u7b2c\u4e8c\u4e2a\u3001\u7b2c\u4e09\u4e2a\u4e43\u81f3\u540e\u9762\u7684\u5b57\u6bcd\u3002\u5982\u679c\u6bd4\u5230\u6700\u540e\u4e24\u4e2a\u5355\u8bcd\u4e0d\u4e00\u6837\u957f\uff08\u6bd4\u5982\uff0csigh \u548c sight\uff09\uff0c\u90a3\u4e48\u628a\u77ed\u8005\u6392\u5728\u524d\u3002 --- \u5f62\u5f0f\u5b9a\u4e49 \u7ed9\u5b9a\u4e24\u4e2a\u504f\u5e8f\u96c6A\u548cB,(a,b)\u548c(a\u2032,b\u2032)\u5c5e\u4e8e\u7b1b\u5361\u5c14\u79ef A \u00d7 B\uff0c\u5219\u5b57\u5178\u5e8f\u5b9a\u4e49\u4e3a (a,b) \u2264 (a\u2032,b\u2032) \u5f53\u4e14\u4ec5\u5f53 a < a\u2032 \u6216 (a = a\u2032 \u4e14 b \u2264 b\u2032). \u7ed3\u679c\u662f\u504f\u5e8f\u3002\u5982\u679cA\u548cB\u662f\u5168\u5e8f, \u90a3\u4e48\u7ed3\u679c\u4e5f\u662f\u5168\u5e8f\u3002","title":"\u5b57\u5178\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_12","text":"sorted(intervals, key=lambda x: (x[0], x[1])) \u56de\u6587\u95ee\u9898 manacher\u7b97\u6cd5 def manacher(S): \"\"\" \u56de\u6587\u95ee\u9898\u4e09\u79cd\u89e3\u6cd5\uff1a 1.\u4e2d\u5fc3\u6269\u6563\u6cd5 2.DP 3.manacher\u7b97\u6cd5: O(n) \u672c\u51fd\u6570\u8fd4\u56de\u6700\u5927\u56de\u6587\u5b50\u5b57\u7b26\u4e32 \"\"\" # 1.\u89e3\u51b3\u957f\u5ea6\u5947\u5076\u6027\u5e26\u6765\u7684\u5bf9\u79f0\u8f74\u4f4d\u7f6e\u95ee\u9898 # \u5176\u4e2d\u9996\u5c3e\u7684\u4f5c\u7528\u662f\u4e2d\u5fc3\u6269\u6563\u7684\u65f6\u5019\u9632\u6b62\u7d22\u5f15\u8d8a\u754c A = '^#' + '#'.join(S) + '#$' # 2.\u8f85\u52a9\u6570\u7ec4LEN\uff0c\u5b58\u50a8\u7684\u662f\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u534a\u5f84(**\u4e0d\u5305\u62eci\u8fd9\u4e2a\u5143\u7d20) # LEN\u6570\u7ec4\u6027\u8d28: LEN[i]\u5c31\u662f\u8be5\u56de\u6587\u5b50\u4e32\u5728\u539f\u5b57\u7b26\u4e32S\u4e2d\u7684\u957f\u5ea6 LEN = [0] * len(A) # 3.\u8bbe\u7f6e\u4e24\u4e2a\u53d8\u91cf\uff0cright \u548c center \u3002right \u4ee3\u8868\u4ee5 center \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u53f3\u8fb9\u754c\uff0c # \u4e5f\u5c31\u662fright = center + LEN[center] - 1\u3002 center = right = 0 # 4.\u53bb\u6389\u9996\u5c3e\u4f9d\u6b21\u904d\u5386A\u6570\u7ec4\u5143\u7d20 for i in range(1, len(A) - 1): # 5.i <= right, j\u548ci\u5173\u4e8e\u4f4d\u7f6ecenter\u5bf9\u79f0, \u4ee5j\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u4e00\u5b9a\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5185\u90e8, # LEN[i]=LEN[j] # i > right, \u4ee5i\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5916\u90e8\uff0c # \u800c\u5927\u4e8eright\u7684\u90e8\u5206\u6211\u4eec\u8fd8\u6ca1\u6709\u8fdb\u884c\u5339\u914d\uff0c\u6240\u4ee5\u8981\u4eceright+1\u4f4d\u7f6e\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u5339\u914d\uff0c\u76f4\u5230\u53d1\u751f\u5931\u914d\uff0c # \u4ece\u800c\u66f4\u65b0P\u548c\u5bf9\u5e94\u7684po\u4ee5\u53caLen[i]\u3002 if i < right: LEN[i] = min(right - i, LEN[2 * center - i]) else: LEN[i] = 0 # 6.\u5947\u6570\u7684\u4e2d\u5fc3\u6269\u6563\u6cd5 while A[i + LEN[i] + 1] == A[i - LEN[i] - 1]: LEN[i] += 1 # 7..\u5982\u679ci\u7684\u53f3\u8fb9\u754c > \u539f\u6765\u7684\u53f3\u8fb9\u754c\uff0c\u66f4\u65b0 if i + LEN[i] > right: center, right = i, i + LEN[i] # print('\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e32', A) # print('\u8f85\u52a9\u534a\u5f84\u6570\u7ec4', LEN) maxLen, centerIndex = max((n, i) for i, n in enumerate(LEN)) print((maxLen, centerIndex)) # return maxLen \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32\u957f\u5ea6 # return s[(centerIndex - maxLen)//2: (centerIndex + maxLen)//2] \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32 # return sum([(1+x)//2 for x in LEN]) \u6c42\u56de\u6587\u5b50\u4e32\u6570\u91cf return sum([(1+x)//2 for x in LEN])","title":"\u591a\u5143\u7d20\u6309\u5b57\u5178\u5e8f\u6392\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#pythonset-c","text":"\u987a\u5e8f\u5e76\u4e0d\u4fdd\u8bc1\uff0c\u8fd9\u662f\u5177\u4f53\u5b9e\u73b0\u7684\u95ee\u9898\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u5728\u4f7f\u7528set\u7684\u65f6\u5019\uff0c\u8bf7\u628a\u5b83\u8ba4\u4e3a\u662f\u6570\u5b66\u4e0a\u7684\u96c6\u5408\uff0c\u65e0\u5e8f\uff0c\u4e0d\u8981\u5728\u5b9e\u73b0set\u7684\u65f6\u5019\u5047\u5b9a\u5176\u6709\u987a\u5e8f\uff0c\u53ef\u80fd\u4f1a\u9519","title":"Python\u4e2dset\u503c\u4f1a\u81ea\u52a8\u6392\u5e8f\u4f46\u5e76\u4e0d\u4fdd\u8bc1 \u6700\u597d\u4e0d\u8981\u5229\u7528\uff08\u7d22\u5f15\u65e0\u5e8f\uff09 C++\u4e5f\u662f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_13","text":"\u6b27\u62c9\u8def\u5f84\u662f\u4e00\u4e2a\u5728\u56fe\u4e2d\u6240\u6709\u8fb9\u5747\u53ea\u8bbf\u95ee\u4e00\u6b21\u7684\u8def\u5f84 \u6b27\u62c9\u56de\u8def\u662f\u8d77\u59cb\u70b9\u548c\u7ec8\u6b62\u70b9\u662f\u4e00\u4e2a\u7684\u6b27\u62c9\u8def\u5f84 \u6027\u8d28\uff1a \u5982\u679c\u5df2\u77e5\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4ece\u4efb\u4f55\u4e00\u70b9\u5f00\u59cb\u6b27\u62c9\u56de\u8def","title":"\u6b27\u62c9\u8def\u5f84 \u6b27\u62c9\u56de\u8def"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#java-python","text":"Java: -1 / 2 == 0; -3 / 2 == -1 python3: -1 // 2 == -1; -3 // 2 == -2","title":"Java python \u8d1f\u6570\u9664\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_14","text":"\u4e00\u822cACM\u6216\u8005\u7b14\u8bd5\u9898\u7684\u65f6\u95f4\u9650\u5236\u662f1\u79d2\u62162\u79d2\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cC++\u4ee3\u7801\u4e2d\u7684\u64cd\u4f5c\u6b21\u6570\u63a7\u5236\u5728 $10^7$ \u4e3a\u6700\u4f73\u3002 \u4e0b\u9762\u7ed9\u51fa\u5728\u4e0d\u540c\u6570\u636e\u8303\u56f4\u4e0b\uff0c\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7b97\u6cd5\u8be5\u5982\u4f55\u9009\u62e9\uff1a $n \\le 30$, \u6307\u6570\u7ea7\u522b, dfs+\u526a\u679d\uff0c\u72b6\u6001\u538b\u7f29dp $n \\le 100$ => $O(n^3)$\uff0cfloyd\uff0cdp $n \\le 1000$ => $O(n^2)$\uff0c$O(n^2logn)$\uff0cdp\uff0c\u4e8c\u5206 $n \\le 10000$ => $O(n * \\sqrt n)$\uff0c\u5757\u72b6\u94fe\u8868 $n \\le 100000$ => $O(nlogn)$ => \u5404\u79cdsort\uff0c\u7ebf\u6bb5\u6811\u3001\u6811\u72b6\u6570\u7ec4\u3001set/map\u3001heap\u3001dijkstra+heap\u3001spfa\u3001\u6c42\u51f8\u5305\u3001\u6c42\u534a\u5e73\u9762\u4ea4\u3001\u4e8c\u5206 $n \\le 1000000$ => $O(n)$, \u4ee5\u53ca\u5e38\u6570\u8f83\u5c0f\u7684 $O(nlogn)$ \u7b97\u6cd5 => hash\u3001\u53cc\u6307\u9488\u626b\u63cf\u3001kmp\u3001AC\u81ea\u52a8\u673a\uff0c\u5e38\u6570\u6bd4\u8f83\u5c0f\u7684 $O(nlogn)$ \u7684\u505a\u6cd5\uff1asort\u3001\u6811\u72b6\u6570\u7ec4\u3001heap\u3001dijkstra\u3001spfa $n \\le 10000000$ => $O(n)$\uff0c\u53cc\u6307\u9488\u626b\u63cf\u3001kmp\u3001AC\u81ea\u52a8\u673a\u3001\u7ebf\u6027\u7b5b\u7d20\u6570 $n \\le 10^9$ => $O(\\sqrt n)$\uff0c\u5224\u65ad\u8d28\u6570 $n \\le 10^{18}$ => $O(logn)$\uff0c\u6700\u5927\u516c\u7ea6\u6570","title":"\u7531\u6570\u636e\u8303\u56f4\u53cd\u63a8\u7b97\u6cd5\u590d\u6742\u5ea6\u4ee5\u53ca\u7b97\u6cd5\u5185\u5bb9"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_15","text":"","title":"\u6570\u5b66"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1_2","text":"","title":"1. \u4e24\u6570\u4e4b\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#11","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u4f60\u4e0d\u80fd\u91cd\u590d\u5229\u7528\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u540c\u6837\u7684\u5143\u7d20\u3002 \u793a\u4f8b: \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9 \u56e0\u4e3a nums[0] + nums[1] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [0, 1]","title":"1.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#12-hash","text":"class Solution(object): def twoSum(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: List[int] Hash \"\"\" dic = dict() for i, num in enumerate(nums): diff = target - num if diff in dic: return [dic[diff], i] else: dic[num] = i","title":"1.2 \u89e3\u6cd5 Hash"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7","text":"","title":"7.\u6574\u6570\u53cd\u8f6c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#71","text":"\u7ed9\u51fa\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6574\u6570\u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002 \u793a\u4f8b 1: \u8f93\u5165: 123 \u8f93\u51fa: 321 \u793a\u4f8b 2: \u8f93\u5165: -123 \u8f93\u51fa: -321 \u793a\u4f8b 3: \u8f93\u5165: 120 \u8f93\u51fa: 21 \u6ce8\u610f: \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8\u5f97\u4e0b 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5219\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u2212231, 231 \u2212 1]\u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u6ea2\u51fa\u90a3\u4e48\u5c31\u8fd4\u56de 0\u3002","title":"7.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#72","text":"\u6ce8\u610f\uff1a-2147483648\u7684\u76f8\u53cd\u6570\u6ea2\u51fa\u4e86","title":"7.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#721","text":"#include <limits.h> class Solution { public: int reverse(int x) { int ans = 0; int sign = x < 0 ? - 1: 1; if(x == INT_MIN){ // -2147483648 \u53cd\u8f6c\u6ea2\u51fa return 0; } x = abs(x); while(x > 0){ // 2**31(2 << 30): 2147483648 if(ans == INT_MAX / 10){ if(x % 10 > 7){ return 0; } }else if(ans > INT_MAX / 10){ return 0; } ans = ans * 10 + x % 10; x /= 10; } return ans * sign; } }; class Solution { public: int reverse(int x) { int sign = x < 0 ? - 1: 1; if(x == INT_MIN){ // -2147483648 \u53cd\u8f6c\u6ea2\u51fa return 0; } x = abs(x); int res = 0; while(x > 0){ if(res > INT_MAX / 10 || res * 10 > (INT_MAX - x % 10)){ return 0; } res = res * 10 + x % 10; x /= 10; } return sign * res; } };","title":"7.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#722","text":"class Solution { public int reverse(int x) { int ans = 0; while(x != 0){ int tail = x % 10; int newAns = ans * 10 + tail; // If overflow exists, the new result will not equal previous one. if((newAns - tail) / 10 != ans){ return 0; } ans = newAns; x = x / 10; } return ans; } }","title":"7.2.2 \u65b9\u6cd5\u4e8c \u4e0d\u63a8\u8350"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#29","text":"","title":"29.\u4e24\u6570\u76f8\u9664"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_16","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570 dividend \u548c\u9664\u6570 divisor\u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002 \u8fd4\u56de\u88ab\u9664\u6570 dividend \u9664\u4ee5\u9664\u6570 divisor \u5f97\u5230\u7684\u5546\u3002 \u793a\u4f8b 1: \u8f93\u5165: dividend = 10, divisor = 3 \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: dividend = 7, divisor = -3 \u8f93\u51fa: -2 \u8bf4\u660e: \u88ab\u9664\u6570\u548c\u9664\u6570\u5747\u4e3a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002 \u9664\u6570\u4e0d\u4e3a 0\u3002 \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u2212231, 231 \u2212 1]\u3002\u672c\u9898\u4e2d\uff0c\u5982\u679c\u9664\u6cd5\u7ed3\u679c\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 231 \u2212 1\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_17","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_18","text":"class Solution(object): def divide(self, dividend, divisor): \"\"\" \u5947\u601d\u5999\u60f3\uff1a\u628a\u6700\u5c0f\u8d1f\u6570\u8f6c\u4e3a\u6574\u6570\u9700\u8981\u5224\u65ad\u6ea2\u51fa\uff0c\u8fd4\u56de\u6765\u5168\u90e8\u8f6c\u4e3a\u8d1f\u6570\u5904\u7406\u89c4\u907f\u5f00\u8fd9\u4e2a\u95ee\u9898 \"\"\" INT_MIN = (-1 << 31) INT_MAX = ~((-1 << 31) + 1) + 1 if dividend == INT_MIN and divisor == -1: return INT_MAX sign = -1 if (dividend > 0) ^ (divisor > 0) else 1 # \u5168\u90e8\u8f6c\u4e3a\u8d1f\u6570\u4e0d\u7528\u5728\u8fd9\u5224\u65ad\u6ea2\u51fa dvd = 0 - dividend if dividend > 0 else dividend dvs = 0 - divisor if divisor > 0 else divisor ans = 0 while dvd <= dvs: temp = dvs cnt = 1 # todo:\u6ca1\u5224\u65ad\u4e2d\u95f4\u8fc7\u7a0b\u6ea2\u51fa while (temp << 1) >= dvd: temp <<= 1 cnt <<= 1 dvd -= temp ans += cnt return ans * sign","title":"\u89e3\u6cd5\u4e00 \u672a\u5168\u90e8\u8003\u8651\u6ea2\u51fa"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_19","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#50powxn","text":"","title":"50.pow(x,n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_20","text":"\u5b9e\u73b0 pow(x, n) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25 \u8bf4\u660e: -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u2212231, 231 \u2212 1] \u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_21","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_22","text":"\u53ef\u9009memo\u7684\u5de5\u5177: from functools import lru_cache @lru_cache(None) def generate(i, ah, bh, res): class Solution: def myPow(self, x: float, n: int) -> float: \"\"\" \u5206\u6cbb\u6cd5 + \u8bb0\u5fc6\u5316 \u8fb9\u754c \u8d1f\u6570 \"\"\" memo = dict() def helper(x, n): if n == 1: return x if (x, n) in memo: return memo[(x, n)] if n & 1: memo[(x, n)] = helper(x, n // 2) * helper(x, n // 2) * x return memo[(x, n)] else: memo[(x, n)] = helper(x, n // 2) * helper(x, n // 2) return memo[(x, n)] if n == 0: return 1 if x == 0: return 0 if n < 0: n = -n x = 1 / x return helper(x, n)","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#todo_1","text":"","title":"\u89e3\u6cd5\u4e8c \u5faa\u73af\u6cd5todo"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#69-x","text":"","title":"69. x \u7684\u5e73\u65b9\u6839"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#691","text":"\u5b9e\u73b0 int sqrt(int x) \u51fd\u6570\u3002 \u8ba1\u7b97\u5e76\u8fd4\u56de x \u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d x \u662f\u975e\u8d1f\u6574\u6570\u3002 \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002 \u793a\u4f8b 1: \u8f93\u5165: 4 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: 8 \u8f93\u51fa: 2 \u8bf4\u660e: 8 \u7684\u5e73\u65b9\u6839\u662f 2.82842..., \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002","title":"69.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#692","text":"","title":"69.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#6921","text":"\u5173\u952e: \u5982\u4f55\u627e\u5230\u4e00\u4e2ax\u7684\u6574\u6570\u5e73\u65b9\u6839, \u7279\u70b9: y * y <= x < (y + 1)*(y + 1) class Solution: def mySqrt(self, x: int) -> int: \"\"\"\u4e8c\u5206\u67e5\u627e \u4fdd\u7559\u6574\u6570 \u5047\u8bbe\u7ed3\u679c\u4e3ay y * y <= x < (y + 1) * (y + 1) \"\"\" low, high = 0, x//2 + 1 while low <= high: mid = (low + high) >> 1 if mid * mid == x: return mid elif mid * mid < x: if (mid + 1) * (mid + 1) > x: return mid else: low = mid + 1 else: high = mid - 1 69.2.2 \u65b9\u6cd5\u4e8c \u725b\u987f\u8fed\u4ee3\u6cd5 def mySqrt(self, n: int) -> int: r = n while r*r > n: r = (r + n//r) // 2 return r","title":"69.2.1 \u65b9\u6cd5\u4e00 \u627e\u89c4\u5f8b[\u4e8c\u5206]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#693-x-2-x-1-not-x-2","text":"","title":"69.3 \u53f3\u79fb\u7684\u7528\u6cd5 x // 2 == x &gt;&gt; 1 [not] x &gt;&gt; 2"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#166","text":"","title":"166.\u5206\u6570\u5230\u5c0f\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_23","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u5206\u6570\u7684\u5206\u5b50 numerator \u548c\u5206\u6bcd denominator\uff0c\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u5c0f\u6570\u3002 \u5982\u679c\u5c0f\u6570\u90e8\u5206\u4e3a\u5faa\u73af\u5c0f\u6570\uff0c\u5219\u5c06\u5faa\u73af\u7684\u90e8\u5206\u62ec\u5728\u62ec\u53f7\u5185\u3002 \u793a\u4f8b 1: \u8f93\u5165: numerator = 1, denominator = 2 \u8f93\u51fa: \"0.5\" \u793a\u4f8b 2: \u8f93\u5165: numerator = 2, denominator = 1 \u8f93\u51fa: \"2\" \u793a\u4f8b 3: \u8f93\u5165: numerator = 2, denominator = 3 \u8f93\u51fa: \"0.(6)","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_24","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_25","text":"class Solution { // \u8fd9\u9898\u6ca1\u610f\u601d public String fractionToDecimal(int numerator, int denominator) { if (numerator == 0) { return \"0\"; } StringBuilder fraction = new StringBuilder(); // If either one is negative (not both) if (numerator < 0 ^ denominator < 0) { fraction.append(\"-\"); } // Convert to Long or else abs(-2147483648) overflows long dividend = Math.abs(Long.valueOf(numerator)); long divisor = Math.abs(Long.valueOf(denominator)); fraction.append(String.valueOf(dividend / divisor)); long remainder = dividend % divisor; if (remainder == 0) { return fraction.toString(); } fraction.append(\".\"); Map<Long, Integer> map = new HashMap<>(); while (remainder != 0) { if (map.containsKey(remainder)) { fraction.insert(map.get(remainder), \"(\"); fraction.append(\")\"); break; } map.put(remainder, fraction.length()); remainder *= 10; fraction.append(String.valueOf(remainder / divisor)); remainder %= divisor; } return fraction.toString(); } }","title":"\u89e3\u6cd5\u4e00  \u957f\u9664\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_26","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#204","text":"","title":"204.\u8ba1\u7b97\u8d28\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2041","text":"\u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570 n \u7684\u8d28\u6570\u7684\u6570\u91cf\u3002 \u793a\u4f8b: \u8f93\u5165: 10 \u8f93\u51fa: 4 \u89e3\u91ca: \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002","title":"204.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2042","text":"","title":"204.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#20421","text":"class Solution { public int countPrimes(int n) { int ans = 0; for(int i = 2; i < n; i++){ ans += isPrime(i) ? 1 : 0; } return ans; } public boolean isPrime(int n){ if(n == 2 || n == 3){ return true; } for(int i = 2; i <= Math.sqrt(n); i++){ if(n % i == 0){ return false; } } return true; } }","title":"204.2.1 \u65b9\u6cd5\u4e00 \u5b9a\u4e49\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#20422","text":"\u8fd9\u9898\u641c\u5230\u4e00\u4e2a\u975e\u5e38\u725b\u903c\u7684\u7b97\u6cd5,\u53eb\u505a\u5384\u62c9\u591a\u585e\u7b5b\u6cd5. \u6bd4\u5982\u8bf4\u6c4220\u4ee5\u5185\u8d28\u6570\u7684\u4e2a\u6570,\u9996\u51480,1\u4e0d\u662f\u8d28\u6570.2\u662f\u7b2c\u4e00\u4e2a\u8d28\u6570,\u7136\u540e\u628a20\u4ee5\u5185\u6240\u67092\u7684\u500d\u6570\u5212\u53bb.2\u540e\u9762\u7d27\u8ddf\u7684\u6570\u5373\u4e3a\u4e0b\u4e00\u4e2a\u8d28\u65703,\u7136\u540e\u628a3\u6240\u6709\u7684\u500d\u6570\u5212\u53bb.3\u540e\u9762\u7d27\u8ddf\u7684\u6570\u5373\u4e3a\u4e0b\u4e00\u4e2a\u8d28\u65705,\u518d\u628a5\u6240\u6709\u7684\u500d\u6570\u5212\u53bb.\u4ee5\u6b64\u7c7b\u63a8. \u4ee3\u7801\u7684\u5b9e\u73b0\u4e0a\u7528\u4e86\u975e\u5e38\u597d\u7684\u6280\u5de7: \u5728\u4e0a\u9762\u904d\u5386\u7d22\u5f15\u7684\u65f6\u5019\u7528\u5230\u4e86\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u6280\u5de7. \u5373i\u662f\u4ece(2,int(n* 0.5)+1)\u800c\u975e(2,n).\u8fd9\u4e2a\u6280\u5de7\u662f\u53ef\u4ee5\u9a8c\u8bc1\u7684,\u6bd4\u5982\u8bf4\u6c429\u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570,\u90a3\u4e48\u53ea\u8981\u5212\u6389sqrt(9)\u4ee5\u5185\u7684\u8d28\u6570\u500d\u6570,\u5269\u4e0b\u7684\u5373\u5168\u4e3a\u8d28\u6570. \u6240\u4ee5\u5728\u5212\u53bb\u500d\u6570\u7684\u65f6\u5019\u4e5f\u662f\u4ecei i\u5f00\u59cb\u5212\u6389,\u800c\u4e0d\u662fi+i. class Solution { public int countPrimes(int n) { if(n <= 2){ return 0; }else{ // \u751f\u6210\u4e2a\u503c\u5168\u90e8\u4e3a1\u7684\u5217\u8868 int[] arr = new int[n+1]; Arrays.fill(arr, 1); arr[0] = 0; arr[1] = 0; //\u56e0\u4e3a0\u548c1\u4e0d\u662f\u8d28\u6570,\u6240\u4ee5\u5217\u8868\u7684\u524d\u4e24\u4e2a\u4f4d\u7f6e\u8d4b\u503c\u4e3a0 output[0],output[1] = 0,0 // \u6b64\u65f6\u4eceindex = 2\u5f00\u59cb\u904d\u5386,output[2]==1,\u5373\u8868\u660e\u7b2c\u4e00\u4e2a\u8d28\u6570\u4e3a2,\u7136\u540e\u5c062\u7684\u500d\u6570\u5bf9\u5e94\u7684\u7d22\u5f15 //\u5168\u90e8\u8d4b\u503c\u4e3a0. \u6b64\u65f6output[3] == 1,\u5373\u8868\u660e\u4e0b\u4e00\u4e2a\u8d28\u6570\u4e3a3,\u540c\u6837\u5212\u53bb3\u7684\u500d\u6570.\u4ee5\u6b64\u7c7b\u63a8. for(int i = 2; i <= Math.sqrt(n); i++){ if(arr[i] == 1){ for(int j = i * i; j < n; j += i){ arr[j] = 0; } } } int sum = 0; for(int i = 0; i < n; i++){ if(arr[i] == 1){ sum++; } } return sum; } } } class Solution { public int countPrimes(int n) { boolean[] notPrime = new boolean[n]; int count = 0; for(int i = 2; i < n; i++){ if(notPrime[i] == false){ count++; for(int j = 2; j * i < n; j++){ notPrime[i*j] = true; } } } return count; } }","title":"204.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#241","text":"","title":"241. \u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2411","text":"\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u4e3a\u8868\u8fbe\u5f0f\u6dfb\u52a0\u62ec\u53f7\uff0c\u6539\u53d8\u5176\u8fd0\u7b97\u4f18\u5148\u7ea7\u4ee5\u6c42\u51fa\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4f60\u9700\u8981\u7ed9\u51fa\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u7684\u7ed3\u679c\u3002\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u542b + , - \u4ee5\u53ca * \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"2-1-1\" \u8f93\u51fa: [0, 2] \u89e3\u91ca: ((2-1)-1) = 0 (2-(1-1)) = 2 \u793a\u4f8b 2: \u8f93\u5165: \"2*3-4*5\" \u8f93\u51fa: [-34, -14, -10, -10, 10] \u89e3\u91ca: (2*(3-(4*5))) = -34 ((2*3)-(4*5)) = -14 ((2*(3-4))*5) = -10 (2*((3-4)*5)) = -10 (((2*3)-4)*5) = 10","title":"241.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2412","text":"","title":"241.2 \u89e3\u6cd5 \u5206\u800c\u6cbb\u4e4b"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#24121","text":"class Solution(object): def diffWaysToCompute(self, input): \"\"\" :type input: str :rtype: List[int] Divide and Conquer Divide Conquer Combine* \"\"\" # \u8fb9\u754c\u6761\u4ef6 if input.isnumeric(): return [int(input)] result = [] for i, item in enumerate(input): left_res = [] right_res = [] if item in set(['*', '+', '-']): left = input[:i] right = input[i+1:] if left.isnumeric(): left_res.append(int(left)) else: left_res.extend(self.diffWaysToCompute(left)) if right.isnumeric(): right_res.append(int(right)) else: right_res.extend(self.diffWaysToCompute(right)) for l in left_res: for r in right_res: if '*' == item: result.append(l * r) elif '+' == item: result.append(l + r) elif '-' == item: result.append(l - r) return result","title":"241.2.1 \u65b9\u6cd5\u4e00 \u5206\u800c\u6cbb\u4e4b"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#24122-or","text":"def diffWaysToCompute(self, input): # \u4e0b\u9762\u7684or\u5229\u7528\u4e86\u77ed\u8def\u903b\u8f91 return [a+b if c == '+' else a-b if c == '-' else a*b for i, c in enumerate(input) if c in '+-*' for a in self.diffWaysToCompute(input[:i]) for b in self.diffWaysToCompute(input[i+1:])] or [int(input)]","title":"241.2.2 \u65b9\u6cd5\u4e8c  or \u77ed\u8def\u903b\u8f91\u66ff\u6362\u6761\u4ef6\u5206\u652f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#24123-eval","text":"def diffWaysToCompute(self, input): return [eval(`a`+c+`b`) for i, c in enumerate(input) if c in '+-*' for a in self.diffWaysToCompute(input[:i]) for b in self.diffWaysToCompute(input[i+1:])] or [int(input)]","title":"241.2.3 \u65b9\u6cd5\u4e09 eval: \u628a\u5b57\u7b26\u4e32\u5f53\u505a\u8868\u8fbe\u5f0f\u6267\u884c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#258","text":"","title":"[\u5f52\u7eb3\u516c\u5f0f]258.\u5404\u4f4d\u76f8\u52a0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1_3","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 num \uff0c\u53cd\u590d\u5c06\u5404\u4e2a\u4f4d\u4e0a\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f4\u5230\u7ed3\u679c\u4e3a\u4e00\u4f4d\u6570\u3002 \u793a\u4f8b: \u8f93\u5165: 38 \u8f93\u51fa: 2 \u89e3\u91ca: \u5404\u4f4d\u76f8\u52a0\u7684\u8fc7\u7a0b\u4e3a\uff1a3 + 8 = 11, 1 + 1 = 2\u3002 \u7531\u4e8e 2 \u662f\u4e00\u4f4d\u6570\uff0c\u6240\u4ee5\u8fd4\u56de 2\u3002 \u8fdb\u9636: \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\uff0c\u4e14\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f","title":"1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2_2","text":"","title":"2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#22","text":"\u5bf9\u4e8e\u57fa\u6570b\uff08\u5341\u8fdb\u5236\u60c5\u51b5b = 10\uff09\uff0c\u6574\u6570\u7684\u6570\u5b57\u6839\u662f\uff1a \u5982\u679cn == 0\uff0c\u5219dr\uff08n\uff09= 0 dr\uff08n\uff09=\uff08b -1\uff09\u5982\u679cn\uff01= 0\u4e14n\uff05\uff08b -1\uff09== 0 dr\uff08n\uff09= n mod\uff08b -1\uff09\u5982\u679cn\uff05\uff08b -1\uff09\uff01= 0 \u8981\u4e48 dr\uff08n\uff09= 1 +\uff08n - 1\uff09\uff059 \u6ce8\u610f\uff0c\u5f53n = 0\u65f6\uff0c\u7531\u4e8e\uff08n -1\uff09\uff059 = -1\uff0c\u8fd4\u56de\u503c\u4e3a\u96f6\uff08\u6b63\u786e\uff09\u3002 \u4ece\u516c\u5f0f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u7684\u7ed3\u679c\u662f\u5468\u671f\u6027\u7684\uff0c\u5468\u671f\uff08b -1\uff09\u3002 \u5c0f\u6570\u7684\u8f93\u51fa\u987a\u5e8f\uff08b = 10\uff09\uff1a \u301c\u8f93\u5165\uff1a0 1 2 3 4 ... \u8f93\u51fa\uff1a0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 .... \u4ece\u6b64\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5176\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662fO\uff081\uff09\u3002 class Solution(object): def addDigits(self, num): \"\"\" :type num: int :rtype: int \"\"\" while(num >= 10): temp = 0 while(num > 0): temp += num % 10 num /= 10 num = temp return num","title":"2.2 \u65b9\u6cd5\u4e8c \u516c\u5f0f \u4e0d\u901a\u7528"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21","text":"class Solution(object): def addDigits(self, num): \"\"\" :type num: int :rtype: int \"\"\" while(num >= 10): sum_val = 0 while(num > 0): sum_val += num % 10 num /= 10 num = sum_val return num","title":"2.1 \u65b9\u6cd5\u4e00 \u8fed\u4ee3\u6cd5 \u3010\u63a8\u8350\u3011"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#263","text":"","title":"263.\u4e11\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1_4","text":"\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684 \u6b63\u6574\u6570 \u3002 \u793a\u4f8b 1: \u8f93\u5165: 6 \u8f93\u51fa: true \u89e3\u91ca: 6 = 2 \u00d7 3 \u793a\u4f8b 2: \u8f93\u5165: 8 \u8f93\u51fa: true \u89e3\u91ca: 8 = 2 \u00d7 2 \u00d7 2 \u793a\u4f8b 3: \u8f93\u5165: 14 \u8f93\u51fa: false \u89e3\u91ca: 14 \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570 7\u3002 \u8bf4\u660e\uff1a 1 \u662f\u4e11\u6570\u3002 \u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4: [\u2212231, 231 \u2212 1]\u3002","title":"1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2_3","text":"","title":"2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21_1","text":"class Solution { public boolean isUgly(int num) { if(num == 1){ return true; } while(num != 0 && num % 2 == 0){ num /= 2; } while(num != 0 && num % 3 == 0){ num /= 3; } while(num != 0 && num % 5 == 0){ num /= 5; } return num == 1; } } if (num > 0) for (int i=2; i<6; i++) while (num % i == 0) num /= i; return num == 1;","title":"2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#264ii","text":"","title":"264.\u4e11\u6570II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_27","text":"\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c n \u4e2a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b: \u8f93\u5165: n = 10 \u8f93\u51fa: 12 \u89e3\u91ca: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002 \u8bf4\u660e: 1 \u662f\u4e11\u6570\u3002 n \u4e0d\u8d85\u8fc71690\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_28","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#on","text":"We have an array k of first n ugly number. We only know, at the beginning, the first one, which is 1. Then k[1] = min( k[0]x2, k[0]x3, k[0]x5). The answer is k[0]x2. So we move 2's pointer to 1. Then we test: k[2] = min( k[1]x2, k[0]x3, k[0]x5). And so on. Be careful about the cases such as 6, in which we need to forward both pointers of 2 and 3. x here is multiplication. class Solution: def nthUglyNumber(self, n: int) -> int: \"\"\" \u4e09\u6307\u9488\u6cd5 \"\"\" res = [1] idx2 = 0 idx3 = 0 idx5 = 0 for i in range(n - 1): res.append(min(res[idx2] * 2, res[idx3] * 3, res[idx5] * 5)) # \u5f53\u547d\u4e2d\u4e0b\u4e00\u4e2a\u4e11\u6570\u65f6\uff0c\u8bf4\u660e\u8be5\u6307\u9488\u6307\u5411\u7684\u4e11\u6570 \u4e58\u4ee5\u5bf9\u5e94\u6743\u91cd\u6240\u5f97\u79ef\u6700\u5c0f\u3002\u6b64\u65f6\uff0c\u6307\u9488\u5e94\u8be5\u6307\u5411\u4e0b\u4e00\u4e2a\u4e11\u6570\u3002 if res[-1] == res[idx2]*2: idx2 += 1 if res[-1] == res[idx3]*3: idx3 += 1 if res[-1] == res[idx5]*5: idx5 += 1 return res[n - 1]","title":"\u89e3\u6cd5\u4e00 \u4e09\u6307\u9488\u6cd5 O(n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#on2","text":"res[0] = 1 \u7136\u540e\u7528res[0]\u4e58\u4ee5{2,3,5}\uff0c\u653e\u8fdb\u6700\u5c0f\u5806\u4e2d\uff0c\u4ece\u5806\u4e2d\u53d6\u51fa\u5806\u9876\uff0c\u5373\u4e3ares[1]\u3002 res[1] = 2 \u7136\u540e\u7528res[1]\u4e58\u4ee5{2,3,5}\uff0c\u653e\u8fdb\u6700\u5c0f\u5806\u4e2d\uff0c\u4ece\u5806\u4e2d\u53d6\u51fa\u5806\u9876\uff0c\u5373\u4e3ares[2]\u3002 \u5faa\u73af\u5230 n \u5373\u53ef\u3002 public int nthUglyNumber(int n) { if(n==1) return 1; PriorityQueue<Long> q = new PriorityQueue(); q.add(1l); for(long i=1; i<n; i++) { long tmp = q.poll(); while(!q.isEmpty() && q.peek()==tmp) tmp = q.poll(); q.add(tmp*2); q.add(tmp*3); q.add(tmp*5); } return q.poll().intValue();","title":"\u89e3\u6cd5\u4e8c \u5806 O(n**2)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#279","text":"","title":"279.\u5b8c\u5168\u5e73\u65b9\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_29","text":"\u7ed9\u5b9a\u6b63\u6574\u6570 n\uff0c\u627e\u5230\u82e5\u5e72\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff08\u6bd4\u5982 1, 4, 9, 16, ...\uff09\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u7b49\u4e8e n\u3002\u4f60\u9700\u8981\u8ba9\u7ec4\u6210\u548c\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u4e2a\u6570\u6700\u5c11\u3002 \u793a\u4f8b 1: \u8f93\u5165: n = 12 \u8f93\u51fa: 3 \u89e3\u91ca: 12 = 4 + 4 + 4. \u793a\u4f8b 2: \u8f93\u5165: n = 13 \u8f93\u51fa: 2 \u89e3\u91ca: 13 = 4 + 9.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_30","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp","text":"class Solution: def numSquares(self, n: int) -> int: dp = [float('inf')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n]","title":"\u89e3\u6cd5\u4e00 DP \u4f1a\u8d85\u65f6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bfs","text":"\u9898\u76ee\u53d8\u5f62 import queue class Solution: def numSquares(self, n): # 1.\u7ec8\u6b62\u6761\u4ef6 if n < 2: return n # 2.\u5b8c\u5168\u5e73\u65b9\u6570\u5217\u8868 square_lst = [] i = 1 while i * i <= n: square_lst.append(i * i) i += 1 # 3.BFS \u4ee5n\u4e3a\u6839 \u4ee5\u6bcf\u4e2a \uff08n - \u5b8c\u5168\u5e73\u65b9\u6570\uff09\u4e3a\u5b50\u7ed3\u70b9 \u4e0d\u65ad\u5411\u4e0b\u904d\u5386 \u76f4\u5230\u67d0\u5b50\u7ed3\u70b9\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570 que = queue.Queue() que.put((n, 0)) while que: num, depth = que.get() for square in square_lst: if square < num: que.put((num - square, depth + 1)) elif square == num: return depth + 1","title":"\u89e3\u6cd5\u4e8c BFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#todo_2","text":"class Solution { private: int is_square(int n) { int sqrt_n = (int)(sqrt(n)); return (sqrt_n*sqrt_n == n); } public: // Based on Lagrange's Four Square theorem, there // are only 4 possible results: 1, 2, 3, 4. int numSquares(int n) { // If n is a perfect square, return 1. if(is_square(n)) { return 1; } // The result is 4 if and only if n can be written in the // form of 4^k*(8*m + 7). Please refer to // Legendre's three-square theorem. while ((n & 3) == 0) // n%4 == 0 { n >>= 2; } if ((n & 7) == 7) // n%8 == 7 { return 4; } // Check whether 2 is the result. int sqrt_n = (int)(sqrt(n)); for(int i = 1; i <= sqrt_n; i++) { if (is_square(n - i*i)) { return 2; } } return 3; } };","title":"\u89e3\u6cd5\u4e09 \u56db\u5e73\u65b9\u548c\u5b9a\u7406 todo:\u8bb2\u89e3"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#338","text":"","title":"338.\u6bd4\u7279\u4f4d\u8ba1\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_31","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 num\u3002\u5bf9\u4e8e 0 \u2264 i \u2264 num \u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57 i \uff0c\u8ba1\u7b97\u5176\u4e8c\u8fdb\u5236\u6570\u4e2d\u7684 1 \u7684\u6570\u76ee\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u6570\u7ec4\u8fd4\u56de\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 \u8f93\u51fa: [0,1,1] \u793a\u4f8b 2: \u8f93\u5165: 5 \u8f93\u51fa: [0,1,1,2,1,2] \u8fdb\u9636: \u7ed9\u51fa\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n*sizeof(integer))\u7684\u89e3\u7b54\u975e\u5e38\u5bb9\u6613\u3002\u4f46\u4f60\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4O(n)\u5185\u7528\u4e00\u8d9f\u626b\u63cf\u505a\u5230\u5417\uff1f \u8981\u6c42\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002 \u4f60\u80fd\u8fdb\u4e00\u6b65\u5b8c\u5584\u89e3\u6cd5\u5417\uff1f\u8981\u6c42\u5728C++\u6216\u4efb\u4f55\u5176\u4ed6\u8bed\u8a00\u4e2d\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u51fd\u6570\uff08\u5982 C++ \u4e2d\u7684 __builtin_popcount\uff09\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_32","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_33","text":"class Solution: def countBits(self, num: int) -> List[int]: \"\"\" \u627e\u89c4\u5f8b \u5076\u6570\u521d\u4e8c\u7ed3\u679c\u76f8\u7b49 \u5947\u6570\u7b49\u4e8e\u524d\u4e00\u4e2a\u5076\u6570\u7ed3\u679c+1 \"\"\" dp = [0] for i in range(1, num + 1): if i % 2: dp.append(dp[i - 1] + 1) else: dp.append(dp[i // 2]) return dp","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_34","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#504","text":"","title":"504. \u4e03\u8fdb\u5236\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5041","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a7\u8fdb\u5236\uff0c\u5e76\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8f93\u51fa\u3002 \u793a\u4f8b 1: \u8f93\u5165: 100 \u8f93\u51fa: \"202\" \u793a\u4f8b 2: \u8f93\u5165: -7 \u8f93\u51fa: \"-10\" \u6ce8\u610f: \u8f93\u5165\u8303\u56f4\u662f [-1e7, 1e7] \u3002","title":"504.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5042","text":"","title":"504.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#50421","text":"def convertTo7(self, num): if num == 0: return '0' n, res = abs(num), '' while n: res = str(n % 7) + res n //= 7 return res if num > 0 else '-' + res","title":"504.2.1 \u65b9\u6cd5\u4e00 \u8fed\u4ee3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#50422","text":"def convertTo7(self, num): if num < 0: return '-' + self.convertTo7(-num) # \u7ec8\u6b62\u6761\u4ef6 if num < 7: return str(num) return self.convertTo7(num // 7) + str(num % 7)","title":"504.2.2 \u65b9\u6cd5\u4e8c \u9012\u5f52\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#866","text":"","title":"866. \u56de\u6587\u7d20\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#8661","text":"\u6c42\u51fa\u5927\u4e8e\u6216\u7b49\u4e8e N \u7684\u6700\u5c0f\u56de\u6587\u7d20\u6570\u3002 \u56de\u987e\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u5927\u4e8e 1\uff0c\u4e14\u5176\u56e0\u6570\u53ea\u6709 1 \u548c\u5b83\u81ea\u8eab\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u662f \u7d20\u6570 \u3002 \u4f8b\u5982\uff0c2\uff0c3\uff0c5\uff0c7\uff0c11 \u4ee5\u53ca 13 \u662f\u7d20\u6570\u3002 \u56de\u987e\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u4ece\u5de6\u5f80\u53f3\u8bfb\u4e0e\u4ece\u53f3\u5f80\u5de6\u8bfb\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u662f \u56de\u6587\u6570\u3002 \u4f8b\u5982\uff0c12321 \u662f\u56de\u6587\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a6 \u8f93\u51fa\uff1a7 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a8 \u8f93\u51fa\uff1a11 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a13 \u8f93\u51fa\uff1a101 \u63d0\u793a\uff1a 1 <= N <= 10^8 \u7b54\u6848\u80af\u5b9a\u5b58\u5728\uff0c\u4e14\u5c0f\u4e8e 2 * 10^8 \u3002","title":"866.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#8662","text":"","title":"866.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#86621","text":"class Solution { public int primePalindrome(int N) { if(N % 2 == 0 && N > 2){ N += 1; } while (true) { if (N == reverse(N) && isPrime(N)) return N; if(N > 2){ N++; } N++; if (10_000_000 < N && N < 100_000_000) N = 100_000_001; } } public boolean isPrime(int N) { if (N < 2) return false; int R = (int) Math.sqrt(N); for (int d = 2; d <= R; ++d) if (N % d == 0) return false; return true; } public int reverse(int N) { int ans = 0; while (N > 0) { ans = 10 * ans + (N % 10); N /= 10; } return ans; } }","title":"866.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1276","text":"","title":"1276.\u4e0d\u6d6a\u8d39\u539f\u6599\u7684\u6c49\u5821\u5236\u4f5c\u65b9\u6848"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_35","text":"\u5723\u8bde\u6d3b\u52a8\u9884\u70ed\u5f00\u59cb\u5566\uff0c\u6c49\u5821\u5e97\u63a8\u51fa\u4e86\u5168\u65b0\u7684\u6c49\u5821\u5957\u9910\u3002\u4e3a\u4e86\u907f\u514d\u6d6a\u8d39\u539f\u6599\uff0c\u8bf7\u4f60\u5e2e\u4ed6\u4eec\u5236\u5b9a\u5408\u9002\u7684\u5236\u4f5c\u8ba1\u5212\u3002 \u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 tomatoSlices \u548c cheeseSlices \uff0c\u5206\u522b\u8868\u793a\u756a\u8304\u7247\u548c\u5976\u916a\u7247\u7684\u6570\u76ee\u3002\u4e0d\u540c\u6c49\u5821\u7684\u539f\u6599\u642d\u914d\u5982\u4e0b\uff1a \u5de8\u65e0\u9738\u6c49\u5821\uff1a 4 \u7247\u756a\u8304\u548c 1 \u7247\u5976\u916a \u5c0f\u7687\u5821\uff1a 2 \u7247\u756a\u8304\u548c 1 \u7247\u5976\u916a \u8bf7\u4f60\u4ee5 [total_jumbo, total_small] \uff08[\u5de8\u65e0\u9738\u6c49\u5821\u603b\u6570\uff0c\u5c0f\u7687\u5821\u603b\u6570]\uff09\u7684\u683c\u5f0f\u8fd4\u56de\u6070\u5f53\u7684\u5236\u4f5c\u65b9\u6848\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u756a\u8304\u7247 tomatoSlices \u548c\u5976\u916a\u7247 cheeseSlices \u7684\u6570\u91cf\u90fd\u662f 0 \u3002 \u5982\u679c\u65e0\u6cd5\u4f7f\u5269\u4e0b\u7684\u756a\u8304\u7247 tomatoSlices \u548c\u5976\u916a\u7247 cheeseSlices \u7684\u6570\u91cf\u4e3a 0 \uff0c\u5c31\u8bf7\u8fd4\u56de [] \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1atomatoSlices = 16, cheeseSlices = 7 \u8f93\u51fa\uff1a[1,6] \u89e3\u91ca\uff1a\u5236\u4f5c 1 \u4e2a\u5de8\u65e0\u9738\u6c49\u5821\u548c 6 \u4e2a\u5c0f\u7687\u5821\u9700\u8981 4*1 + 2*6 = 16 \u7247\u756a\u8304\u548c 1 + 6 = 7 \u7247\u5976\u916a\u3002\u4e0d\u4f1a\u5269\u4e0b\u539f\u6599\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1atomatoSlices = 17, cheeseSlices = 4 \u8f93\u51fa\uff1a[] \u89e3\u91ca\uff1a\u53ea\u5236\u4f5c\u5c0f\u7687\u5821\u548c\u5de8\u65e0\u9738\u6c49\u5821\u65e0\u6cd5\u7528\u5149\u5168\u90e8\u539f\u6599\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1atomatoSlices = 4, cheeseSlices = 17 \u8f93\u51fa\uff1a[] \u89e3\u91ca\uff1a\u5236\u4f5c 1 \u4e2a\u5de8\u65e0\u9738\u6c49\u5821\u4f1a\u5269\u4e0b 16 \u7247\u5976\u916a\uff0c\u5236\u4f5c 2 \u4e2a\u5c0f\u7687\u5821\u4f1a\u5269\u4e0b 15 \u7247\u5976\u916a\u3002 \u793a\u4f8b 4\uff1a \u8f93\u5165\uff1atomatoSlices = 0, cheeseSlices = 0 \u8f93\u51fa\uff1a[0,0] \u793a\u4f8b 5\uff1a \u8f93\u5165\uff1atomatoSlices = 2, cheeseSlices = 1 \u8f93\u51fa\uff1a[0,1] \u63d0\u793a\uff1a 0 <= tomatoSlices <= 10^7 0 <= cheeseSlices <= 10^7","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_36","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_37","text":"class Solution: def numOfBurgers(self, tomatoSlices: int, cheeseSlices: int) -> List[int]: t, c = tomatoSlices, cheeseSlices if t < 2 * c or t > 4 * c: return [] if (t - 2 * c) & 1: return [] tn = (t - 2 * c) >> 1 cn = c - tn return [tn, cn]","title":"\u89e3\u6cd5\u4e00 \u9e21\u5154\u540c\u7b3c\u95ee\u9898"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_38","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_39","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_40","text":"\u5206\u6cbb\u6cd5 \u53cc\u6307\u9488","title":"\u601d\u8def\uff08\u7c7b\u4f3c\u6570\u7ec4\uff09"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3_3","text":"","title":"3.\u65e0\u91cd\u590d\u5b57\u7b26\u4e32\u7684\u6700\u957f\u5b50\u4e32"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#31","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"bbbbb\" \u8f93\u51fa: 1 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002 \u793a\u4f8b 3: \u8f93\u5165: \"pwwkew\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002","title":"3.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#32","text":"","title":"3.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#321-on-2","text":"\u56fa\u5b9a\u9996\u5b57\u7b26 bruce class Solution: def lengthOfLongestSubstring(self, s: str) -> int: max_l = 0 for i in range(len(s)): c_set = set() for j, c in enumerate(s[i:]): if c in c_set: max_l = max(max_l, j) break else: c_set.add(c) max_l = max(max_l, j+1) return max_l","title":"3.2.1 \u65b9\u6cd5\u4e00 O(n ^ 2)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#322-bruce-on-3","text":"public class Solution { public int lengthOfLongestSubstring(String s) { int n = s.length(); int ans = 0; for (int i = 0; i < n; i++) for (int j = i + 1; j <= n; j++) if (allUnique(s, i, j)) ans = Math.max(ans, j - i); return ans; } public boolean allUnique(String s, int start, int end) { Set<Character> set = new HashSet<>(); for (int i = start; i < end; i++) { Character ch = s.charAt(i); if (set.contains(ch)) return false; set.add(ch); } return true; } }","title":"3.2.2 \u65b9\u6cd5\u4e8c Bruce O(n ^ 3)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#323-on","text":"\u66b4\u529b\u6cd5\u975e\u5e38\u7b80\u5355\u3002\u4f46\u5b83\u592a\u6162\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u4f18\u5316\u5b83\u5462\uff1f \u5728\u66b4\u529b\u6cd5\u4e2d\uff0c\u6211\u4eec\u4f1a\u53cd\u590d\u68c0\u67e5\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\u662f\u5426\u542b\u6709\u6709\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u4f46\u8fd9\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\u5982\u679c\u4ece\u7d22\u5f15 i i \u5230 j - 1 j \u22121 \u4e4b\u95f4\u7684\u5b50\u5b57\u7b26\u4e32 s_{ij} s i j \u5df2\u7ecf\u88ab\u68c0\u67e5\u4e3a\u6ca1\u6709\u91cd\u590d\u5b57\u7b26\u3002\u6211\u4eec\u53ea\u9700\u8981\u68c0\u67e5 s[j] s [ j ] \u5bf9\u5e94\u7684\u5b57\u7b26\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u4e8e\u5b50\u5b57\u7b26\u4e32 s_{ij} s i j \u4e2d\u3002 \u8981\u68c0\u67e5\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5df2\u7ecf\u5728\u5b50\u5b57\u7b26\u4e32\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u6574\u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4ea7\u751f\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a O(n^2) O ( n 2) \u7684\u7b97\u6cd5\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002 \u901a\u8fc7\u4f7f\u7528 HashSet \u4f5c\u4e3a\u6ed1\u52a8\u7a97\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 O(1) O (1) \u7684\u65f6\u95f4\u6765\u5b8c\u6210\u5bf9\u5b57\u7b26\u662f\u5426\u5728\u5f53\u524d\u7684\u5b50\u5b57\u7b26\u4e32\u4e2d\u7684\u68c0\u67e5\u3002 \u6ed1\u52a8\u7a97\u53e3\u662f\u6570\u7ec4/\u5b57\u7b26\u4e32\u95ee\u9898\u4e2d\u5e38\u7528\u7684\u62bd\u8c61\u6982\u5ff5\u3002 \u7a97\u53e3\u901a\u5e38\u662f\u5728\u6570\u7ec4/\u5b57\u7b26\u4e32\u4e2d\u7531\u5f00\u59cb\u548c\u7ed3\u675f\u7d22\u5f15\u5b9a\u4e49\u7684\u4e00\u7cfb\u5217\u5143\u7d20\u7684\u96c6\u5408\uff0c\u5373 [i, j)[ i , j )\uff08\u5de6\u95ed\uff0c\u53f3\u5f00\uff09\u3002\u800c\u6ed1\u52a8\u7a97\u53e3\u662f\u53ef\u4ee5\u5c06\u4e24\u4e2a\u8fb9\u754c\u5411\u67d0\u4e00\u65b9\u5411\u201c\u6ed1\u52a8\u201d\u7684\u7a97\u53e3\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5c06 [ i , j ) \u5411\u53f3\u6ed1\u52a8 1\u4e2a\u5143\u7d20\uff0c\u5219\u5b83\u5c06\u53d8\u4e3a [i+1, j+1)\uff08\u5de6\u95ed\uff0c\u53f3\u5f00\uff09\u3002 \u56de\u5230\u6211\u4eec\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528 HashSet \u5c06\u5b57\u7b26\u5b58\u50a8\u5728\u5f53\u524d\u7a97\u53e3 [i, j)[ i , j )\uff08\u6700\u521d j = i j = i \uff09\u4e2d\u3002 \u7136\u540e\u6211\u4eec\u5411\u53f3\u4fa7\u6ed1\u52a8\u7d22\u5f15 j j \uff0c\u5982\u679c\u5b83\u4e0d\u5728 HashSet \u4e2d\uff0c\u6211\u4eec\u4f1a\u7ee7\u7eed\u6ed1\u52a8 j j \u3002\u76f4\u5230 s[j] \u5df2\u7ecf\u5b58\u5728\u4e8e HashSet \u4e2d\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u627e\u5230\u7684\u6ca1\u6709\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u5b57\u7b26\u4e32\u5c06\u4f1a\u4ee5\u7d22\u5f15 i i \u5f00\u5934\u3002\u5982\u679c\u6211\u4eec\u5bf9\u6240\u6709\u7684 i i \u8fd9\u6837\u505a\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 def lengthOfLongestSubstring(self, s: str) -> int: cset = set() i, j = 0, 0 res = 0 while j < len(s): if s[j] in cset: res = max(res, j - i) cset.remove(s[i]) i += 1 else: cset.add(s[j]) j += 1 res = max(res, j - i) return res import java.lang.Math; import java.util.HashSet; class Solution { public int lengthOfLongestSubstring(String s) { if(s == null || \"\".equals(s)){ return 0; } int i = 0, j = 0, ans = 0; HashSet<Character> set = new HashSet<>(); while(j < s.length()){ if(!set.contains(s.charAt(j))){ set.add(s.charAt(j++)); ans = Math.max(ans, j - i); }else{ set.remove(s.charAt(i++)); } } return ans; } }","title":"3.2.3 \u65b9\u6cd5\u4e09 \u6ed1\u52a8\u7a97\u53e3 O(n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#324-on","text":"\u4e0a\u8ff0\u7684\u65b9\u6cd5\u6700\u591a\u9700\u8981\u6267\u884c 2n \u4e2a\u6b65\u9aa4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65\u4f18\u5316\u4e3a\u4ec5\u9700\u8981 n \u4e2a\u6b65\u9aa4\u3002\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5b57\u7b26\u5230\u7d22\u5f15\u7684\u6620\u5c04\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u96c6\u5408\u6765\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5b58\u5728\u3002 \u5f53\u6211\u4eec\u627e\u5230\u91cd\u590d\u7684\u5b57\u7b26\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u8df3\u8fc7\u8be5\u7a97\u53e3\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c s[j] \u5728 [i, j \u8303\u56f4\u5185\u6709\u4e0e j' \u91cd\u590d\u7684\u5b57\u7b26\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u9010\u6e10\u589e\u52a0 i \u3002 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7 [i\uff0cj'][ i \uff0c j \u2032] \u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\uff0c\u5e76\u5c06 i\u53d8\u4e3a j' + 1\u3002 class Solution: def lengthOfLongestSubstring(self, s: str) -> int: dic = dict() i, j = 0, 0 res = 0 while j < len(s): if s[j] in dic: i = max(i, dic[s[j]]) res = max(res, j - i + 1) dic[s[j]] = j + 1 j += 1 return res import java.lang.Math; import java.util.HashMap; class Solution { public int lengthOfLongestSubstring(String s) { if(s == null || \"\".equals(s)){ return 0; } int i = 0, j = 0, ans = 0; HashMap<Character, Integer> map = new HashMap<>(); while(j < s.length()){ if(map.containsKey(s.charAt(j))) # key: i\u4e00\u5b9a\u662f\u5f80\u540e\u8d70 i = Math.max(map.get(s.charAt(j)), i); ans = Math.max(ans, j - i + 1); map.put(s.charAt(j), ++j); } return ans; } }","title":"3.2.4 \u65b9\u6cd5\u56db \u6539\u8fdb\u7684\u6ed1\u52a8\u7a97\u53e3 O(n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5","text":"","title":"5.\u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#51","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe s \u7684\u6700\u5927\u957f\u5ea6\u4e3a 1000\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"babad\" \u8f93\u51fa: \"bab\" \u6ce8\u610f: \"aba\" \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: \"cbbd\" \u8f93\u51fa: \"bb\"","title":"5.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#52","text":"","title":"5.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#521-dp-on2","text":"import java.util.Arrays; class Solution { public String longestPalindrome(String s) { if(s.length() <= 1){ return s; } int left = 0, right = 0, len = 0; boolean[][] dp = new boolean[s.length()][s.length()]; // i\u4ece\u540e\u5f80\u524d\u4e3a\u4e86j-i\u4ece\u5c0f\u5f80\u5927 for(int i = s.length() - 1; i >= 0; i--){ for(int j = i; j < s.length(); j++){ // \u82e5s.charAt(i) == s.charAt(j) && \uff08j - i <= 2\uff09\u4e00\u5b9a\u56de\u6587 // \u5426\u5219\u5c31\u8981\u5224\u65addp[i+1][j-1] dp[i][j] = s.charAt(i) == s.charAt(j) && (j - i <= 2 || dp[i+1][j-1]); if(dp[i][j] && j - i > right - left){ left = i; right = j; } } } return s.substring(left, right+1); } }","title":"5.2.1 \u65b9\u6cd5\u4e00 DP O(n**2)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#522-on2","text":"\u4e8b\u5b9e\u4e0a\uff0c\u53ea\u9700\u4f7f\u7528\u6052\u5b9a\u7684\u7a7a\u95f4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 O ( n*2) \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u89c2\u5bdf\u5230\u56de\u6587\u4e2d\u5fc3\u7684\u4e24\u4fa7\u4e92\u4e3a\u955c\u50cf\u3002\u56e0\u6b64\uff0c\u56de\u6587\u53ef\u4ee5\u4ece\u5b83\u7684\u4e2d\u5fc3\u5c55\u5f00\uff0c\u5e76\u4e14\u53ea\u67092 n \u22121 \u4e2a\u8fd9\u6837\u7684\u4e2d\u5fc3\u3002 \u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u662f 2 n \u22121 \u4e2a\uff0c\u800c\u4e0d\u662f n \u4e2a\u4e2d\u5fc3\uff1f\u539f\u56e0\u5728\u4e8e\u6240\u542b\u5b57\u6bcd\u6570\u4e3a\u5076\u6570\u7684\u56de\u6587\u7684\u4e2d\u5fc3\u53ef\u4ee5\u5904\u4e8e\u4e24\u5b57\u6bcd\u4e4b\u95f4\uff08\u4f8b\u5982 \u201cabba\u201d \u7684\u4e2d\u5fc3\u5728\u4e24\u4e2a \u2018b\u2019 \u4e4b\u95f4\uff09\u3002 \u663e\u7136\u6240\u6709\u7684\u56de\u6587\u4e32\u90fd\u662f\u5bf9\u79f0\u7684\u3002\u957f\u5ea6\u4e3a\u5947\u6570\u56de\u6587\u4e32\u4ee5\u6700\u4e2d\u95f4\u5b57\u7b26\u7684\u4f4d\u7f6e\u4e3a\u5bf9\u79f0\u8f74\u5de6\u53f3\u5bf9\u79f0\uff0c\u800c\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\u7684\u5bf9\u79f0\u8f74\u5728\u4e2d\u95f4\u4e24\u4e2a\u5b57\u7b26\u4e4b\u95f4\u7684\u7a7a\u9699\u3002\u53ef\u5426\u5229\u7528\u8fd9\u79cd\u5bf9\u79f0\u6027\u6765\u63d0\u9ad8\u7b97\u6cd5\u6548\u7387\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u6211\u4eec\u77e5\u9053\u6574\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5b57\u7b26\uff0c\u4ee5\u53ca\u5b57\u7b26\u95f4\u7684\u7a7a\u9699\uff0c\u90fd\u53ef\u80fd\u662f\u67d0\u4e2a\u56de\u6587\u5b50\u4e32\u7684\u5bf9\u79f0\u8f74\u4f4d\u7f6e\u3002\u53ef\u4ee5\u904d\u5386\u8fd9\u4e9b\u4f4d\u7f6e\uff0c\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u540c\u65f6\u5411\u5de6\u548c\u5411\u53f3\u6269\u5c55\uff0c\u76f4\u5230\u5de6\u53f3\u4e24\u8fb9\u7684\u5b57\u7b26\u4e0d\u540c\uff0c\u6216\u8005\u8fbe\u5230\u8fb9\u754c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7684\u4f4d\u7f6e\u4e00\u5171\u6709n+n-1=2n-1\u4e2a\uff0c\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u5e73\u5747\u5927\u7ea6\u8981\u8fdb\u884cn/4\u6b21\u5b57\u7b26\u6bd4\u8f83\uff0c\u4e8e\u662f\u6b64\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)\u3002 class Solution: def longestPalindrome(self, s: str) -> str: \"\"\" \u8fb9\u754c\u6761\u4ef6 \u4e2d\u5fc3\u6269\u6563\u6cd5 \u9a6c\u62c9\u8f66\u6cd5 \"\"\" def getLen(s, i, j): res = 0 while i >= 0 and j < len(s) and s[i] == s[j]: res = max(res, j - i + 1) i -= 1 j += 1 return res l, r = 0, 0 for i in range(len(s)): len1 = getLen(s, i, i) if len1 > r - l + 1: l, r = i - len1 // 2, i + len1 // 2 len2 = getLen(s, i, i + 1) if len2 > r - l + 1: l, r = i - (len2 - 1) // 2, i + len2 // 2 return s[l: r + 1] class Solution { public String longestPalindrome(String s) { if(s.length() <= 1){ return s; } int start = 0, end = 0; for(int i = 0; i < s.length(); i++){ // \u5355\u72ec\u7684\u4e2d\u5fc3\u70b9 int len1 = expandAroundCenter(s, i, i); // \u4e24\u4e2a\u76f8\u540c\u5730\u4e2d\u5fc3\u70b9 int len2 = expandAroundCenter(s, i, i + 1); int len = Math.max(len1, len2); if(len >= end - start + 1){ start = i - (len1 - 1) / 2; end = i + len / 2; } } return s.substring(start, end + 1); } private int expandAroundCenter(String s, int left, int right) { // \u56de\u6587\u53ef\u4ee5\u662f\u4e00\u4e2a\u4e2d\u5fc3\u6216\u8005\u4e24\u4e2a\u76f8\u540c\u5730\u4e2d\u5fc3\u70b9 int L = left, R = right; while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) { L--; R++; } return R - L - 1; } }","title":"5.2.2 \u65b9\u6cd5\u4e8c \u4e2d\u5fc3\u6269\u6563\u6cd5 O(n**2)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#523-manacher-ton","text":"class Solution: def longestPalindrome(self, s: str) -> str: \"\"\" \u8fb9\u754c\u6761\u4ef6 \u4e2d\u5fc3\u6269\u6563\u6cd5 O(n**2) \u9a6c\u62c9\u8f66\u6cd5 \"\"\" # 1.\u4ee5#\u586b\u5145\u95f4\u9694 \u89e3\u51b3\u56de\u6587\u5b50\u4e32\u5947\u5076\u6027\u95ee\u9898 A = '^#' + '#'.join(s) + '#&' # 2.\u6784\u5efa\u8f85\u52a9\u6570\u7ec4Len \u5b58\u50a8\u4ee5i\u4e3a\u6838\u5fc3\u7684\u5b50\u4e32\u534a\u5f84(\u4e0d\u5305\u62eci) Len = [0] * len(A) center, right = 0, 0 for i in range(1, len(A) - 1): if i < right: Len[i] = min(right - i, Len[2 * center - i]) while A[i + Len[i] + 1] == A[i - Len[i] - 1]: Len[i] += 1 if i + Len[i] > right: center, right = i, i + Len[i] # key: \u6c42\u5b50\u4e32\u957f\u5ea6 \u8bb0\u4f4f\u5427 maxLen, centerIndex = max((n, i) for i, n in enumerate(Len)) return s[(centerIndex - maxLen)//2: (centerIndex + maxLen)//2] def manacher(S): \"\"\" \u56de\u6587\u95ee\u9898\u4e09\u79cd\u89e3\u6cd5\uff1a 1.\u4e2d\u5fc3\u6269\u6563\u6cd5 2.DP 3.manacher\u7b97\u6cd5: O(n) \u672c\u51fd\u6570\u8fd4\u56de\u6700\u5927\u56de\u6587\u5b50\u5b57\u7b26\u4e32 \"\"\" # 1.\u89e3\u51b3\u957f\u5ea6\u5947\u5076\u6027\u5e26\u6765\u7684\u5bf9\u79f0\u8f74\u4f4d\u7f6e\u95ee\u9898 # \u5176\u4e2d\u9996\u5c3e\u7684\u4f5c\u7528\u662f\u4e2d\u5fc3\u6269\u6563\u7684\u65f6\u5019\u9632\u6b62\u7d22\u5f15\u8d8a\u754c A = '^#' + '#'.join(S) + '#$' # 2.\u8f85\u52a9\u6570\u7ec4LEN\uff0c\u5b58\u50a8\u7684\u662f\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u534a\u5f84(**\u4e0d\u5305\u62eci\u8fd9\u4e2a\u5143\u7d20) # LEN\u6570\u7ec4\u6027\u8d28: LEN[i]\u5c31\u662f\u8be5\u56de\u6587\u5b50\u4e32\u5728\u539f\u5b57\u7b26\u4e32S\u4e2d\u7684\u957f\u5ea6 LEN = [0] * len(A) # 3.\u8bbe\u7f6e\u4e24\u4e2a\u53d8\u91cf\uff0cright \u548c center \u3002right \u4ee3\u8868\u4ee5 center \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u53f3\u8fb9\u754c\uff0c # \u4e5f\u5c31\u662fright = center + LEN[center] - 1\u3002 center = right = 0 # 4.\u53bb\u6389\u9996\u5c3e\u4f9d\u6b21\u904d\u5386A\u6570\u7ec4\u5143\u7d20 for i in range(1, len(A) - 1): # 5.i <= right, j\u548ci\u5173\u4e8e\u4f4d\u7f6ecenter\u5bf9\u79f0, \u4ee5j\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u4e00\u5b9a\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5185\u90e8, # LEN[i]=LEN[j] # i > right, \u4ee5i\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5916\u90e8\uff0c # \u800c\u5927\u4e8eright\u7684\u90e8\u5206\u6211\u4eec\u8fd8\u6ca1\u6709\u8fdb\u884c\u5339\u914d\uff0c\u6240\u4ee5\u8981\u4eceright+1\u4f4d\u7f6e\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u5339\u914d\uff0c\u76f4\u5230\u53d1\u751f\u5931\u914d\uff0c # \u4ece\u800c\u66f4\u65b0P\u548c\u5bf9\u5e94\u7684po\u4ee5\u53caLen[i]\u3002 if i < right: LEN[i] = min(right - i, LEN[2 * center - i]) else: LEN[i] = 0 # 6.\u5947\u6570\u7684\u4e2d\u5fc3\u6269\u6563\u6cd5 # \u5947\u5076\u6027\u95ee\u9898\u7531\u7b2c\u4e00\u6b65\u5df2\u7ecf\u89e3\u51b3\u4e86 while A[i + LEN[i] + 1] == A[i - LEN[i] - 1]: LEN[i] += 1 # 7..\u5982\u679ci\u7684\u53f3\u8fb9\u754c > \u539f\u6765\u7684\u53f3\u8fb9\u754c\uff0c\u66f4\u65b0 if i + LEN[i] > right: center, right = i, i + LEN[i] # print('\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e32', A) # print('\u8f85\u52a9\u534a\u5f84\u6570\u7ec4', LEN) maxLen, centerIndex = max((n, i) for i, n in enumerate(LEN)) print((maxLen, centerIndex)) # return maxLen \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32\u957f\u5ea6 # return s[(centerIndex - maxLen)//2: (centerIndex + maxLen)//2] \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32 # return sum([(1+x)//2 for x in LEN]) \u6c42\u56de\u6587\u5b50\u4e32\u6570\u91cf return S[(centerIndex - maxLen)//2: (centerIndex + maxLen)//2]","title":"5.2.3 Manacher \u7b97\u6cd5 TO(n) \u9a6c\u62c9\u8f66\u7b97\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#6z","text":"","title":"6.Z\u5b57\u5f62\u53d8\u5e7b"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1_5","text":"\u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c Z \u5b57\u5f62\u6392\u5217\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a \"LEETCODEISHIRING\" \u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a L C I R E T O E S I I G E D H N \u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a\"LCIRETOESIIGEDHN\"\u3002 \u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a string convert(string s, int numRows); \u793a\u4f8b 1: \u8f93\u5165: s = \"LEETCODEISHIRING\", numRows = 3 \u8f93\u51fa: \"LCIRETOESIIGEDHN\" \u793a\u4f8b 2: \u8f93\u5165: s = \"LEETCODEISHIRING\", numRows = 4 \u8f93\u51fa: \"LDREOEIIECIHNTSG\" \u89e3\u91ca: L D R E O E I I E C I H N T S G","title":"1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2_4","text":"","title":"2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21-ton-son","text":"class Solution: def convert(self, s: str, numRows: int) -> str: res = [\"\" for _ in range(numRows)] i = 0 Up = False for c in s: res[i] += c if Up: if i > 0: i -= 1 else: Up = False i += 1 else: if i < numRows - 1: i += 1 else: Up = True i -= 1 return \"\".join(res) class Solution { public String convert(String s, int numRows) { if(numRows == 1){ return s; } ArrayList<ArrayList<Character>> rows = new ArrayList<>(); for(int i = 0; i < numRows; i++){ ArrayList<Character> list = new ArrayList<>(); rows.add(list); } for(int i = 0, j = 0, sign = 1; i < s.length(); i++){ rows.get(j).add(s.charAt(i)); if(j == numRows - 1 || (i != 0 && j == 0)){ sign = -sign; } j += sign; } StringBuilder builder = new StringBuilder(); for(ArrayList<Character> list: rows){ for(Character c: list){ builder.append(c); } } return builder.toString(); } }","title":"2.1 \u65b9\u6cd5\u4e00 TO(n)  SO(n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#12","text":"","title":"12.\u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_42","text":"\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a I\uff0c V\uff0c X\uff0c L\uff0cC\uff0cD \u548c M\u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII, \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII\uff0c\u800c\u662f IV\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u793a\u4f8b 1: \u8f93\u5165: 3 \u8f93\u51fa: \"III\" \u793a\u4f8b 2: \u8f93\u5165: 4 \u8f93\u51fa: \"IV\" \u793a\u4f8b 3: \u8f93\u5165: 9 \u8f93\u51fa: \"IX\" \u793a\u4f8b 4: \u8f93\u5165: 58 \u8f93\u51fa: \"LVIII\" \u89e3\u91ca: L = 50, V = 5, III = 3. \u793a\u4f8b 5: \u8f93\u5165: 1994 \u8f93\u51fa: \"MCMXCIV\" \u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_43","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#hash","text":"class Solution: def intToRoman(self, num: int) -> str: \"\"\" \u6570\u5b57\u8303\u56f4 1 - 3999 \u8fb9\u754c\u6761\u4ef6 \u7279\u6b8a\u6761\u4ef6 \"\"\" dic = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M', 4: 'IV', 9: 'IX', 40: 'XL', 90: 'XC', 400: 'CD', 900: 'CM'} ans = \"\" bit = 0 while num: a = num % 10 if a == 4 or a == 9: ans = dic[a * (10 ** bit)] + ans elif a >= 1 and a < 4: ans = dic[10 ** bit] * a + ans elif a >= 5 and a < 9: print(a) ans = dic[10 ** bit * 5] + dic[10 ** bit] * (a - 5) + ans num //= 10 bit += 1 return ans","title":"\u89e3\u6cd5\u4e00 Hash"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_44","text":"public static String intToRoman(int num) { String M[] = {\"\", \"M\", \"MM\", \"MMM\"}; String C[] = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"}; String X[] = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"}; String I[] = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"}; return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10]; }","title":"\u89e3\u6cd5\u4e8c \u5657\u5657\u5657"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_45","text":"class Solution: def intToRoman(self, num: int) -> str: values = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] numerals = [ \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\" ] res = \"\" for i in range(len(values)): if num // values[i] > 0: res += (num // values[i]) * numerals[i] num %= values[i] return res","title":"\u89e3\u6cd5\u4e09 \u63a8\u8350"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#20","text":"","title":"20.\u6709\u6548\u7684\u62ec\u53f7"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_46","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']' \u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002 \u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a \u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002 \u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002 \u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"()\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: \"()[]{}\" \u8f93\u51fa: true \u793a\u4f8b 3: \u8f93\u5165: \"(]\" \u8f93\u51fa: false \u793a\u4f8b 4: \u8f93\u5165: \"([)]\" \u8f93\u51fa: false \u793a\u4f8b 5: \u8f93\u5165: \"{[]}\" \u8f93\u51fa: true","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_47","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_48","text":"class Solution: def isValid(self, s: str) -> bool: stack = [] mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"} for c in s: if c not in mapping: stack.append(c) else: top_element = stack.pop() if stack else '#' if mapping[c] != top_element: return False return not stack","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#71_1","text":"","title":"71.\u7b80\u5316\u8def\u5f84"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_49","text":"\u4ee5 Unix \u98ce\u683c\u7ed9\u51fa\u4e00\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u4f60\u9700\u8981\u7b80\u5316\u5b83\u3002\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u89c4\u8303\u8def\u5f84\u3002 \u5728 Unix \u98ce\u683c\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u4e00\u4e2a\u70b9\uff08.\uff09\u8868\u793a\u5f53\u524d\u76ee\u5f55\u672c\u8eab\uff1b\u6b64\u5916\uff0c\u4e24\u4e2a\u70b9 \uff08..\uff09 \u8868\u793a\u5c06\u76ee\u5f55\u5207\u6362\u5230\u4e0a\u4e00\u7ea7\uff08\u6307\u5411\u7236\u76ee\u5f55\uff09\uff1b\u4e24\u8005\u90fd\u53ef\u4ee5\u662f\u590d\u6742\u76f8\u5bf9\u8def\u5f84\u7684\u7ec4\u6210\u90e8\u5206\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\uff1aLinux / Unix\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84 vs \u76f8\u5bf9\u8def\u5f84 \u8bf7\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u89c4\u8303\u8def\u5f84\u5fc5\u987b\u59cb\u7ec8\u4ee5\u659c\u6760 / \u5f00\u5934\uff0c\u5e76\u4e14\u4e24\u4e2a\u76ee\u5f55\u540d\u4e4b\u95f4\u5fc5\u987b\u53ea\u6709\u4e00\u4e2a\u659c\u6760 /\u3002\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\u540d\uff08\u5982\u679c\u5b58\u5728\uff09\u4e0d\u80fd\u4ee5 / \u7ed3\u5c3e\u3002\u6b64\u5916\uff0c\u89c4\u8303\u8def\u5f84\u5fc5\u987b\u662f\u8868\u793a\u7edd\u5bf9\u8def\u5f84\u7684\u6700\u77ed\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a\"/home/\" \u8f93\u51fa\uff1a\"/home\" \u89e3\u91ca\uff1a\u6ce8\u610f\uff0c\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\u540d\u540e\u9762\u6ca1\u6709\u659c\u6760\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a\"/../\" \u8f93\u51fa\uff1a\"/\" \u89e3\u91ca\uff1a\u4ece\u6839\u76ee\u5f55\u5411\u4e0a\u4e00\u7ea7\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u56e0\u4e3a\u6839\u662f\u4f60\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u9ad8\u7ea7\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a\"/home//foo/\" \u8f93\u51fa\uff1a\"/home/foo\" \u89e3\u91ca\uff1a\u5728\u89c4\u8303\u8def\u5f84\u4e2d\uff0c\u591a\u4e2a\u8fde\u7eed\u659c\u6760\u9700\u8981\u7528\u4e00\u4e2a\u659c\u6760\u66ff\u6362\u3002 \u793a\u4f8b 4\uff1a \u8f93\u5165\uff1a\"/a/./b/../../c/\" \u8f93\u51fa\uff1a\"/c\" \u793a\u4f8b 5\uff1a \u8f93\u5165\uff1a\"/a/../../b/../c//.//\" \u8f93\u51fa\uff1a\"/c\" \u793a\u4f8b 6\uff1a \u8f93\u5165\uff1a\"/a//b////c/d//././/..\" \u8f93\u51fa\uff1a\"/a/b/c\"","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_50","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_51","text":"class Solution: def simplifyPath(self, path: str) -> str: stack = [] words = path.split(\"/\") for w in words: if w == '' or w == '.': continue if w == '..': if stack: stack.pop() else: stack.append(w) res = \"/\" + \"/\".join(stack) return res","title":"\u89e3\u6cd5\u4e00 \u6808"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_52","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#91","text":"","title":"91.\u89e3\u7801\u65b9\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_53","text":"\u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"12\" \u8f93\u51fa: 2 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"226\" \u8f93\u51fa: 3 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"BZ\" (2 26), \"VF\" (22 6), \u6216\u8005 \"BBF\" (2 2 6) \u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_54","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_1","text":"\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0e\u524d\u7f00\u82e5\u5e72\u4e2a\u5b57\u7b26\u7684\u7ec4\u5408\u53ef\u4ee5\u901a\u8fc7\u516c\u5f0f dp_i = dp_{i-1}+ dp_{i-2} \u8ba1\u7b97\u51fa\u6765\uff0cdp[i]\u4ee5\u5f53\u524di\u4e3a\u7ed3\u5c3e\u6709\u591a\u5c11\u79cd\u65b9\u6cd5 class Solution: def numDecodings(self, s: str) -> int: \"\"\" DP \u8fb9\u754c\u6761\u4ef6: 1.\u9996\u5b57\u6bcd\u4e3a0 2.\u4e2d\u95f4\u67d0\u5b57\u6bcd\u4e3a0 \"\"\" if not s or s[0] == '0': return 0 def check(num): return num >=10 and num <=26 # dp[i]\u4ee5\u5f53\u524di\u4e3a\u7ed3\u5c3e\u6709\u591a\u5c11\u79cd\u65b9\u6cd5 dp = [0] * (len(s) + 1) dp[0] = 1 dp[1] = 1 for i in range(2, len(s) + 1): dp[i] = (dp[i - 1] if s[i - 1] != '0' else 0) + (dp[i - 2] if check(int(s[i-2: i])) else 0) return dp[len(s)]","title":"\u89e3\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_55","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#125","text":"","title":"125. \u9a8c\u8bc1\u56de\u6587\u4e32"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1251","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002 \u8bf4\u660e\uff1a \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"A man, a plan, a canal: Panama\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: \"race a car\" \u8f93\u51fa: false","title":"125.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1252","text":"","title":"125.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#12521","text":"class Solution: def isPalindrome(self, s: str) -> bool: # 1.\u6574\u7406 ss = \"\" for c in s: if (c <= '9'and c >= '0') or (c <='z' and c >= 'a') or (c <='Z' and c >= 'A'): ss += c ss = ss.lower() # 2.\u9a8c\u8bc1 if not ss: return True i, j = 0, len(ss)-1 while i < j: if ss[i] != ss[j]: return False i += 1 j -= 1 return True","title":"125.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#12522","text":"public class Solution { public boolean isPalindrome(String s) { String actual = s.replaceAll(\"[^A-Za-z0-9]\", \"\").toLowerCase(); String rev = new StringBuffer(actual).reverse().toString(); return actual.equals(rev); } }","title":"125.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#394","text":"","title":"394.\u5b57\u7b26\u4e32\u7f16\u7801"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_56","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7ecf\u8fc7\u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b83\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u3002 \u7f16\u7801\u89c4\u5219\u4e3a: k[encoded_string]\uff0c\u8868\u793a\u5176\u4e2d\u65b9\u62ec\u53f7\u5185\u90e8\u7684 encoded_string \u6b63\u597d\u91cd\u590d k \u6b21\u3002\u6ce8\u610f k \u4fdd\u8bc1\u4e3a\u6b63\u6574\u6570\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8f93\u5165\u5b57\u7b26\u4e32\u603b\u662f\u6709\u6548\u7684\uff1b\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u989d\u5916\u7684\u7a7a\u683c\uff0c\u4e14\u8f93\u5165\u7684\u65b9\u62ec\u53f7\u603b\u662f\u7b26\u5408\u683c\u5f0f\u8981\u6c42\u7684\u3002 \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u539f\u59cb\u6570\u636e\u4e0d\u5305\u542b\u6570\u5b57\uff0c\u6240\u6709\u7684\u6570\u5b57\u53ea\u8868\u793a\u91cd\u590d\u7684\u6b21\u6570 k \uff0c\u4f8b\u5982\u4e0d\u4f1a\u51fa\u73b0\u50cf 3a \u6216 2[4] \u7684\u8f93\u5165\u3002 \u793a\u4f8b: s = \"3[a]2[bc]\", \u8fd4\u56de \"aaabcbc\". s = \"3[a2[c]]\", \u8fd4\u56de \"accaccacc\". s = \"2[abc]3[cd]ef\", \u8fd4\u56de \"abcabccdcdcdef\".","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_57","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_58","text":"class Solution: def decodeString(self, s: str) -> str: stack = [] res = \"\" multi = 0 for c in s: if c == '[': stack.append([multi, res]) res, multi = \"\", 0 elif c == ']': cur_multi, last_res = stack.pop() res = last_res + cur_multi * res elif '0' <= c <= '9': multi = multi * 10 + int(c) else: res += c return res class Solution: def decodeString(self, s: str) -> str: \"\"\" \u9012\u5f52\u6cd5\uff1a dfs\uff1a \u8fb9\u754c\u6761\u4ef6\uff1a \u5b57\u7b26\u4e32\u7a7a \u6570\u5b57\u4e0d\u53ea\u662f\u4e2a\u4f4d\u6570 \u62ec\u53f7\u53ef\u4ee5\u5d4c\u5957 \u4e0d\u662f\u5fc5\u987b\u4ee5\u6269\u56de\u7ed3\u5c3e \"\"\" def is_number(c): if type(c) == int: return True return c >= '0' and c <= '9' def is_char(c): if type(c) == int: return False return c not in ['[', ']'] if not s: return s ans = '' stack = [] for c in s: if is_number(c): if stack and is_number(stack[-1]): stack[-1] = (stack[-1] * 10 + int(c)) else: stack.append(int(c)) elif c == '[': stack.append(c) elif c == ']': if stack: string = '' if is_char(stack[-1]): string = stack.pop() stack.pop() cnt = stack.pop() string = string * cnt if stack: if is_char(stack[-1]): stack[-1] = stack[-1] + string else: stack.append(string) else: ans += string else: if stack and is_char(stack[-1]): stack[-1] = stack[-1] + c else: stack.append(c) if stack: ans += stack[-1] return ans","title":"\u89e3\u6cd5\u4e00 \u6808"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_59","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#395k","text":"","title":"395.\u81f3\u5c11\u6709K\u4e2a\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_60","text":"\u627e\u5230\u7ed9\u5b9a\u5b57\u7b26\u4e32\uff08\u7531\u5c0f\u5199\u5b57\u7b26\u7ec4\u6210\uff09\u4e2d\u7684\u6700\u957f\u5b50\u4e32 T \uff0c \u8981\u6c42 T \u4e2d\u7684\u6bcf\u4e00\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u90fd\u4e0d\u5c11\u4e8e k \u3002\u8f93\u51fa T \u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"aaabb\", k = 3 \u8f93\u51fa: 3 \u6700\u957f\u5b50\u4e32\u4e3a \"aaa\" \uff0c\u5176\u4e2d 'a' \u91cd\u590d\u4e86 3 \u6b21\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"ababbc\", k = 2 \u8f93\u51fa: 5 \u6700\u957f\u5b50\u4e32\u4e3a \"ababb\" \uff0c\u5176\u4e2d 'a' \u91cd\u590d\u4e86 2 \u6b21\uff0c 'b' \u91cd\u590d\u4e86 3 \u6b21\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_61","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_62","text":"class Solution: def longestSubstring(self, s: str, k: int) -> int: \"\"\" \u5206\u800c\u6cbb\u4e4b \u7531\u4e8e\u5c11\u4e8ek\u4e2a\u7684\u5b57\u7b26\u4e00\u5b9a\u4e0d\u80fd\u51fa\u73b0\u5728\u7ed3\u679c\u4e2d \u5229\u7528\u8fd9\u4e2a\u5206\u5272 \u9012\u5f52 \"\"\" if not s: return 0 for c in s: if s.count(c) < k: return max(self.longestSubstring(sub_s, k) for sub_s in s.split(c)) return len(s)","title":"\u89e3\u6cd5\u4e00 \u627e\u5230\u8fb9\u754c \u5206\u800c\u6cbb\u4e4b"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_63","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#409","text":"","title":"409. \u6700\u957f\u56de\u6587\u4e32"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4091","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u5927\u5199\u5b57\u6bcd\u548c\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u901a\u8fc7\u8fd9\u4e9b\u5b57\u6bcd\u6784\u9020\u6210\u7684\u6700\u957f\u7684\u56de\u6587\u4e32\u3002 \u5728\u6784\u9020\u8fc7\u7a0b\u4e2d\uff0c\u8bf7\u6ce8\u610f\u533a\u5206\u5927\u5c0f\u5199\u3002\u6bd4\u5982 \"Aa\" \u4e0d\u80fd\u5f53\u505a\u4e00\u4e2a\u56de\u6587\u5b57\u7b26\u4e32\u3002 \u6ce8\u610f: \u5047\u8bbe\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 1010\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"abccccdd\" \u8f93\u51fa: 7 \u89e3\u91ca: \u6211\u4eec\u53ef\u4ee5\u6784\u9020\u7684\u6700\u957f\u7684\u56de\u6587\u4e32\u662f\"dccaccd\", \u5b83\u7684\u957f\u5ea6\u662f 7\u3002","title":"409.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4092","text":"","title":"409.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#40921-greedy-accepted","text":"Intuition A palindrome consists of letters with equal partners, plus possibly a unique center (without a partner). The letter i from the left has its partner i from the right. For example in 'abcba' , 'aa' and 'bb' are partners, and 'c' is a unique center. Imagine we built our palindrome. It consists of as many partnered letters as possible, plus a unique center if possible. This motivates a greedy approach. Algorithm For each letter, say it occurs v times. We know we have v // 2 * 2 letters that can be partnered for sure. For example, if we have 'aaaaa' , then we could have 'aaaa' partnered, which is 5 // 2 * 2 = 4 letters partnered. At the end, if there was any v % 2 == 1 , then that letter could have been a unique center. Otherwise, every letter was partnered. To perform this check, we will check for v % 2 == 1 and ans % 2 == 0 , the latter meaning we haven't yet added a unique center to the answer. Complexity Analysis Time Complexity: O(N) O ( N ), where N N is the length of s . We need to count each letter. Space Complexity: O(1) O (1), the space for our count, as the alphabet size of s is fixed. We should also consider that in a bit complexity model, technically we need O(\\log N) O (log N ) bits to store the count values. def longestPalindrome(self, s): \"\"\" :type s: str :rtype: int \"\"\" ans = 0 for k, v in collections.Counter(s).most_common(): ans += v // 2 * 2 if ans % 2 == 0 and v % 2 == 1: ans += 1 return ans","title":"409.2.1 Greedy [Accepted]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#40922-set","text":"class Solution(object): def longestPalindrome(self, s): \"\"\" :type s: str :rtype: int \"\"\" hash = set() for c in s: if c not in hash: hash.add(c) else: hash.remove(c) # len(hash) is the number of the odd letters return len(s) - len(hash) + 1 if len(hash) > 0 else len(s)","title":"409.2.2 \u5229\u7528set\u7edf\u8ba1\u5947\u6570\u6b21"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#40923","text":"\u6211\u7edf\u8ba1\u6709\u591a\u5c11\u4e2a\u5b57\u6bcd\u51fa\u73b0\u5947\u6570\u6b21\u3002\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u5b57\u6bcd\uff0c\u9664\u4e86\u6bcf\u4e2a\u5947\u6570\u5b57\u6bcd\uff0c\u6211\u4eec\u5fc5\u987b\u7559\u4e0b\u4e00\u4e2a\uff0c\u9664\u4e86\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7684\u4e00\u4e2a\u3002 def longestPalindrome(self, s): odds = sum(v & 1 for v in collections.Counter(s).values()) # bool(odds)\u4f5c\u7528\u662f\u5982\u679codds\u4e0d\u4e3a0 \u5219bool(odds)\u4e3a1 return len(s) - odds + bool(odds)","title":"409.2.3 \u5229\u7528\u4f4d\u8fd0\u7b97\u7edf\u8ba1\u5947\u6570\u6b21"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#40924-3","text":"class Solution { public int longestPalindrome(String s) { if(s == null || \"\".equals(s)){ return 0; } int[] charMap = new int[128]; int maxLength = 0; int flag = 0; for(int i = 0; i < s.length(); i++){ // \u7edf\u8ba1\u5404\u5b57\u7b26\u6570\u91cf charMap[(int)s.charAt(i)] += 1; } for(int i = 0; i < charMap.length; i++){ if((charMap[i] & 1) == 0){ // \u5982\u679c\u5b57\u7b26\u6570\u4e3aeven \u76f4\u63a5\u52a0\u5230\u7ed3\u679c\u4e2d maxLength += charMap[i]; }else{ // \u5982\u679c\u5b57\u7b26\u6570\u4e3aodd\uff0c \u51cf1\u52a0\u5230\u7ed3\u679c\u4e2d\uff0c\u4e14\u4e2d\u5fc3\u70b9\u7f6e\u4e3a1 maxLength += charMap[i] - 1; flag = 1; } } return maxLength + flag; } }","title":"409.2.4 \u5b57\u7b26\u6570\u7ec4 \u7c7b\u4f3c\u4e0a\u97623\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#438","text":"","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_64","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32 p\uff0c\u627e\u5230 s \u4e2d\u6240\u6709\u662f p \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002 \u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32 s \u548c p \u7684\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc7 20100\u3002 \u8bf4\u660e\uff1a \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002 \u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: s: \"cbaebabacd\" p: \"abc\" \u8f93\u51fa: [0, 6] \u89e3\u91ca: \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"cba\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 6 \u7684\u5b50\u4e32\u662f \"bac\", \u5b83\u662f \"abc\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 2: \u8f93\u5165: s: \"abab\" p: \"ab\" \u8f93\u51fa: [0, 1, 2] \u89e3\u91ca: \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 1 \u7684\u5b50\u4e32\u662f \"ba\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 2 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_65","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_66","text":"class Solution: def findAnagrams(self, s: str, p: str) -> List[int]: \"\"\" \u6ed1\u52a8\u7a97\u53e3 \"\"\" res = [] window = {} # \u8bb0\u5f55\u7a97\u53e3\u4e2d\u5404\u4e2a\u5b57\u7b26\u6570\u91cf\u7684\u5b57\u5178 needs = {} # \u8bb0\u5f55\u76ee\u6807\u5b57\u7b26\u4e32\u4e2d\u5404\u4e2a\u5b57\u7b26\u6570\u91cf\u7684\u5b57\u5178 for c in p: needs[c] = needs.get(c, 0) + 1 Len, limit = len(p), len(s) l = r = 0 while r < limit: c = s[r] if c not in needs: window.clear() l = r = r + 1 else: window[c] = window.get(c, 0) + 1 if r - l + 1 == Len: if window == needs: res.append(l) window[s[l]] -= 1 l += 1 r += 1 return res","title":"\u89e3\u6cd5\u4e00 \u6ed1\u52a8\u7a97\u53e3"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_67","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#647","text":"","title":"647.\u56de\u6587\u5b50\u4e32"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_68","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u56de\u6587\u5b50\u4e32\u3002 \u5177\u6709\u4e0d\u540c\u5f00\u59cb\u4f4d\u7f6e\u6216\u7ed3\u675f\u4f4d\u7f6e\u7684\u5b50\u4e32\uff0c\u5373\u4f7f\u662f\u7531\u76f8\u540c\u7684\u5b57\u7b26\u7ec4\u6210\uff0c\u4e5f\u4f1a\u88ab\u8ba1\u4e3a\u662f\u4e0d\u540c\u7684\u5b50\u4e32\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"abc\" \u8f93\u51fa: 3 \u89e3\u91ca: \u4e09\u4e2a\u56de\u6587\u5b50\u4e32: \"a\", \"b\", \"c\". \u793a\u4f8b 2: \u8f93\u5165: \"aaa\" \u8f93\u51fa: 6 \u8bf4\u660e: 6\u4e2a\u56de\u6587\u5b50\u4e32: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\". \u6ce8\u610f: \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc71000\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_69","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_70","text":"\u91cd\u70b9\u662f\u4e00\u4e2a\u4e2d\u5fc3\u8fd8\u662f\u4e24\u4e2a\u4e2d\u5fc3 class Solution: def countSubstrings(self, s: str) -> int: \"\"\" \u4e0d\u540c\u7684\u5f00\u59cb\u548c\u7ed3\u675fO(n) \u5171 O(n ** 2) \u4e2d\u5fc3\u6269\u6563\u6cd5 \"\"\" def isPalidrime(s, l, r): \"\"\" \u4e00\u4e2a\u4e2d\u5fc3l == r\u8fd8\u662f\u4e24\u4e2a\u4e2d\u5fc3 l = r - 1 \"\"\" res = 0 while l >= 0 and r < length and s[l] == s[r]: res += 1 l -= 1 r += 1 return res length = len(s) ans = 0 for i in range(length): ans += isPalidrime(s, i, i) ans += isPalidrime(s, i, i + 1) return ans","title":"\u89e3\u6cd5\u4e00 \u4e2d\u5fc3\u6269\u6563\u6cd5 \u63a8\u8350"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#manacher","text":"class Solution: def countSubstrings(self, s: str) -> int: def manacher(S): \"\"\" \u56de\u6587\u95ee\u9898\u4e09\u79cd\u89e3\u6cd5\uff1a 1.\u4e2d\u5fc3\u6269\u6563\u6cd5 2.DP 3.manacher\u7b97\u6cd5: O(n) \u672c\u51fd\u6570\u8fd4\u56de\u6700\u5927\u56de\u6587\u5b50\u5b57\u7b26\u4e32 \"\"\" # 1.\u89e3\u51b3\u957f\u5ea6\u5947\u5076\u6027\u5e26\u6765\u7684\u5bf9\u79f0\u8f74\u4f4d\u7f6e\u95ee\u9898 # \u5176\u4e2d\u9996\u5c3e\u7684\u4f5c\u7528\u662f\u4e2d\u5fc3\u6269\u6563\u7684\u65f6\u5019\u9632\u6b62\u7d22\u5f15\u8d8a\u754c A = '^#' + '#'.join(S) + '#$' # 2.\u8f85\u52a9\u6570\u7ec4LEN\uff0c\u5b58\u50a8\u7684\u662f\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u534a\u5f84(**\u4e0d\u5305\u62eci\u8fd9\u4e2a\u5143\u7d20) # LEN\u6570\u7ec4\u6027\u8d28: LEN[i]\u5c31\u662f\u8be5\u56de\u6587\u5b50\u4e32\u5728\u539f\u5b57\u7b26\u4e32S\u4e2d\u7684\u957f\u5ea6 LEN = [0] * len(A) # 3.\u8bbe\u7f6e\u4e24\u4e2a\u53d8\u91cf\uff0cright \u548c center \u3002right \u4ee3\u8868\u4ee5 center \u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u7684\u53f3\u8fb9\u754c\uff0c # \u4e5f\u5c31\u662fright = center + LEN[center] - 1\u3002 center = right = 0 # 4.\u53bb\u6389\u9996\u5c3e\u4f9d\u6b21\u904d\u5386A\u6570\u7ec4\u5143\u7d20 for i in range(1, len(A) - 1): # 5.i <= right, j\u548ci\u5173\u4e8e\u4f4d\u7f6ecenter\u5bf9\u79f0, \u4ee5j\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u4e00\u5b9a\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5185\u90e8, # LEN[i]=LEN[j] # i > right, \u4ee5i\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u5728\u4ee5center\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u5916\u90e8\uff0c # \u800c\u5927\u4e8eright\u7684\u90e8\u5206\u6211\u4eec\u8fd8\u6ca1\u6709\u8fdb\u884c\u5339\u914d\uff0c\u6240\u4ee5\u8981\u4eceright+1\u4f4d\u7f6e\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u5339\u914d\uff0c\u76f4\u5230\u53d1\u751f\u5931\u914d\uff0c # \u4ece\u800c\u66f4\u65b0P\u548c\u5bf9\u5e94\u7684po\u4ee5\u53caLen[i]\u3002 if i < right: LEN[i] = min(right - i, LEN[2 * center - i]) else: LEN[i] = 0 # 6.\u5947\u6570\u7684\u4e2d\u5fc3\u6269\u6563\u6cd5 while A[i + LEN[i] + 1] == A[i - LEN[i] - 1]: LEN[i] += 1 # 7..\u5982\u679ci\u7684\u53f3\u8fb9\u754c > \u539f\u6765\u7684\u53f3\u8fb9\u754c\uff0c\u66f4\u65b0 if i + LEN[i] > right: center, right = i, i + LEN[i] # print('\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e32', A) # print('\u8f85\u52a9\u534a\u5f84\u6570\u7ec4', LEN) maxLen, centerIndex = max((n, i) for i, n in enumerate(LEN)) print((maxLen, centerIndex)) # return maxLen \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32\u957f\u5ea6 # return s[(centerIndex - maxLen)//2: (centerIndex + maxLen)//2] \u6c42\u6700\u5927\u56de\u6587\u5b50\u4e32 # return sum([(1+x)//2 for x in LEN]) \u6c42\u56de\u6587\u5b50\u4e32\u6570\u91cf # LEN\u4ee3\u8868\u7684\u662f\u4e0d\u5305\u542b\u4e2d\u5fc3\u70b9\u7684\u534a\u5f84,\u4e5f\u662f\u4ee5\u5b83\u4e3a\u4e2d\u5fc3\u70b9\u7684\u957f\u5ea6, \u5947\u6570\u8981\u52a0\u4e00\u9664\u4ee5\u4e8c\u624d\u80fd\u5f97\u5230\u4ee5\u5b83\u4e3a\u4e2d\u5fc3\u70b9\u7684\u56de\u6587\u5b50\u4e32\u6570\u91cf, \u5076\u6570\u52a0\u4e00\u4e0d\u5f71\u54cd\u7ed3\u679c return sum([(1+x)//2 for x in LEN]) return manacher(s)","title":"\u89e3\u6cd5\u4e8c Manacher"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_71","text":"","title":"\u6570\u7ec4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4-hard","text":"","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 [hard]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_72","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4 nums1 \u548c nums2\u3002 \u8bf7\u4f60\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u4e14\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log(m + n))\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u548c nums2 \u4e0d\u4f1a\u540c\u65f6\u4e3a\u7a7a\u3002 \u793a\u4f8b 1: nums1 = [1, 3] nums2 = [2] \u5219\u4e2d\u4f4d\u6570\u662f 2.0 \u793a\u4f8b 2: nums1 = [1, 2] nums2 = [3, 4] \u5219\u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_73","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_74","text":"https://mp.weixin.qq.com/s/FBlH7o-ssj_iMEPLcvsY2w class Solution(object): def findMedianSortedArrays(self, nums1, nums2): \"\"\" A[k/2] = B[k/2],\u90a3\u4e48\u7b2c k \u5927\u7684\u6570\u5c31\u662f A[k/2] A[k/2] > B[k/2],\u90a3\u4e48\u7b2c k \u5927\u7684\u6570\u80af\u5b9a\u5728 A[0:k/2+1] \u548c B[k/2:] \u4e2d\uff0c\u8fd9\u6837\u5c31\u5c06\u539f\u6765\u7684\u6240\u6709\u6570\u7684\u603b\u548c\u51cf\u5c11\u5230\u4e00\u534a\u4e86\uff0c\u518d\u5728\u8fd9\u4e2a\u8303\u56f4\u91cc\u9762\u627e\u7b2c k/2 \u5927\u7684\u6570\u5373\u53ef\uff0c\u8fd9\u6837\u4e5f\u8fbe\u5230\u4e86\u4e8c\u5206\u67e5\u627e\u7684\u533a\u522b\u4e86\u3002 A[k/2] < B[k/2]\uff0c\u90a3\u4e48\u7b2c k \u5927\u7684\u6570\u80af\u5b9a\u5728 B[0:k/2+1]\u548c A[k/2:] \u4e2d\uff0c\u540c\u7406\u5728\u8fd9\u4e2a\u8303\u56f4\u627e\u7b2c k/2 \u5927\u7684\u6570\u5c31\u53ef\u4ee5\u4e86\u3002 [\u6ce8\u610f] \u7531\u4e8e\u8be5\u65b9\u6cd5\u4e3b\u8981\u8003\u8651\u524d\u9762\u5143\u7d20 \u6240\u4ee5\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4e0d\u7528\u5220\u9664A[0:k/2+1] B[0:k/2+1]\u5269\u4e0b\u7684\u5143\u7d20 \"\"\" def getKth(nums1, s1, t1, nums2, s2, t2, k): len1 = t1 - s1 + 1 len2 = t2 - s2 + 1 if len1 == 0: return nums2[s2 + k - 1] if len2 == 0: return nums1[s1 + k - 1] if k == 1: print(s1, s2, t1, t2) return min(nums1[s1], nums2[s2]) i = s1 + min(len1, k // 2) - 1 j = s2 + min(len2, k // 2) - 1 if nums1[i] > nums2[j]: return getKth(nums1, s1, t1, nums2, j + 1, t2, k - (j - s2 + 1)) else: return getKth(nums1, i + 1, t1, nums2, s2, t2, k - (i - s1 + 1)) n, m = len(nums1), len(nums2) # trick\uff1a\u5c06\u5076\u6570\u548c\u5947\u6570\u7684\u60c5\u51b5\u5408\u5e76\uff0c\u5982\u679c\u662f\u5947\u6570\uff0c\u4f1a\u6c42\u4e24\u6b21\u540c\u6837\u7684 k left_mid = (n + m + 1) // 2 right_mid = (n + m + 2) // 2 return (getKth(nums1, 0, n - 1, nums2, 0, m - 1, left_mid) + getKth(nums1, 0, n - 1, nums2, 0, m - 1, right_mid)) * 0.5","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52 + \u4e8c\u5206"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_75","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#11_1","text":"","title":"11.\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_76","text":"\u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570 a1\uff0ca2\uff0c...\uff0can\uff0c\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 (i, ai) \u3002\u5728\u5750\u6807\u5185\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a (i, ai) \u548c (i, 0)\u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u8bf4\u660e\uff1a\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c\u4e14 n \u7684\u503c\u81f3\u5c11\u4e3a 2 \u56fe\u4e2d\u5782\u76f4\u7ebf\u4ee3\u8868\u8f93\u5165\u6570\u7ec4 [1,8,6,2,5,4,8,3,7]\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u80fd\u591f\u5bb9\u7eb3\u6c34\uff08\u8868\u793a\u4e3a\u84dd\u8272\u90e8\u5206\uff09\u7684\u6700\u5927\u503c\u4e3a 49\u3002 \u793a\u4f8b: \u8f93\u5165: [1,8,6,2,5,4,8,3,7] \u8f93\u51fa: 49","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_77","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#on_1","text":"\u8fd9\u79cd\u65b9\u6cd5\u80cc\u540e\u7684\u601d\u8def\u5728\u4e8e\uff0c\u4e24\u7ebf\u6bb5\u4e4b\u95f4\u5f62\u6210\u7684\u533a\u57df\u603b\u662f\u4f1a\u53d7\u5230\u5176\u4e2d\u8f83\u77ed\u90a3\u6761\u957f\u5ea6\u7684\u9650\u5236\u3002\u6b64\u5916\uff0c\u4e24\u7ebf\u6bb5\u8ddd\u79bb\u8d8a\u8fdc\uff0c\u5f97\u5230\u7684\u9762\u79ef\u5c31\u8d8a\u5927\u3002 \u6211\u4eec\u5728\u7531\u7ebf\u6bb5\u957f\u5ea6\u6784\u6210\u7684\u6570\u7ec4\u4e2d\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u653e\u5728\u5f00\u59cb\uff0c\u4e00\u4e2a\u7f6e\u4e8e\u672b\u5c3e\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u53d8\u91cf maxareamaxarea \u6765\u6301\u7eed\u5b58\u50a8\u5230\u76ee\u524d\u4e3a\u6b62\u6240\u83b7\u5f97\u7684\u6700\u5927\u9762\u79ef\u3002 \u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u4f1a\u627e\u51fa\u6307\u9488\u6240\u6307\u5411\u7684\u4e24\u6761\u7ebf\u6bb5\u5f62\u6210\u7684\u533a\u57df\uff0c\u66f4\u65b0 maxarea\uff0c\u5e76\u5c06\u6307\u5411\u8f83\u77ed\u7ebf\u6bb5\u7684\u6307\u9488\u5411\u8f83\u957f\u7ebf\u6bb5\u90a3\u7aef\u79fb\u52a8\u4e00\u6b65\u3002 \u8fd9\u79cd\u65b9\u6cd5\u5982\u4f55\u5de5\u4f5c\uff1f \u6700\u521d\u6211\u4eec\u8003\u8651\u7531\u6700\u5916\u56f4\u4e24\u6761\u7ebf\u6bb5\u6784\u6210\u7684\u533a\u57df\u3002\u73b0\u5728\uff0c\u4e3a\u4e86\u4f7f\u9762\u79ef\u6700\u5927\u5316\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u66f4\u957f\u7684\u4e24\u6761\u7ebf\u6bb5\u4e4b\u95f4\u7684\u533a\u57df\u3002\u5982\u679c\u6211\u4eec\u8bd5\u56fe\u5c06\u6307\u5411\u8f83\u957f\u7ebf\u6bb5\u7684\u6307\u9488\u5411\u5185\u4fa7\u79fb\u52a8\uff0c\u77e9\u5f62\u533a\u57df\u7684\u9762\u79ef\u5c06\u53d7\u9650\u4e8e\u8f83\u77ed\u7684\u7ebf\u6bb5\u800c\u4e0d\u4f1a\u83b7\u5f97\u4efb\u4f55\u589e\u52a0\u3002\u4f46\u662f\uff0c\u5728\u540c\u6837\u7684\u6761\u4ef6\u4e0b\uff0c\u79fb\u52a8\u6307\u5411\u8f83\u77ed\u7ebf\u6bb5\u7684\u6307\u9488\u5c3d\u7ba1\u9020\u6210\u4e86\u77e9\u5f62\u5bbd\u5ea6\u7684\u51cf\u5c0f\uff0c\u4f46\u5374\u53ef\u80fd\u4f1a\u6709\u52a9\u4e8e\u9762\u79ef\u7684\u589e\u5927\u3002\u56e0\u4e3a\u79fb\u52a8\u8f83\u77ed\u7ebf\u6bb5\u7684\u6307\u9488\u4f1a\u5f97\u5230\u4e00\u6761\u76f8\u5bf9\u8f83\u957f\u7684\u7ebf\u6bb5\uff0c\u8fd9\u53ef\u4ee5\u514b\u670d\u7531\u5bbd\u5ea6\u51cf\u5c0f\u800c\u5f15\u8d77\u7684\u9762\u79ef\u51cf\u5c0f\u3002 class Solution: def maxArea(self, height: List[int]) -> int: \"\"\" \u53cc\u6307\u9488 \u8d2a\u5fc3 \u4e24\u7aef\u8f83\u77ed\u7684\u5f80\u5185\u79fb\u52a8 \"\"\" l, r = 0, len(height) - 1 res = 0 while l < r: res = max(res, (r - l) * min(height[r], height[l])) if height[l] <= height[r]: l += 1 else: r -= 1 return res class Solution { public int maxArea(int[] height) { int ans = 0, i = 0, j = height.length - 1; while(i < j){ ans = Math.max((j - i) * Math.min(height[i], height[j]), ans); if (height[i] <= height[j]){ i++; }else{ j--; } } return ans; } }","title":"\u89e3\u6cd5\u4e00 \u53cc\u6307\u9488\u6cd5 O(n) \u5939\u903c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bruce-on2","text":"public int maxArea(int[] height) { int ans = 0; for(int i = 0; i < height.length - 1; i++){ for(int j = i + 1; j < height.length; j++){ ans = Math.max((j - i ) * Math.min(height[i], height[j]), ans); } } return ans; } \u4e8c\u5206\u7b54\u6848\u6cd5","title":"\u89e3\u6cd5\u4e8c bruce O(n**2)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#15","text":"","title":"15.\u4e09\u6570\u4e4b\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_78","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \uff0c\u4f7f\u5f97 a + b + c = 0 \uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u4f8b\u5982, \u7ed9\u5b9a\u6570\u7ec4 nums = [-1, 0, 1, 2, -1, -4]\uff0c \u6ee1\u8db3\u8981\u6c42\u7684\u4e09\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 1], [-1, -1, 2] ]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_79","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#on2-hash","text":"\u904d\u5386\u4e24\u4e2a\u6811 \u7528hash\u5bfb\u627e\u7b2c\u4e09\u4e2a\u6570\u5b57 \u51cf\u679d \u526a\u6389i\u6570\u5b57\u76f8\u540c\u7684\u60c5\u51b5\u548c\u526a\u6389j\u6570\u5b57\u76f8\u540c\u7684\u60c5\u51b5 class Solution { public List<List<Integer>> threeSum(int[] nums) { Arrays.sort(nums); HashMap<Integer, Integer> numsMap = new HashMap<Integer, Integer>(); for(int i = 0; i < nums.length; i++){ if(numsMap.containsKey(nums[i])){ numsMap.put(nums[i], numsMap.get(nums[i]) + 1); }else{ numsMap.put(nums[i], 0); } } for(int i = 0; i < nums.length - 2; i++){ if(i != 0 && nums[i] == nums[i-1]){ i = i + numsMap.get(nums[i]) - 1; continue; } for(int j = i + 1; j < nums.length - 1; j++){ if(j - i > 1 && nums[j] == nums[j-1]){ if(nums[i] == nums[j]){ j = j + numsMap.get(nums[j]) - 2; }else{ j = j + numsMap.get(nums[j]) - 1; } continue; } int num3 = - nums[i] - nums[j]; if(num3 == nums[j+1]){ ArrayList<Integer> temp = new ArrayList<Integer>(); temp.add(nums[i]); temp.add(num3); temp.add(nums[j]); ans.add(temp); }else if (num3 > nums[j+1] && numsMap.containsKey(num3)){ ArrayList<Integer> temp = new ArrayList<Integer>(); temp.add(nums[i]); temp.add(num3); temp.add(nums[j]); ans.add(temp); } } } List<List<Integer>> ans1 = new ArrayList<>(ans); return ans1; } }","title":"\u89e3\u6cd5\u4e00 O(n**2) hash\u6cd5 \u8f83\u6162"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#sort-2sum","text":"\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u5bf9\u8f93\u5165\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u8fd0\u884c\u4e09\u5143\u7ec4\u4e2d\u53ef\u80fd\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6240\u6709\u7d22\u5f15\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5bf9\u9635\u5217\u7684\u5269\u4f59\u90e8\u5206\u8fdb\u884c\u6807\u51c6\u7684\u53cc\u54112Sum\u626b\u63cf\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5e0c\u671b\u8df3\u8fc7\u76f8\u540c\u7684\u5143\u7d20\uff0c\u4ee5\u907f\u514d\u5728\u7b54\u6848\u4e2d\u91cd\u590d\uff0c\u800c\u4e0d\u4f1a\u50cf\u8fd9\u6837\u8bbe\u7f6e\u6216smt def threeSum(self, nums: List[int]) -> List[List[int]]: \"\"\" \u53cc\u6307\u9488 \u5939\u903c two-sum \u8fb9\u754c \u65e0\u91cd\u590d\u4e09\u5143\u7ec4 \"\"\" nums = sorted(nums) res = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue l, r = i + 1, len(nums) - 1 while l < r: if nums[l] + nums[r] + nums[i] == 0: res.append([nums[i], nums[l], nums[r]]) while l < r and nums[l] == nums[l + 1]: l += 1 while l < r and nums[r] == nums[r - 1]: r -= 1 l += 1 r -= 1 elif nums[l] + nums[r] + nums[i] < 0: l += 1 else: r -= 1 return res class Solution { public List<List<Integer>> threeSum(int[] nums) { Arrays.sort(nums); List<List<Integer>> res = new LinkedList<>(); for(int i = 0; i < nums.length - 2; i++){ // // skip same result if (i > 0 && nums[i] == nums[i - 1]) { continue; } // bi-2sum int lo = i + 1, hi = nums.length - 1, sum = 0 - nums[i]; while(lo < hi){ if(nums[lo] + nums[hi] == sum){ res.add(Arrays.asList(nums[i], nums[lo], nums[hi])); // \u8df3\u8fc7\u91cd\u590d\u5143\u7d20 while (lo < hi && nums[lo] == nums[lo+1]) lo++; while (lo < hi && nums[hi] == nums[hi-1]) hi--; lo++; hi--; }else if(nums[lo] + nums[hi] < sum) { lo++; }else{ hi--; } } } return res; } }","title":"\u89e3\u6cd5\u4e8c sort + 2sum + \u526a\u679d"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#18","text":"","title":"18.\u56db\u6570\u4e4b\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_80","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \u548c d \uff0c\u4f7f\u5f97 a + b + c + d \u7684\u503c\u4e0e target \u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002 \u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_81","text":"\u89e3\u6cd5\u4e00 \u4efb\u610f\u4e24\u6570\u7ec4\u5408hash + \u7d22\u5f15\u4e0d\u4e00\u81f4 O(n**2) class Solution: def fourSum(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: List[List[int]] \"\"\" dic = collections.defaultdict(list) for i in range(len(nums)): for j in range(i+1,len(nums)): dic[nums[i]+nums[j]].append((i,j)) result = set() for key in dic: if target - key in dic: list1 = dic[key] list2 = dic[target - key] # \u7d22\u5f15\u4e0d\u4e00\u81f4 for (i,j) in list1: for (k,l) in list2: if i!=k and i!=l and j!=k and j!=l: flist = [nums[i],nums[j],nums[k],nums[l] flist.sort() result.add(tuple(flist)) return list(result)","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#on-2","text":"\u5148\u6392\u5e8f \u9012\u5f52\u56de\u6eaf def fourSum(self, nums, target): def findNsum(l, r, target, N, result, results): if r-l+1 < N or N < 2 or target < nums[l]*N or target > nums[r]*N: # early termination return if N == 2: # two pointers solve sorted 2-sum problem while l < r: s = nums[l] + nums[r] if s == target: results.append(result + [nums[l], nums[r]]) l += 1 while l < r and nums[l] == nums[l-1]: l += 1 elif s < target: l += 1 else: r -= 1 else: # recursively reduce N for i in range(l, r+1): if i == l or (i > l and nums[i-1] != nums[i]): findNsum(i+1, r, target-nums[i], N-1, result+[nums[i]], results) nums.sort() results = [] findNsum(0, len(nums)-1, target, 4, [], results) return results","title":"\u89e3\u6cd5\u4e8c \u9012\u5f52  O(n ** 2)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#23-k","text":"","title":"23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_82","text":"\u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: [ 1->4->5, 1->3->4, 2->6 ] \u8f93\u51fa: 1->1->2->3->4->4->5->6","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_83","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_84","text":"\u95ee\u98981 \u975e\u7a7a\u6570\u7ec4\u8981\u5148heapify\u624d\u80fd\u53d8\u6210heap \u95ee\u98982 \u8981\u4fdd\u8bc1\u4e0d\u6b62\u4f18\u5148\u7ea7\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u6bd4\u8f83 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e5f\u8981\u53ef\u6bd4\u8f83(\u6216\u8005\u4fdd\u8bc1\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u91cd\u590d) import heapq class Solution: def mergeKLists(self, lists: List[ListNode]) -> ListNode: \"\"\" \u4f18\u5148\u7ea7\u961f\u5217 \u95ee\u9898: \u975e\u7a7a\u6570\u7ec4\u8981\u5148heapify\u624d\u80fd\u53d8\u6210heap \"\"\" hp = [(n.val, idx) for idx, n in enumerate(lists) if n] heapq.heapify(hp) dummy = ListNode(-1) p = dummy while hp: v, idx = heapq.heappop(hp) p.next = ListNode(v) p = p.next if lists[idx].next: heapq.heappush(hp, (lists[idx].next.val, idx)) lists[idx] = lists[idx].next return dummy.next","title":"\u89e3\u6cd5\u4e00 \u4f18\u5148\u7ea7\u961f\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_85","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#31_1","text":"","title":"31.\u4e0b\u4e00\u4e2a\u6392\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_86","text":"\u5b9e\u73b0\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6392\u5217\u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002 \u5fc5\u987b\u539f\u5730\u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff0c\u8f93\u5165\u4f4d\u4e8e\u5de6\u4fa7\u5217\uff0c\u5176\u76f8\u5e94\u8f93\u51fa\u4f4d\u4e8e\u53f3\u4fa7\u5217\u3002 1,2,3 \u2192 1,3,2 3,2,1 \u2192 1,2,3 1,1,5 \u2192 1,5,1","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_87","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_88","text":"\u8be5\u9898\u76ee\u753b\u56fe\u66f4\u5bb9\u6613 \u9996\u5148\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u5e8f\u5217\u7684\u964d\u5e8f\uff0c\u6ca1\u6709\u53ef\u80fd\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u6570\u7ec4\u4e0d\u53ef\u80fd\u6709\u4e0b\u4e00\u4e2a\u6392\u5217\uff1a [9, 5, 4, 3, 1] \u6211\u4eec\u9700\u8981\u4ece\u53f3\u8fb9\u627e\u5230\u7b2c\u4e00\u5bf9\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u5b57 a[i] \u548c a[i-1]\uff0c\u5b83\u4eec\u6ee1\u8db3 a[i]>a[i-1]\u3002\u73b0\u5728\uff0c\u6ca1\u6709\u5bf9 a[i] \u53f3\u4fa7\u7684\u91cd\u65b0\u6392\u5217\u53ef\u4ee5\u521b\u5efa\u66f4\u5927\u7684\u6392\u5217\uff0c\u56e0\u4e3a\u8be5\u5b50\u6570\u7ec4\u7531\u6570\u5b57\u6309\u964d\u5e8f\u7ec4\u6210\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u6392\u5217 a[i-1] \u53f3\u8fb9\u7684\u6570\u5b57\uff0c\u5305\u62ec\u5b83\u81ea\u5df1\u3002 \u73b0\u5728\uff0c\u4ec0\u4e48\u6837\u5b50\u7684\u91cd\u65b0\u6392\u5217\u5c06\u4ea7\u751f\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u5b57\u5462\uff1f\u6211\u4eec\u60f3\u8981\u521b\u5efa\u6bd4\u5f53\u524d\u66f4\u5927\u7684\u6392\u5217\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6570\u5b57 a[i-1] \u66ff\u6362\u4e3a\u4f4d\u4e8e\u5176\u53f3\u4fa7\u533a\u57df\u7684\u6570\u5b57\u4e2d**\u6bd4\u5b83\u66f4\u5927\u7684\u6700\u5c0f\u6570\u5b57**\uff0c\u4f8b\u5982 a[j]\u3002 \u6211\u4eec\u4ea4\u6362\u6570\u5b57 a[i-1] \u548c a[j]\u3002\u6211\u4eec\u73b0\u5728\u5728\u7d22\u5f15 i-1\u5904\u6709\u6b63\u786e\u7684\u6570\u5b57\u3002 \u4f46\u76ee\u524d\u7684\u6392\u5217\u4ecd\u7136\u4e0d\u662f\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u7684\u6392\u5217\u3002\u6211\u4eec\u9700\u8981\u901a\u8fc7\u4ec5\u4f7f\u7528 a[i-1]\u53f3\u8fb9\u7684\u6570\u5b57\u6765\u5f62\u6210\u6700\u5c0f\u7684\u6392\u5217\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u653e\u7f6e\u90a3\u4e9b\u6309\u5347\u5e8f\u6392\u5217\u7684\u6570\u5b57\uff0c\u4ee5\u83b7\u5f97\u6700\u5c0f\u7684\u6392\u5217\u3002 \u4f46\u662f\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u5728\u4ece\u53f3\u4fa7\u626b\u63cf\u6570\u5b57\u65f6\uff0c\u6211\u4eec\u53ea\u662f\u7ee7\u7eed\u9012\u51cf\u7d22\u5f15\u76f4\u5230\u6211\u4eec\u627e\u5230 a[i] \u548c a[i-1] \u8fd9\u5bf9\u6570\u3002\u5176\u4e2d\uff0ca[i] > a[i-1]\u3002\u56e0\u6b64\uff0ca[i-1] \u53f3\u8fb9\u7684\u6240\u6709\u6570\u5b57\u90fd\u5df2\u6309\u964d\u5e8f\u6392\u5e8f\u3002\u6b64\u5916\uff0c\u4ea4\u6362 a[i-1] \u548c a[j]\u5e76\u672a\u6539\u53d8\u8be5\u987a\u5e8f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u53cd\u8f6c a[i-1]\u4e4b\u540e\u7684\u6570\u5b57\uff0c\u4ee5\u83b7\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u5b57\u5178\u6392\u5217\u3002 \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u5bf9\u6574\u4e2a\u6570\u7ec4\u8fdb\u884c\u4e24\u6b21\u626b\u63cf\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u6ca1\u6709\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u539f\u5730\u66ff\u6362\u8db3\u4ee5\u505a\u5230\u3002 class Solution { public void nextPermutation(int[] nums) { int i = nums.length - 1; for(;i > 0; i--){ if(nums[i] > nums[i-1]){ break } } if(i > 0 && nums[i] > nums[i-1]){ int j = i + 1; while(j < nums.length && nums[j] > nums[i-1]){ j++; } swap(nums, --j, i-1); reverse(nums, i, nums.length - 1); return; } reverse(nums, 0, nums.length - 1); } private void swap(int[] nums, int i, int j){ int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } private void reverse(int[] nums, int i, int j){ int times = (j - i + 1) >> 1; for(int k = 0; k < times; k++){ swap(nums, i + k, j - k); } } }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#33","text":"","title":"33.\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_89","text":"\u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002 ( \u4f8b\u5982\uff0c\u6570\u7ec4 [0,1,2,4,5,6,7] \u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] )\u3002 \u641c\u7d22\u4e00\u4e2a\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f O(log n) \u7ea7\u522b\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [4,5,6,7,0,1,2], target = 0 \u8f93\u51fa: 4 \u793a\u4f8b 2: \u8f93\u5165: nums = [4,5,6,7,0,1,2], target = 3 \u8f93\u51fa: -1 \u5728\u771f\u5b9e\u7684\u9762\u8bd5\u4e2d\u9047\u5230\u8fc7\u8fd9\u9053\u9898\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_90","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_91","text":"\u5047\u8bbe nums \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a[12\u300113\u300114\u300115\u300116\u300117\u300118\u300119\u30010\u30011\u30012\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u300110\u300111] \u7531\u4e8e\u672a\u5b8c\u5168\u6392\u5e8f\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u8fdb\u884c\u5e38\u89c4\u7684\u4e8c\u8fdb\u5236\u641c\u7d22\u3002\u4f46\u662f\u8bc0\u7a8d\u51fa\u5728\u8fd9\u91cc\uff1a \u5982\u679c\u76ee\u6807\u662f14\uff0c\u90a3\u4e48\u6211\u4eec nums \u5c06\u5bf9\u6b64\u8fdb\u884c\u8c03\u6574\uff0c\u5176\u4e2d\u201c inf\u201d\u8868\u793a\u65e0\u7a77\u5927\uff1a [12\u300113\u300114\u300115\u300115\u300117\u300118\u300119\uff0cinf\uff0cinf\uff0cinf\uff0cinf\uff0cinf\uff0cinf\uff0cinf \uff0cinf\uff0cinf\uff0cinf\uff0cinf\uff0cinf \u5982\u679c\u76ee\u6807\u4e3a7\uff0c\u5219\u6211\u4eec\u8c03\u6574 nums \u4e3a\uff1a [-inf\uff0c-inf\uff0c-inf\uff0c-inf\uff0c-inf\uff0c-inf\uff0c-inf\uff0c-inf\uff0c0\u30011\u30012\u30013\u30014\u30015\uff0c 6\uff0c7\uff0c8\uff0c9\uff0c10\uff0c11] \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u8fdb\u884c\u666e\u901a\u7684\u4e8c\u8fdb\u5236\u641c\u7d22\u3002\u5f53\u7136\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u8c03\u6574\u6574\u4e2a\u6570\u7ec4\uff0c\u800c\u662f\u4ec5\u52a8\u6001\u8c03\u6574\u4ec5\u67e5\u770b\u7684\u5143\u7d20\u3002\u901a\u8fc7\u5c06\u76ee\u6807\u5143\u7d20\u548c\u5b9e\u9645\u5143\u7d20\u90fd\u4e0enums [0]\u8fdb\u884c\u6bd4\u8f83\u6765\u8fdb\u884c\u8c03\u6574\u3002 int search(vector<int>& nums, int target) { int lo = 0, hi = nums.size(); while (lo < hi) { int mid = (lo + hi) / 2; double num = (nums[mid] < nums[0]) == (target < nums[0]) ? nums[mid] : target < nums[0] ? -INFINITY : INFINITY; if (num < target) lo = mid + 1; else if (num > target) hi = mid; else return mid; } return -1; }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_92","text":"class Solution(object): def search(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: int \"\"\" l, r = 0, len(nums) while l < r: mid = l + (r - l) // 2 if nums[mid] == target: return mid if nums[mid] > nums[l]: if nums[l] <= target and target < nums[mid]: r = mid else: l = mid + 1 else: if nums[mid] < target and target <= nums[r - 1]: l = mid + 1 else: r = mid return -1","title":"\u89e3\u6cd5\u4e8c \u5de6\u95ed\u53f3\u5f00\u4e8c\u5206\u67e5\u627e"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_93","text":"\u7b2c\u4e00\u6b21\u4e8c\u5206\u67e5\u627e\uff1a \u4e3a\u4e86\u627e\u5230\u6570\u7ec4\u5728\u54ea\u4e00\u5904\u53ef\u4ee5\u5206\u5272\u4e24\u6bb5\u5347\u5e8f\u6570\u7ec4\uff0c\u6bd4\u5982 [4,5,6,7,0,1,2]\uff0c\u6211\u5e0c\u671b\u77e5\u90537\u8fd9\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u8fd9\u6837\u6211\u5c31\u80fd\u5c06\u6574\u4e2a\u6570\u7ec4\u5206\u4e3a\u6709\u5e8f\u7684\u4e24\u4e2a\u90e8\u5206\u3002 \u5728\u8fd9\u6b21\u67e5\u627e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u5229\u7528\u4e86 nums[mid] \u8ddf nums[0] \u7684\u5173\u7cfb\uff0c\u6765\u786e\u8ba4 nums[mid] \u843d\u5728\u54ea\u4e00\u6bb5\uff0c\u4ee5\u6b63\u786e\u5730\u8c03\u6574 low \u548c high \u7684\u5927\u5c0f\u3002 \u7b2c\u4e8c\u6b21\u4e8c\u5206\u67e5\u627e \u4e3a\u4e86\u627e\u5230target\u7684\u4e0b\u6807\uff0c\u9996\u5148\u8981\u77e5\u9053target\u5728\u4e24\u6bb5\u5347\u5e8f\u6570\u7ec4\u4e2d\u7684\u54ea\u4e00\u6bb5\uff08\u5c06 target \u548c nums[0] \u6bd4\u5927\u5c0f\uff09\u7136\u540e\u5728\u6240\u5728\u7684\u8fd9\u4e00\u6bb5\u8fdb\u884c\u5e38\u89c4\u7684\u4e8c\u5206\u67e5\u627e\u3002 \u7528\u4e86\u4e24\u6b21\u4e8c\u5206\u67e5\u627e\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(2logn) = O(logn)O(2logn)=O(logn)","title":"\u89e3\u6cd5\u4e09 \u4e8c\u6b21\u4e8c\u5206\u67e5\u627e"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#34","text":"","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_94","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f O(log n) \u7ea7\u522b\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c\uff0c\u8fd4\u56de [-1, -1]\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [5,7,7,8,8,10], target = 8 \u8f93\u51fa: [3,4] \u793a\u4f8b 2: \u8f93\u5165: nums = [5,7,7,8,8,10], target = 6 \u8f93\u51fa: [-1,-1]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_95","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_96","text":"class Solution: def searchRange(self, nums: List[int], target: int) -> List[int]: if not nums or len(nums) == 0: return [-1, -1] l, r = 0, len(nums) - 1 while l < r: mid = l + ((r - l) >> 1) if nums[mid] < target: l = mid + 1 else: r = mid if nums[l] != target: return [-1, -1] start = l l, r = 0, len(nums) while l < r: mid = l + ((r - l) >> 1) if nums[mid] <= target: l = mid + 1 else: r = mid end = r - 1 return [start, end] class Solution { public int[] searchRange(int[] nums, int target) { /** * \u627e\u5230target\u7684\u5f00\u59cb * \u627e\u5230target\u7684\u7ed3\u675f */ int start = -1, end = -1; int[] result = new int[]{start, end}; int left = 0, right = nums.length - 1; while(left <= right){ int mid = (left + right) >> 1; if(nums[mid] == target && (mid == 0 || nums[mid] > nums[mid - 1])){ start = mid; break; }else if (nums[mid] >= target){ right = mid - 1; }else{ left = mid + 1; } } if (start == -1){ return result; } left = 0; right = nums.length - 1; while(left <= right){ int mid = (left + right) >> 1; if(nums[mid] == target && (mid == nums.length-1 || nums[mid] < nums[mid+1])){ end = mid; break; }else if (nums[mid] <= target){ left = mid + 1; }else{ right = mid - 1; } } result[0] = start; result[1] = end; return result; } }","title":"\u89e3\u6cd5\u4e00 \u4e8c\u5206\u67e5\u627e"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_97","text":"class Solution { // returns leftmost (or rightmost) index at which `target` should be // inserted in sorted array `nums` via binary search. private int extremeInsertionIndex(int[] nums, int target, boolean left) { int lo = 0; int hi = nums.length - 1; while (lo <= hi) { int mid = (lo + hi) >> 1; if (nums[mid] > target || (left && target == nums[mid])) { hi = mid - 1; } else { lo = mid + 1; } } return lo; } public int[] searchRange(int[] nums, int target) { int[] targetRange = {-1, -1}; int leftIdx = extremeInsertionIndex(nums, target, true); // assert that `leftIdx` is within the array bounds and that `target` // is actually in `nums`. if (leftIdx == nums.length || nums[leftIdx] != target) { return targetRange; } targetRange[0] = leftIdx; targetRange[1] = extremeInsertionIndex(nums, target, false)-1; return targetRange; } }","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#48","text":"","title":"48.\u65cb\u8f6c\u56fe\u50cf"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_98","text":"\u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002 \u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002 \u8bf4\u660e\uff1a \u4f60\u5fc5\u987b\u5728\u539f\u5730\u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002\u8bf7\u4e0d\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a matrix = [ [1,2,3], [4,5,6], [7,8,9] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [7,4,1], [8,5,2], [9,6,3] ] \u793a\u4f8b 2: \u7ed9\u5b9a matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_99","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_100","text":"1.\u8ba1\u7b97\u5f85\u65cb\u8f6c\u5c42\u6570 2.\u8ba1\u7b97\u67d0\u4e00\u5c42\u5982\u4f55\u65cb\u8f6c class Solution: def rotate(self, matrix: List[List[int]]) -> None: \"\"\" Do not return anything, modify matrix in-place instead. \u601d\u8def: \u65cb\u8f6c \u8f6c\u7f6e + \u7ffb\u8f6c \"\"\" n = len(matrix) cycles = n // 2 if n == 0: return for k in range(cycles): for i in range(k, n - k - 1): temp = matrix[k][i] matrix[k][i] = matrix[n-1-i][k] matrix[n-1-i][k] = matrix[n-1-k][n-1-i] matrix[n-1-k][n-1-i] = matrix[i][n-1-k] matrix[i][n-1-k] = temp","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_101","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(N^2). \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u7531\u4e8e\u65cb\u8f6c\u64cd\u4f5c\u662f \u5c31\u5730 \u5b8c\u6210\u7684\u3002 \u6700\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u5148\u8f6c\u7f6e\u77e9\u9635\uff0c\u7136\u540e\u7ffb\u8f6c\u6bcf\u4e00\u884c\u3002\u8fd9\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u5df2\u7ecf\u80fd\u8fbe\u5230\u6700\u4f18\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N^2) O ( N 2)\u3002 class Solution: def rotate(self, matrix: List[List[int]]) -> None: \"\"\" Do not return anything, modify matrix in-place instead. \u601d\u8def: \u65cb\u8f6c \u8f6c\u7f6e + \u7ffb\u8f6c \"\"\" if not matrix or len(matrix) < 2: return n = len(matrix) for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] for i in range(n): matrix[i] = matrix[i][::-1] class Solution { public void rotate(int[][] matrix) { int n = matrix.length; // transpose matrix for (int i = 0; i < n; i++) { for (int j = i; j < n; j++) { int tmp = matrix[j][i]; matrix[j][i] = matrix[i][j]; matrix[i][j] = tmp; } } // reverse each row for (int i = 0; i < n; i++) { for (int j = 0; j < n / 2; j++) { int tmp = matrix[i][j]; matrix[i][j] = matrix[i][n - j - 1]; matrix[i][n - j - 1] = tmp; } } } }","title":"\u89e3\u6cd5\u4e8c \u8f6c\u7f6e+\u7ffb\u8f6c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#54","text":"","title":"54.\u87ba\u65cb\u77e9\u9635"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_102","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b m x n \u4e2a\u5143\u7d20\u7684\u77e9\u9635\uff08m \u884c, n \u5217\uff09\uff0c\u8bf7\u6309\u7167\u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f\uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] \u8f93\u51fa: [1,2,3,6,9,8,7,4,5] \u793a\u4f8b 2: \u8f93\u5165: [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] \u8f93\u51fa: [1,2,3,4,8,12,11,10,9,5,6,7]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_103","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_104","text":"class Solution: def spiralOrder(self, matrix: List[List[int]]) -> List[int]: \"\"\" \u89c4\u5f8b\uff1a\u627e\u5230m\u548cn\u4e2d\u8f83\u5c0f\u8005 \u83b7\u5f97\u5708\u6570 \u5982\u679c\u8f83\u5c0f\u8005\u4e3a\u5076\u6570k (k + 1) // 2 \u6700\u5185\u5708\u4e0d\u662f\u5355\u5c42 \u5982\u679c\u8f83\u5c0f\u8005\u4e3a\u5947\u6570k (k + 1) // 2 \u6700\u5185\u5708\u662f\u5355\u5c42 \"\"\" def traverse(i): # \u4e0a\u9762 for j in range(i, n - i): ans.append(matrix[i][j]) # \u53f3\u9762 for j in range(i + 1, m - i): ans.append(matrix[j][n - i - 1]) # \u5355\u5c42\u4e0d\u6267\u884c\u540e\u4e24\u6761 if i != ls - 1 or (k & 1) == 0: # \u4e0b\u9762 for j in range(n - i - 2, i - 1, -1): ans.append(matrix[m - i - 1][j]) # \u5de6\u9762 for j in range(m - i - 2, i, -1): ans.append(matrix[j][i]) m = len(matrix) if not m: return matrix n = len(matrix[0]) k = min(m, n) ls = (k + 1) >> 1 ans = [] for i in range(ls): traverse(i) return ans","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_105","text":"class Solution(object): def spiralOrder(self, matrix): def spiral_coords(r1, c1, r2, c2): for c in range(c1, c2 + 1): yield r1, c for r in range(r1 + 1, r2 + 1): yield r, c2 # \u5982\u679cr1 == r2 or c1 == c2 \u6700\u4e2d\u5fc3\u5355\u5c42\u904d\u5386 if r1 < r2 and c1 < c2: for c in range(c2 - 1, c1, -1): yield r2, c for r in range(r2, r1, -1): yield r, c1 if not matrix: return [] ans = [] v while r1 <= r2 and c1 <= c2: for r, c in spiral_coords(r1, c1, r2, c2): ans.append(matrix[r][c]) r1 += 1; r2 -= 1 c1 += 1; c2 -= 1 return an","title":"\u89e3\u6cd5\u4e8c \u7d22\u5f15\u662f\u5426\u76f8\u9047\u5224\u65ad\u662f\u5426\u662f\u5355\u5c42"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#55","text":"","title":"55.\u8df3\u8dc3\u6e38\u620f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_106","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002 \u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u793a\u4f8b 1: \u8f93\u5165: [2,3,1,1,4] \u8f93\u51fa: true \u89e3\u91ca: \u4ece\u4f4d\u7f6e 0 \u5230 1 \u8df3 1 \u6b65, \u7136\u540e\u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u793a\u4f8b 2: \u8f93\u5165: [3,2,1,0,4] \u8f93\u51fa: false \u89e3\u91ca: \u65e0\u8bba\u600e\u6837\uff0c\u4f60\u603b\u4f1a\u5230\u8fbe\u7d22\u5f15\u4e3a 3 \u7684\u4f4d\u7f6e\u3002\u4f46\u8be5\u4f4d\u7f6e\u7684\u6700\u5927\u8df3\u8dc3\u957f\u5ea6\u662f 0 \uff0c \u6240\u4ee5\u4f60\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_107","text":"\u4ece\u53f3\u5411\u5de6\u7684\u601d\u8def\u4f1a\u66f4\u597d\u00b7","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_108","text":"\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6O(n**2) class Solution: def canJump(self, nums: List[int]) -> bool: dp = [False] * len(nums) dp[0] = True for i in range(1, len(nums)): for j in range(i - 1, -1, -1): if dp[j] and (i - j) <= nums[j]: dp[i] = True break return dp[len(nums)-1] class Solution: def canJump(self, nums: List[int]) -> bool: marks = [0] for i in range(1, len(nums)): length = len(marks) for x in range(length-1, -1, -1): j = marks[x] if (i - j) <= nums[j]: marks.append(i) break return marks != [] and marks[-1] + 1 == len(nums)","title":"\u89e3\u6cd5\u4e00 \u526a\u679d \u901f\u5ea6\u8f83\u6162"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_109","text":"python \u8d85\u65f6 O(n**2) class Solution: def canJump(self, nums: List[int]) -> bool: length = len(nums) dp = [False] * length # \u81ea\u53f3\u5411\u5de6 dp[length - 1] = True for i in range(length - 2, -1, -1): next_farthest_step = min(length - 1, i + nums[i]) for j in range(i + 1, next_farthest_step + 1): if dp[j]: dp[i] = True break return dp[0]","title":"\u89e3\u6cd5\u4e8c \u52a8\u6001\u89c4\u5212 \u81ea\u53f3\u5411\u5de6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_110","text":"\u5f53\u6211\u4eec\u628a\u4ee3\u7801\u6539\u6210\u81ea\u5e95\u5411\u4e0a\u7684\u6a21\u5f0f\uff0c\u6211\u4eec\u4f1a\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u53d1\u73b0\uff0c\u4ece\u67d0\u4e2a\u4f4d\u7f6e\u51fa\u53d1\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u6807\u8bb0\u4e3a GOOD \u7684\u5750\u6807\uff08\u7531\u8df3\u51fa\u5faa\u73af\u7684\u6761\u4ef6\u53ef\u5f97\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\u627e\u5230\u6700\u5de6\u8fb9\u7684\u90a3\u4e2a\u5750\u6807\u3002\u5982\u679c\u6211\u4eec\u7528\u4e00\u4e2a\u5355\u72ec\u7684\u53d8\u91cf\u6765\u8bb0\u5f55\u6700\u5de6\u8fb9\u7684 GOOD \u4f4d\u7f6e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u907f\u514d\u641c\u7d22\u6574\u4e2a\u6570\u7ec4\uff0c\u8fdb\u800c\u53ef\u4ee5\u7701\u7565\u6574\u4e2a memo \u6570\u7ec4\u3002 \u4ece\u53f3\u5411\u5de6\u8fed\u4ee3\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6211\u4eec\u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e00\u6b65\u8df3\u8dc3\u53ef\u4ee5\u5230\u8fbe GOOD \u7684\u4f4d\u7f6e\uff08currPosition + nums[currPosition] >= leftmostGoodIndex\uff09\u3002\u5982\u679c\u53ef\u4ee5\u5230\u8fbe\uff0c\u5f53\u524d\u4f4d\u7f6e\u4e5f\u6807\u8bb0\u4e3a GOOD \uff0c\u540c\u65f6\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u5c06\u6210\u4e3a\u65b0\u7684\u6700\u5de6\u8fb9\u7684 GOOD \u4f4d\u7f6e\uff0c\u4e00\u76f4\u91cd\u590d\u5230\u6570\u7ec4\u7684\u5f00\u5934\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5750\u6807\u6807\u8bb0\u4e3a GOOD \u610f\u5473\u7740\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u8df3\u5230\u6700\u540e\u7684\u4f4d\u7f6e\u3002 \u6a21\u62df\u4e00\u4e0b\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u8f93\u5165\u6570\u7ec4 nums = [9, 4, 2, 1, 0, 2, 0]\uff0c\u6211\u4eec\u7528 G \u8868\u793a GOOD\uff0c\u7528 B \u8868\u793a BAD \u548c U \u8868\u793a UNKNOWN\u3002\u6211\u4eec\u9700\u8981\u8003\u8651\u6240\u6709\u4ece 0 \u51fa\u53d1\u7684\u60c5\u51b5\u5e76\u5224\u65ad\u5750\u6807 0 \u662f\u5426\u662f\u597d\u5750\u6807\u3002\u7531\u4e8e\u5750\u6807 1 \u662f GOOD\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece 0 \u8df3\u5230 1 \u5e76\u4e14 1 \u6700\u7ec8\u53ef\u4ee5\u8df3\u5230\u5750\u6807 6\uff0c\u6240\u4ee5\u5c3d\u7ba1 nums[0] \u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u6700\u540e\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u79cd\u65b9\u6848\u5c31\u53ef\u4ee5\u77e5\u9053\u7ed3\u679c\u3002 Index 0 1 2 3 4 5 6 nums 9 4 2 1 0 2 0 memo U G B B B G G class Solution: def canJump(self, nums: List[int]) -> bool: length = len(nums) lastPos = length - 1 for i in range(length - 2, -1, -1): if i + nums[i] >= lastPos: lastPos = i return lastPos == 0","title":"\u89e3\u6cd5\u4e09 \u8d2a\u5fc3"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_111","text":"bool canJump(int A[], int n) { int i = 0; for (int reach = 0; i < n && i <= reach; ++i) reach = max(i + A[i], reach); return i == n; }","title":"\u89e3\u6cd5\u56db \u8d2a\u5fc3"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#56","text":"","title":"56.\u5408\u5e76\u533a\u95f4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_112","text":"\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u8bf7\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[1,3],[2,6],[8,10],[15,18]] \u8f93\u51fa: [[1,6],[8,10],[15,18]] \u89e3\u91ca: \u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6]. \u793a\u4f8b 2: \u8f93\u5165: [[1,4],[4,5]] \u8f93\u51fa: [[1,5]] \u89e3\u91ca: \u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_113","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_114","text":"\u7ef4\u62a4\u524d\u4e00\u4e2a\u5f85\u5408\u5e76\u597d\u7684\u533a\u95f4\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c left_max\uff0c right_max \u5f53\u5f53\u524d\u533a\u95f4\u7684\u5de6\u8fb9\u754c\u5927\u4e8e\u5e26\u5408\u5e76\u597d\u7684\u53f3\u8fb9\u754c\uff0c\u628a\u5408\u5e76\u597d\u7684\u8fb9\u754c\u653e\u5165\u7ed3\u679c\u96c6\u5408\uff0c\u91cd\u65b0\u628a\u5f53\u524d\u533a\u95f4\u5de6\u53f3\u8fb9\u754c\u66f4\u65b0\u6210\u5e26\u5408\u5e76\u597d\u7684\u533a\u95f4\u8fb9\u754c \u6ce8\u610f\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u8981\u653e\u5165\u7ed3\u679c\u96c6\u5408\u4e2d class Solution: def merge(self, intervals: List[List[int]]) -> List[List[int]]: if not intervals: return intervals intervals = sorted(intervals, key=lambda x: (x[0], x[1])) left_max = -1; right_max = -1; ans = [] for left, right in intervals: if right_max == -1: left_max = left right_max = right elif left > right_max: ans.append([left_max, right_max]) left_max = left right_max = right elif right > right_max: right_max = right if not ans or right_max != ans[-1][1]: ans.append([left_max, right_max]) return ans \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn) \u9664\u53bb sort \u7684\u5f00\u9500\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u6b21\u7ebf\u6027\u626b\u63cf\uff0c\u6240\u4ee5\u4e3b\u8981\u7684\u65f6\u95f4\u5f00\u9500\u662f\u6392\u5e8f\u7684 O(nlgn)O(nlgn) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) (or O(n) \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u539f\u5730\u6392\u5e8f intervals \uff0c\u5c31\u4e0d\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\uff1b\u5426\u5219\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u7ebf\u6027\u5927\u5c0f\u7684\u7a7a\u95f4\u53bb\u5b58\u50a8 intervals \u7684\u5907\u4efd\uff0c\u6765\u5b8c\u6210\u6392\u5e8f\u8fc7\u7a0b","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_115","text":"\u9996\u5148\uff0c\u6211\u4eec\u5c06\u5217\u8868\u6309\u4e0a\u8ff0\u65b9\u5f0f\u6392\u5e8f\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u533a\u95f4\u63d2\u5165 merged \u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u6309\u987a\u5e8f\u8003\u8651\u4e4b\u540e\u7684\u6bcf\u4e2a\u533a\u95f4\uff1a\u5982\u679c\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5728\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u4e4b\u540e\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e0d\u4f1a\u91cd\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06\u8fd9\u4e2a\u533a\u95f4\u63d2\u5165 merged \u4e2d\uff1b\u5426\u5219\uff0c\u4ed6\u4eec\u91cd\u5408\uff0c\u6211\u4eec\u7528\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u66f4\u65b0\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9 end \u5982\u679c\u524d\u8005\u6570\u503c\u6bd4\u540e\u8005\u5927\u7684\u8bdd\u3002 class Solution: def merge(self, intervals: List[List[int]]) -> List[List[int]]: if not intervals: return intervals intervals = sorted(intervals, key=lambda x: (x[0], x[1])) ans = [] for left, right in intervals: # \u5f53\u7ed3\u679c\u96c6\u5408\u7a7a\u6216\u8005 \u65b0\u533a\u95f4\u4e0d\u4e0e\u7ed3\u679c\u7ed3\u5408\u6700\u540e\u7684\u533a\u95f4\u91cd\u53e0 \u5219\u628a\u8be5\u533a\u95f4\u653e\u5165\u7ed3\u679c\u96c6\u5408 if not ans or ans[-1][1] < left: ans.append([left, right]) # \u5426\u5219\u66f4\u65b0\u7ed3\u679c\u96c6\u5408\u6700\u540e\u4e00\u4e2a\u53bb\u89c1\u7684\u53f3\u8fb9\u754c else: ans[-1][1] = max(ans[-1][1], right) return ans","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#73","text":"","title":"73.\u77e9\u9635\u7f6e\u96f6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#731","text":"\u7ed9\u5b9a\u4e00\u4e2a m x n \u7684\u77e9\u9635\uff0c\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u4e3a 0\uff0c\u5219\u5c06\u5176\u6240\u5728\u884c\u548c\u5217\u7684\u6240\u6709\u5143\u7d20\u90fd\u8bbe\u4e3a 0\u3002\u8bf7\u4f7f\u7528 \u539f\u5730 \u7b97\u6cd5 \u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [1,1,1], [1,0,1], [1,1,1] ] \u8f93\u51fa: [ [1,0,1], [0,0,0], [1,0,1] ] \u793a\u4f8b 2: \u8f93\u5165: [ [0,1,2,0], [3,4,5,2], [1,3,1,5] ] \u8f93\u51fa: [ [0,0,0,0], [0,4,5,0], [0,3,1,0] ] \u8fdb\u9636: \u4e00\u4e2a\u76f4\u63a5\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 O( m n ) \u7684\u989d\u5916\u7a7a\u95f4\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u6539\u8fdb\u65b9\u6848\u662f\u4f7f\u7528 O( m + n ) \u7684\u989d\u5916\u7a7a\u95f4\uff0c\u4f46\u8fd9\u4ecd\u7136\u4e0d\u662f\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u5e38\u6570\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f","title":"73.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#732","text":"","title":"73.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7321-tonm-sonm","text":"class Solution { public void setZeroes(int[][] matrix) { if(matrix == null || matrix.length == 0){ return; } // \u5efa\u7acb\u884c\u6807\u8bb0\u6570\u7ec4 \u5217\u6807\u8bb0\u6570\u7ec4 int[] rows = new int[matrix.length], cols = new int[matrix[0].length]; for(int i = 0; i < matrix.length; i++){ for(int j = 0; j < matrix[0].length; j++){ if(matrix[i][j] == 0){ rows[i] += 1; cols[j] += 1; } } } for(int i = 0; i < matrix.length; i++){ if(rows[i] > 0){ for(int j = 0; j < matrix[0].length; j++){ matrix[i][j] = 0; } } } for(int j = 0; j < matrix[0].length; j++){ if(cols[j] > 0){ for(int i = 0; i < matrix.length; i++){ matrix[i][j] = 0; } } } } } class Solution { public void setZeroes(int[][] matrix) { int R = matrix.length; int C = matrix[0].length; Set<Integer> rows = new HashSet<Integer>(); Set<Integer> cols = new HashSet<Integer>(); // Essentially, we mark the rows and columns that are to be made zero for (int i = 0; i < R; i++) { for (int j = 0; j < C; j++) { if (matrix[i][j] == 0) { rows.add(i); cols.add(j); } } } // Iterate over the array once again and using the rows and cols sets, update the elements. for (int i = 0; i < R; i++) { for (int j = 0; j < C; j++) { if (rows.contains(i) || cols.contains(j)) { matrix[i][j] = 0; } } } } }","title":"73.2.1 \u65b9\u6cd5\u4e00 TO(n*m) SO(n+m)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7322-tonm-so1","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 O(2) \uff0c\u7528\u4e24\u4e2a\u5e03\u5c14\u53d8\u91cf\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002 \u5229\u7528\u6570\u7ec4\u7684\u9996\u884c\u548c\u9996\u5217\u6765\u8bb0\u5f55 0 \u503c\u3002\u4ece\u6570\u7ec4\u4e0b\u6807\u7684 A[1][1]\u5f00\u59cb\u904d\u5386\uff0c \u4e24\u4e2a\u5e03\u5c14\u503c\u8bb0\u5f55\u9996\u884c\u9996\u5217\u662f\u5426\u9700\u8981\u7f6e0 class Solution { public void setZeroes(int[][] matrix) { if(matrix == null || matrix.length == 0 || matrix[0].length == 0){ return; } // \u8bb0\u5f55\u9996\u884c\u9996\u5217\u662f\u5426\u7f6e0 boolean firstRow = false; for(int i = 0; i < matrix[0].length; i++){ if(matrix[0][i] == 0){ firstRow = true; } } boolean firstCol = false; for(int i = 0; i < matrix.length; i++){ if(matrix[i][0] == 0){ firstCol = true; } } // \u4ecematrix[1][1]\u5f00\u59cb\u904d\u5386\uff0c \u5229\u7528\u6570\u7ec4\u9996\u884c\u9996\u5217\u6765\u8bb0\u5f550\u503c for(int i = 1; i < matrix.length; i++){ for(int j = 1; j < matrix[0].length; j++){ if(matrix[i][j] == 0){ matrix[i][0] = 0; matrix[0][j] = 0; } } } for(int i = 1; i < matrix.length; i++){ if(matrix[i][0] == 0){ for(int j = 0; j < matrix[0].length; j++){ matrix[i][j] = 0; } } } // \u66f4\u65b0\u9996\u884c\u9996\u5217 for(int j = 1; j < matrix[0].length; j++){ if(matrix[0][j] == 0){ for(int i = 0; i < matrix.length; i++){ matrix[i][j] = 0; } } } if(firstRow){ for(int i = 0; i < matrix[0].length; i++){ matrix[0][i] = 0; } } if(firstCol){ for(int i = 0; i < matrix.length; i++){ matrix[i][0] = 0; } } } } class Solution { public void setZeroes(int[][] matrix) { Boolean isCol = false; int R = matrix.length; int C = matrix[0].length; for (int i = 0; i < R; i++) { // Since first cell for both first row and first column is the same i.e. matrix[0][0] // We can use an additional variable for either the first row/column. // For this solution we are using an additional variable for the first column // and using matrix[0][0] for the first row. if (matrix[i][0] == 0) { isCol = true; } for (int j = 1; j < C; j++) { // If an element is zero, we set the first element of the corresponding row and column to 0 if (matrix[i][j] == 0) { matrix[0][j] = 0; matrix[i][0] = 0; } } } // Iterate over the array once again and using the first row and first column, update the elements. for (int i = 1; i < R; i++) { for (int j = 1; j < C; j++) { if (matrix[i][0] == 0 || matrix[0][j] == 0) { matrix[i][j] = 0; } } } // See if the first row needs to be set to zero as well if (matrix[0][0] == 0) { for (int j = 0; j < C; j++) { matrix[0][j] = 0; } } // See if the first column needs to be set to zero as well if (isCol) { for (int i = 0; i < R; i++) { matrix[i][0] = 0; } } } }","title":"73.2.2 \u65b9\u6cd5\u4e8c TO(n*m) SO(1)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#74","text":"","title":"74.\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_116","text":"\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad m x n \u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a \u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002 \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 3 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 13 \u8f93\u51fa: false","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_117","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#om-n","text":"class Solution: def searchMatrix(self, matrix: List[List[int]], target: int) -> bool: if not matrix or len(matrix) == 0 or len(matrix[0]) == 0: return False m = len(matrix) n = len(matrix[0]) row = m - 1 col = 0 while row >= 0 and col < n: if matrix[row][col] == target: return True elif matrix[row][col] > target: row -= 1 else: col += 1 return False","title":"\u89e3\u6cd5\u4e00 \u5bf9\u89d2 O(m + n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#ologmn","text":"class Solution: def searchMatrix(self, matrix: List[List[int]], target: int) -> bool: m = len(matrix) if m == 0: return False n = len(matrix[0]) #\u4e8c\u5206\u67e5\u627e left, right = 0, m * n - 1 while left <= right: pivot_idx = (left + right) // 2 pivot_element = matrix[pivot_idx // n][pivot_idx % n] if target == pivot_element: return True else: if target < pivot_element: right = pivot_idx - 1 else: left = pivot_idx + 1 return False","title":"\u89e3\u6cd5\u4e8c O(logmn)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#75","text":"","title":"75. \u989c\u8272\u5206\u7c7b"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#751","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\uff0c\u4e00\u5171 n \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c \u539f\u5730 \u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5f97\u76f8\u540c\u989c\u8272\u7684\u5143\u7d20\u76f8\u90bb\uff0c\u5e76\u6309\u7167\u7ea2\u8272\u3001\u767d\u8272\u3001\u84dd\u8272\u987a\u5e8f\u6392\u5217\u3002 \u6b64\u9898\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 0\u3001 1 \u548c 2 \u5206\u522b\u8868\u793a\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\u3002 \u6ce8\u610f: \u4e0d\u80fd\u4f7f\u7528\u4ee3\u7801\u5e93\u4e2d\u7684\u6392\u5e8f\u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002 \u793a\u4f8b: \u8f93\u5165: [2,0,2,1,1,0] \u8f93\u51fa: [0,0,1,1,2,2] \u8fdb\u9636\uff1a \u4e00\u4e2a\u76f4\u89c2\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u7684\u4e24\u8d9f\u626b\u63cf\u7b97\u6cd5\u3002 \u9996\u5148\uff0c\u8fed\u4ee3\u8ba1\u7b97\u51fa0\u30011 \u548c 2 \u5143\u7d20\u7684\u4e2a\u6570\uff0c\u7136\u540e\u6309\u71670\u30011\u30012\u7684\u6392\u5e8f\uff0c\u91cd\u5199\u5f53\u524d\u6570\u7ec4\u3002 \u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u7684\u4e00\u8d9f\u626b\u63cf\u7b97\u6cd5\u5417\uff1f","title":"75.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#752","text":"","title":"75.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7521-partition","text":"[NOTE]: \u548cblue\u4ea4\u6362\u65f6white\u4e0d\u8981\u76f4\u63a5\u8fed\u4ee3\u5230\u4e0b\u4e00\u6b21, \u8981\u7ee7\u7eed\u5224\u65ad\u4ea4\u6362\u540e\u7684\u503c\u662f\u4ec0\u4e48 trick: \u628ared white blue \u6539\u6210 zero one two \u53ef\u80fd\u66f4\u6613\u5199 \u66f4\u6613\u8bfb class Solution: def sortColors(self, nums: List[int]) -> None: \"\"\" Do not return anything, modify nums in-place instead. \"\"\" red, white, blue = -1, 0, len(nums) while white < blue: if nums[white] == 0: nums[white], nums[red+1] = nums[red+1], nums[white] red += 1 white += 1 elif nums[white] == 1: white += 1 else: nums[white], nums[blue-1] = nums[blue-1], nums[white] blue -= 1","title":"75.2.1 \u7c7b\u4f3c\u4e8e\u5feb\u6392\u4e2d\u7684partition"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7522","text":"The idea is to sweep all 0s to the left and all 2s to the right, then all 1s are left in the middle. It is hard to define what is a \"one-pass\" solution but this algorithm is bounded by O(2n), meaning that at most each element will be seen and operated twice (in the case of all 0s). You may be able to write an algorithm which goes through the list only once, but each step requires multiple operations, leading the total operations larger than O(2n). class Solution { public: void sortColors(int A[], int n) { int second=n-1, zero=0; for (int i=0; i<=second; i++) { while (A[i]==2 && i<second) swap(A[i], A[second--]); while (A[i]==0 && i>zero) swap(A[i], A[zero++]); } } };","title":"75.2.2 \u626b\u63cf\u4e24\u904d \u4ea4\u6362"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7523","text":"def sortColors(self, nums: List[int]) -> None: \"\"\" \u8ba1\u6570\u6392\u5e8f 1.\u627e\u51fa\u5f85\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u6700\u5927\u548c\u6700\u5c0f\u7684\u5143\u7d20 \u672c\u9898\u76f4\u63a5\u5f970,2 2.\u7edf\u8ba1\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u503c\u4e3ai\u7684\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5b58\u5165\u6570\u7ec4 C \u7684\u7b2ci\u9879 3.\u5bf9\u6240\u6709\u7684\u8ba1\u6570\u7d2f\u52a0\uff08\u4ece C \u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6bcf\u4e00\u9879\u548c\u524d\u4e00\u9879\u76f8\u52a0\uff09 4.\u53cd\u5411\u586b\u5145\u76ee\u6807\u6570\u7ec4\uff1a\u5c06\u6bcf\u4e2a\u5143\u7d20i\u653e\u5728\u65b0\u6570\u7ec4\u7684\u7b2cC[i]\u9879\uff0c\u6bcf\u653e\u4e00\u4e2a\u5143\u7d20\u5c31\u5c06C[i]\u51cf\u53bb1 \"\"\" min_val, max_val = 0, 2 c = [0] * (max_val-min_val+1) for i in range(0, len(nums)): c[nums[i]-min_val] += 1 for j in range(1, len(c)): c[j] = c[j] + c[j-1] result = [0]*len(nums) for k in range(len(nums)-1, -1, -1): result[c[nums[k]-min_val]-1] = nums[k] c[nums[k]-min_val] -= 1 return result","title":"75.2.3 \u8ba1\u6570\u6392\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#88","text":"","title":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#881","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d \uff0c \u4f7f\u5f97 num1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u8bf4\u660e: \u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n \uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002 \u793a\u4f8b: \u8f93\u5165: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 \u8f93\u51fa: [1,2,2,3,5,6]","title":"88.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#882","text":"","title":"88.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#8821","text":"class Solution: def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None: \"\"\" Do not return anything, modify nums1 in-place instead. \"\"\" l = m + n - 1 while m and n: if nums1[m-1] > nums2[n-1]: nums1[l] = nums1[m-1] m -= 1 else: nums1[l] = nums2[n-1] n -= 1 l -= 1 for i in range(n): nums1[i] = nums2[i] def merge(self, nums1, m, nums2, n): while m > 0 and n > 0: if nums1[m-1] >= nums2[n-1]: nums1[m+n-1] = nums1[m-1] m -= 1 else: nums1[m+n-1] = nums2[n-1] n -= 1 if n > 0: nums1[:n] = nums2[:n] class Solution { public: void merge(int A[], int m, int B[], int n) { int i=m-1; int j=n-1; int k = m+n-1; while(i >=0 && j>=0) { if(A[i] > B[j]) A[k--] = A[i--]; else A[k--] = B[j--]; } while(j>=0) A[k--] = B[j--]; } };","title":"88.2.1 \u65b9\u6cd5\u4e00 \u628a\u8f83\u5927\u503c\u653e\u5165\u6700\u540e"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#130","text":"","title":"130.\u88ab\u56f4\u7ed5\u7684\u533a\u57df"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_118","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u77e9\u9635\uff0c\u5305\u542b 'X' \u548c 'O'\uff08\u5b57\u6bcd O\uff09\u3002 \u627e\u5230\u6240\u6709\u88ab 'X' \u56f4\u7ed5\u7684\u533a\u57df\uff0c\u5e76\u5c06\u8fd9\u4e9b\u533a\u57df\u91cc\u6240\u6709\u7684 'O' \u7528 'X' \u586b\u5145\u3002 \u793a\u4f8b: X X X X X O O X X X O X X O X X \u8fd0\u884c\u4f60\u7684\u51fd\u6570\u540e\uff0c\u77e9\u9635\u53d8\u4e3a\uff1a X X X X X X X X X X X X X O X X \u89e3\u91ca: \u88ab\u56f4\u7ed5\u7684\u533a\u95f4\u4e0d\u4f1a\u5b58\u5728\u4e8e\u8fb9\u754c\u4e0a\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u4efb\u4f55\u8fb9\u754c\u4e0a\u7684 'O' \u90fd\u4e0d\u4f1a\u88ab\u586b\u5145\u4e3a 'X'\u3002 \u4efb\u4f55\u4e0d\u5728\u8fb9\u754c\u4e0a\uff0c\u6216\u4e0d\u4e0e\u8fb9\u754c\u4e0a\u7684 'O' \u76f8\u8fde\u7684 'O' \u6700\u7ec8\u90fd\u4f1a\u88ab\u586b\u5145\u4e3a 'X'\u3002\u5982\u679c\u4e24\u4e2a\u5143\u7d20\u5728\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u76f8\u90bb\uff0c\u5219\u79f0\u5b83\u4eec\u662f\u201c\u76f8\u8fde\u201d\u7684\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_119","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs","text":"\u5bf9\u8fb9\u754c\u4e0a\u7684 O \u8981\u7279\u6b8a\u5904\u7406\uff0c\u90a3\u4e48\u5269\u4e0b\u7684 O \u66ff\u6362\u6210 X \u5c31\u53ef\u4ee5\u4e86\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5982\u4f55\u5bfb\u627e\u548c\u8fb9\u754c\u8054\u901a\u7684 O class Solution: def solve(self, board: List[List[str]]) -> None: \"\"\" \u5bf9\u8fb9\u754c\u4e0a\u7684 O \u8981\u7279\u6b8a\u5904\u7406\uff0c\u90a3\u4e48\u5269\u4e0b\u7684 O \u66ff\u6362\u6210 X \u5c31\u53ef\u4ee5\u4e86\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5982\u4f55\u5bfb\u627e\u548c\u8fb9\u754c\u8054\u901a\u7684 O \"\"\" def dfs(i, j): # \u5982\u679c\u8fd4\u56deTrue \u9700\u8981\u6062\u590d\u5df2\u4fee\u6539 board[i][j] = '#' # \u5de6 \u4e0a \u53f3 \u4e0b directions = [(0, -1), (-1, 0), (0, 1), (1, 0)] for dx, dy in directions: if (i + dx) >= 0 and (i + dx) < m and (j + dy) >= 0 and (j + dy) < n and board[i + dx][j + dy] =='O': dfs(i + dx, j + dy) m = len(board) if not m: return n = len(board[0]) if not n: return for j in range(n): if board[0][j] == 'O': dfs(0, j) if board[m-1][j] == 'O': dfs(m-1, j) for i in range(m): if board[i][0] == 'O': dfs(i, 0) if board[i][n-1] == 'O': dfs(i, n - 1) for i in range(m): for j in range(n): if board[i][j] == 'O': board[i][j] = 'X' if board[i][j] == '#': board[i][j] = 'O'","title":"\u89e3\u6cd5\u4e00 DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_120","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#134","text":"","title":"134.\u52a0\u6cb9\u7ad9 [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_121","text":"\u5728\u4e00\u6761\u73af\u8def\u4e0a\u6709 N \u4e2a\u52a0\u6cb9\u7ad9\uff0c\u5176\u4e2d\u7b2c i \u4e2a\u52a0\u6cb9\u7ad9\u6709\u6c7d\u6cb9 gas[i] \u5347\u3002 \u4f60\u6709\u4e00\u8f86\u6cb9\u7bb1\u5bb9\u91cf\u65e0\u9650\u7684\u7684\u6c7d\u8f66\uff0c\u4ece\u7b2c i \u4e2a\u52a0\u6cb9\u7ad9\u5f00\u5f80\u7b2c i+1 \u4e2a\u52a0\u6cb9\u7ad9\u9700\u8981\u6d88\u8017\u6c7d\u6cb9 cost[i] \u5347\u3002\u4f60\u4ece\u5176\u4e2d\u7684\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u5f00\u59cb\u65f6\u6cb9\u7bb1\u4e3a\u7a7a\u3002 \u5982\u679c\u4f60\u53ef\u4ee5\u7ed5\u73af\u8def\u884c\u9a76\u4e00\u5468\uff0c\u5219\u8fd4\u56de\u51fa\u53d1\u65f6\u52a0\u6cb9\u7ad9\u7684\u7f16\u53f7\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 \u8bf4\u660e: \u5982\u679c\u9898\u76ee\u6709\u89e3\uff0c\u8be5\u7b54\u6848\u5373\u4e3a\u552f\u4e00\u7b54\u6848\u3002 \u8f93\u5165\u6570\u7ec4\u5747\u4e3a\u975e\u7a7a\u6570\u7ec4\uff0c\u4e14\u957f\u5ea6\u76f8\u540c\u3002 \u8f93\u5165\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5747\u4e3a\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: gas = [1,2,3,4,5] cost = [3,4,5,1,2] \u8f93\u51fa: 3 \u89e3\u91ca: \u4ece 3 \u53f7\u52a0\u6cb9\u7ad9(\u7d22\u5f15\u4e3a 3 \u5904)\u51fa\u53d1\uff0c\u53ef\u83b7\u5f97 4 \u5347\u6c7d\u6cb9\u3002\u6b64\u65f6\u6cb9\u7bb1\u6709 = 0 + 4 = 4 \u5347\u6c7d\u6cb9 \u5f00\u5f80 4 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 4 - 1 + 5 = 8 \u5347\u6c7d\u6cb9 \u5f00\u5f80 0 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 8 - 2 + 1 = 7 \u5347\u6c7d\u6cb9 \u5f00\u5f80 1 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 7 - 3 + 2 = 6 \u5347\u6c7d\u6cb9 \u5f00\u5f80 2 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 6 - 4 + 3 = 5 \u5347\u6c7d\u6cb9 \u5f00\u5f80 3 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u4f60\u9700\u8981\u6d88\u8017 5 \u5347\u6c7d\u6cb9\uff0c\u6b63\u597d\u8db3\u591f\u4f60\u8fd4\u56de\u5230 3 \u53f7\u52a0\u6cb9\u7ad9\u3002 \u56e0\u6b64\uff0c3 \u53ef\u4e3a\u8d77\u59cb\u7d22\u5f15\u3002 \u793a\u4f8b 2: \u8f93\u5165: gas = [2,3,4] cost = [3,4,3] \u8f93\u51fa: -1 \u89e3\u91ca: \u4f60\u4e0d\u80fd\u4ece 0 \u53f7\u6216 1 \u53f7\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u56e0\u4e3a\u6ca1\u6709\u8db3\u591f\u7684\u6c7d\u6cb9\u53ef\u4ee5\u8ba9\u4f60\u884c\u9a76\u5230\u4e0b\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u3002 \u6211\u4eec\u4ece 2 \u53f7\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u53ef\u4ee5\u83b7\u5f97 4 \u5347\u6c7d\u6cb9\u3002 \u6b64\u65f6\u6cb9\u7bb1\u6709 = 0 + 4 = 4 \u5347\u6c7d\u6cb9 \u5f00\u5f80 0 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 4 - 3 + 2 = 3 \u5347\u6c7d\u6cb9 \u5f00\u5f80 1 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 3 - 3 + 3 = 3 \u5347\u6c7d\u6cb9 \u4f60\u65e0\u6cd5\u8fd4\u56de 2 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u56e0\u4e3a\u8fd4\u7a0b\u9700\u8981\u6d88\u8017 4 \u5347\u6c7d\u6cb9\uff0c\u4f46\u662f\u4f60\u7684\u6cb9\u7bb1\u53ea\u6709 3 \u5347\u6c7d\u6cb9\u3002 \u56e0\u6b64\uff0c\u65e0\u8bba\u600e\u6837\uff0c\u4f60\u90fd\u4e0d\u53ef\u80fd\u7ed5\u73af\u8def\u884c\u9a76\u4e00\u5468\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_122","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_123","text":"1.\u603b\u6cb9\u91cf >= \u603b\u8def\u7a0b \u4e00\u5b9a\u53ef\u4ee5\u8d70\u5b8c\u5168\u7a0b 2.\u7b2c\u4e8c\u4e2a\u89c4\u5219\u53ef\u4ee5\u88ab\u4e00\u822c\u5316\uff0c\u6211\u4eec\u5f15\u5165\u53d8\u91cf curr_tank \uff0c\u8bb0\u5f55\u5f53\u524d\u6cb9\u7bb1\u91cc\u5269\u4f59\u7684\u603b\u6cb9\u91cf\u3002 \u5982\u679c\u5728\u67d0\u4e00\u4e2a\u52a0\u6cb9\u7ad9 curr_tank\u6bd4 0 \u5c0f\uff0c\u610f\u5473\u7740\u6211\u4eec\u65e0\u6cd5\u5230\u8fbe\u8fd9\u4e2a\u52a0\u6cb9\u7ad9\u3002 **\u4e0b\u4e00\u6b65\u6211\u4eec\u628a\u8fd9\u4e2a\u52a0\u6cb9\u7ad9\u5f53\u505a\u65b0\u7684\u8d77\u70b9\uff0c\u5e76\u5c06 curr_tank \u91cd\u7f6e\u4e3a 0 \uff0c\u56e0\u4e3a\u91cd\u65b0\u51fa\u53d1\uff0c\u6cb9\u7bb1\u4e2d\u7684\u6cb9\u4e3a 0 \u3002 \uff08\u4ece\u4e0a\u4e00\u6b21\u91cd\u7f6e\u7684\u52a0\u6cb9\u7ad9\u5230\u5f53\u524d\u52a0\u6cb9\u7ad9\u7684\u4efb\u610f\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u5230\u8fbe\u5f53\u524d\u52a0\u6cb9\u7ad9\u4e4b\u524d\uff0c curr_tank \u4e5f\u4e00\u5b9a\u4f1a\u6bd4 0 \u5c0f\uff09** class Solution: def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int: \"\"\" \u8d2a\u5fc3\uff1a 1.\u603b\u6cb9\u91cf >= \u603b\u8def\u7a0b \u4e00\u5b9a\u53ef\u4ee5\u8d70\u5b8c\u5168\u7a0b 2.\u7b2c\u4e8c\u4e2a\u89c4\u5219\u53ef\u4ee5\u88ab\u4e00\u822c\u5316\uff0c\u6211\u4eec\u5f15\u5165\u53d8\u91cf curr_tank \uff0c\u8bb0\u5f55\u5f53\u524d\u6cb9\u7bb1\u91cc\u5269\u4f59\u7684\u603b\u6cb9\u91cf\u3002 \u5982\u679c\u5728\u67d0\u4e00\u4e2a\u52a0\u6cb9\u7ad9 curr_tank\u6bd4 0 \u5c0f\uff0c\u610f\u5473\u7740\u6211\u4eec\u65e0\u6cd5\u5230\u8fbe\u8fd9\u4e2a\u52a0\u6cb9\u7ad9\u3002 **\u4e0b\u4e00\u6b65\u6211\u4eec\u628a\u8fd9\u4e2a\u52a0\u6cb9\u7ad9\u5f53\u505a\u65b0\u7684\u8d77\u70b9\uff0c\u5e76\u5c06 curr_tank \u91cd\u7f6e\u4e3a 0 \uff0c\u56e0\u4e3a\u91cd\u65b0\u51fa\u53d1\uff0c\u6cb9\u7bb1\u4e2d\u7684\u6cb9\u4e3a 0 \u3002 \uff08\u4ece\u4e0a\u4e00\u6b21\u91cd\u7f6e\u7684\u52a0\u6cb9\u7ad9\u5230\u5f53\u524d\u52a0\u6cb9\u7ad9\u7684\u4efb\u610f\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u5230\u8fbe\u5f53\u524d\u52a0\u6cb9\u7ad9\u4e4b\u524d\uff0c curr_tank \u4e5f\u4e00\u5b9a\u4f1a\u6bd4 0 \u5c0f\uff09** \"\"\" total_gas = 0 cur_gas = 0 ans = 0 for i in range(len(gas)): total_gas += gas[i] - cost[i] cur_gas += gas[i] - cost[i] if cur_gas < 0: ans = i + 1 cur_gas = 0 return ans if total_gas >= 0 else -1","title":"\u89e3\u6cd5\u4e00 \u8d2a\u5fc3"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_124","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#150","text":"","title":"150.\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_125","text":"\u6839\u636e\u9006\u6ce2\u5170\u8868\u793a\u6cd5\uff0c\u6c42\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u6709\u6548\u7684\u8fd0\u7b97\u7b26\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u3002 \u8bf4\u660e\uff1a \u6574\u6570\u9664\u6cd5\u53ea\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002 \u7ed9\u5b9a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u603b\u662f\u6709\u6548\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8868\u8fbe\u5f0f\u603b\u4f1a\u5f97\u51fa\u6709\u6548\u6570\u503c\u4e14\u4e0d\u5b58\u5728\u9664\u6570\u4e3a 0 \u7684\u60c5\u51b5\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [\"2\", \"1\", \"+\", \"3\", \"*\"] \u8f93\u51fa: 9 \u89e3\u91ca: ((2 + 1) * 3) = 9 \u793a\u4f8b 2\uff1a \u8f93\u5165: [\"4\", \"13\", \"5\", \"/\", \"+\"] \u8f93\u51fa: 6 \u89e3\u91ca: (4 + (13 / 5)) = 6 \u793a\u4f8b 3\uff1a \u8f93\u5165: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \" \", \"/\", \" \", \"17\", \"+\", \"5\", \"+\"] \u8f93\u51fa: 22 \u89e3\u91ca: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_126","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_127","text":"python\u7684\u9664\u6cd5\u662f\u9677\u9631\uff0cc++\u6ca1\u95ee\u9898 class Solution: def evalRPN(self, tokens: List[str]) -> int: stack = [] sign = {'+', '-', '*', '/'} ans = 0 for c in tokens: if c in sign: num2 = stack.pop() num1 = stack.pop() if c == '+': stack.append(num1 + num2) elif c == '-': stack.append(num1 - num2) elif c == '*': stack.append(num1 * num2) else: # key:\u9664\u6cd5\u662f\u9677\u9631 # \u53e6\u4e00\u79cd\u5199\u6cd5\uff1aint(d[-2]/d[-1]) if num1 * num2 >= 0: stack.append(num1 // num2) else: stack.append(-(abs(num1) // abs(num2))) ans = stack[-1] else: stack.append(int(c)) if stack: return stack[-1] return ans","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_128","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#152","text":"","title":"152.\u4e58\u79ef\u6700\u5927\u5b50\u5e8f\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_129","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u51fa\u4e00\u4e2a\u5e8f\u5217\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\uff08\u8be5\u5e8f\u5217\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [2,3,-2,4] \u8f93\u51fa: 6 \u89e3\u91ca: \u5b50\u6570\u7ec4 [2,3] \u6709\u6700\u5927\u4e58\u79ef 6\u3002 \u793a\u4f8b 2: \u8f93\u5165: [-2,0,-1] \u8f93\u51fa: 0 \u89e3\u91ca: \u7ed3\u679c\u4e0d\u80fd\u4e3a 2, \u56e0\u4e3a [-2,-1] \u4e0d\u662f\u5b50\u6570\u7ec4\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_130","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_2","text":"\u4e58\u6cd5\u548c\u52a0\u6cd5\u6700\u5927\u533a\u522b\u662f\u4e58\u6cd5\u9700\u8981\u8003\u8651\u6b63\u8d1f\u53f7 \u66ff\u6362\u5927\u5c0f\u7d22\u5f15 \u6700\u5927\u503c \u8d1f\u6700\u5927\u503c \u6807\u7b7e\uff1a\u52a8\u6001\u89c4\u5212 \u904d\u5386\u6570\u7ec4\u65f6\u8ba1\u7b97\u5f53\u524d\u6700\u5927\u503c\uff0c\u4e0d\u65ad\u66f4\u65b0 \u4ee4imax\u4e3a\u5f53\u524d\u6700\u5927\u503c\uff0c\u5219\u5f53\u524d\u6700\u5927\u503c\u4e3a imax = max(imax * nums[i], nums[i]) \u7531\u4e8e\u5b58\u5728\u8d1f\u6570\uff0c\u90a3\u4e48\u4f1a\u5bfc\u81f4\u6700\u5927\u7684\u53d8\u6700\u5c0f\u7684\uff0c\u6700\u5c0f\u7684\u53d8\u6700\u5927\u7684\u3002\u56e0\u6b64\u8fd8\u9700\u8981\u7ef4\u62a4\u5f53\u524d\u6700\u5c0f\u503cimin\uff0cimin = min(imin * nums[i], nums[i]) \u5f53\u8d1f\u6570\u51fa\u73b0\u65f6\u5219imax\u4e0eimin\u8fdb\u884c\u4ea4\u6362\u518d\u8fdb\u884c\u4e0b\u4e00\u6b65\u8ba1\u7b97 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)O(n) class Solution: def maxProduct(self, nums: List[int]) -> int: \"\"\" \u4e58\u6cd5\u548c\u52a0\u6cd5\u6700\u5927\u533a\u522b\u662f\u4e58\u6cd5\u9700\u8981\u8003\u8651\u6b63\u8d1f\u53f7 \u66ff\u6362\u5927\u5c0f\u7d22\u5f15 \"\"\" ans = float('-inf') minv = 1 maxv = 1 for num in nums: if num < 0: minv, maxv = maxv, minv maxv = max(maxv * num, num) minv = min(minv * num, num) ans = max(maxv, ans) return ans","title":"\u89e3\u6cd5\u4e00 \u6b63\u8d1f\u6307\u9488 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_131","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#162","text":"","title":"162.\u5bfb\u627e\u5cf0\u503c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_132","text":"\u5cf0\u503c\u5143\u7d20\u662f\u6307\u5176\u503c\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u503c\u7684\u5143\u7d20\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u8f93\u5165\u6570\u7ec4 nums\uff0c\u5176\u4e2d nums[i] \u2260 nums[i+1]\uff0c\u627e\u5230\u5cf0\u503c\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002 \u6570\u7ec4\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u5cf0\u503c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u4efb\u4f55\u4e00\u4e2a\u5cf0\u503c\u6240\u5728\u4f4d\u7f6e\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums[-1] = nums[n] = -\u221e\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [1,2,3,1] \u8f93\u51fa: 2 \u89e3\u91ca: 3 \u662f\u5cf0\u503c\u5143\u7d20\uff0c\u4f60\u7684\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u5176\u7d22\u5f15 2\u3002 \u793a\u4f8b 2: \u8f93\u5165: nums = [1,2,1,3,5,6,4] \u8f93\u51fa: 1 \u6216 5 \u89e3\u91ca: \u4f60\u7684\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u7d22\u5f15 1\uff0c\u5176\u5cf0\u503c\u5143\u7d20\u4e3a 2\uff1b \u6216\u8005\u8fd4\u56de\u7d22\u5f15 5\uff0c \u5176\u5cf0\u503c\u5143\u7d20\u4e3a 6\u3002 \u8bf4\u660e: \u4f60\u7684\u89e3\u6cd5\u5e94\u8be5\u662f O(logN) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_133","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_134","text":"class Solution: def findPeakElement(self, nums: List[int]) -> int: left = 0 right = len(nums) - 1 while left < right: mid = left + ((right - left) >> 1) if nums[mid] < nums[mid + 1]: left = mid + 1 elif nums[mid] > nums[mid + 1]: right = mid return left","title":"\u89e3\u6cd5\u4e00 \u4e8c\u5206\u67e5\u627e"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_135","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#167-ii-","text":"","title":"167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1671","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6309\u7167 \u5347\u5e8f\u6392\u5217 \u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u627e\u5230\u4e24\u4e2a\u6570\u4f7f\u5f97\u5b83\u4eec\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570\u3002 \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u8fd9\u4e24\u4e2a\u4e0b\u6807\u503c index1 \u548c index2\uff0c\u5176\u4e2d index1 \u5fc5\u987b\u5c0f\u4e8e index2 \u3002 \u8bf4\u660e: \u8fd4\u56de\u7684\u4e0b\u6807\u503c\uff08index1 \u548c index2\uff09\u4e0d\u662f\u4ece\u96f6\u5f00\u59cb\u7684\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165\u53ea\u5bf9\u5e94\u552f\u4e00\u7684\u7b54\u6848\uff0c\u800c\u4e14\u4f60\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u76f8\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b: \u8f93\u5165: numbers = [2, 7, 11, 15], target = 9 \u8f93\u51fa: [1,2] \u89e3\u91ca: 2 \u4e0e 7 \u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 9 \u3002\u56e0\u6b64 index1 = 1, index2 = 2 \u3002","title":"167.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1672","text":"","title":"167.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#16721-onlogn","text":"class Solution: def twoSum(self, numbers: List[int], target: int) -> List[int]: \"\"\" Note: index\u4ece1\u5f00\u59cb \u5bf9\u5e94\u552f\u4e00\u7b54\u6848 \u4e0d\u53ef\u91cd\u590d\u4f7f\u7528\u76f8\u540c\u5143\u7d20 \u601d\u8def: \u5dee\u503c\u7684\u4e8c\u5206\u67e5\u627e \"\"\" highest = len(numbers) - 1 for i, a in enumerate(numbers): b = target - a # \u4e8c\u5206\u67e5\u627e low = i + 1 high = highest while low <= high: mid = (low + high) >> 1 if numbers[mid] == b: return i+1, mid+1 elif numbers[mid] > b: high = mid - 1 else: low = mid + 1","title":"167.2.1 \u65b9\u6cd5\u4e00 \u5dee\u503c\u7684\u4e8c\u5206\u67e5\u627e O(nlogn)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#16722-on-key-in-dicto1","text":"# dictionary def twoSum2(self, numbers, target): dic = {} for i, num in enumerate(numbers): if target-num in dic: return [dic[target-num]+1, i+1] dic[num] = i","title":"167.2.2 \u65b9\u6cd5\u4e8c \u5b57\u5178\u66ff\u6362\u4e0a\u9762\u7684\u4e8c\u5206\u67e5\u627e O(n)  'key in dict'\u64cd\u4f5c\u662fO(1) [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#16723-on","text":"def twoSum(self, numbers, target): l, r = 0, len(numbers)-1 while l < r: s = numbers[l] + numbers[r] if s == target: return [l+1, r+1] elif s < target: l += 1 else: r -= 1","title":"167.2.3 \u53cc\u6307\u9488 O(n) [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#169","text":"","title":"169.\u6c42\u4f17\u6570 [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1691","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u7684\u4f17\u6570\u3002\u4f17\u6570\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570 \u5927\u4e8e \u230a n/2 \u230b \u7684\u5143\u7d20\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u4f17\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,2,3] \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: [2,2,1,1,1,2,2] \u8f93\u51fa: 2","title":"169.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1692","text":"","title":"169.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#16921-hash-timeon-spaceon","text":"class Solution: def majorityElement(self, nums: List[int]) -> int: import collections return collections.Counter(nums).most_common(1)[0][0] import java.util.HashMap; public class Solution { public int MoreThanHalfNum_Solution(int [] array) { if(array == null || array.length == 0){ return 0; } if(array.length == 1){ return array[0]; } HashMap<Integer, Integer> map = new HashMap<>(); for(int i = 0; i < array.length; i++){ if(map.containsKey(array[i])){ if(map.get(array[i]) + 1 > array.length / 2){ return array[i]; } map.put(array[i], map.get(array[i]) + 1); }else{ map.put(array[i], 1); } } return 0; } }","title":"169.2.1 \u65b9\u6cd5\u4e00 Hash  timeO(n) spaceO(n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#16922-bruce-force-timeon2-spaceo1","text":"\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u4f17\u6570\u3002 \u5728\u5251\u6307 offer\u4e2d\u4e0d\u6210\u7acb\uff0c\u56e0\u4e3a\u6ca1\u6709\u4fdd\u8bc1\u6570\u7ec4\u4e2d\u603b\u5b58\u5728\u4f17\u6570 def majorityElement(self, nums): majority_count = len(nums)//2 for num in nums: count = sum(1 for elem in nums if elem == num) if count > majority_count: return num","title":"169.2.2 \u65b9\u6cd5\u4e8c Bruce force timeO(n**2)  + spaceO(1)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#16923-sorting-timeonlogn-spaceo1-or-n","text":"We sorted nums in place here - if that is not allowed, then we must spend linear additional space on a copy of nums and sort the copy instead. class Solution: def majorityElement(self, nums): nums.sort() return nums[len(nums)//2]","title":"169.2.3 \u65b9\u6cd5\u4e09 Sorting timeO(nlogn) spaceO(1 or n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#16924-random","text":"import random class Solution: def majorityElement(self, nums): majority_count = len(nums)//2 while True: candidate = random.choice(nums) if sum(1 for elem in nums if elem == candidate) > majority_count: return candidate","title":"169.2.4 \u65b9\u6cd5\u56db random (\u9884\u671f\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#16925-boyer-moore-voting-algorithm","text":"\u6469\u5c14\u6295\u7968\u7b97\u6cd5\u662f\u57fa\u4e8e\u8fd9\u4e2a\u4e8b\u5b9e\uff1a\u6bcf\u6b21\u4ece\u5e8f\u5217\u91cc\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u540c\u7684\u6570\u5b57\u5220\u9664\u6389\uff08\u6216\u79f0\u4e3a\u201c\u62b5\u6d88\u201d\uff09\uff0c\u6700\u540e\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\u6216\u51e0\u4e2a\u76f8\u540c\u7684\u6570\u5b57\uff0c\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u603b\u6570\u4e00\u534a\u7684\u90a3\u4e2a \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u4f17\u6570\u3002 \u5728\u5251\u6307 offer\u4e2d\u4e0d\u6210\u7acb\uff0c\u56e0\u4e3a\u6ca1\u6709\u4fdd\u8bc1\u6570\u7ec4\u4e2d\u603b\u5b58\u5728\u4f17\u6570 def majorityElement(self, nums): count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate","title":"169.2.5 \u65b9\u6cd5\u4e94 Boyer-Moore Voting Algorithm(\u6469\u5c14\u6295\u7968\u6cd5)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#16925-6-todo","text":"public int majorityElement(int[] nums) { int[] bit = new int[32]; for (int i = 0; i < nums.length; i++) { for (int j = 0; j < 32; j++) { bit[j] += (nums[i] >> j) & 1; } } int majority = 0; for (int j = 0; j < 32; j++) { bit[j] = bit[j] > (nums.length / 2)? 1 : 0; majority += bit[j] << j; } return majority; }","title":"169.2.5 \u65b9\u6cd56 \u4f4d\u8fd0\u7b97[todo]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#209-todo","text":"","title":"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4[\u53cc\u6307\u9488\u63a8\u8350] [\u4e8c\u5206\u6cd5todo]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1_6","text":"\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709 n \u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570 s \uff0c \u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c \u2265 s \u7684\u957f\u5ea6\u6700\u5c0f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4 \u3002 \u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de 0\u3002 \u793a\u4f8b: \u8f93\u5165: s = 7, nums = [2,3,1,2,4,3] \u8f93\u51fa: 2 \u89e3\u91ca: \u5b50\u6570\u7ec4 [4,3] \u662f\u8be5\u6761\u4ef6\u4e0b\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u3002 \u8fdb\u9636: \u5982\u679c\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86 O ( n ) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5, \u8bf7\u5c1d\u8bd5 O ( n log n ) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u3002","title":"1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2_5","text":"","title":"2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21_2","text":"def minSubArrayLen(self, s: int, nums: List[int]) -> int: sumv = 0 minLen = len(nums) + 1 l, r = 0, 0 while r < len(nums): sumv += nums[r] while sumv >= s: minLen = min(minLen, r - l + 1) sumv -= nums[l] l += 1 r += 1 return minLen if minLen != len(nums) + 1 else 0","title":"2.1 \u65b9\u6cd5\u4e00 \u53cc\u6307\u9488"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#22_1","text":"class Solution { public int minSubArrayLen(int s, int[] nums) { int[] sums = new int[nums.length + 1]; for (int i = 1; i < sums.length; i++){ sums[i] = sums[i - 1] + nums[i - 1]; } int minLen = Integer.MAX_VALUE; // i\u662f\u5f00\u59cb\u7ed3\u70b9 for (int i = 0; i < sums.length; i++) { int end = binarySearch(i + 1, sums.length - 1, sums[i] + s, sums); if (end == sums.length) break; if (end - i < minLen) minLen = end - i; } return minLen == Integer.MAX_VALUE ? 0 : minLen; } private int binarySearch(int lo, int hi, int key, int[] sums) { while (lo <= hi) { int mid = (lo + hi) / 2; if (sums[mid] >= key){ hi = mid - 1; } else { lo = mid + 1; } } return lo; } }","title":"2.2 \u65b9\u6cd5\u4e8c \u4e8c\u5206\u67e5\u627e \u9010\u5143\u7d20\u7d2f\u52a0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#215-k","text":"","title":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2151","text":"\u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,2,1,5,6,4] \u548c k = 2 \u8f93\u51fa: 5 \u793a\u4f8b 2: \u8f93\u5165: [3,2,3,1,2,4,5,5,6] \u548c k = 4 \u8f93\u51fa: 4 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u7684\u957f\u5ea6\u3002O(n)","title":"215.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2152","text":"","title":"215.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21521-partition","text":"import random class Solution: def findKthLargest(self, nums: List[int], k: int) -> int: \"\"\" \u627e\u5230\u7b2ck\u5927, \u5373\u627e\u5230\u7b2c\u5c0f\u7684\u5143\u7d20 \u65b9\u6cd51: \u5148\u6392\u5e8f \u518d\u6311\u7b2c(n + 1 - k)\u4e2a O(nlogn) \u65b9\u6cd52: 1.\u968f\u673a\u5316 2.\u6784\u9020partition: \u627e\u5230\u6307\u5b9a\u5143\u7d20\u7684\u4f4d\u7f6e, \u5e76\u628a\u6bd4\u5b83\u7684\u5c0f\u7684\u653e\u5de6\u9762, \u5176\u5b83\u7684\u653e\u53f3\u9762 3.\u628a2\u4e2d\u83b7\u53d6\u5230\u7684\u4f4d\u7f6e(+1)\u548c(n+1-k)\u8fdb\u884c\u6bd4\u8f83(\u5206\u800c\u6cbb\u4e4b) \"\"\" def partition(nums, start, end, item): \"\"\" \u627e\u5230\u6307\u5b9a\u5143\u7d20\u7684\u4f4d\u7f6e, \u5e76\u628a\u6bd4\u5b83\u7684\u5c0f\u7684\u653e\u5de6\u9762, \u5176\u5b83\u7684\u653e\u53f3\u9762 \"\"\" i = start - 1 for j in range(start, end): if nums[j] < item: nums[i+1], nums[j] = nums[j], nums[i+1] i += 1 else: continue nums[i+1], nums[end] = nums[end], nums[i+1] return i+1 def random_findKthLargest(nums, start, end, k): n = len(nums) # 1.\u968f\u673a\u5316 i = random.randint(start, end) nums[i], nums[end] = nums[end], nums[i] # 2.partition x = partition(nums, start, end, nums[end]) # 3.\u5206\u800c\u6cbb\u4e4b if x + 1 == n + 1 - k: return nums[x] elif x + 1 > n + 1 - k: return random_findKthLargest(nums, start, x - 1, k) else: return random_findKthLargest(nums, x + 1, end, k) return random_findKthLargest(nums, 0, len(nums)-1, k) import random class Solution: def findKthLargest(self, nums: List[int], k: int) -> int: def partition(l, r): i = l - 1 for j in range(l, r): if nums[j] < nums[r]: i += 1 nums[i], nums[j] = nums[j], nums[i] nums[i + 1], nums[r] = nums[r], nums[i + 1] return i + 1 def random_findKthSmallest(l, r, k): index = random.randint(l, r) nums[index], nums[r] = nums[r], nums[index] q = partition(l, r) if q == k: return nums[q] elif q < k: return random_findKthSmallest(q + 1, r, k) else: return random_findKthSmallest(l, q - 1, k) return random_findKthSmallest(0, len(nums) - 1, len(nums) - k)","title":"215.2.1 \u65b9\u6cd5\u4e00 partition \u91cd\u70b9\u770b\u7b2c\u4e8c\u4e2a"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21522-time-ok-on-logk-space-ok","text":"import heapq class Solution(object): def findKthLargest(self, nums, k): min_heap = [-float('inf')] * k heapq.heapify(min_heap) for num in nums: if num > min_heap[0]: heapq.heappop(min_heap) heapq.heappush(min_heap, num) return min_heap[0]","title":"215.2.2 \u6700\u5c0f\u5806 Time: O(k) + O(n * logk) | Space: O(K)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21523-time-on-klogn-space-on","text":"\u9996\u5148\u89e3\u91ca\u4e0b\u4e3a\u4ec0\u4e48\u8981 nums = [-num for num in nums] . \u56e0\u4e3aPython\u7684Standard Library\u91cc\u9762\u8c03\u7528heapify\u7684\u65f6\u5019\uff0c\u6c38\u8fdc\u662f\u4e00\u4e2amin_heap\uff0c\u7136\u540e\u56e0\u4e3a\u6ca1\u6709Max Heap\u7684implementation\uff0c\u4f60\u8981\u505a\u7684\u5c31\u662f\u901a\u8fc7Min Heap\u6765\u6a21\u62dfMax Heap\u7684\u8fd0\u7b97\uff0c \u6700\u7b80\u5355\u7684\u5c31\u662f\u5c06\u6240\u6709\u7684\u6570\u53d8\u6210 -num \uff0c\u8fd9\u662f\u4e0d\u662f\u4e00\u4e2a\u597d\u7684Practice\uff1f\u4e0d\u4e00\u5b9a\uff0c\u5f88\u591a\u4eba\u4e5f\u81ea\u5df1implement\u4e86Max Heap\u7684\u6570\u636e\u7ed3\u6784\u3002\u5177\u4f53\u63a8\u8350\u5927\u5bb6\u770b\u770b\u8fd9\u4e2a\u5e16\u5b50\uff1a StackOverFlow import heapq class Solution(object): def findKthLargest(self, nums, k): nums = [-num for num in nums] heapq.heapify(nums) res = float('inf') for _ in range(k): res = heapq.heappop(nums) return -res","title":"215.2.3 \u6700\u5927\u5806 Time: O(n + klog(n)) | Space: O(n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21524-max-heap-vs-min-heap","text":"\u54ea\u4e2a\u7b97\u6cd5\u66f4\u52a0\u597d\uff1f Max: Time: O(n + klog(n)) | Space: O(n) Min: Time: O(k) + O((n-k) * logk) | Space: O(K) \u5982\u679c\u8003\u8651k\u65e0\u9650\u63a5\u8fd1n Max: O(n + nlog(n)) ~= O(nlogn) Min: O(n + logk) ~= O(n) \u5982\u679c\u8003\u8651k = 0.5n Max: O(n + nlogn) Min: O(n + nlogn) \u5982\u679c\u8003\u8651n \u65e0\u9650\u5927 Max: O(constant * n) \u4e3a\u4ec0\u4e48\u662fconstant * n\uff0c \u53c2\u8003 Min: O(log(k) * n)","title":"215.2.4 Max Heap vs. Min Heap"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#238","text":"","title":"238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2381","text":"\u7ed9\u5b9a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d n > 1\uff0c\u8fd4\u56de\u8f93\u51fa\u6570\u7ec4 output \uff0c\u5176\u4e2d output[i] \u7b49\u4e8e nums \u4e2d\u9664 nums[i] \u4e4b\u5916\u5176\u4f59\u5404\u5143\u7d20\u7684\u4e58\u79ef\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3,4] \u8f93\u51fa: [24,12,8,6] \u8bf4\u660e: \u8bf7 \u4e0d\u8981\u4f7f\u7528\u9664\u6cd5\uff0c \u4e14\u5728 O( n ) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u6b64\u9898\u3002 \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u5728\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e2a\u9898\u76ee\u5417\uff1f\uff08 \u51fa\u4e8e\u5bf9\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7684\u76ee\u7684\uff0c\u8f93\u51fa\u6570\u7ec4 \u4e0d\u88ab\u89c6\u4e3a \u989d\u5916\u7a7a\u95f4\u3002\uff09","title":"238.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2382","text":"","title":"238.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#23821","text":"import math class Solution: def productExceptSelf(self, nums: List[int]) -> List[int]: forward = [1] for num in nums: forward.append(forward[-1]*num) forward = forward[:-1] back = [1] for num in nums[::-1]: back.append(back[-1]*num) back = back[:-1][::-1] return [forward[i] * back[i] for i, num in enumerate(nums)] public class Solution { public int[] productExceptSelf(int[] nums) { int n = nums.length; int[] res = new int[n]; res[0] = 1; for (int i = 1; i < n; i++) { res[i] = res[i - 1] * nums[i - 1]; } int right = 1; for (int i = n - 1; i >= 0; i--) { res[i] *= right; right *= nums[i]; } return res; }","title":"238.2.1 \u65b9\u6cd5\u4e00 \u9010\u5143\u7d20\u7d2f\u4e58"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#240ii","text":"","title":"240.\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_136","text":"\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22 m x n \u77e9\u9635 matrix \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a \u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002 \u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002 \u793a\u4f8b: \u73b0\u6709\u77e9\u9635 matrix \u5982\u4e0b\uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] \u7ed9\u5b9a target = 5\uff0c\u8fd4\u56de true\u3002 \u7ed9\u5b9a target = 20\uff0c\u8fd4\u56de false\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_137","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_138","text":"\u4e8c\u5206\u67e5\u627e\uff1a \u4ece\u5de6\u4e0b\u89d2\u6216\u53f3\u4e0a\u89d2\u5f00\u59cb\u4f5c\u4e3a\u4e2d\u503c \u5982\u679c\u5c0f\u4e8etarget \u5411\u53f3 \u5982\u679c\u5927\u4e8etarget \u5411\u4e0b class Solution: def searchMatrix(self, matrix, target): \"\"\" :type matrix: List[List[int]] :type target: int :rtype: bool \u4e8c\u5206\u67e5\u627e\uff1a \u4ece\u5de6\u4e0b\u89d2\u6216\u53f3\u4e0a\u89d2\u5f00\u59cb\u4f5c\u4e3a\u4e2d\u503c \u5982\u679c\u5c0f\u4e8etarget \u5411\u53f3 \u5982\u679c\u5927\u4e8etarget \u5411\u4e0b \"\"\" if len(matrix) == 0 or len(matrix[0]) == 0: return False m = len(matrix) n = len(matrix[0]) i = m - 1 j = 0 mid = matrix[i][j] while i >= 0 and j < n: if target == matrix[i][j]: return True elif target < matrix[i][j]: i -= 1 elif target > matrix[i][j]: j += 1 return False","title":"\u89e3\u6cd5\u4e00 \u77e9\u9635\u4e8c\u5206\u67e5\u627e"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#242","text":"","title":"242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2421","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad t \u662f\u5426\u662f s \u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"anagram\", t = \"nagaram\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: s = \"rat\", t = \"car\" \u8f93\u51fa: false \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u8fdb\u9636: \u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f","title":"242.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2422","text":"","title":"242.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#24221-hash","text":"class Solution(object): def isAnagram(self, s, t): \"\"\" :type s: str :type t: str :rtype: bool \"\"\" dic = dict() for i in s: dic.setdefault(i, 0) dic[i] += 1 for j in t: if j not in dic or dic[j] == 0: return False else: dic[j] -= 1 for key, val in dic.items(): if val != 0: return False return True Complexity analysis Time complexity : O(n)O(n). Time complexity is O(n)O(n) because accessing the counter table is a constant time operation. Space complexity : O(1)O(1). Although we do use extra space, the space complexity is O(1)O(1) because the table's size stays constant no matter how large nn is.","title":"242.2.1 \u65b9\u6cd5\u4e00 Hash"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#24222","text":"\u4e0d\u80fd\u89e3\u51b3\u8fdb\u9636\u95ee\u9898 def isAnagram2(self, s, t): # ord() : \u5b83\u4ee5\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08Unicode \u5b57\u7b26\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684 ASCII \u6570\u503c dic1, dic2 = [0]*26, [0]*26 for item in s: dic1[ord(item)-ord('a')] += 1 for item in t: dic2[ord(item)-ord('a')] += 1 return dic1 == dic2 242.2.3 \u65b9\u6cd5\u4e09 \u6392\u5e8f \u6bd4\u8f83 def isAnagram3(self, s, t): return sorted(s) == sorted(t)","title":"242.2.2 \u65b9\u6cd5\u4e8c \u6570\u7ec4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#260-iii","text":"","title":"260. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2601","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4f59\u6240\u6709\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002 \u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e24\u4e2a\u5143\u7d20\u3002 \u793a\u4f8b : \u8f93\u5165: [1,2,1,3,2,5] \u8f93\u51fa: [3,5] \u6ce8\u610f\uff1a \u7ed3\u679c\u8f93\u51fa\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c [5, 3] \u4e5f\u662f\u6b63\u786e\u7b54\u6848\u3002 \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u5b9e\u73b0\uff1f","title":"260.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2602","text":"","title":"260.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#26021-hash","text":"class Solution: def singleNumber(self, nums: List[int]) -> List[int]: \"\"\" \u65b9\u6cd5\u4e00: dict \"\"\" dic = dict() for num in nums: if num in dic: del dic[num] else: dic.setdefault(num, 1) return list(dic.keys())","title":"260.2.1 \u65b9\u6cd5\u4e00 hash"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#26022","text":"public class Solution { public int[] singleNumber(int[] nums) { int diff = 0; for (int num : nums) { diff ^= num; } // pick one bit as flag // (~ (diff - 1)) == -diff // x\u4ee3\u8868\u7684\u662f\u53ea\u51fa\u73b0\u4e00\u904d\u7684\u503c\u7684A B\u7684\u5f02\u6216 A^B // x & (-x) \u53d6\u5f97\u662fx\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u5c0f\u4f4d\u4e0a\u76841\u5176\u4ed6\u4f4d\u4e3a0\u4ee3\u8868\u7684\u6570\u503c // \u5219bitFlag\u4e3aA\u4e0eB\u6709\u533a\u522b\u7684\u6700\u5c0f\u4f4d\u4ee3\u8868\u7684\u503c \u5f02\u6216\uff1a\u4e0d\u4e00\u6837\u7684\u4f4d\u7f6e\u4e3a1 int bitFlag = (diff & (~ (diff - 1))); int[] res = new int[2]; for (int num : nums) { if ((num & bitFlag) == 0) { res[0] ^= num; } else { res[1] ^= num; } } return res; } }","title":"260.2.2 \u65b9\u6cd5\u4e8c \u4f4d\u8fd0\u7b97(\u4e8c\u904d, \u7b2c\u4e00\u904d\u5f97\u5230\u4e86\u4e24\u4e2a\u5355\u503c\u5f02\u6216, \u7b2c\u4e8c\u904d\u548c\u4e0a\u4e00\u904d\u7ed3\u679c)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#278","text":"","title":"278.\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_139","text":"\u4f60\u662f\u4ea7\u54c1\u7ecf\u7406\uff0c\u76ee\u524d\u6b63\u5728\u5e26\u9886\u4e00\u4e2a\u56e2\u961f\u5f00\u53d1\u65b0\u7684\u4ea7\u54c1\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4f60\u7684\u4ea7\u54c1\u7684\u6700\u65b0\u7248\u672c\u6ca1\u6709\u901a\u8fc7\u8d28\u91cf\u68c0\u6d4b\u3002\u7531\u4e8e\u6bcf\u4e2a\u7248\u672c\u90fd\u662f\u57fa\u4e8e\u4e4b\u524d\u7684\u7248\u672c\u5f00\u53d1\u7684\uff0c\u6240\u4ee5\u9519\u8bef\u7684\u7248\u672c\u4e4b\u540e\u7684\u6240\u6709\u7248\u672c\u90fd\u662f\u9519\u7684\u3002 \u5047\u8bbe\u4f60\u6709 n \u4e2a\u7248\u672c [1, 2, ..., n]\uff0c\u4f60\u60f3\u627e\u51fa\u5bfc\u81f4\u4e4b\u540e\u6240\u6709\u7248\u672c\u51fa\u9519\u7684\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 bool isBadVersion(version) \u63a5\u53e3\u6765\u5224\u65ad\u7248\u672c\u53f7 version \u662f\u5426\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u51fa\u9519\u3002\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002\u4f60\u5e94\u8be5\u5c3d\u91cf\u51cf\u5c11\u5bf9\u8c03\u7528 API \u7684\u6b21\u6570\u3002 \u793a\u4f8b: \u7ed9\u5b9a n = 5\uff0c\u5e76\u4e14 version = 4 \u662f\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002 \u8c03\u7528 isBadVersion(3) -> false \u8c03\u7528 isBadVersion(5) -> true \u8c03\u7528 isBadVersion(4) -> true \u6240\u4ee5\uff0c4 \u662f\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_140","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_141","text":"# The isBadVersion API is already defined for you. # @param version, an integer # @return a bool # def isBadVersion(version): class Solution(object): def firstBadVersion(self, n): \"\"\" :type n: int :rtype: int \"\"\" l, r = 1, n while l < r: mid = l + (r - l) // 2 if not isBadVersion(mid): l = mid + 1 else: r = mid return l","title":"\u89e3\u6cd5\u4e00 \u5de6\u5f00\u53f3\u95ed\u4e8c\u5206\u67e5\u627e"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_142","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#283","text":"","title":"283.\u79fb\u52a8\u96f6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_143","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 0 \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u793a\u4f8b: \u8f93\u5165: [0,1,0,3,12] \u8f93\u51fa: [1,3,12,0,0] \u8bf4\u660e: \u5fc5\u987b\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u80fd\u62f7\u8d1d\u989d\u5916\u7684\u6570\u7ec4\u3002 \u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_144","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_145","text":"class Solution: def moveZeroes(self, nums: List[int]) -> None: \"\"\" \u6392\u5e8f \u63d2\u5165\u6392\u5e8f \"\"\" if not nums or len(nums) == 1: return j = -1 for i in range(len(nums)): if nums[i] != 0: j += 1 nums[i], nums[j] = nums[j], nums[i]","title":"\u89e3\u6cd5\u4e00 \u63d2\u5165\u6392\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_146","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#287","text":"","title":"287.\u5bfb\u627e\u91cd\u590d\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_147","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\u5176\u6570\u5b57\u90fd\u5728 1 \u5230 n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c n\uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,3,4,2,2] \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [3,1,3,4,2] \u8f93\u51fa: 3 \u8bf4\u660e\uff1a \u4e0d\u80fd\u66f4\u6539\u539f\u6570\u7ec4\uff08\u5047\u8bbe\u6570\u7ec4\u662f\u53ea\u8bfb\u7684\uff09\u3002 \u53ea\u80fd\u4f7f\u7528\u989d\u5916\u7684 O(1) \u7684\u7a7a\u95f4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e O(n2) \u3002 \u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u6b62\u91cd\u590d\u51fa\u73b0\u4e00\u6b21\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_148","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#hash_1","text":"def findDuplicate(self, nums): nums.sort() for i in range(1, len(nums)): if nums[i] == nums[i-1]: return nums[i] class Solution: def findDuplicate(self, nums): seen = set() for num in nums: if num in seen: return num seen.add(num)","title":"\u89e3\u6cd5\u4e00 \u6392\u5e8f\u548cHash\uff08\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff09"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_149","text":"\u672c\u8d28\u4e0a\u662f\u4e2a\u5feb\u6162\u6307\u9488 \u4e4c\u9f9f\u8d70\u4e00\u6b65 \u5154\u5b50\u8d70\u4e24\u6b65 \u5f53\u76f8\u9047\u65f6\u77e5\u9053\u5154\u5b50\u6bd4\u4e4c\u9f9f\u5feb\u4e00\u500d\uff0c\u5373\u4e4c\u9f9f\u518d\u7ee7\u7eed\u8d70\uff0c\u5154\u5b50\u4ece\u5934\u8d70 \u4f7f\u7528\u6570\u7ec4\u4e2d\u7684\u503c\u4f5c\u4e3a\u7d22\u5f15\u4e0b\u6807\u8fdb\u884c\u904d\u5386\uff0c\u904d\u5386\u7684\u7ed3\u679c\u80af\u5b9a\u662f\u4e00\u4e2a\u73af\uff08\u6709\u4e00\u4e2a\u91cd\u590d\u5143\u7d20\uff09 \u68c0\u6d4b\u91cd\u590d\u5143\u7d20\u95ee\u9898\u8f6c\u6362\u6210\u68c0\u6d4b\u73af\u7684\u5165\u53e3 \u4e3a\u4e86\u627e\u5230\u73af\u7684\u5165\u53e3\uff0c\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u6b65\u9aa4\uff1a \u8bbe\u7f6e\u4e24\u4e2a\u5feb\u6162\u6307\u9488\uff0c fast\u6bcf\u6b21\u8d70\u4e24\u6b65\uff0cslow\u6bcf\u6b21\u8d70\u4e00\u6b65\uff0c\u6700\u7ec8\u8d70\u4e86slow\u8d70\u4e86n\u6b65\u4e0efast\u76f8\u9047\uff0cfast\u8d70\u4e862*n\uff0cfast\u53ef\u80fd\u6bd4slow\u591a\u9976\u4e86\u73af\u7684i\u5708\uff0c\u5f97\u5230\u73af\u7684\u5468\u957f\u4e3an/i slow\u6307\u9488\u7ee7\u7eed\u8d70, \u4e14\u53e6\u8bbe\u7b2c\u4e09\u4e2a\u6307\u9488\u6bcf\u6b21\u8d70\u4e00\u6b65\uff0c\u4e24\u4e2a\u6307\u9488\u5fc5\u5b9a\u5728\u5165\u53e3\u5904\u76f8\u9047 \u5047\u8bbe\u73af\u7684\u5165\u53e3\u548c\u8d77\u70b9\u7684\u8ddd\u79bb\u65f6m \u5f53\u7b2c\u4e09\u4e2a\u6307\u9488\u8d70\u4e86m\u6b65\u5230\u73af\u7684\u5165\u53e3\u65f6 slow\u521a\u597d\u8d70\u4e86n + m\u6b65\uff0c\u6362\u53e5\u8bdd\u8bf4\u65f6\u9976\u4e86\u73afi\u5708\uff08\u73af\u7684\u5468\u957f\u4e3an/i\uff09\u52a0m\u6b65\uff08\u8d77\u70b9\u5230\u5165\u53e3\u7684\u8ddd\u79bb\uff09 \u5f97\u5230\u76f8\u9047\u7684\u662f\u73af\u7684\u5165\u53e3\uff0c\u5165\u53e3\u5143\u7d20\u5373\u4e3a\u91cd\u590d\u5143\u7d20 class Solution: def findDuplicate(self, nums): # Find the intersection point of the two runners. slow = nums[0] fast = nums[0] while True: slow = nums[slow] fast = nums[nums[fast]] # \u5728\u6570\u7ec4\u4e2d\u76f8\u9047\u4e86\uff0c\u5faa\u73af\u7684\u5165\u53e3\u5143\u7d20\u5373\u662f\u91cd\u590d\u5143\u7d20 if slow == fast: break # \u627e\u5230\u5faa\u73af\u7684\u5165\u53e3\u5143\u7d20 ptr1 = nums[0] ptr2 = slow while ptr1 != ptr2: ptr1 = nums[ptr1] ptr2 = nums[ptr2] return ptr1","title":"\u89e3\u6cd5\u4e8c \u5f17\u6d1b\u4f0a\u5fb7\u7684\u4e4c\u9f9f\u548c\u5154\u5b50\uff08\u5faa\u73af\u68c0\u6d4b\uff09"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#289","text":"","title":"289.\u751f\u547d\u6e38\u620f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_150","text":"\u6839\u636e\u767e\u5ea6\u767e\u79d1\uff0c\u751f\u547d\u6e38\u620f\uff0c\u7b80\u79f0\u4e3a\u751f\u547d\uff0c\u662f\u82f1\u56fd\u6570\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u4f55\u987f\u00b7\u5eb7\u5a01\u57281970\u5e74\u53d1\u660e\u7684\u7ec6\u80de\u81ea\u52a8\u673a\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b m \u00d7 n \u4e2a\u683c\u5b50\u7684\u9762\u677f\uff0c\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u7ec6\u80de\u3002\u6bcf\u4e2a\u7ec6\u80de\u5177\u6709\u4e00\u4e2a\u521d\u59cb\u72b6\u6001 live\uff081\uff09\u5373\u4e3a\u6d3b\u7ec6\u80de\uff0c \u6216 dead\uff080\uff09\u5373\u4e3a\u6b7b\u7ec6\u80de\u3002\u6bcf\u4e2a\u7ec6\u80de\u4e0e\u5176\u516b\u4e2a\u76f8\u90bb\u4f4d\u7f6e\uff08\u6c34\u5e73\uff0c\u5782\u76f4\uff0c\u5bf9\u89d2\u7ebf\uff09\u7684\u7ec6\u80de\u90fd\u9075\u5faa\u4ee5\u4e0b\u56db\u6761\u751f\u5b58\u5b9a\u5f8b\uff1a \u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u7684\u6d3b\u7ec6\u80de\u6570\u5c11\u4e8e\u4e24\u4e2a\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u6b7b\u4ea1\uff1b \u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u6709\u4e24\u4e2a\u6216\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u4ecd\u7136\u5b58\u6d3b\uff1b \u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u6709\u8d85\u8fc7\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u6b7b\u4ea1\uff1b \u5982\u679c\u6b7b\u7ec6\u80de\u5468\u56f4\u6b63\u597d\u6709\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6b7b\u7ec6\u80de\u590d\u6d3b\uff1b \u6839\u636e\u5f53\u524d\u72b6\u6001\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u9762\u677f\u4e0a\u7ec6\u80de\u7684\u4e0b\u4e00\u4e2a\uff08\u4e00\u6b21\u66f4\u65b0\u540e\u7684\uff09\u72b6\u6001\u3002\u4e0b\u4e00\u4e2a\u72b6\u6001\u662f\u901a\u8fc7\u5c06\u4e0a\u8ff0\u89c4\u5219\u540c\u65f6\u5e94\u7528\u4e8e\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u6bcf\u4e2a\u7ec6\u80de\u6240\u5f62\u6210\u7684\uff0c\u5176\u4e2d\u7ec6\u80de\u7684\u51fa\u751f\u548c\u6b7b\u4ea1\u662f\u540c\u65f6\u53d1\u751f\u7684\u3002 \u793a\u4f8b: \u8f93\u5165: [ [0,1,0], [0,0,1], [1,1,1], [0,0,0] ] \u8f93\u51fa: [ [0,0,0], [1,0,1], [0,1,1], [0,1,0] ] \u8fdb\u9636: \u4f60\u53ef\u4ee5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u89e3\u51b3\u672c\u9898\u5417\uff1f\u8bf7\u6ce8\u610f\uff0c\u9762\u677f\u4e0a\u6240\u6709\u683c\u5b50\u9700\u8981\u540c\u65f6\u88ab\u66f4\u65b0\uff1a\u4f60\u4e0d\u80fd\u5148\u66f4\u65b0\u67d0\u4e9b\u683c\u5b50\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u4eec\u7684\u66f4\u65b0\u540e\u7684\u503c\u518d\u66f4\u65b0\u5176\u4ed6\u683c\u5b50\u3002 \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4\u6765\u8868\u793a\u9762\u677f\u3002\u539f\u5219\u4e0a\uff0c\u9762\u677f\u662f\u65e0\u9650\u7684\uff0c\u4f46\u5f53\u6d3b\u7ec6\u80de\u4fb5\u5360\u4e86\u9762\u677f\u8fb9\u754c\u65f6\u4f1a\u9020\u6210\u95ee\u9898\u3002\u4f60\u5c06\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_151","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_152","text":"\u77e9\u9635\u7684\u5143\u7d20\u662f\u540c\u65f6\u6539\u53d8\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u7528\u66f4\u65b0\u540e\u7684\u5143\u7d20\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u662f\u539f\u5730\u7b97\u6cd5\u53c8\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\u5b58\u50a8\u66f4\u65b0\u540e\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u60f3\u5230\u4e86\u7528\u539f\u77e9\u9635\u540c\u65f6\u4fdd\u5b58\u539f\u59cb\u6570\u636e\u548c\u65b0\u6570\u636e\u3002 \u4e3a\u4e86\u540c\u65f6\u4fdd\u5b58\u4e24\u4e2a\u6570\u636e\uff0c\u90a3\u4e48\u539f\u6765\u76840\u548c1\u4e24\u4e2a\u53d8\u91cf\u5c31\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\u4e86\uff0c\u7531\u4e8e\u4e00\u5171\u6709\u56db\u79cd\u53ef\u80fd\uff0c\u6d3b-\u6d3b\uff0c\u6d3b-\u6b7b\uff0c\u6b7b-\u6d3b\uff0c\u6b7b-\u6b7b\u3002\u6240\u4ee5\u4f7f\u7528\u56db\u4e2a\u6807\u8bc6\u7b26\u6765\u8bb0\u5f55\u4fe1\u606f\u3002 class Solution: def gameOfLife(self, board: List[List[int]]) -> None: \"\"\" Do not return anything, modify board in-place instead. \"\"\" m = len(board) if not m: return n = len(board[0]) if not n: return for i in range(m): for j in range(n): cnt = 0 # \u5de6 \u5de6\u4e0a \u4e0a \u53f3\u4e0a \u53f3 \u53f3\u4e0b \u4e0b \u5de6\u4e0b directions = [(0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1)] for dx, dy in directions: if (i + dx) >= 0 and (i + dx) < m and (j + dy) >= 0 and (j + dy) < n and board[i + dx][j + dy] in [1, 11, -9]: cnt += 1 print((i, j, cnt)) if cnt == 3 or (board[i][j] == 1 and cnt == 2): board[i][j] += 10 else: board[i][j] -= 10 for i in range(m): for j in range(n): if board[i][j] > 0: board[i][j] = 1 else: board[i][j] = 0","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_153","text":"\u53ea\u4fee\u6539 | \u6d3b -> \u6b7b: -1 | \u6b7b -> \u6d3b:2 | \u5176\u4ed6\u4e0d\u6539\u53d8","title":"\u89e3\u6cd5\u4e8c \u4e0a\u9762\u4ee3\u7801\u4f18\u5316"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#303-","text":"","title":"303.\u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u4e0d\u53ef\u53d8"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_154","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15 i \u5230 j (i \u2264 j) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b i, j \u4e24\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a nums = [-2, 0, 3, -5, 2, -1]\uff0c\u6c42\u548c\u51fd\u6570\u4e3a sumRange() sumRange(0, 2) -> 1 sumRange(2, 5) -> -1 sumRange(0, 5) -> -3 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e0d\u53ef\u53d8\u3002 \u4f1a\u591a\u6b21\u8c03\u7528 sumRange \u65b9\u6cd5\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_155","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_156","text":"class NumArray: def __init__(self, nums: List[int]): self.cumsum = [0] for num in nums: self.cumsum.append(self.cumsum[-1] + num) def sumRange(self, i: int, j: int) -> int: return self.cumsum[j + 1] - self.cumsum[i] # Your NumArray object will be instantiated and called as such: # obj = NumArray(nums) # param_1 = obj.sumRange(i,j)","title":"\u89e3\u6cd5\u4e00 \u524d\u7f00\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_157","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#304-","text":"","title":"304. \u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22 - \u77e9\u9635\u4e0d\u53ef\u53d8"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_158","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u8ba1\u7b97\u5176\u5b50\u77e9\u5f62\u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u8be5\u5b50\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u4e3a (row1, col1) \uff0c\u53f3\u4e0b\u89d2\u4e3a (row2, col2)\u3002 \u4e0a\u56fe\u5b50\u77e9\u9635\u5de6\u4e0a\u89d2 (row1, col1) = (2, 1) \uff0c\u53f3\u4e0b\u89d2(row2, col2) = (4, 3)\uff0c\u8be5\u5b50\u77e9\u5f62\u5185\u5143\u7d20\u7684\u603b\u548c\u4e3a 8\u3002 \u793a\u4f8b: \u7ed9\u5b9a matrix = [ [3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5] ] sumRegion(2, 1, 4, 3) -> 8 sumRegion(1, 1, 2, 2) -> 11 sumRegion(1, 2, 2, 4) -> 12 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u77e9\u9635\u4e0d\u53ef\u53d8\u3002 \u4f1a\u591a\u6b21\u8c03\u7528 sumRegion \u65b9\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe row1 \u2264 row2 \u4e14 col1 \u2264 col2\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_159","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_160","text":"class NumMatrix: \"\"\" \u7c7b\u4f3c\u4e8e\u524d\u7f00\u548c \u6211\u4eec\u5b58\u50a8\u4ee5\u67d0\u4e00\u7ed3\u70b9\u4e3a\u53f3\u4e0b\u8fb9\u754c\u7684\u6240\u6709\u524d\u7f00 \"\"\" def __init__(self, matrix: List[List[int]]): if not matrix or len(matrix) == 0 or len(matrix[0]) == 0: return m = len(matrix) n = len(matrix[0]) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): dp[i][j] = matrix[i - 1][j - 1] + dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1] self.cumsum = dp1 def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int: return self.cumsum[row2 + 1][col2 + 1] - self.cumsum[row2 + 1][col1] - self.cumsum[row1][col2 + 1] + self.cumsum[row1][col1] # Your NumMatrix object will be instantiated and called as such: # obj = NumMatrix(matrix) # param_1 = obj.sumRegion(row1,col1,row2,col2)","title":"\u89e3\u6cd5\u4e00 \u524d\u7f00\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_161","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#324","text":"","title":"324.\u6446\u52a8\u6392\u5e8f [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_162","text":"\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4 nums\uff0c\u5c06\u5b83\u91cd\u65b0\u6392\u5217\u6210 nums[0] < nums[1] > nums[2] < nums[3]... \u7684\u987a\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [1, 5, 1, 1, 6, 4] \u8f93\u51fa: \u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f [1, 4, 1, 5, 1, 6] \u793a\u4f8b 2: \u8f93\u5165: nums = [1, 3, 2, 2, 3, 1] \u8f93\u51fa: \u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f [2, 3, 1, 3, 1, 2] \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u4f1a\u5f97\u5230\u6709\u6548\u7684\u7ed3\u679c\u3002 \u8fdb\u9636: \u4f60\u80fd\u7528 O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c / \u6216\u539f\u5730 O(1) \u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_163","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#onlogn","text":"\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u524d\u534a\u6bb5\u5012\u5e8f\u586b\u5165\u5947\u6570\u4e0b\u6807\uff0c\u5c06\u540e\u534a\u6bb5\u5012\u5e8f\u586b\u5165\u5076\u6570\u4e0b\u6807\uff0c\u5176\u539f\u7406\u662f\u5982\u679c\u9898\u76ee\u6709\u89e3\uff0c\u5219\u5bf9\u4e8e\u6392\u597d\u5e8f\u7684\u6570\u7ec4\uff0c\u95f4\u9694\u8d85\u8fc7n/2\u7684\u4e24\u4e2a\u5143\u7d20\u5fc5\u4e0d\u76f8\u7b49\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\u3002 def wiggleSort(self, nums): nums.sort() half = len(nums[::2]) nums[::2], nums[1::2] = nums[:half][::-1], nums[half:][::-1]","title":"\u89e3\u6cd5\u4e00 \u6392\u5e8f O(nlogn)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_164","text":"\u5148\u7528findKthLargestElement\u7684\u601d\u8def\u5c06\u6570\u7ec4\u8fdb\u884cpartition\uff0c\u8ba9median\u7684\u5de6\u8fb9\u5168\u90fd\u5927\u4e8emedian\uff0c\u53f3\u8fb9\u5168\u90fd\u5c0f\u4e8emedian\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c[1,4,5,6,1,1] => [5,6,4,1,1,1] \u5229\u7528virtual indexing\u7684\u6027\u8d28\uff0c\u6761\u4ef6\u4e3a mapIndex = (1 + 2 * index) % (n | 1) \uff0cn \u4ee3\u8868\u6570\u7ec4\u4e2a\u6570 n | 1\u4f5c\u7528 \u6700\u4f4e\u4f4d\u7f6e1\uff0c \u8ba9\u5947\u6570\u4e0d\u53d8 \u5076\u6570\u52a01 \u8fd9\u4e48\u6620\u5c04\u7684\u539f\u56e0\u662f\u8ba9median\u5de6\u9762\u7684\u5728odd index, \u8ba9median\u53f3\u9762\u7684\u5728Even index \u53ef\u4ee5\u5c06index\u8fd9\u6837\u8f6c\u6362 - index 0 1 2 3 4 5 mapp 1 3 5 0 2 4 \u89e3\u9898\u601d\u8def\uff1a \u7528quickSelect\u65b9\u6cd5\u627e\u5230median \u5229\u7528sort color\u7684\u65b9\u6cd5\uff08 \u8377\u5170\u56fd\u65d7\u95ee\u9898 \uff09\uff0c\u5bf9mapped index\u6240\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u4ea4\u6362\u3002 void wiggleSort(vector<int>& nums) { int n = nums.size(); // Find a median. auto midptr = nums.begin() + n / 2; nth_element(nums.begin(), midptr, nums.end()); int mid = *midptr; // Index-rewiring. #define A(i) nums[(1+2*(i)) % (n|1)] // 3-way-partition-to-wiggly in O(n) time with O(1) space. // \u76ee\u7684\u8ba9\u865a\u62df\u7d22\u5f15\u7b26\u5408 big ... big median small .. small \u7684\u5f62\u5f0f\uff0c\u539f\u59cb\u6570\u7ec4\u5c31\u53d8\u6210\u4e86\u6447\u6446\u5e8f\u5217 int i = 0, j = 0, k = n - 1; while (j <= k) { if (A(j) > mid) swap(A(i++), A(j++)); else if (A(j) < mid) swap(A(j), A(k--)); else j++; } } public void wiggleSort(int[] nums) { int median = findKthLargestElement(nums, nums.length / 2); int red = 0; int blue = nums.length - 1; int n = nums.length; int i =0; while(i <= blue) { if (nums[mapIndex(i, n)] > median) { swap(nums, mapIndex(red, n), mapIndex(i, n)); red++; i++; } else if (nums[mapIndex(i, n)] < median) { swap(nums, mapIndex(blue, n), mapIndex(i, n)); blue--; } else { i++; } } return; } private void swap(int[] nums, int i, int j) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } private int mapIndex(int index, int n) { return (1 + 2 * index) % (n | 1); }","title":"\u89e3\u6cd5\u4e8c \u865a\u62df\u7d22\u5f15 + \u8377\u5170\u56fd\u65d7\u95ee\u9898\uff08\u4e09\u8272\u7403\u95ee\u9898\uff09"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#334","text":"","title":"334.\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_165","text":"\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6570\u7ec4\uff0c\u5224\u65ad\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a 3 \u7684\u9012\u589e\u5b50\u5e8f\u5217\u3002 \u6570\u5b66\u8868\u8fbe\u5f0f\u5982\u4e0b: \u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684 i, j, k, \u4e14\u6ee1\u8db3 0 \u2264 i < j < k \u2264 n-1\uff0c \u4f7f\u5f97 arr[i] < arr[j] < arr[k] \uff0c\u8fd4\u56de true ; \u5426\u5219\u8fd4\u56de false \u3002 \u8bf4\u660e: \u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1) \u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: [5,4,3,2,1] \u8f93\u51fa: false","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_166","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_167","text":"\u5148\u8bf4\u4e0b\u8fd9\u9053\u9898\u7684\u601d\u8def\uff1a \u9996\u5148\u627e\u5230\u4e00\u4e2a\u76f8\u5bf9\u5c0f\u7684\u503c\uff0c\u7136\u540e\u627e\u5230\u6bd4\u8fd9\u4e2a\u5c0f\u4e00\u70b9\u7684\u503c\u5927\u7684\u503c(\u4e2d\u95f4\u503c)\uff0c\u7136\u540e\u770b\u80fd\u591f\u5728\u6700\u540e\u627e\u5230\u6bd4\u4e2d\u95f4\u503c\u5927\u7684\u503c\u3002 \u6211\u6765\u8bf4\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u601d\u8def\u80fd\u4fdd\u8bc1\u8986\u76d6\u6240\u6709\u7684\u60c5\u51b5\u3002 \u9996\u5148\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u7136\u540e\u627e\u4e0d\u5230\u4e2d\u95f4\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u5fc5\u7136\u4e0d\u5305\u542b\u9012\u589e\u7684\u4e09\u4e2a\u6570\uff08\u56e0\u4e3a\u8fde\u9012\u589e\u7684\u4e24\u4e2a\u6570\u90fd\u627e\u4e0d\u5230\uff09\u3002 \u7136\u540e\u5047\u8bbe\u6211\u4eec\u627e\u5230\u4e86\u4e24\u4e2a\u9012\u589e\u7684\u503c\uff0c\u90a3\u4e48\u5982\u679c\u4e0b\u4e00\u4e2a\u503c\u5c0f\u4e8e\u6700\u5c0f\u503c\uff0c\u6211\u4eec\u5c31\u5e94\u8be5\u5c06\u6700\u5c0f\u503c\u7684\u6307\u9488\u5b9a\u4f4d\u5230\u8fd9\u4e2a\u503c\u4e0a\u3002\u6211\u4eec\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u6700\u5c0f\u503c\uff0c\u9632\u6b62\u540e\u9762\u51fa\u73b0\u4e86\u66f4\u5c0f\u7684\u4e00\u5bf9\u9012\u589e\u503c\uff0c\u800c\u5373\u4f7f\u4e0d\u51fa\u73b0\uff0c\u4e5f\u4e0d\u59a8\u788d\u6211\u4eec\u627e\u5230\u89e3\uff08\u56e0\u4e3a\u6700\u7ec8\u662f\u770b\u80fd\u5426\u627e\u5230\u5927\u4e8e\u4e2d\u95f4\u503c\u7684\u503c\uff09\u3002 \u5982\u679c\u4e0b\u4e00\u4e2a\u503c\u5927\u4e8e\u6700\u5c0f\u503c\uff0c\u4e14\u5c0f\u4e8e\u4e2d\u95f4\u503c\uff0c\u5219\u6211\u4eec\u4f7f\u7528\u8be5\u503c\u4f5c\u4e3a\u4e2d\u95f4\u503c(\u56e0\u4e3a\u5982\u679c\u6700\u5c0f\u7684\u4e2d\u95f4\u503c\u90fd\u5f97\u4e0d\u5230\u89e3\uff0c\u90a3\u4e48\u5c31\u662ffalse\uff0c\u8fd9\u6837\u4e5f\u4fdd\u8bc1\u4e86\u8986\u76d6\u6240\u6709\u7684\u60c5\u51b5)\u3002 \u6700\u540e\uff0c\u5982\u679c\u627e\u5230\u4e86\u5927\u4e8e\u4e2d\u95f4\u503c\u7684\u503c\uff0c\u5219\u4e3atrue. class Solution { public boolean increasingTriplet(int[] nums) { int one = Integer.MAX_VALUE; int two = Integer.MAX_VALUE; for (int num : nums) { if (num <= one) { one = num; } else if (num <= two) { two = num; } else { return true; } return false; } }","title":"\u89e3\u6cd5\u4e00 \u8d2a\u5fc3"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_168","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#341","text":"","title":"341.\u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_169","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5d4c\u5957\u7684\u6574\u578b\u5217\u8868\u3002\u8bbe\u8ba1\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f7f\u5176\u80fd\u591f\u904d\u5386\u8fd9\u4e2a\u6574\u578b\u5217\u8868\u4e2d\u7684\u6240\u6709\u6574\u6570\u3002 \u5217\u8868\u4e2d\u7684\u9879\u6216\u8005\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[1,1],2,[1,1]] \u8f93\u51fa: [1,1,2,1,1] \u89e3\u91ca: \u901a\u8fc7\u91cd\u590d\u8c03\u7528 next \u76f4\u5230 hasNext \u8fd4\u56defalse\uff0cnext \u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: [1,1,2,1,1]\u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,[4,[6]]] \u8f93\u51fa: [1,4,6] \u89e3\u91ca: \u901a\u8fc7\u91cd\u590d\u8c03\u7528 next \u76f4\u5230 hasNext \u8fd4\u56defalse\uff0cnext \u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: [1,4,6]\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_170","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_171","text":"# \"\"\" # This is the interface that allows for creating nested lists. # You should not implement it, or speculate about its implementation # \"\"\" #class NestedInteger(object): # def isInteger(self): # \"\"\" # @return True if this NestedInteger holds a single integer, rather than a nested list. # :rtype bool # \"\"\" # # def getInteger(self): # \"\"\" # @return the single integer that this NestedInteger holds, if it holds a single integer # Return None if this NestedInteger holds a nested list # :rtype int # \"\"\" # # def getList(self): # \"\"\" # @return the nested list that this NestedInteger holds, if it holds a nested list # Return None if this NestedInteger holds a single integer # :rtype List[NestedInteger] # \"\"\" class NestedIterator(object): def __init__(self, nestedList): \"\"\" \u501f\u7528stack \"\"\" \"\"\" Initialize your data structure here. :type nestedList: List[NestedInteger] \"\"\" self.stack = nestedList[::-1] if nestedList else [] def next(self): \"\"\" :rtype: int \"\"\" return self.stack.pop() def hasNext(self): \"\"\" :rtype: bool \"\"\" if self.stack: top = self.stack.pop() while not top.isInteger(): self.stack += top.getList()[::-1] if self.stack: top = self.stack.pop() else: return False self.stack.append(top) return True else: return False # Your NestedIterator object will be instantiated and called as such: # i, v = NestedIterator(nestedList), [] # while i.hasNext(): v.append(i.next())","title":"\u89e3\u6cd5\u4e00 \u6808"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_172","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#347-k","text":"","title":"347. \u524dK\u4e2a\u9ad8\u9891\u5143\u7d20 [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3471","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d k \u9ad8\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [1,1,1,2,2,3], k = 2 \u8f93\u51fa: [1,2] \u793a\u4f8b 2: \u8f93\u5165: nums = [1], k = 1 \u8f93\u51fa: [1] \u8bf4\u660e\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684 k \u603b\u662f\u5408\u7406\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u4e2d\u4e0d\u76f8\u540c\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002 \u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u5fc5\u987b \u4f18\u4e8e O( n log n ) , n \u662f\u6570\u7ec4\u7684\u5927\u5c0f\u3002","title":"347.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3472","text":"\u8be5\u9898\u601d\u8def\u5bb9\u6613\u4f46\u7f16\u7801\u96be\u3002\u5f88\u5bb9\u6613\u60f3\u51fa\u8981\u7edf\u8ba1\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u53d6\u51fa\u5176\u4e2d\u524d k \u9ad8\u7684\u3002\u4f46\u91c7\u7528\u4f55\u79cd\u6570\u636e\u7ed3\u6784\u5c31\u6bd4\u8f83\u8bb2\u7a76\u4e86\u3002 \u7b2c\u4e00\u79cd\u601d\u8def\u662f\u5229\u7528\u4f18\u5148\u961f\u5217\uff0c\u5373\u6700\u5927\u5806\u3002\u8fd9\u91cc\u6ce8\u610f\u5b58\u5165\u5806\u4e2d\u7684\u5143\u7d20\u662f pair \u7c7b\u578b\u7684\uff0c\u4e14\u4ee5\u51fa\u73b0\u7684\u6b21\u6570\u4e3a key,\u503c\u4e3a val.\u56e0\u4e3a pair \u7684\u6392\u5e8f\u662f\u5148\u6bd4\u8f83 first\uff0c\u518d\u6bd4\u8f83 second\u3002 \u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5229\u7528\u6876\u6392\u5e8f\uff0c10\u4e2a\u5143\u7d20\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u662f0 ~ 10\uff0c\u6240\u4ee5\u6876\u7684\u4e2a\u6570\u4e3anums.size() + 1\u3002\u6ce8\u610f\u53ef\u80fd\u6709\u76f8\u540c\u6b21\u6570\u7684\u5143\u7d20\u51fa\u73b0\uff0c\u56e0\u6b64\u6876\u4e2d\u5b58\u50a8\u7684\u662f\u4e00\u4e2a\u6570\u7ec4\u800c\u975e\u5355\u4e00\u5143\u7d20\u3002","title":"347.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#34721-hash","text":"import heapq class Solution: def topKFrequent(self, nums: List[int], k: int) -> List[int]: \"\"\" 1.\u5148\u8fdb\u884cHash: key:num val:count of num 2.\u6cd5\u4e00 \u5806\u6392\u5e8f: \u6211\u4eec\u53ef\u4ee5\u7528\u5806\u6392\u5e8f\u6765\u6309\u7167\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\u3002 \u4f7f\u7528\u4e00\u4e2a\u6700\u5927\u5806\u6765\u6309\u7167\u6620\u5c04\u6b21\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5217 \u6cd5\u4e8c \u6876\u6392\u5e8f: \u5728\u5efa\u7acb\u597d\u6570\u5b57\u548c\u5176\u51fa\u73b0\u6b21\u6570\u7684\u6620\u5c04\u540e\uff0c\u6211\u4eec\u6309\u7167\u5176\u51fa\u73b0\u6b21\u6570\u5c06\u6570\u5b57\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e2d\u53bb\uff0c \u8fd9\u6837\u6211\u4eec\u4ece\u6876\u7684\u540e\u9762\u5411\u524d\u9762\u904d\u5386\uff0c\u6700\u5148\u5f97\u5230\u7684\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57\uff0c \u6211\u4eec\u627e\u5230k\u4e2a\u540e\u8fd4\u56de\u5373\u53ef\uff0c\u53c2\u89c1\u4ee3\u7801\u5982\u4e0b\uff1a [Note] headp\u53ea\u63d0\u4f9b\u6700\u5c0f\u5806\u7684\u5b9e\u73b0, \u60f3\u7528\u6700\u5927\u5806\u4e00\u4e2a\u529e\u6cd5\u662f\u52a0\u8d1f\u53f7 \"\"\" # 1.Hash nums count cnt_dict = dict() for num in nums: cnt_dict.setdefault(num, 0) cnt_dict[num] += 1 # \u5806\u6392\u5e8f heap = [tuple([val, key]) for key, val in cnt_dict.items()] return [item[1] for item in heapq.nlargest(k, heap)]","title":"347.2.1 \u65b9\u6cd5\u4e00 hash+\u5806\u6392\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#34722-hash","text":"class Solution: def topKFrequent(self, nums: List[int], k: int) -> List[int]: \"\"\" 1.\u5148\u8fdb\u884cHash: key:num val:count of num 2.\u6cd5\u4e00 \u5806\u6392\u5e8f: \u6211\u4eec\u53ef\u4ee5\u7528\u5806\u6392\u5e8f\u6765\u6309\u7167\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\u3002 \u4f7f\u7528\u4e00\u4e2a\u6700\u5927\u5806\u6765\u6309\u7167\u6620\u5c04\u6b21\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5217 \u6cd5\u4e8c \u6876\u6392\u5e8f: \u5728\u5efa\u7acb\u597d\u6570\u5b57\u548c\u5176\u51fa\u73b0\u6b21\u6570\u7684\u6620\u5c04\u540e\uff0c\u6211\u4eec\u6309\u7167\u5176\u51fa\u73b0\u6b21\u6570\u5c06\u6570\u5b57\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e2d\u53bb\uff0c \u8fd9\u6837\u6211\u4eec\u4ece\u6876\u7684\u540e\u9762\u5411\u524d\u9762\u904d\u5386\uff0c\u6700\u5148\u5f97\u5230\u7684\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57\uff0c \u6211\u4eec\u627e\u5230k\u4e2a\u540e\u8fd4\u56de\u5373\u53ef\uff0c\u53c2\u89c1\u4ee3\u7801\u5982\u4e0b\uff1a [Note] headp\u53ea\u63d0\u4f9b\u6700\u5c0f\u5806\u7684\u5b9e\u73b0, \u60f3\u7528\u6700\u5927\u5806\u4e00\u4e2a\u529e\u6cd5\u662f\u52a0\u8d1f\u53f7 \"\"\" # 1.Hash nums count cnt_dict = dict() for num in nums: cnt_dict.setdefault(num, 0) cnt_dict[num] += 1 # 2.\u6876\u6392\u5e8f min_cnt, max_cnt = min(cnt_dict.values()), max(cnt_dict.values()) # \u5efa\u7acb\u6876 c = [[] for i in range(max_cnt - min_cnt + 1)] for num, cnt in cnt_dict.items(): c[cnt - min_cnt].append(num) result = [] for item in c[::-1]: if k == 0: return result if item == []: continue else: result.extend(item) k = k - len(item) if k == 0: return result public List<Integer> topKFrequent(int[] nums, int k) { List<Integer>[] bucket = new List[nums.length + 1]; Map<Integer, Integer> frequencyMap = new HashMap<Integer, Integer>(); for (int n : nums) { frequencyMap.put(n, frequencyMap.getOrDefault(n, 0) + 1); } for (int key : frequencyMap.keySet()) { int frequency = frequencyMap.get(key); if (bucket[frequency] == null) { bucket[frequency] = new ArrayList<>(); } bucket[frequency].add(key); } List<Integer> res = new ArrayList<>(); for (int pos = bucket.length - 1; pos >= 0 && res.size() < k; pos--) { if (bucket[pos] != null) { res.addAll(bucket[pos]); } } return res; }","title":"347.2.2 \u65b9\u6cd5\u4e8c hash+\u6876\u6392\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#34723-collectionscounter-api","text":"import collections class Solution: def topKFrequent(self, nums: List[int], k: int) -> List[int]: \"\"\" https://docs.python.org/3.6/library/collections.html#collections.Counter A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages. \"\"\" return [key for key, val in collections.Counter(nums).most_common(k)]","title":"347.2.3 collections.Counter  \u8ba1\u6570api"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#375ii","text":"","title":"375.\u731c\u6570\u5b57\u5927\u5c0fII[[\u63a8\u8350]]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_173","text":"\u6211\u4eec\u6b63\u5728\u73a9\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u6e38\u620f\u89c4\u5219\u5982\u4e0b\uff1a \u6211\u4ece 1 \u5230 n \u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\uff0c\u4f60\u6765\u731c\u6211\u9009\u4e86\u54ea\u4e2a\u6570\u5b57\u3002 \u6bcf\u6b21\u4f60\u731c\u9519\u4e86\uff0c\u6211\u90fd\u4f1a\u544a\u8bc9\u4f60\uff0c\u6211\u9009\u7684\u6570\u5b57\u6bd4\u4f60\u7684\u5927\u4e86\u6216\u8005\u5c0f\u4e86\u3002 \u7136\u800c\uff0c\u5f53\u4f60\u731c\u4e86\u6570\u5b57 x \u5e76\u4e14\u731c\u9519\u4e86\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u652f\u4ed8\u91d1\u989d\u4e3a x \u7684\u73b0\u91d1\u3002\u76f4\u5230\u4f60\u731c\u5230\u6211\u9009\u7684\u6570\u5b57\uff0c\u4f60\u624d\u7b97\u8d62\u5f97\u4e86\u8fd9\u4e2a\u6e38\u620f\u3002 \u793a\u4f8b: n = 10, \u6211\u9009\u62e9\u4e868. \u7b2c\u4e00\u8f6e: \u4f60\u731c\u6211\u9009\u62e9\u7684\u6570\u5b57\u662f5\uff0c\u6211\u4f1a\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5927\u4e00\u4e9b\uff0c\u7136\u540e\u4f60\u9700\u8981\u652f\u4ed85\u5757\u3002 \u7b2c\u4e8c\u8f6e: \u4f60\u731c\u662f7\uff0c\u6211\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5927\u4e00\u4e9b\uff0c\u4f60\u652f\u4ed87\u5757\u3002 \u7b2c\u4e09\u8f6e: \u4f60\u731c\u662f9\uff0c\u6211\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5c0f\u4e00\u4e9b\uff0c\u4f60\u652f\u4ed89\u5757\u3002 \u6e38\u620f\u7ed3\u675f\u30028 \u5c31\u662f\u6211\u9009\u7684\u6570\u5b57\u3002 \u4f60\u6700\u7ec8\u8981\u652f\u4ed8 5 + 7 + 9 = 21 \u5757\u94b1\u3002 \u7ed9\u5b9a n \u2265 1\uff0c\u8ba1\u7b97\u4f60\u81f3\u5c11\u9700\u8981\u62e5\u6709\u591a\u5c11\u73b0\u91d1\u624d\u80fd\u786e\u4fdd\u4f60\u80fd\u8d62\u5f97\u8fd9\u4e2a\u6e38\u620f\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_174","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_3","text":"state: dp[s][e]: \u5728s\u5230e\u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u6570\u7684\u6700\u5c11\u80dc\u5229\u73b0\u91d1 state transfer: \u5728s\u5230e\u4e2d\u904d\u5386\u9009\u62e9\u4e00\u4e2a\u6570\u5b57, \u8ba1\u7b97\u6700\u5c11\u73b0\u91d1 \u4ece\u6240\u6709\u904d\u5386\u7ed3\u679c\u9009\u62e9\u6700\u5c0f\u7684 class Solution { public int getMoneyAmount(int n) { int[][] table = new int[n+1][n+1]; return DP(table, 1, n); } int DP(int[][] t, int s, int e){ if (s >= e) return 0; if (t[s][e] != 0) return t[s][e]; int res = Integer.MAX_VALUE; for (int x = s; x <= e; x++){ // key: state transfer int tmp = x + Math.max(DP(t, s, x - 1), DP(t, x + 1, e)); res = Math.min(res, tmp); } t[s][e] = res; return res; } }","title":"\u89e3\u6cd5\u4e00 dp \u9012\u5f52+\u8bb0\u5fc6\u5316"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp-trick","text":"state: dp[s][e]: \u5728s\u5230e\u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u6570\u7684\u6700\u5c11\u80dc\u5229\u73b0\u91d1 state transfer: \u5728s\u5230e\u4e2d\u904d\u5386\u9009\u62e9\u4e00\u4e2a\u6570\u5b57, \u8ba1\u7b97\u6700\u5c11\u73b0\u91d1 \u4ece\u6240\u6709\u904d\u5386\u7ed3\u679c\u9009\u62e9\u6700\u5c0f\u7684 trick: j\u4ece\u5c0f\u5230\u5927\u904d\u5386, i\u4ece\u5927\u5230\u5c0f\u904d\u5386 \u53ef\u4ee5\u627e\u5230gap\u7531\u5c0f\u5230\u5927\u7684dp class Solution { public int getMoneyAmount(int n) { int[][] dp = new int[n+1][n+1]; for (int j = 2; j < n + 1; j++){ for (int i = j - 1; i > 0; i--){ int global = Integer.MAX_VALUE; for (int k = i + 1; k < j; k++){ int local = k + Math.max(dp[i][k-1], dp[k+1][j]); global = Math.min(local, global); } // init: dp[i][i+1] = i dp[i][j] = i+1==j?i:global; } } return dp[1][n]; } }","title":"\u89e3\u6cd5\u4e8c dp trick"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#378-k","text":"","title":"378. \u6709\u5e8f\u77e9\u9635\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20 [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3781","text":"\u7ed9\u5b9a\u4e00\u4e2a n x n \u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u884c\u548c\u6bcf\u5217\u5143\u7d20\u5747\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u627e\u5230\u77e9\u9635\u4e2d\u7b2ck\u5c0f\u7684\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u5b83\u662f\u6392\u5e8f\u540e\u7684\u7b2ck\u5c0f\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2ck\u4e2a\u5143\u7d20\u3002 \u793a\u4f8b: matrix = [ [ 1, 5, 9], [10, 11, 13], [12, 13, 15] ], k = 8, \u8fd4\u56de 13\u3002 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe k \u7684\u503c\u6c38\u8fdc\u662f\u6709\u6548\u7684, 1 \u2264 k \u2264 n2 \u3002","title":"378.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3782","text":"378.2.1 \u65b9\u6cd5\u4e00 \u53d8\u62101\u7ef4\u5217\u8868 partition O(z) \u53d6\u5de7 import random class Solution(object): def kthSmallest(self, matrix, k): \"\"\" :type matrix: List[List[int]] :type k: int :rtype: int \u65b9\u6cd51: \u53d8\u62101\u7ef4\u5217\u8868 partition O(z) \u5176\u4e2d z=n**2 \"\"\" def random_partition(nums, start, end): x = random.randint(start, end) nums[x], nums[end] = nums[end], nums[x] item = nums[end] i = start - 1 for j in range(start, end): if nums[j] < item: i += 1 nums[i], nums[j] = nums[j], nums[i] nums[i+1], nums[end] = nums[end], nums[i+1] return i + 1 def findKthSmallest(nums, start, end, k): # 2.\u8c03\u7528\u968f\u673a\u5316partition t = random_partition(nums, start, end) if t == k: return nums[k] elif t > k: return findKthSmallest(nums, start, t-1, k) else: return findKthSmallest(nums, t+1, end, k) # 1.\u53d8\u62101\u7ef4\u5217\u8868 nums = [] for i in matrix: nums.extend(i) # \u7b2ck\u4e2a\u5143\u7d20\u5728\u7b2ck-1\u4f4d return findKthSmallest(nums, 0, len(nums)-1, k-1)","title":"378.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#37822-min_heap-oklogk","text":"Since the matrix is sorted, we do not need to put all the elements in heap at one time. We can simply pop and put for k times. By observation, if we look at the matrix diagonally, we can tell that if we do not pop matrix[i][j], we do not need to put on matrix[i][j + 1] and matrix[i + 1][j] since they are bigger. e.g., given the matrix below: 1 2 4 3 5 7 6 8 9 We put 1 first, then pop 1 and put 2 and 3, then pop 2 and put 4 and 5, then pop 3 and put 6\u2026(\u659c\u7740\u770b) \u9760\u4f18\u5148\u7ea7\u961f\u5217\u6765\u6392\u5e8f class Solution(object): def kthSmallest(self, matrix, k): \"\"\" :type matrix: List[List[int]] :type k: int :rtype: int \"\"\" result, heap = None, [] # (element, row, index) heapq.heappush(heap, (matrix[0][0], 0, 0)) while k > 0: # key: pop kth \u5f97\u5230\u7ed3\u679c result, i, j = heapq.heappop(heap) # key: i != 0 \u65f6 \u5143\u7d20\u5df2\u7ecf\u653e\u5165\u8fc7\u4e86 if i == 0 and j + 1 < len(matrix): heapq.heappush(heap, (matrix[i][j + 1], i, j + 1)) if i + 1 < len(matrix): heapq.heappush(heap, (matrix[i + 1][j], i + 1, j)) k -= 1 return result","title":"378.2.2 min_heap \u5229\u7528\u4e86\u9898\u76ee\u4e2d\u77e9\u9635\u7684\u89c4\u5f8b O(klogk)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#37823","text":"\u601d\u8def\u975e\u5e38\u7b80\u5355\uff1a 1.\u627e\u51fa\u4e8c\u7ef4\u77e9\u9635\u4e2d\u6700\u5c0f\u7684\u6570left\uff0c\u6700\u5927\u7684\u6570right\uff0c\u90a3\u4e48\u7b2ck\u5c0f\u7684\u6570\u5fc5\u5b9a\u5728left~right\u4e4b\u95f4 2.mid=(left+right) / 2\uff1b\u5728\u4e8c\u7ef4\u77e9\u9635\u4e2d\u5bfb\u627e\u5c0f\u4e8e\u7b49\u4e8emid\u7684\u5143\u7d20\u4e2a\u6570count 3.\u82e5\u8fd9\u4e2acount\u5c0f\u4e8ek\uff0c\u8868\u660e\u7b2ck\u5c0f\u7684\u6570\u5728\u53f3\u534a\u90e8\u5206\u4e14\u4e0d\u5305\u542bmid\uff0c\u5373left=mid+1, right=right\uff0c\u53c8\u4fdd\u8bc1\u4e86\u7b2ck\u5c0f\u7684\u6570\u5728left~right\u4e4b\u95f4 4.\u82e5\u8fd9\u4e2acount\u5927\u4e8ek\uff0c\u8868\u660e\u7b2ck\u5c0f\u7684\u6570\u5728\u5de6\u534a\u90e8\u5206\u4e14\u53ef\u80fd\u5305\u542bmid\uff0c\u5373left=left, right=mid\uff0c\u53c8\u4fdd\u8bc1\u4e86\u7b2ck\u5c0f\u7684\u6570\u5728left~right\u4e4b\u95f4 5.\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u4e2d\u90fd\u4fdd\u8bc1\u4e86\u7b2ck\u5c0f\u7684\u6570\u5728left~right\u4e4b\u95f4\uff0c\u5f53left==right\u65f6\uff0c\u7b2ck\u5c0f\u7684\u6570\u5373\u88ab\u627e\u51fa\uff0c\u7b49\u4e8eright \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684left mid right\u662f\u6570\u503c\uff0c\u4e0d\u662f\u7d22\u5f15\u4f4d\u7f6e\u3002 public int kthSmallest(int[][] matrix, int k) { int row = matrix.length; int col = matrix[0].length; int left = matrix[0][0]; int right = matrix[row - 1][col - 1]; while (left < right) { // \u6bcf\u6b21\u5faa\u73af\u90fd\u4fdd\u8bc1\u7b2cK\u5c0f\u7684\u6570\u5728start~end\u4e4b\u95f4\uff0c\u5f53start==end\uff0c\u7b2ck\u5c0f\u7684\u6570\u5c31\u662fstart int mid = (left + right) / 2; // \u627e\u4e8c\u7ef4\u77e9\u9635\u4e2d<=mid\u7684\u5143\u7d20\u603b\u4e2a\u6570 int count = findNotBiggerThanMid(matrix, mid, row, col); if (count < k) { // \u7b2ck\u5c0f\u7684\u6570\u5728\u53f3\u534a\u90e8\u5206\uff0c\u4e14\u4e0d\u5305\u542bmid left = mid + 1; } else { // \u7b2ck\u5c0f\u7684\u6570\u5728\u5de6\u534a\u90e8\u5206\uff0c\u53ef\u80fd\u5305\u542bmid right = mid; } } return right; } private int findNotBiggerThanMid(int[][] matrix, int mid, int row, int col) { // \u4ee5\u5217\u4e3a\u5355\u4f4d\u627e\uff0c\u627e\u5230\u6bcf\u4e00\u5217\u6700\u540e\u4e00\u4e2a<=mid\u7684\u6570\u5373\u77e5\u9053\u6bcf\u4e00\u5217\u6709\u591a\u5c11\u4e2a\u6570<=mid int i = row - 1; int j = 0; int count = 0; while (i >= 0 && j < col) { if (matrix[i][j] <= mid) { // \u7b2cj\u5217\u6709i+1\u4e2a\u5143\u7d20<=mid count += i + 1; j++; } else { // \u7b2cj\u5217\u76ee\u524d\u7684\u6570\u5927\u4e8emid\uff0c\u9700\u8981\u7ee7\u7eed\u5728\u5f53\u524d\u5217\u5f80\u4e0a\u627e i--; } } return count; }","title":"378.2.3 \u4e8c\u5206\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#380","text":"","title":"380. \u5e38\u6570\u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20 [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_175","text":"\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u5728\u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6 O(1) \u4e0b\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002 insert(val)\uff1a\u5f53\u5143\u7d20 val \u4e0d\u5b58\u5728\u65f6\uff0c\u5411\u96c6\u5408\u4e2d\u63d2\u5165\u8be5\u9879\u3002 remove(val)\uff1a\u5143\u7d20 val \u5b58\u5728\u65f6\uff0c\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u8be5\u9879\u3002 getRandom\uff1a\u968f\u673a\u8fd4\u56de\u73b0\u6709\u96c6\u5408\u4e2d\u7684\u4e00\u9879\u3002\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u6709\u76f8\u540c\u7684\u6982\u7387\u88ab\u8fd4\u56de\u3002 \u793a\u4f8b : // \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u96c6\u5408\u3002 RandomizedSet randomSet = new RandomizedSet(); // \u5411\u96c6\u5408\u4e2d\u63d2\u5165 1 \u3002\u8fd4\u56de true \u8868\u793a 1 \u88ab\u6210\u529f\u5730\u63d2\u5165\u3002 randomSet.insert(1); // \u8fd4\u56de false \uff0c\u8868\u793a\u96c6\u5408\u4e2d\u4e0d\u5b58\u5728 2 \u3002 randomSet.remove(2); // \u5411\u96c6\u5408\u4e2d\u63d2\u5165 2 \u3002\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [1,2] \u3002 randomSet.insert(2); // getRandom \u5e94\u968f\u673a\u8fd4\u56de 1 \u6216 2 \u3002 randomSet.getRandom(); // \u4ece\u96c6\u5408\u4e2d\u79fb\u9664 1 \uff0c\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [2] \u3002 randomSet.remove(1); // 2 \u5df2\u5728\u96c6\u5408\u4e2d\uff0c\u6240\u4ee5\u8fd4\u56de false \u3002 randomSet.insert(2); // \u7531\u4e8e 2 \u662f\u96c6\u5408\u4e2d\u552f\u4e00\u7684\u6570\u5b57\uff0cgetRandom \u603b\u662f\u8fd4\u56de 2 \u3002 randomSet.getRandom();","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_176","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#set-getrandomo1","text":"class RandomizedSet: \"\"\" \u53cc\u5411Hash \"\"\" def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.hash = set() def insert(self, val: int) -> bool: \"\"\" Inserts a value to the set. Returns true if the set did not already contain the specified element. \"\"\" if val in self.hash: return False else: self.hash.add(val) return True def remove(self, val: int) -> bool: \"\"\" Removes a value from the set. Returns true if the set contained the specified element. \"\"\" if val in self.hash: self.hash.remove(val) return True else: return False def getRandom(self) -> int: \"\"\" Get a random element from the set. \"\"\" rand_i = random.randint(len(self.hash)) return list(self.hash)[rand_i] # Your RandomizedSet object will be instantiated and called as such: # obj = RandomizedSet() # param_1 = obj.insert(val) # param_2 = obj.remove(val) # param_3 = obj.getRandom()","title":"\u89e3\u6cd5\u4e00 set\u6cd5 getRandom\u4e0d\u662fO(1)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#hash_2","text":"\u5b58\u50a8\u5404\u5143\u7d20\u7684\u7d22\u5f15\u5b57\u5178\uff0c\u5982\u679c\u79fb\u9664\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e class RandomizedSet: \"\"\" \u53cc\u5411Hash \"\"\" def __init__(self): \"\"\" Initialize your data structure here. \"\"\" # pos \u5b58\u50a8\u5728nums\u4e0a\u7684\u7d22\u5f15 self.nums, self.pos = [], {} def insert(self, val: int) -> bool: \"\"\" Inserts a value to the set. Returns true if the set did not already contain the specified element. \"\"\" if val not in self.pos: self.nums.append(val) self.pos[val] = len(self.nums) - 1 return True return False def remove(self, val: int) -> bool: \"\"\" Removes a value from the set. Returns true if the set contained the specified element. \"\"\" if val in self.pos: idx, last = self.pos[val], self.nums[-1] self.nums[idx], self.pos[last] = last, idx self.nums.pop(); self.pos.pop(val, 0) return True return False def getRandom(self) -> int: \"\"\" Get a random element from the set. \"\"\" return self.nums[random.randint(0, len(self.nums) - 1)] # Your RandomizedSet object will be instantiated and called as such: # obj = RandomizedSet() # param_1 = obj.insert(val) # param_2 = obj.remove(val) # param_3 = obj.getRandom()","title":"\u89e3\u6cd5\u4e8c \u7d22\u5f15hash"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#384","text":"","title":"384.\u6253\u4e71\u6570\u7ec4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_177","text":"\u6253\u4e71\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\u3002 \u793a\u4f8b: // \u4ee5\u6570\u5b57\u96c6\u5408 1, 2 \u548c 3 \u521d\u59cb\u5316\u6570\u7ec4\u3002 int[] nums = {1,2,3}; Solution solution = new Solution(nums); // \u6253\u4e71\u6570\u7ec4 [1,2,3] \u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u4efb\u4f55 [1,2,3]\u7684\u6392\u5217\u8fd4\u56de\u7684\u6982\u7387\u5e94\u8be5\u76f8\u540c\u3002 solution.shuffle(); // \u91cd\u8bbe\u6570\u7ec4\u5230\u5b83\u7684\u521d\u59cb\u72b6\u6001[1,2,3]\u3002 solution.reset(); // \u968f\u673a\u8fd4\u56de\u6570\u7ec4[1,2,3]\u6253\u4e71\u540e\u7684\u7ed3\u679c\u3002 solution.shuffle();","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_178","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#fisheryates-shuffle","text":"\u7b49\u6982\u7387\u6570\u7ec4\u968f\u673a\u6392\u5217 \u5199\u4e0b\u4ece 1 \u5230 N \u7684\u6570\u5b57 \u53d6\u4e00\u4e2a\u4ece 1 \u5230\u5269\u4e0b\u7684\u6570\u5b57\uff08\u5305\u62ec\u8fd9\u4e2a\u6570\u5b57\uff09\u7684\u968f\u673a\u6570 k \u4ece\u4f4e\u4f4d\u5f00\u59cb\uff0c\u5f97\u5230\u7b2c k \u4e2a\u6570\u5b57\uff08\u8fd9\u4e2a\u6570\u5b57\u8fd8\u6ca1\u6709\u88ab\u53d6\u51fa\uff09\uff0c\u628a\u5b83\u5199\u5728\u72ec\u7acb\u7684\u4e00\u4e2a\u5217\u8868\u7684\u6700\u540e\u4e00\u4f4d \u91cd\u590d\u7b2c 2 \u6b65\uff0c\u76f4\u5230\u6240\u6709\u7684\u6570\u5b57\u90fd\u88ab\u53d6\u51fa \u7b2c 3 \u6b65\u5199\u51fa\u7684\u8fd9\u4e2a\u5e8f\u5217\uff0c\u73b0\u5728\u5c31\u662f\u539f\u59cb\u6570\u5b57\u7684\u968f\u673a\u6392\u5217 **\u73b0\u4ee3\u7248\u672c\u7684\u63cf\u8ff0\u4e0e\u539f\u59cb\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u5982\u679c\u6309\u7167\u539f\u59cb\u65b9\u6cd5\uff0c\u611a\u8822\u7684\u8ba1\u7b97\u673a\u4f1a\u82b1\u5f88\u591a\u65e0\u7528\u7684\u65f6\u95f4\u53bb\u8ba1\u7b97\u4e0a\u8ff0\u7b2c 3 \u6b65\u7684\u5269\u4f59\u6570\u5b57\u3002\u8fd9\u91cc\u7684\u65b9\u6cd5\u662f\u5728\u6bcf\u6b21\u8fed\u4ee3\u65f6\u4ea4\u6362\u8fd9\u4e2a\u88ab\u53d6\u51fa\u7684\u6570\u5b57\u5230\u539f\u59cb\u5217\u8868\u7684\u6700\u540e\u3002\u8fd9\u6837\u5c31\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4ece O(n^2) \u51cf\u5c0f\u5230\u4e86 O(n)\u3002 -- To shuffle an array a of n elements (indices 0..n-1): for i from n\u22121 downto 1 do j \u2190 random integer such that 0 \u2264 j \u2264 i exchange a[j] and a[i] import random class Solution: def __init__(self, nums: List[int]): self.nums = nums self.backup = list(nums) def reset(self) -> List[int]: \"\"\" Resets the array to its original configuration and return it. \"\"\" self.nums = list(self.backup) return self.nums def shuffle(self) -> List[int]: \"\"\" Returns a random shuffling of the array. \"\"\" def shuffle(self): for i in range(len(self.nums)): swap_idx = random.randrange(i, len(self.nums)) self.nums[i], self.nums[swap_idx] = self.nums[swap_idx], self.nums[i] return self.nums # Your Solution object will be instantiated and called as such: # obj = Solution(nums) # param_1 = obj.reset() # param_2 = obj.shuffle()","title":"\u89e3\u6cd5\u4e00 Fisher\u2013Yates shuffle \u6d17\u724c\u7b97\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_179","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#406","text":"","title":"406.\u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_180","text":"\u5047\u8bbe\u6709\u6253\u4e71\u987a\u5e8f\u7684\u4e00\u7fa4\u4eba\u7ad9\u6210\u4e00\u4e2a\u961f\u5217\u3002 \u6bcf\u4e2a\u4eba\u7531\u4e00\u4e2a\u6574\u6570\u5bf9(h, k)\u8868\u793a\uff0c\u5176\u4e2dh\u662f\u8fd9\u4e2a\u4eba\u7684\u8eab\u9ad8\uff0ck\u662f\u6392\u5728\u8fd9\u4e2a\u4eba\u524d\u9762\u4e14\u8eab\u9ad8\u5927\u4e8e\u6216\u7b49\u4e8eh\u7684\u4eba\u6570\u3002 \u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u91cd\u5efa\u8fd9\u4e2a\u961f\u5217\u3002 \u6ce8\u610f\uff1a \u603b\u4eba\u6570\u5c11\u4e8e1100\u4eba\u3002 \u793a\u4f8b \u8f93\u5165: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]] \u8f93\u51fa: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_181","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_182","text":"h\u5347\u5e8f k\u5347\u5e8f class Solution(object): def reconstructQueue(self, people): \"\"\" :type people: List[List[int]] :rtype: List[List[int]] \"\"\" nums = sorted(people, key=lambda x: (x[0], x[1])) res = [None for _ in range(len(nums))] for h, k in nums: j = 0 for i in range(len(res)): if k == j and res[i] == None: res[i] = [h, k] break if res[i] == None or res[i][0] >= h: j += 1 return res","title":"\u89e3\u6cd5\u4e00 \u5148\u6392\u5e8f \u518d\u8865\u4f4d\u7f6e"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_183","text":"h\u964d\u5e8f\uff0c k\u5347\u5e8f \u5047\u8bbe\u5019\u9009\u961f\u5217\u4e3a A\uff0c\u5df2\u7ecf\u7ad9\u597d\u961f\u7684\u961f\u5217\u4e3a B. \u4ece A \u91cc\u6311\u8eab\u9ad8\u6700\u9ad8\u7684\u4eba x \u51fa\u6765\uff0c\u63d2\u5165\u5230 B. \u56e0\u4e3a B \u4e2d\u6bcf\u4e2a\u4eba\u7684\u8eab\u9ad8\u90fd\u6bd4 x \u8981\u9ad8\uff0c\u56e0\u6b64 x \u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u770b x \u524d\u9762\u5e94\u8be5\u6709\u591a\u5c11\u4eba\u5c31\u884c\u4e86\u3002\u6bd4\u5982 x \u524d\u9762\u6709 5 \u4e2a\u4eba\uff0c\u90a3 x \u5c31\u63d2\u5165\u5230\u961f\u5217 B \u7684\u7b2c 5 \u4e2a\u4f4d\u7f6e\u3002 class Solution(object): def reconstructQueue(self, people): \"\"\" :type people: List[List[int]] :rtype: List[List[int]] \"\"\" nums = sorted(people, key=lambda x: (-x[0], x[1])) res = [] for h, k in nums: res.insert(k, (h, k)) return res","title":"\u89e3\u6cd5\u4e8c \u5148\u6392\u5e8f \u518d\u63d2\u5165"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#416","text":"","title":"416.\u5206\u5272\u7b49\u548c\u5b50\u96c6[\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_184","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6b63\u6574\u6570\u7684\u975e\u7a7a\u6570\u7ec4\u3002\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002 \u6ce8\u610f: \u6bcf\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e0d\u4f1a\u8d85\u8fc7 100 \u6570\u7ec4\u7684\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7 200 \u793a\u4f8b 1: \u8f93\u5165: [1, 5, 11, 5] \u8f93\u51fa: true \u89e3\u91ca: \u6570\u7ec4\u53ef\u4ee5\u5206\u5272\u6210 [1, 5, 5] \u548c [11]. \u793a\u4f8b 2: \u8f93\u5165: [1, 2, 3, 5] \u8f93\u51fa: false \u89e3\u91ca: \u6570\u7ec4\u4e0d\u80fd\u5206\u5272\u6210\u4e24\u4e2a\u5143\u7d20\u548c\u76f8\u7b49\u7684\u5b50\u96c6.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_185","text":"\u53ea\u5305\u542b\u6b63\u6574\u6570 \u5206\u6210\u5143\u7d20\u548c\u60f3\u7b49 \u90a3\u4e48\u6bcf\u4e2a\u96c6\u5408\u90fd\u662f sum(nums) // 2 \uff08\u5728sum(nums)\u4e3a\u5076\u6570 \uff0c\u5947\u6570\u6ca1\u7b54\u6848 \u95ee\u9898\u53d8\u6210\u54ea\u51e0\u4e2a\u5143\u7d20\u548c\u7b49\u4e8e sum(nums) // 2","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_186","text":"\u56de\u6eaf + \u9006\u6392\u5e8f class Solution: def canPartition(self, nums: List[int]) -> bool: total = sum(nums) if total & 1: return False n = len(nums) nums = sorted(nums, reverse=True) def generate(i, target): if target == 0: return True if i < n and target < nums[i]: return False for j in range(i, n): if generate(j + 1, target - nums[i]): return True return False return generate(0, total // 2)","title":"\u89e3\u6cd5\u4e00 \u5e26\u7ed3\u679c\u56de\u6eaf\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp-01","text":"\u8fd9\u662f\u4e00\u9053\u4ee5 0-1 \u80cc\u5305\u95ee\u9898\u4e3a\u80cc\u666f\u7684\u7b97\u6cd5\u7ec3\u4e60\u9898\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u9898\u76ee\u7ffb\u8bd1\u4e00\u4e0b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6b63\u6574\u6570\u7684\u975e\u7a7a\u6570\u7ec4\u3002\u662f\u5426\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u6311\u9009\u51fa\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e\u6574\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u548c\u7684\u4e00\u534a\u3002 0-1 \u80cc\u5305\u95ee\u9898\u4e5f\u662f\u6700\u57fa\u7840\u7684\u80cc\u5305\u95ee\u9898\uff0c\u5b83\u7684\u7279\u70b9\u662f\uff1a\u5f85\u6311\u9009\u7684\u7269\u54c1\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\uff0c\u53ef\u4ee5\u9009\u62e9\u4e5f\u53ef\u4ee5\u4e0d\u9009\u62e9\u3002\u4e0b\u9762\u6211\u4eec\u5b9a\u4e49\u72b6\u6001\uff0c\u4e0d\u59a8\u5c31\u7528\u95ee\u9898\u7684\u95ee\u6cd5\u5b9a\u4e49\u72b6\u6001\u8bd5\u8bd5\u770b\u3002 dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 \u6839\u636e\u6211\u4eec\u5b66\u4e60\u7684 0-1 \u80cc\u5305\u95ee\u9898\u7684\u72b6\u6001\u8f6c\u79fb\u63a8\u5bfc\u8fc7\u7a0b\uff0c\u65b0\u6765\u4e00\u4e2a\u6570\uff0c\u4f8b\u5982\u662f nums[i]\uff0c\u6839\u636e\u8fd9\u4e2a\u6570\u53ef\u80fd\u9009\u62e9\u4e5f\u53ef\u80fd\u4e0d\u88ab\u9009\u62e9\uff1a \u5982\u679c\u4e0d\u9009\u62e9 nums[i]\uff0c\u5728 [0, i - 1] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u5df2\u7ecf\u6709\u4e00\u90e8\u5206\u5143\u7d20\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e3a j \uff0c\u90a3\u4e48 dp[i][j] = true\uff1b \u5982\u679c\u9009\u62e9 nums[i]\uff0c\u5728 [0, i - 1] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u5c31\u5f97\u627e\u5230\u4e00\u90e8\u5206\u5143\u7d20\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e3a j - nums[i] \uff0c\u6211\u65e2\u7136\u8fd9\u6837\u5199\u51fa\u6765\u4e86\uff0c\u4f60\u5c31\u5e94\u8be5\u77e5\u9053\uff0c\u8fd9\u91cc\u8ba8\u8bba\u7684\u524d\u63d0\u6761\u4ef6\u662f nums[i] <= j\u3002 \u4ee5\u4e0a\u4e8c\u8005\u6210\u7acb\u4e00\u6761\u90fd\u884c\u3002\u4e8e\u662f\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\uff1a dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]], (nums[i] <= j) \u4e8e\u662f\u6309\u7167 0-1 \u80cc\u5305\u95ee\u9898\u7684\u6a21\u677f\uff0c\u6211\u4eec\u4e0d\u96be\u5199\u51fa\u4ee5\u4e0b\u4ee3\u7801\u3002 class Solution: def canPartition(self, nums: List[int]) -> bool: \"\"\" \u65b9\u6cd5\u4e09\uff1aDP-01\u80cc\u5305\u95ee\u9898 dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 \"\"\" total = sum(nums) if total & 1: return False n = len(nums) target = total // 2 # dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 dp = [[False for _ in range(target + 1)] for _ in range(n)] # \u5148\u5199\u7b2c 1 \u884c\uff1a\u770b\u770b\u7b2c 1 \u4e2a\u6570\u662f\u4e0d\u662f\u80fd\u591f\u521a\u597d\u586b\u6ee1\u5bb9\u91cf\u4e3a target for j in range(target + 1): dp[0][j] = True if nums[0] == j else False # i \u8868\u793a\u7269\u54c1\u7d22\u5f15 for i in range(1, n): # \u8868\u793a\u5bb9\u91cf for j in range(target + 1): dp[i][j] = dp[i-1][j] or (j >= nums[i] and dp[i-1][j - nums[i]]) return dp[-1][-1] \u590d\u6742\u5ea6\u5206\u6790: \u65f6\u95f4\u590d\u6742\u5ea6:O(NC):\u8fd9\u91ccN\u662f\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570,C\u662f\u6570\u7ec4\u5143\u7d20\u7684\u548c\u7684\u4e00\u534a\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6:O(NC)","title":"\u89e3\u6cd5\u4e8c DP 01\u80cc\u5305\u95ee\u9898"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp-01_1","text":"\u5728\u7f16\u5199\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8fd8\u53d1\u73b0\uff1a 1\u3001\u586b\u5199\u7b2c 1 \u4e2a\u7269\u54c1\u662f\u5426\u6ee1\u8db3\u72b6\u6001\u7684\u65f6\u5019\uff0c\u56e0\u4e3a nums[0] \u662f\u4e0d\u53d8\u7684\uff0c\u800c j \u5728\u4e0d\u65ad\u589e\u52a0\uff0c\u53ea\u8981\u6ee1\u8db3 nums[0] == j \u6210\u7acb\uff0c\u540e\u9762\u7684 j \u5c31\u4e0d\u5fc5\u505a\u5224\u65ad\u4e86\uff0c\u56e0\u4e3a\u4e00\u5b9a\u6709 nums[0] < j \u6210\u7acb\uff1b 2\u3001\u4ece\u540e\u5411\u524d\u5199\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u65e6 j >= nums[i] \u4e0d\u6ee1\u8db3\uff0c\u53ef\u4ee5\u9a6c\u4e0a\u9000\u51fa\u5f53\u524d\u5faa\u73af\uff0c\u56e0\u4e3a\u540e\u9762 j \u80af\u5b9a\u8d8a\u6765\u8d8a\u5c0f\uff0c\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u505a\u5224\u65ad\uff0c\u76f4\u63a5\u8fdb\u5165\u5916\u5c42\u5faa\u73af\u7684\u4e0b\u4e00\u5c42\u3002 \u4ee5\u4e0b\u4ee3\u7801\u6839\u636e\u4e0a\u9762\u7684\u201c\u53c2\u8003\u4ee3\u7801 1\u201d\u4fee\u6539\uff0c\u4fee\u6539\u548c\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff0c\u6211\u90fd\u52a0\u4e86\u6ce8\u91ca\u3002 class Solution: def canPartition(self, nums: List[int]) -> bool: total = sum(nums) if total & 1: return False n = len(nums) target = total // 2 # dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 dp = [False for _ in range(target + 1)] # \u5148\u5199\u7b2c 1 \u884c\uff1a\u770b\u770b\u7b2c 1 \u4e2a\u6570\u662f\u4e0d\u662f\u80fd\u591f\u521a\u597d\u586b\u6ee1\u5bb9\u91cf\u4e3a target for j in range(target + 1): if nums[0] == j: dp[j] = True # \u5982\u679c\u7b49\u4e8e\uff0c\u540e\u9762\u5c31\u4e0d\u7528\u505a\u5224\u65ad\u4e86\uff0c\u56e0\u4e3a j \u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u80af\u5b9a\u4e0d\u7b49\u4e8e nums[0] break # \u6ce8\u610f\uff1a\u56e0\u4e3a\u540e\u9762\u7684DP\u53c2\u8003\u4e86\u524d\u9762\u4e00\u5c42\u7684DP\uff0c\u6211\u4eec\u4ece\u540e\u5411\u524d\u8ba1\u7b97 for i in range(1, n): # \u8868\u793a\u5bb9\u91cf for j in range(target, -1, -1): if j >= nums[i]: dp[j] = dp[j] or dp[j -nums[i]] else: break return dp[-1] \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6:ONO):\u8fd9\u91ccN\u662f\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570,C\u662f\u6570\u7ec4\u5143\u7d20\u7684\u548c\u7684\u4e00\u534a \u7a7a\u95f4\u590d\u6742\u5ea6:O(C):\u51cf\u5c11\u4e86\u7269\u54c1\u90a3\u4e2a\u7ef4\u5ea6,\u65e0\u8bba\u6765\u591a\u5c11\u4e2a\u6570,\u7528\u4e00\u884c\u8868\u793a\u72b6\u6001\u5c31\u591f\u4e86","title":"\u89e3\u6cd5\u4e09 DP \u7c7b\u4f3c01\u80cc\u5305 \u4e8c\u7ef4\u53d8\u4e00\u7ef4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_4","text":"class Solution: def canPartition(self, nums: List[int]) -> bool: \"\"\" \u53ea\u5305\u542b\u6b63\u6574\u6570 \u5206\u6210\u5143\u7d20\u548c\u60f3\u7b49 \u90a3\u4e48\u6bcf\u4e2a\u96c6\u5408\u90fd\u662f sum(nums) // 2 \uff08\u5728sum(nums)\u4e3a\u5076\u6570 \uff0c\u5947\u6570\u6ca1\u7b54\u6848 \u95ee\u9898\u53d8\u6210\u54ea\u51e0\u4e2a\u5143\u7d20\u548c\u7b49\u4e8e sum(nums) // 2 \u65b9\u6cd5\u4e00\uff1a DFS + \u8bb0\u5fc6\u5316 + \u9006\u6392\u5e8f\u6570\u7ec4 \u8d85\u65f6 X \u65b9\u6cd5\u4e8c\uff1a\u56de\u6eaf + \u9006\u6392\u5e8f \u8d85\u8fc7100% \u65b9\u6cd5\u4e09\uff1aDP-01\u80cc\u5305\u95ee\u9898 dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 \"\"\" total = sum(nums) if total & 1: return False n = len(nums) target = total // 2 # dp[i][j] \uff1a\u8868\u793a\u4ece\u6570\u7ec4\u7684 [0, i] \u8fd9\u4e2a\u5b50\u533a\u95f4\u5185\u6311\u9009\u4e00\u4e9b\u6b63\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u7b49\u4e8e j\u3002 dp = [False for _ in range(target + 1)] # \u5148\u5199\u7b2c 1 \u884c\uff1a\u770b\u770b\u7b2c 1 \u4e2a\u6570\u662f\u4e0d\u662f\u80fd\u591f\u521a\u597d\u586b\u6ee1\u5bb9\u91cf\u4e3a target for j in range(target + 1): if nums[0] == j: dp[j] = True # \u5982\u679c\u7b49\u4e8e\uff0c\u540e\u9762\u5c31\u4e0d\u7528\u505a\u5224\u65ad\u4e86\uff0c\u56e0\u4e3a j \u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u80af\u5b9a\u4e0d\u7b49\u4e8e nums[0] break # \u6ce8\u610f\uff1a\u56e0\u4e3a\u540e\u9762\u7684DP\u53c2\u8003\u4e86\u524d\u9762\u4e00\u5c42\u7684DP\uff0c\u6211\u4eec\u4ece\u540e\u5411\u524d\u8ba1\u7b97 for i in range(1, n): # \u5148\u770b\u6700\u540e\u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u8fd4\u56de True\uff0c\u5982\u679c\u662f\u540e\u9762\u5c31\u6ca1\u6709\u5fc5\u8981\u8ba1\u7b97\u4e86\uff0c\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de True # **\u5373\u5728\u4e0a\u4e00\u8f6e [0, i]\u5df2\u7ecf\u6ee1\u8db3\u4e86\u627e\u5230target\u7684\u8981\u6c42** if dp[-1] or dp[target - nums[i]]: return True # \u8868\u793a\u5bb9\u91cf for j in range(target, -1, -1): if j >= nums[i]: dp[j] = dp[j] or dp[j -nums[i]] else: break return dp[-1]","title":"\u89e3\u6cd5\u56db  DP\u4f18\u5316\u4e8c\uff1a\u6ce8\u610f\u5230\u672c\u9898\u7684\u7279\u6b8a\u6027\uff0c\u63d0\u524d\u7ed3\u675f\u5faa\u73af"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#448","text":"","title":"448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_187","text":"\u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u5728 1 \u2264 a[i] \u2264 n ( n = \u6570\u7ec4\u5927\u5c0f ) \u7684 \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e00\u4e9b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u53e6\u4e00\u4e9b\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u627e\u5230\u6240\u6709\u5728 [1, n] \u8303\u56f4\u4e4b\u95f4\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u3002 \u60a8\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002 \u793a\u4f8b: \u8f93\u5165: [4,3,2,7,8,2,3,1] \u8f93\u51fa: [5,6]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_188","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_189","text":"class Solution: def findDisappearedNumbers(self, nums: List[int]) -> List[int]: \"\"\" \u6cd51.\u6392\u5e8f nlogn \u6cd52.\u628a\u6570\u7ec4(\u503c - 1)\u53d8\u6210\u7d22\u5f15, \u628a\u5bf9\u5e94\u7d22\u5f15\u7684\u6570\u53d8\u6210\u8d1f\u6570 \"\"\" res = [] for i in range(len(nums)): if nums[abs(nums[i]) - 1] < 0: continue nums[abs(nums[i]) - 1] = -nums[abs(nums[i]) - 1] for i in range(len(nums)): if nums[i] > 0: res.append(i + 1) return res","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_190","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#453-tagmath","text":"","title":"453. \u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u4f7f\u6570\u7ec4\u5143\u7d20\u76f8\u7b49[tag:math]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4531","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684 \u975e\u7a7a \u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u8ba9\u6570\u7ec4\u6240\u6709\u5143\u7d20\u76f8\u7b49\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u3002\u6bcf\u6b21\u79fb\u52a8\u53ef\u4ee5\u4f7f n - 1 \u4e2a\u5143\u7d20\u589e\u52a0 1\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3] \u8f93\u51fa: 3 \u89e3\u91ca: \u53ea\u9700\u89813\u6b21\u79fb\u52a8\uff08\u6ce8\u610f\u6bcf\u6b21\u79fb\u52a8\u4f1a\u589e\u52a0\u4e24\u4e2a\u5143\u7d20\u7684\u503c\uff09\uff1a [1,2,3] => [2,3,3] => [3,4,3] => [4,4,4]","title":"453.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4532","text":"","title":"453.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#45321","text":"class Solution: def minMoves(self, nums: List[int]) -> int: \"\"\" \u6bcf\u6b21\u9009\u62e9\u6700\u5c0f\u7684n-1\u4e2a\u6570\u5411\u4e0a\u79fb\u52a8 <--> \u6bcf\u6b21\u51cf\u5c0f\u6700\u5927\u503c \u95ee\u9898\u53d8\u5316\u6210 \u975e\u6700\u5c0f\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u503c\u4e4b\u548c \"\"\" return sum(nums) - min(nums) * len(nums)","title":"453.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#454-ii","text":"","title":"454.\u56db\u6570\u76f8\u52a0 II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_191","text":"\u7ed9\u5b9a\u56db\u4e2a\u5305\u542b\u6574\u6570\u7684\u6570\u7ec4\u5217\u8868 A , B , C , D ,\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5143\u7ec4 (i, j, k, l) \uff0c\u4f7f\u5f97 A[i] + B[j] + C[k] + D[l] = 0\u3002 \u4e3a\u4e86\u4f7f\u95ee\u9898\u7b80\u5355\u5316\uff0c\u6240\u6709\u7684 A, B, C, D \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6 N\uff0c\u4e14 0 \u2264 N \u2264 500 \u3002\u6240\u6709\u6574\u6570\u7684\u8303\u56f4\u5728 -228 \u5230 228 - 1 \u4e4b\u95f4\uff0c\u6700\u7ec8\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7 231 - 1 \u3002 \u4f8b\u5982: \u8f93\u5165: A = [ 1, 2] B = [-2,-1] C = [-1, 2] D = [ 0, 2] \u8f93\u51fa: 2 \u89e3\u91ca: \u4e24\u4e2a\u5143\u7ec4\u5982\u4e0b: 1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0 2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_192","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_193","text":"def fourSumCount(self, A, B, C, D): AB = collections.Counter(a+b for a in A for b in B) return sum(AB[-c-d] for c in C for d in D)","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_194","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#455","text":"","title":"455 \u5206\u53d1\u997c\u5e72"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4551","text":"\u5047\u8bbe\u4f60\u662f\u4e00\u4f4d\u5f88\u68d2\u7684\u5bb6\u957f\uff0c\u60f3\u8981\u7ed9\u4f60\u7684\u5b69\u5b50\u4eec\u4e00\u4e9b\u5c0f\u997c\u5e72\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u5b69\u5b50\u6700\u591a\u53ea\u80fd\u7ed9\u4e00\u5757\u997c\u5e72\u3002\u5bf9\u6bcf\u4e2a\u5b69\u5b50 i \uff0c\u90fd\u6709\u4e00\u4e2a\u80c3\u53e3\u503c gi \uff0c\u8fd9\u662f\u80fd\u8ba9\u5b69\u5b50\u4eec\u6ee1\u8db3\u80c3\u53e3\u7684\u997c\u5e72\u7684\u6700\u5c0f\u5c3a\u5bf8\uff1b\u5e76\u4e14\u6bcf\u5757\u997c\u5e72 j \uff0c\u90fd\u6709\u4e00\u4e2a\u5c3a\u5bf8 sj \u3002\u5982\u679c sj >= gi \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u997c\u5e72 j \u5206\u914d\u7ed9\u5b69\u5b50 i \uff0c\u8fd9\u4e2a\u5b69\u5b50\u4f1a\u5f97\u5230\u6ee1\u8db3\u3002\u4f60\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u6ee1\u8db3\u8d8a\u591a\u6570\u91cf\u7684\u5b69\u5b50\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u6570\u503c\u3002 \u6ce8\u610f\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe\u80c3\u53e3\u503c\u4e3a\u6b63\u3002 \u4e00\u4e2a\u5c0f\u670b\u53cb\u6700\u591a\u53ea\u80fd\u62e5\u6709\u4e00\u5757\u997c\u5e72\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3], [1,1] \u8f93\u51fa: 1 \u89e3\u91ca: \u4f60\u6709\u4e09\u4e2a\u5b69\u5b50\u548c\u4e24\u5757\u5c0f\u997c\u5e72\uff0c3\u4e2a\u5b69\u5b50\u7684\u80c3\u53e3\u503c\u5206\u522b\u662f\uff1a1,2,3\u3002 \u867d\u7136\u4f60\u6709\u4e24\u5757\u5c0f\u997c\u5e72\uff0c\u7531\u4e8e\u4ed6\u4eec\u7684\u5c3a\u5bf8\u90fd\u662f1\uff0c\u4f60\u53ea\u80fd\u8ba9\u80c3\u53e3\u503c\u662f1\u7684\u5b69\u5b50\u6ee1\u8db3\u3002 \u6240\u4ee5\u4f60\u5e94\u8be5\u8f93\u51fa1\u3002 \u8f93\u5165: [1,2], [1,2,3] \u8f93\u51fa: 2 \u89e3\u91ca: \u4f60\u6709\u4e24\u4e2a\u5b69\u5b50\u548c\u4e09\u5757\u5c0f\u997c\u5e72\uff0c2\u4e2a\u5b69\u5b50\u7684\u80c3\u53e3\u503c\u5206\u522b\u662f1,2\u3002 \u4f60\u62e5\u6709\u7684\u997c\u5e72\u6570\u91cf\u548c\u5c3a\u5bf8\u90fd\u8db3\u4ee5\u8ba9\u6240\u6709\u5b69\u5b50\u6ee1\u8db3\u3002 \u6240\u4ee5\u4f60\u5e94\u8be5\u8f93\u51fa2. class Solution: def findContentChildren(self, g: List[int], s: List[int]) -> int: \"\"\" \u8d2a\u5fc3\u7b97\u6cd5 \u7ed9\u5b69\u5b50\u6570\u7ec4\u548c\u997c\u5e72\u6570\u7ec4\u9006\u5e8f\u6392\u5217 \u5c3d\u53ef\u80fd\u628a\u6700\u5927\u7684\u997c\u5e72\u5206\u7ed9\u80c3\u53e3\u5927\u7684\u5b69\u5b50 \u8981\u6c42\u4e00:\u81ea\u5df1\u5199\u6392\u5e8f\u7b97\u6cd5 \"\"\" g.sort(reverse=True) s.sort(reverse=True) cnt = 0 index = 0 for sj in s: for j in range(index, len(g)): if sj >= g[j]: cnt += 1 index = j+1 break return cnt # Thanks! short&beautiful! def findContentChildren(self, g, s): \"\"\" :type g: List[int] :type s: List[int] :rtype: int \"\"\" g.sort() s.sort() childi = 0 cookiei = 0 while cookiei < len(s) and childi < len(g): if s[cookiei] >= g[childi]: childi += 1 cookiei += 1 return childi \u6b63\u5e8f, \u9006\u5e8f\u6bd4\u8f83\u7686\u53ef\u4ee5","title":"455.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4552","text":"\u793a\u4f8b 2:","title":"455.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#461","text":"","title":"461.\u6c49\u660e\u8ddd\u79bb"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_195","text":"\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002 \u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 x \u548c y\uff0c\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002 \u6ce8\u610f\uff1a 0 \u2264 x, y < 231. \u793a\u4f8b: \u8f93\u5165: x = 1, y = 4 \u8f93\u51fa: 2 \u89e3\u91ca: 1 (0 0 0 1) 4 (0 1 0 0) \u2191 \u2191 \u4e0a\u9762\u7684\u7bad\u5934\u6307\u51fa\u4e86\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_196","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_197","text":"x &= x-1 \u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u4e2d\u7684\u6700\u540e\u4f4d\u76841\u8f6c\u6362\u4e3a0.\u3010\u53ef\u7528\u4e8e\u8ba1\u7b97\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570\u3011 class Solution: def hammingDistance(self, x: int, y: int) -> int: \"\"\" ^ \u6309\u4f4d\u5f02\u6216\u540e\u6c42\u4e8c\u8fdb\u5236\u4e2d1\u7684\u6570\u91cf \"\"\" c = x ^ y cnt = 0 while c: c = c & (c - 1) cnt += 1 return cnt","title":"\u89e3\u6cd5\u4e00 \u4f4d\u8fd0\u7b97"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_198","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#462-iitagmath","text":"","title":"462. \u6700\u5c11\u79fb\u52a8\u6b21\u6570\u4f7f\u6570\u7ec4\u5143\u7d20\u76f8\u7b49 II[tag:math]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4621","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u4f7f\u6240\u6709\u6570\u7ec4\u5143\u7d20\u76f8\u7b49\u6240\u9700\u7684\u6700\u5c0f\u79fb\u52a8\u6570\uff0c\u5176\u4e2d\u6bcf\u6b21\u79fb\u52a8\u53ef\u5c06\u9009\u5b9a\u7684\u4e00\u4e2a\u5143\u7d20\u52a01\u6216\u51cf1\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u7684\u957f\u5ea6\u6700\u591a\u4e3a10000\u3002 \u4f8b\u5982: \u8f93\u5165: [1,2,3] \u8f93\u51fa: 2 \u8bf4\u660e\uff1a \u53ea\u6709\u4e24\u4e2a\u52a8\u4f5c\u662f\u5fc5\u8981\u7684\uff08\u8bb0\u5f97\u6bcf\u4e00\u6b65\u4ec5\u53ef\u4f7f\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u52a01\u6216\u51cf1\uff09\uff1a [1,2,3] => [2,2,3] => [2,2,2]","title":"462.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4622","text":"\u8fd9\u9053\u9898\u7684\u5173\u952e\u662f\u627e\u5230\u4e2d\u4f4d\u6570 \u53ef\u4ee5\u7528\u5feb\u901f\u6392\u5e8f\u4e2dpartition\u601d\u60f3\u627e\u5230medium","title":"462.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#46221","text":"class Solution: def minMoves2(self, nums: List[int]) -> int: \"\"\" \u627e\u4e2d\u4f4d\u6570 \u8ba1\u7b97\u6bcf\u4e2a\u4f4d\u548c\u4e2d\u4f4d\u6570\u7edd\u5bf9\u5dee\u503c\u4e4b\u548c partition O(n) \"\"\" nums = sorted(nums) medium_val = nums[len(nums)>>1] return sum([abs(num - medium_val) for num in nums])","title":"462.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#46222","text":"def minMoves2(self, nums): nums.sort() # ~x == -x - 1 return sum(nums[~i] - nums[i] for i in range(len(nums) / 2))","title":"462.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#494","text":"","title":"494.\u76ee\u6807\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_199","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0ca1, a2, ..., an, \u548c\u4e00\u4e2a\u76ee\u6807\u6570\uff0cS\u3002\u73b0\u5728\u4f60\u6709\u4e24\u4e2a\u7b26\u53f7 + \u548c -\u3002\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6574\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u4ece + \u6216 -\u4e2d\u9009\u62e9\u4e00\u4e2a\u7b26\u53f7\u6dfb\u52a0\u5728\u524d\u9762\u3002 \u8fd4\u56de\u53ef\u4ee5\u4f7f\u6700\u7ec8\u6570\u7ec4\u548c\u4e3a\u76ee\u6807\u6570 S \u7684\u6240\u6709\u6dfb\u52a0\u7b26\u53f7\u7684\u65b9\u6cd5\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums: [1, 1, 1, 1, 1], S: 3 \u8f93\u51fa: 5 \u89e3\u91ca: -1+1+1+1+1 = 3 +1-1+1+1+1 = 3 +1+1-1+1+1 = 3 +1+1+1-1+1 = 3 +1+1+1+1-1 = 3 \u4e00\u5171\u67095\u79cd\u65b9\u6cd5\u8ba9\u6700\u7ec8\u76ee\u6807\u548c\u4e3a3\u3002 \u6ce8\u610f: \u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc720\uff0c\u5e76\u4e14\u6570\u7ec4\u4e2d\u7684\u503c\u5168\u4e3a\u6b63\u6570\u3002 \u521d\u59cb\u7684\u6570\u7ec4\u7684\u548c\u4e0d\u4f1a\u8d85\u8fc71000\u3002 \u4fdd\u8bc1\u8fd4\u56de\u7684\u6700\u7ec8\u7ed3\u679c\u4e3a32\u4f4d\u6574\u6570\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_200","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_1","text":"class Solution: def findTargetSumWays(self, nums: List[int], S: int) -> int: \"\"\" \u8fb9\u754c\u6761\u4ef6\uff1a-\u975e\u8d1f\u6574\u6570 \u76f4\u63a5\u56de\u6eaf\u8d85\u65f6 \u9012\u5f52 + \u8bb0\u5fc6\u5316 DP\uff1a \u5b50\u51fd\u6570\u4e2d\u4f7f\u7528\u51fd\u6570\u7684\u53d8\u91cf \"\"\" memo = dict() def dfs(i, S): if i == len(nums): return 1 if S == 0 else 0 if (i, S) in memo: return memo[(i, S)] ans1 = dfs(i+1, S - nums[i]) ans2 = dfs(i+1, S + nums[i]) memo[(i, S)] = ans1 + ans2 return memo[(i, S)] if not nums: return 0 return dfs(0, S)","title":"\u89e3\u6cd5\u4e00 DFS + \u8bb0\u5fc6\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp-01-todo","text":"","title":"\u89e3\u6cd5\u4e8c DP 01\u80cc\u5305\u95ee\u9898 todo"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#560k","text":"","title":"560.\u548c\u4e3aK\u7684\u5b50\u6570\u7ec4[\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_201","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u627e\u5230\u8be5\u6570\u7ec4\u4e2d\u548c\u4e3a k \u7684\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u7684\u4e2a\u6570\u3002 \u793a\u4f8b 1 : \u8f93\u5165:nums = [1,1,1], k = 2 \u8f93\u51fa: 2 , [1,1] \u4e0e [1,1] \u4e3a\u4e24\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u3002 \u8bf4\u660e : \u6570\u7ec4\u7684\u957f\u5ea6\u4e3a [1, 20,000]\u3002 \u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u662f [-1000, 1000] \uff0c\u4e14\u6574\u6570 k \u7684\u8303\u56f4\u662f [-1e7, 1e7]\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_202","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bruce","text":"class Solution: def subarraySum(self, nums: List[int], k: int) -> int: \"\"\" Bruce O(n**2) java \u2705 \u9010\u5143\u7d20\u7d2f\u52a0 \u8d85\u65f6 java \u2705 \u8fb9\u754c\u6761\u4ef6\uff1a \u6574\u6570\u6709\u8d1f\u6570 \"\"\" if not nums: return 0 forward = [0] for num in nums: forward.append(forward[-1] + num) ans = 0 le = len(nums) for i in range(le): for j in range(i + 1, le + 1): if (forward[j] - forward[i]) == k: ans = ans + 1 return ans","title":"\u89e3\u6cd5\u4e00 \u9010\u5143\u7d20\u7d2f\u52a0 \u6216 bruce"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#hashmap","text":"\u4ece\u89e3\u51b3\u65b9\u68481\u4e2d\uff0c\u6211\u4eec\u77e5\u9053\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u5173\u952e\u662fSUM [i\uff0cj]\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053SUM [0\uff0ci - 1]\u548cSUM [0\uff0cj]\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5f97\u5230SUM [i\uff0cj]\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u6570\u7ec4\uff0c\u8ba1\u7b97\u5f53\u524d\u603b\u548c\u5e76\u5c06\u6240\u6709\u770b\u5230\u7684PreSum\u7684\u6570\u91cf\u4fdd\u5b58\u5230HashMap\u3002\u65f6\u95f4\u590d\u6742\u5ea6O\uff08n\uff09\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O\uff08n\uff09\u3002 \u8fd9\u79cd\u65b9\u6cd5\u80cc\u540e\u7684\u60f3\u6cd5\u5982\u4e0b\uff1a 1.\u5982\u679c\u4e24\u4e2a\u7d22\u5f15\u95f4\u7d2f\u79ef\u548c\u76f8\u540c\uff0c\u5373sum [i] = sum [j] \u8fd9\u4e9b\u6307\u6570\u4e4b\u95f4\u7684\u5143\u7d20\u4e4b\u548c\u4e3a\u96f6\u3002\uff08\u4f5c\u7528\u662f\u53ef\u4ee5\u7d2f\u8ba1\u6b21\u6570\uff09 2.\u5982\u679c\u7d2f\u79ef\u603b\u548c\u8fbe\u5230\u4e24\u4e2a\u6307\u6570\uff0c\u6bd4\u5982i\u548cj\u662fk\u7684\u5dee\u503c\uff0c\u5373\u5982\u679csum [i] -sum [j] = k\uff0c\u5219\u603b\u548c\u4f4d\u4e8e\u6307\u6570i\u548cj\u4e4b\u95f4\u7684\u5143\u7d20\u662fk\u3002 \u57fa\u4e8e\u8fd9\u4e9b\u60f3\u6cd5\uff0c\u6211\u4eec\u4f7f\u7528hashmap\uff0c\u7528\u4e8e\u5b58\u50a8\u53ef\u80fd\u7684\u6240\u6709\u7d22\u5f15\u7684\u7d2f\u79ef\u603b\u548c\u4ee5\u53ca\u76f8\u540c\u603b\u548c\u53d1\u751f\u7684\u6b21\u6570\u3002 \u6211\u4eec\u904d\u5386\u6570\u7ec4nums\u5e76\u7ee7\u7eed\u67e5\u627e\u7d2f\u79ef\u603b\u548c\u3002\u6bcf\u5f53\u6211\u4eec\u9047\u5230\u4e00\u4e2a\u65b0\u7684\u548c\u65f6\uff0c\u6211\u4eec\u5728hashmap\u4e2d\u521b\u5efa\u4e00\u4e2a\u4e0e\u8be5\u603b\u548c\u76f8\u5bf9\u5e94\u7684\u65b0\u6761\u76ee\u3002\u5982\u679c\u518d\u6b21\u51fa\u73b0\u76f8\u540c\u7684\u548c\uff08\u4e0e\u4e0a\u4e00\u4e2a\u76f8\u540c\u7684\u7d2f\u52a0\u548c\u7684\u7d22\u5f15\u4e2d\u95f4\u7684\u7d2f\u52a0\u548c\u4e3a0\uff09\uff0c\u6211\u4eec\u589e\u52a0\u4e0ehashmap\u4e2d\u7684\u548c\u76f8\u5bf9\u5e94\u7684\u8ba1\u6570\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u9047\u5230\u7684\u6bcf\u4e2a\u548c\uff0c\u6211\u4eec\u8fd8\u786e\u5b9a\u603bsum-k\u5df2\u7ecf\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u56e0\u4e3a\u5b83\u5c06\u786e\u5b9a\u5177\u6709\u548ck\u7684\u5b50\u9635\u5217\u53d1\u751f\u5230\u5f53\u524d\u7d22\u5f15\u7684\u6b21\u6570\u3002\u6211\u4eec\u5c06count\u589e\u52a0\u76f8\u540c\u7684\u6570\u91cf\u3002 \u904d\u5386\u5b8c\u6574\u6570\u7ec4\u540e\uff0ccount\u5c06\u63d0\u4f9b\u6240\u9700\u7684\u7ed3\u679c\u3002 class Solution(object): def subarraySum(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: int \"\"\" sumv = 0 # \u524d\u7f00\u548c: \u51fa\u73b0\u6b21\u6570 dic = {0: 1} res = 0 for i in range(len(nums)): sumv += nums[i] if sumv - k in dic: res += dic[sumv - k] dic.setdefault(sumv, 0) dic[sumv] += 1 return res","title":"\u89e3\u6cd5\u4e8c HashMap \u6709\u96be\u5ea6 \u3010\u5e38\u601d\u8003\u3011"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#567","text":"","title":"567. \u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_203","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad s2 \u662f\u5426\u5305\u542b s1 \u7684\u6392\u5217\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6392\u5217\u4e4b\u4e00\u662f\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002 \u793a\u4f8b1: \u8f93\u5165: s1 = \"ab\" s2 = \"eidbaooo\" \u8f93\u51fa: True \u89e3\u91ca: s2 \u5305\u542b s1 \u7684\u6392\u5217\u4e4b\u4e00 (\"ba\"). \u793a\u4f8b2: \u8f93\u5165: s1= \"ab\" s2 = \"eidboaoo\" \u8f93\u51fa: False \u6ce8\u610f\uff1a \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u90fd\u5728 [1, 10,000] \u4e4b\u95f4","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_204","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_205","text":"class Solution: def checkInclusion(self, s1: str, s2: str) -> bool: \"\"\" 1.s1\u9884\u5904\u7406\u751f\u6210\u6240\u6709\u7684\u6392\u5217\u662f\u6307\u6570\u7ea7\u522b\u590d\u6742\u5ea6 2.\u7edf\u8ba1\u5b50\u5b57\u7b26\u4e32\u7684\u5404\u5b57\u7b26\u6570\u91cf \"\"\" if len(s1) > len(s2): return False def get_char_num(s): char_dic = [0] *26 for c in s: char_dic[ord(c) - ord('a')] += 1 return char_dic i, j = 0, len(s1) s1_dic = get_char_num(s1) s2_dic = get_char_num(s2[i: j]) if s2_dic == s1_dic: return True while j < len(s2): s2_dic[ord(s2[j]) - ord('a')] += 1 s2_dic[ord(s2[i]) - ord('a')] -= 1 if s2_dic == s1_dic: return True i += 1 j += 1 return False","title":"\u89e3\u6cd5\u4e00 \u7edf\u8ba1\u8bcd\u9891"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_206","text":"","title":"\u89e3\u6cd5\u4e8c \u5728\u7b2c\u4e00\u79cd\u89e3\u6cd5\u4e0a\u4f18\u5316"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#581","text":"","title":"581. \u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_207","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5bfb\u627e\u4e00\u4e2a\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\uff0c\u5982\u679c\u5bf9\u8fd9\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u6570\u7ec4\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002 \u4f60\u627e\u5230\u7684\u5b50\u6570\u7ec4\u5e94\u662f\u6700\u77ed\u7684\uff0c\u8bf7\u8f93\u51fa\u5b83\u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: [2, 6, 4, 8, 10, 9, 15] \u8f93\u51fa: 5 \u89e3\u91ca: \u4f60\u53ea\u9700\u8981\u5bf9 [6, 4, 8, 10, 9] \u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u8868\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002 \u8bf4\u660e : \u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u5728 [1, 10,000]\u3002 \u8f93\u5165\u7684\u6570\u7ec4\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20 \uff0c\u6240\u4ee5\u5347\u5e8f\u7684\u610f\u601d\u662f<=\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_208","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#onlogn_1","text":"def findUnsortedSubarray(self, nums: List[int]) -> int: \"\"\" \u65b9\u6cd5\u4e00: \u6392\u5e8f \u627e\u5230\u4e0d\u76f8\u7b49\u7684\u7b2c\u4e00\u4e2a\u70b9 \u548c\u6700\u540e\u4e00\u4e2a\u70b9 O(NlogN) \u65b9\u6cd5\u4e8c: \u5b58\u5165\u5c71\u8c37\u7684\u533a\u95f4 \u627e\u5230\u8fb9\u754c O(N) \"\"\" nums_sorted = sorted(nums) start_i = -1 end_i = -1 for i in range(len(nums)): if nums_sorted[i] != nums[i]: if start_i == -1: start_i = i else: end_i = i return end_i - start_i + 1 if start_i != -1 else 0","title":"\u89e3\u6cd5\u4e00 \u6392\u5e8f \u6bd4\u8f83 O(nlogn)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#on_2","text":"\u65b9\u6cd5 4\uff1a\u4f7f\u7528\u6808 \u7b97\u6cd5 \u8fd9\u4e2a\u65b9\u6cd5\u80cc\u540e\u7684\u60f3\u6cd5\u4ecd\u7136\u662f\u9009\u62e9\u6392\u5e8f\u3002\u6211\u4eec\u9700\u8981\u627e\u5230\u65e0\u5e8f\u5b50\u6570\u7ec4\u4e2d\u6700\u5c0f\u5143\u7d20\u548c\u6700\u5927\u5143\u7d20\u5206\u522b\u5bf9\u5e94\u7684\u6b63\u786e\u4f4d\u7f6e\uff0c\u6765\u6c42\u5f97\u6211\u4eec\u60f3\u8981\u7684\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u8fb9\u754c\u3002 \u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\uff0c\u6b64\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 \u6808\u6808 \u3002\u6211\u4eec\u4ece\u5934\u904d\u5386 numsnums \u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u7684\u6570\u5b57\u5927\u5c0f\u4e00\u76f4\u662f\u5347\u5e8f\u7684\uff0c\u6211\u4eec\u5c31\u4e0d\u65ad\u628a\u5bf9\u5e94\u7684\u4e0b\u6807\u538b\u5165\u6808\u4e2d\uff0c\u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u56e0\u4e3a\u8fd9\u4e9b\u5143\u7d20\u5728\u76ee\u524d\u90fd\u662f\u5904\u4e8e\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002\u4e00\u65e6\u6211\u4eec\u9047\u5230\u524d\u9762\u7684\u6570\u6bd4\u540e\u9762\u7684\u6570\u5927\uff0c\u4e5f\u5c31\u662f nums[j]\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 nums[j]\u4e00\u5b9a\u4e0d\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002 \u4e3a\u4e86\u627e\u5230 nums[j]\u7684\u6b63\u786e\u4f4d\u7f6e\uff0c\u6211\u4eec\u4e0d\u65ad\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u76f4\u5230\u6808\u9876\u5143\u7d20\u6bd4 nums[j] \u5c0f\uff0c\u6211\u4eec\u5047\u8bbe\u6808\u9876\u5143\u7d20\u5bf9\u5e94\u7684\u4e0b\u6807\u4e3a k \uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053 nums[j]nums[j] \u7684\u6b63\u786e\u4f4d\u7f6e\u4e0b\u6807\u5e94\u8be5\u662f k + 1 \u3002 \u6211\u4eec\u91cd\u590d\u8fd9\u4e00\u8fc7\u7a0b\u5e76\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u6700\u5c0f\u7684 k\uff0c \u5b83\u4e5f\u662f\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u5de6\u8fb9\u754c\u3002 \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u9006\u5e8f\u904d\u5386\u4e00\u904d nums \u6570\u7ec4\u6765\u627e\u5230\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\u3002\u8fd9\u4e00\u6b21\u6211\u4eec\u5c06\u964d\u5e8f\u7684\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u5982\u679c\u9047\u5230\u4e00\u4e2a\u5347\u5e8f\u7684\u5143\u7d20\uff0c\u6211\u4eec\u50cf\u4e0a\u9762\u6240\u8ff0\u7684\u65b9\u6cd5\u4e00\u6837\u4e0d\u65ad\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20\uff0c\u4ee5\u6b64\u627e\u5230\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u4e0b\u56fe\u4f5c\u4e3a\u53c2\u8003\u3002\u6211\u4eec\u89c2\u5bdf\u5230\u4e0a\u5347\u8fd8\u662f\u4e0b\u964d\u51b3\u5b9a\u4e86\u76f8\u5bf9\u987a\u5e8f\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u89c2\u5bdf\u5230\u6307\u9488 bb \u5728\u4e0b\u6807 0 \u540e\u9762\u6807\u8bb0\u7740\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u5de6\u8fb9\u754c\uff0c\u6307\u9488 aa \u5728\u4e0b\u6807 7 \u524d\u9762\u6807\u8bb0\u7740\u65e0\u5e8f\u5b50\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\u3002 class Solution: def findUnsortedSubarray(self, nums: List[int]) -> int: stack = [] min_i = len(nums) for i in range(len(nums)): while stack and nums[stack[-1]] > nums[i]: j = stack.pop() min_i = min(min_i, j) stack.append(i) stack = [] max_i = -1 for i in range(len(nums) - 1, -1, -1): while stack and nums[stack[-1]] < nums[i]: j = stack.pop() max_i = max(max_i, j) stack.append(i) return max_i - min_i + 1 if max_i != -1 else 0","title":"\u89e3\u6cd5\u4e8c \u4f7f\u7528\u6808 O(n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_209","text":"\u8fd9\u4e2a\u7b97\u6cd5\u80cc\u540e\u7684\u601d\u60f3\u662f\u65e0\u5e8f\u5b50\u6570\u7ec4\u4e2d\u6700\u5c0f\u5143\u7d20\u7684\u6b63\u786e\u4f4d\u7f6e\u53ef\u4ee5\u51b3\u5b9a\u5de6\u8fb9\u754c\uff0c\u6700\u5927\u5143\u7d20\u7684\u6b63\u786e\u4f4d\u7f6e\u53ef\u4ee5\u51b3\u5b9a\u53f3\u8fb9\u754c\u3002 \u56e0\u6b64\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u627e\u5230\u539f\u6570\u7ec4\u5728\u54ea\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u4e0d\u662f\u5347\u5e8f\u7684\u3002\u6211\u4eec\u4ece\u5934\u5f00\u59cb\u904d\u5386\u6570\u7ec4\uff0c\u4e00\u65e6\u9047\u5230\u964d\u5e8f\u7684\u5143\u7d20\uff0c\u6211\u4eec\u8bb0\u5f55\u6700\u5c0f\u5143\u7d20\u4e3a minmin \u3002 \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u9006\u5e8f\u626b\u63cf\u6570\u7ec4 numsnums\uff0c\u5f53\u6570\u7ec4\u51fa\u73b0\u5347\u5e8f\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8bb0\u5f55\u6700\u5927\u5143\u7d20\u4e3a maxmax\u3002 \u7136\u540e\uff0c\u6211\u4eec\u518d\u6b21\u904d\u5386 numsnums \u6570\u7ec4\u5e76\u901a\u8fc7\u4e0e\u5176\u4ed6\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u6765\u627e\u5230 minmin \u548c maxmax \u5728\u539f\u6570\u7ec4\u4e2d\u7684\u6b63\u786e\u4f4d\u7f6e\u3002\u6211\u4eec\u53ea\u9700\u8981\u4ece\u5934\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e minmin \u7684\u5143\u7d20\uff0c\u4ece\u5c3e\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e maxmax \u7684\u5143\u7d20\uff0c\u5b83\u4eec\u4e4b\u95f4\u5c31\u662f\u6700\u77ed\u65e0\u5e8f\u5b50\u6570\u7ec4\u3002 \u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u4f7f\u7528\u4e0b\u56fe\u4f5c\u4e3a\u8bf4\u660e\uff1a class Solution: def findUnsortedSubarray(self, nums: List[int]) -> int: \"\"\" \u65b9\u6cd5\u4e00: \u6392\u5e8f \u627e\u5230\u4e0d\u76f8\u7b49\u7684\u7b2c\u4e00\u4e2a\u70b9 \u548c\u6700\u540e\u4e00\u4e2a\u70b9 O(NlogN) \u65b9\u6cd5\u4e8c: \u5b58\u5165\u5c71\u8c37\u7684\u533a\u95f4 \u6808 \"\"\" min_v = float('inf') max_v = float('-inf') flag = False # 1.\u627e\u5230\u964d\u5e8f\u540e\u5143\u7d20\u6700\u5c0f\u503c for i in range(1, len(nums)): if nums[i] < nums[i-1] or flag: flag = True min_v = min(nums[i], min_v) # 2.\u9006\u5e8f\u904d\u5386\u627e\u5230\u5347\u5e8f\u540e\u5143\u7d20\u6700\u5927\u503c flag = False for i in range(len(nums) - 2, -1, -1): if nums[i] > nums[i + 1] or flag: flag = True max_v = max(nums[i], max_v) left = -1 right = -1 # 3.\u6211\u4eec\u53ea\u9700\u8981\u4ece\u5934\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e min \u7684\u5143\u7d20\uff0c\u4ece\u5c3e\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e max \u7684\u5143\u7d20\uff0c\u5b83\u4eec\u4e4b\u95f4\u5c31\u662f\u6700\u77ed\u65e0\u5e8f\u5b50\u6570\u7ec4\u3002 for i in range(len(nums)): if nums[i] > min_v: left = i break for i in range(len(nums) - 1, -1, -1): if nums[i] < max_v: right = i break return right - left + 1 if left != -1 else 0","title":"\u89e3\u6cd5\u4e09 \u4e0d\u7528\u6808"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#621","text":"","title":"621.\u4efb\u52a1\u8c03\u5ea6\u5668"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_210","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7528\u5b57\u7b26\u6570\u7ec4\u8868\u793a\u7684 CPU \u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\u3002\u5176\u4e2d\u5305\u542b\u4f7f\u7528\u5927\u5199\u7684 A - Z \u5b57\u6bcd\u8868\u793a\u768426 \u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6267\u884c\u5b8c\u3002CPU \u5728\u4efb\u4f55\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u90fd\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002 \u7136\u800c\uff0c\u4e24\u4e2a\u76f8\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u6709\u957f\u5ea6\u4e3a n \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u56e0\u6b64\u81f3\u5c11\u6709\u8fde\u7eed n \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185 CPU \u5728\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002 \u4f60\u9700\u8981\u8ba1\u7b97\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u8981\u7684\u6700\u77ed\u65f6\u95f4\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2 \u8f93\u51fa: 8 \u6267\u884c\u987a\u5e8f: A -> B -> (\u5f85\u547d) -> A -> B -> (\u5f85\u547d) -> A -> B. \u6ce8\uff1a \u4efb\u52a1\u7684\u603b\u4e2a\u6570\u4e3a [1, 10000]\u3002 n \u7684\u53d6\u503c\u8303\u56f4\u4e3a [0, 100]\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_211","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_212","text":"\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u7684\u6700\u77ed\u65f6\u95f4\u53d6\u51b3\u4e8e \u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4efb\u52a1\u6570\u91cf \u56e0\u4e3a\u76f8\u540c\u4efb\u52a1\u5fc5\u987b\u8981\u6709\u65f6\u95f4\u7247\u4e3a n \u7684\u95f4\u9694\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u628a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4efb\u52a1 A \u5b89\u6392\u4e0a \u8ba1\u7b97\u51fa\u6709\u591a\u5c11\u7a7a\u69fd\uff0c\u7528\u5176\u5b83\u4efb\u52a1\u586b\u6ee1 \u6709\u4e2a\u6ce8\u610f\uff0c\u5982\u679c\u6709n\u4e2a\u548c\u6b21\u6570\u6700\u591a\u7684\u4eba\u7269\u4e00\u6837\u591a\u7684\u4efb\u52a1\uff0c\u5728\u6700\u540e\u4e00\u4e2aA\u540e\u9762\u8981+n class Solution(object): def leastInterval(self, tasks, n): # 1.\u8ba1\u7b97\u5404\u5b57\u6bcd\u9891\u6570\u5e76\u6392\u5e8f charmap = [0] * 26 for c in tasks: charmap[ord(c) - ord('A')] += 1 charmap = sorted(charmap, reverse=True) # 2.\u6c42\u7a7a\u69fd\u6570\u91cf space_nums = (charmap[0] - 1) * n # 3.\u586b\u5145\u7a7a\u69fd for num in charmap[1:]: space_nums -= min(num, charmap[0] - 1) # 4.\u7ed3\u679c = \u7a7a\u69fd\u6570+ task\u6570 return space_nums + len(tasks) if space_nums > 0 else len(tasks)","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_213","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#704","text":"","title":"704.\u4e8c\u5206\u67e5\u627e\u3010\u7ecf\u5178\u3011"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_214","text":"\u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u5143\u7d20\u6709\u5e8f\u7684\uff08\u5347\u5e8f\uff09\u6574\u578b\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u641c\u7d22 nums \u4e2d\u7684 target\uff0c\u5982\u679c\u76ee\u6807\u503c\u5b58\u5728\u8fd4\u56de\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 \u793a\u4f8b 1: \u8f93\u5165: nums = [-1,0,3,5,9,12], target = 9 \u8f93\u51fa: 4 \u89e3\u91ca: 9 \u51fa\u73b0\u5728 nums \u4e2d\u5e76\u4e14\u4e0b\u6807\u4e3a 4 \u793a\u4f8b 2: \u8f93\u5165: nums = [-1,0,3,5,9,12], target = 2 \u8f93\u51fa: -1 \u89e3\u91ca: 2 \u4e0d\u5b58\u5728 nums \u4e2d\u56e0\u6b64\u8fd4\u56de -1 \u63d0\u793a\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe nums \u4e2d\u7684\u6240\u6709\u5143\u7d20\u662f\u4e0d\u91cd\u590d\u7684\u3002 n \u5c06\u5728 [1, 10f000]\u4e4b\u95f4\u3002 nums \u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c06\u5728 [-9999, 9999]\u4e4b\u95f4\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_215","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_216","text":"class Solution(object): def search(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: int \"\"\" l, r = 0, len(nums) while l < r: mid = l + ((r - l) >> 1) if nums[mid] < target: l = mid + 1 else: r = mid if l == len(nums) or nums[l] != target: return -1 return l","title":"\u89e3\u6cd5\u4e00 \u4e8c\u5206\u67e5\u627e\u6a21\u7248\u4ee3\u7801 \u5de6\u95ed\u53f3\u5f00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_217","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#739","text":"","title":"739.\u6bcf\u65e5\u6e29\u5ea6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_218","text":"\u6839\u636e\u6bcf\u65e5 \u6c14\u6e29 \u5217\u8868\uff0c\u8bf7\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8f93\u5165\u662f\u4f60\u9700\u8981\u518d\u7b49\u5f85\u591a\u4e45\u6e29\u5ea6\u624d\u4f1a\u5347\u9ad8\u8d85\u8fc7\u8be5\u65e5\u7684\u5929\u6570\u3002\u5982\u679c\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528 0 \u6765\u4ee3\u66ff\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]\uff0c\u4f60\u7684\u8f93\u51fa\u5e94\u8be5\u662f [1, 1, 4, 2, 1, 1, 0, 0]\u3002 \u63d0\u793a\uff1a\u6c14\u6e29 \u5217\u8868\u957f\u5ea6\u7684\u8303\u56f4\u662f [1, 30000]\u3002\u6bcf\u4e2a\u6c14\u6e29\u7684\u503c\u7684\u5747\u4e3a\u534e\u6c0f\u5ea6\uff0c\u90fd\u662f\u5728 [30, 100] \u8303\u56f4\u5185\u7684\u6574\u6570\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_219","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_220","text":"class Solution: def dailyTemperatures(self, T: List[int]) -> List[int]: \"\"\" bruce O(n**2) \u753b\u56fe \u5347\u5e8f\u90e8\u5206\u5747\u4e3a1 \u964d\u5e8f\u90e8\u5206\u7d22\u5f15\u653e\u5165stack\u4e2d \"\"\" ans = [0] * len(T) stack = [] for i in range(len(T) - 1): if T[i + 1] - T[i] > 0: while stack: if T[stack[-1]] < T[i + 1]: index = stack.pop() ans[index] = i + 1 - index else: break ans[i] = 1 else: stack.append(i) return ans","title":"\u89e3\u6cd5\u4e00 \u753b\u56fe \u6808"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_221","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1124","text":"","title":"1124.\u987a\u6b21\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_222","text":"\u6211\u4eec\u5b9a\u4e49\u300c\u987a\u6b21\u6570\u300d\u4e3a\uff1a\u6bcf\u4e00\u4f4d\u4e0a\u7684\u6570\u5b57\u90fd\u6bd4\u524d\u4e00\u4f4d\u4e0a\u7684\u6570\u5b57\u5927 1 \u7684\u6574\u6570\u3002 \u8bf7\u4f60\u8fd4\u56de\u7531 [low, high] \u8303\u56f4\u5185\u6240\u6709\u987a\u6b21\u6570\u7ec4\u6210\u7684 \u6709\u5e8f \u5217\u8868\uff08\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u51fa\uff1alow = 100, high = 300 \u8f93\u51fa\uff1a[123,234] \u793a\u4f8b 2\uff1a \u8f93\u51fa\uff1alow = 1000, high = 13000 \u8f93\u51fa\uff1a[1234,2345,3456,4567,5678,6789,12345] \u63d0\u793a\uff1a 10 <= low <= high <= 10^9","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_223","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_224","text":"class Solution: def sequentialDigits(self, low: int, high: int) -> List[int]: if low > high: return [] lLen, rLen = len(str(low)), len(str(high)) res = [] for Len in range(lLen, rLen + 1): for i in range(1, 11 - Len): val = i for j in range(i + 1, i + Len): val = val * 10 + j if val >= low and val <= high: res.append(val) return res","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_225","text":"class Solution2 { private var sequentialDigits = [12,23,34,45,56,67,78,89,123,234,345,456,567,678,789,1234,2345,3456,4567,5678,6789,12345,23456,34567,45678,56789,123456,234567,345678,456789,1234567,2345678,3456789,12345678,23456789,123456789] func sequentialDigits(_ low: Int, _ high: Int) -> [Int] { return sequentialDigits.filter { $0 >= low && $0 <= high} } }","title":"\u89e3\u6cd5\u4e8c \u5148\u4fdd\u5b58\u5728\u9009\u53d6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1275","text":"","title":"1275.\u627e\u51fa\u4e95\u5b57\u68cb\u7684\u83b7\u80dc\u8005"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_226","text":"A \u548c B \u5728\u4e00\u4e2a 3 x 3 \u7684\u7f51\u683c\u4e0a\u73a9\u4e95\u5b57\u68cb\u3002 \u4e95\u5b57\u68cb\u6e38\u620f\u7684\u89c4\u5219\u5982\u4e0b\uff1a \u73a9\u5bb6\u8f6e\u6d41\u5c06\u68cb\u5b50\u653e\u5728\u7a7a\u65b9\u683c (\" \") \u4e0a\u3002 \u7b2c\u4e00\u4e2a\u73a9\u5bb6 A \u603b\u662f\u7528 \"X\" \u4f5c\u4e3a\u68cb\u5b50\uff0c\u800c\u7b2c\u4e8c\u4e2a\u73a9\u5bb6 B \u603b\u662f\u7528 \"O\" \u4f5c\u4e3a\u68cb\u5b50\u3002 \"X\" \u548c \"O\" \u53ea\u80fd\u653e\u5728\u7a7a\u65b9\u683c\u4e2d\uff0c\u800c\u4e0d\u80fd\u653e\u5728\u5df2\u7ecf\u88ab\u5360\u7528\u7684\u65b9\u683c\u4e0a\u3002 \u53ea\u8981\u6709 3 \u4e2a\u76f8\u540c\u7684\uff08\u975e\u7a7a\uff09\u68cb\u5b50\u6392\u6210\u4e00\u6761\u76f4\u7ebf\uff08\u884c\u3001\u5217\u3001\u5bf9\u89d2\u7ebf\uff09\u65f6\uff0c\u6e38\u620f\u7ed3\u675f\u3002 \u5982\u679c\u6240\u6709\u65b9\u5757\u90fd\u653e\u6ee1\u68cb\u5b50\uff08\u4e0d\u4e3a\u7a7a\uff09\uff0c\u6e38\u620f\u4e5f\u4f1a\u7ed3\u675f\u3002 \u6e38\u620f\u7ed3\u675f\u540e\uff0c\u68cb\u5b50\u65e0\u6cd5\u518d\u8fdb\u884c\u4efb\u4f55\u79fb\u52a8\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 moves\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u5927\u5c0f\u4e3a 2 \u7684\u53e6\u4e00\u4e2a\u6570\u7ec4\uff08\u5143\u7d20\u5206\u522b\u5bf9\u5e94\u7f51\u683c\u7684\u884c\u548c\u5217\uff09\uff0c\u5b83\u6309\u7167 A \u548c B \u7684\u884c\u52a8\u987a\u5e8f\uff08\u5148 A \u540e B\uff09\u8bb0\u5f55\u4e86\u4e24\u4eba\u5404\u81ea\u7684\u68cb\u5b50\u4f4d\u7f6e\u3002 \u5982\u679c\u6e38\u620f\u5b58\u5728\u83b7\u80dc\u8005\uff08A \u6216 B\uff09\uff0c\u5c31\u8fd4\u56de\u8be5\u6e38\u620f\u7684\u83b7\u80dc\u8005\uff1b\u5982\u679c\u6e38\u620f\u4ee5\u5e73\u5c40\u7ed3\u675f\uff0c\u5219\u8fd4\u56de \"Draw\"\uff1b\u5982\u679c\u4ecd\u4f1a\u6709\u884c\u52a8\uff08\u6e38\u620f\u672a\u7ed3\u675f\uff09\uff0c\u5219\u8fd4\u56de \"Pending\"\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe moves \u90fd \u6709\u6548\uff08\u9075\u5faa\u4e95\u5b57\u68cb\u89c4\u5219\uff09\uff0c\u7f51\u683c\u6700\u521d\u662f\u7a7a\u7684\uff0cA \u5c06\u5148\u884c\u52a8\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1amoves = [[0,0],[2,0],[1,1],[2,1],[2,2]] \u8f93\u51fa\uff1a\"A\" \u89e3\u91ca\uff1a\"A\" \u83b7\u80dc\uff0c\u4ed6\u603b\u662f\u5148\u8d70\u3002 \"X \" \"X \" \"X \" \"X \" \"X \" \" \" -> \" \" -> \" X \" -> \" X \" -> \" X \" \" \" \"O \" \"O \" \"OO \" \"OOX\" \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1amoves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]] \u8f93\u51fa\uff1a\"B\" \u89e3\u91ca\uff1a\"B\" \u83b7\u80dc\u3002 \"X \" \"X \" \"XX \" \"XXO\" \"XXO\" \"XXO\" \" \" -> \" O \" -> \" O \" -> \" O \" -> \"XO \" -> \"XO \" \" \" \" \" \" \" \" \" \" \" \"O \" \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1amoves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]] \u8f93\u51fa\uff1a\"Draw\" \u8f93\u51fa\uff1a\u7531\u4e8e\u6ca1\u6709\u529e\u6cd5\u518d\u884c\u52a8\uff0c\u6e38\u620f\u4ee5\u5e73\u5c40\u7ed3\u675f\u3002 \"XXO\" \"OOX\" \"XOX\" \u793a\u4f8b 4\uff1a \u8f93\u5165\uff1amoves = [[0,0],[1,1]] \u8f93\u51fa\uff1a\"Pending\" \u89e3\u91ca\uff1a\u6e38\u620f\u8fd8\u6ca1\u6709\u7ed3\u675f\u3002 \"X \" \" O \" \" \" \u63d0\u793a\uff1a 1 <= moves.length <= 9 moves[i].length == 2 0 <= moves[i][j] <= 2 moves \u91cc\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 moves \u9075\u5faa\u4e95\u5b57\u68cb\u7684\u89c4\u5219\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_227","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_228","text":"class Solution: def tictactoe(self, moves: List[List[int]]) -> str: \"\"\" \"\"\" def dfs(board): for i in range(3): if sum(board[i]) == 3: return True if sum([board[j][i] for j in range(3)]) == 3: return True if sum([board[i][i] for i in range(3)]) == 3: return True if sum([board[i][2-i] for i in range(3)]) == 3: return True return False # 1.\u521d\u59cb\u5316\u65b9\u683c As = [[0] * 3 for _ in range(3)] for x, y in moves[:: 2]: As[x][y] = 1 if dfs(As): return 'A' Bs = [[0] * 3 for _ in range(3)] for x, y in moves[1::2]: Bs[x][y] = 1 if dfs(Bs): return 'B' if len(moves) == 9: return \"Draw\" else: return \"Pending\"","title":"\u89e3\u6cd5\u4e00 \u66b4\u529b"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_229","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1277-1","text":"","title":"1277. \u7edf\u8ba1\u5168\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u5b50\u77e9\u9635"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_230","text":"\u7ed9\u4f60\u4e00\u4e2a m * n \u7684\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u4e0d\u662f 0 \u5c31\u662f 1 \uff0c\u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de\u5176\u4e2d\u5b8c\u5168\u7531 1 \u7ec4\u6210\u7684 \u6b63\u65b9\u5f62 \u5b50\u77e9\u9635\u7684\u4e2a\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1amatrix = [ [0,1,1,1], [1,1,1,1], [0,1,1,1] ] \u8f93\u51fa\uff1a15 \u89e3\u91ca\uff1a \u8fb9\u957f\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u6709 10 \u4e2a\u3002 \u8fb9\u957f\u4e3a 2 \u7684\u6b63\u65b9\u5f62\u6709 4 \u4e2a\u3002 \u8fb9\u957f\u4e3a 3 \u7684\u6b63\u65b9\u5f62\u6709 1 \u4e2a\u3002 \u6b63\u65b9\u5f62\u7684\u603b\u6570 = 10 + 4 + 1 = 15. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1amatrix = [ [1,0,1], [1,1,0], [1,1,0] ] \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a \u8fb9\u957f\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u6709 6 \u4e2a\u3002 \u8fb9\u957f\u4e3a 2 \u7684\u6b63\u65b9\u5f62\u6709 1 \u4e2a\u3002 \u6b63\u65b9\u5f62\u7684\u603b\u6570 = 6 + 1 = 7. \u63d0\u793a\uff1a 1 <= arr.length <= 300 1 <= arr[0].length <= 300 0 <= arr[i][j] <= 1","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_231","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_5","text":"class Solution: def countSquares(self, matrix: List[List[int]]) -> int: m = len(matrix) if m == 0: return 0 n = len(matrix[0]) if n == 0: return 0 dp = [[0] * (n + 1) for _ in range(m + 1)] res = 0 for i in range(1, m + 1): for j in range(1, n + 1): if matrix[i-1][j-1] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 res += dp[i][j] return res","title":"\u89e3\u6cd5\u4e00 dp"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_232","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1282","text":"","title":"1282.\u7528\u6237\u5206\u7ec4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_233","text":"\u6709 n \u4f4d\u7528\u6237\u53c2\u52a0\u6d3b\u52a8\uff0c\u4ed6\u4eec\u7684 ID \u4ece 0 \u5230 n - 1\uff0c\u6bcf\u4f4d\u7528\u6237\u90fd \u6070\u597d \u5c5e\u4e8e\u67d0\u4e00\u7528\u6237\u7ec4\u3002\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 groupSizes\uff0c\u5176\u4e2d\u5305\u542b\u6bcf\u4f4d\u7528\u6237\u6240\u5904\u7684\u7528\u6237\u7ec4\u7684\u5927\u5c0f\uff0c\u8bf7\u4f60\u8fd4\u56de\u7528\u6237\u5206\u7ec4\u60c5\u51b5\uff08\u5b58\u5728\u7684\u7528\u6237\u7ec4\u4ee5\u53ca\u6bcf\u4e2a\u7ec4\u4e2d\u7528\u6237\u7684 ID\uff09\u3002 \u4f60\u53ef\u4ee5\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u89e3\u51b3\u65b9\u6848\uff0cID \u7684\u987a\u5e8f\u4e5f\u4e0d\u53d7\u9650\u5236\u3002\u6b64\u5916\uff0c\u9898\u76ee\u7ed9\u51fa\u7684\u6570\u636e\u4fdd\u8bc1\u81f3\u5c11\u5b58\u5728\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1agroupSizes = [3,3,3,3,3,1,3] \u8f93\u51fa\uff1a[[5],[0,1,2],[3,4,6]] \u89e3\u91ca\uff1a \u5176\u4ed6\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u6709 [[2,1,6],[5],[0,4,3]] \u548c [[5],[0,6,2],[4,3,1]]\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1agroupSizes = [2,1,3,3,3,2] \u8f93\u51fa\uff1a[[1],[0,5],[2,3,4]] \u63d0\u793a\uff1a groupSizes.length == n 1 <= n <= 500 1 <= groupSizes[i] <= n","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_234","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_235","text":"class Solution: def groupThePeople(self, groupSizes: List[int]) -> List[List[int]]: res = [] dic = collections.defaultdict(list) for i, g in enumerate(groupSizes): dic[g].append(i) for key, values in dic.items(): vLen = len(values) if key == vLen: res.append(values) else: res.extend([values[i: i+key] for i in range(0, vLen, key)]) return res","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_236","text":"class Solution: def groupThePeople(self, groupSizes: List[int]) -> List[List[int]]: groupdict={} ans=[] for i,gs in enumerate(groupSizes): if gs==1: ans.append([i]) else: if gs in groupdict: groupdict[gs].append(i) if len(groupdict[gs])==gs: ans.append(groupdict[gs]) del groupdict[gs] else: groupdict[gs]=[i] return ans","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1283","text":"","title":"1283.\u4f7f\u7ed3\u679c\u4e0d\u8d85\u8fc7\u9608\u503c\u7684\u6700\u5c0f\u9664\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_237","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6b63\u6574\u6570 threshold \uff0c\u4f60\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u6b63\u6574\u6570\u4f5c\u4e3a\u9664\u6570\uff0c\u7136\u540e\u5c06\u6570\u7ec4\u91cc\u6bcf\u4e2a\u6570\u90fd\u9664\u4ee5\u5b83\uff0c\u5e76\u5bf9\u9664\u6cd5\u7ed3\u679c\u6c42\u548c\u3002 \u8bf7\u4f60\u627e\u51fa\u80fd\u591f\u4f7f\u4e0a\u8ff0\u7ed3\u679c\u5c0f\u4e8e\u7b49\u4e8e\u9608\u503c threshold \u7684\u9664\u6570\u4e2d \u6700\u5c0f \u7684\u90a3\u4e2a\u3002 \u6bcf\u4e2a\u6570\u9664\u4ee5\u9664\u6570\u540e\u90fd\u5411\u4e0a\u53d6\u6574\uff0c\u6bd4\u65b9\u8bf4 7/3 = 3 \uff0c 10/2 = 5 \u3002 \u9898\u76ee\u4fdd\u8bc1\u4e00\u5b9a\u6709\u89e3\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anums = [1,2,5,9], threshold = 6 \u8f93\u51fa\uff1a5 \u89e3\u91ca\uff1a\u5982\u679c\u9664\u6570\u4e3a 1 \uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u548c\u4e3a 17 \uff081+2+5+9\uff09\u3002 \u5982\u679c\u9664\u6570\u4e3a 4 \uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u548c\u4e3a 7 (1+1+2+3) \u3002\u5982\u679c\u9664\u6570\u4e3a 5 \uff0c\u548c\u4e3a 5 (1+1+1+2)\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1anums = [2,3,5,7,11], threshold = 11 \u8f93\u51fa\uff1a3 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1anums = [19], threshold = 5 \u8f93\u51fa\uff1a4 \u63d0\u793a\uff1a 1 <= nums.length <= 5 * 10^4 1 <= nums[i] <= 10^6 nums.length <= threshold <= 10^6","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_238","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_239","text":"class Solution: def smallestDivisor(self, nums: List[int], threshold: int) -> int: def check(divider): res = 0 for num in nums: res += math.ceil(num / divider) return res <= threshold l, r = 1, max(nums) while l < r: mid = l + (r - l) // 2 res = check(mid) print(mid, res) if res: r = mid else: l = mid + 1 return l","title":"\u89e3\u6cd5\u4e00 \u4e8c\u5206\u7b54\u6848\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_240","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1285","text":"","title":"1285.\u5143\u7d20\u548c\u5c0f\u4e8e\u7b49\u4e8e\u9608\u503c\u7684\u6b63\u65b9\u5f62\u7684\u6700\u5927\u8fb9\u957f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_241","text":"\u7ed9\u4f60\u4e00\u4e2a\u5927\u5c0f\u4e3a m x n \u7684\u77e9\u9635 mat \u548c\u4e00\u4e2a\u6574\u6570\u9608\u503c threshold\u3002 \u8bf7\u4f60\u8fd4\u56de\u5143\u7d20\u603b\u548c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u9608\u503c\u7684\u6b63\u65b9\u5f62\u533a\u57df\u7684\u6700\u5927\u8fb9\u957f\uff1b\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u6b63\u65b9\u5f62\u533a\u57df\uff0c\u5219\u8fd4\u56de 0 \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1amat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u603b\u548c\u5c0f\u4e8e 4 \u7684\u6b63\u65b9\u5f62\u7684\u6700\u5927\u8fb9\u957f\u4e3a 2\uff0c\u5982\u56fe\u6240\u793a\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1amat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1 \u8f93\u51fa\uff1a0 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1amat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6 \u8f93\u51fa\uff1a3 \u793a\u4f8b 4\uff1a \u8f93\u5165\uff1amat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184 \u8f93\u51fa\uff1a2 \u63d0\u793a\uff1a 1 <= m, n <= 300 m == mat.length n == mat[i].length 0 <= mat[i][j] <= 10000 0 <= threshold <= 10^5","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_242","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_243","text":"\u4e3a\u4e86\u7edf\u8ba1\u6b63\u65b9\u5f62\u77e9\u9635\u7684\u9762\u79ef\uff0c\u53ef\u4ee5\u5047\u5b9a\u5f53\u524d\u4f4d\u7f6eij\u4e3a\u6b63\u65b9\u5f62\u7684\u53f3\u4e0b\u89d2\u70b9\uff0c\u8fd9\u4e2a\u6b63\u65b9\u5f62\u53ef\u80fd\u7684\u6700\u5927\u8fb9\u957f\u4e3amaxlen = Math.min(i, j) + 1\u3002 \u6cbf\u7740\u540c\u4e00\u5217j\u5411\u4e0a\u904d\u5386\uff0c\u904d\u5386\u884c\u6570\u5373\u4e3a\u5f53\u524d\u6b63\u65b9\u5f62\u7684\u8fb9\u957flen\uff0c\u5229\u7528\u524d\u7f00\u548c\u53ef\u4ee5\u6c42\u5f97\u5f53\u524d\u6b63\u65b9\u5f62\u7684\u6bcf\u4e00\u884c\u7684\u9762\u79efrowarea\u3002 class Solution { public int maxSideLength(int[][] mat, int threshold) { int result = 0; for(int i = 0; i < mat.length; i++){ for (int j = 0; j < mat[0].length; j++){ if (j != 0){ mat[i][j] += mat[i][j - 1]; } int len = 0; int maxLen = Math.min(i, j) + 1; while (len < maxLen){ int area = 0; for (int k = 0; k < len + 1; k++) { int prefix = j-len-1 < 0 ? 0 : mat[i-k][j-len-1]; area += mat[i-k][j] - prefix; } if (area > threshold){ break; } len++; } result = len > result ? len : result; } } return result; } }","title":"\u89e3\u6cd5\u4e00 \u884c\u524d\u7f00\u548c + \u904d\u5386"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_244","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#hash_3","text":"","title":"Hash"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#39","text":"","title":"39.\u6709\u6548\u7684\u6570\u72ec"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_245","text":"\u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002 \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u793a\u4f8b 1: \u8f93\u5165: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: [ [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: false \u89e3\u91ca: \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece 5 \u6539\u4e3a 8 \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002 \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002 \u8bf4\u660e: \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002 \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57 1-9 \u548c\u5b57\u7b26 '.' \u3002 \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f 9x9 \u5f62\u5f0f\u7684\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_246","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_247","text":"\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u904d\u5386\u8be5 9 x 9 \u6570\u72ec \u4e09 \u6b21\uff0c\u4ee5\u786e\u4fdd\uff1a \u884c\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\u3002 \u5217\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\u3002 3 x 3 \u5b50\u6570\u72ec\u5185\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\u3002 class Solution: def isValidSudoku(self, board: List[List[str]]) -> bool: # 1.\u6821\u9a8c\u6240\u6709\u884c for i in range(9): aset = set() for num in board[i]: if num == '.': continue if num in aset: return False else: aset.add(num) # 2.\u6821\u9a8c\u6240\u6709\u5217 for j in range(9): aset = set() for i in range(9): if board[i][j] == '.': continue if board[i][j] in aset: return False else: aset.add(board[i][j]) # \u6821\u9a8c9\u5bab\u683c for i_add in range(3): for j_add in range(3): aset = set() for i in range(3): for j in range(3): num = board[3 * i_add + i][3 * j_add + j] if num == '.': continue if num in aset: print(aset) return False else: aset.add(num) return True","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_248","text":"\u5b9e\u9645\u4e0a\uff0c\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u53ef\u4ee5\u5728\u4e00\u6b21\u8fed\u4ee3\u4e2d\u5b8c\u6210\u3002 class Solution: def isValidSudoku(self, board): \"\"\" :type board: List[List[str]] :rtype: bool \"\"\" # init data rows = [{} for i in range(9)] columns = [{} for i in range(9)] boxes = [{} for i in range(9)] # validate a board for i in range(9): for j in range(9): num = board[i][j] if num != '.': num = int(num) box_index = (i // 3 ) * 3 + j // 3 # keep the current cell value rows[i][num] = rows[i].get(num, 0) + 1 columns[j][num] = columns[j].get(num, 0) + 1 boxes[box_index][num] = boxes[box_index].get(num, 0) + 1 # check if this value has been already seen before if rows[i][num] > 1 or columns[j][num] > 1 or boxes[box_index][num] > 1: return False return True","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#49","text":"","title":"49.\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1_7","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5c06\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b: \u8f93\u5165: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], \u8f93\u51fa: [ [\"ate\",\"eat\",\"tea\"], [\"nat\",\"tan\"], [\"bat\"] ] \u8bf4\u660e\uff1a \u6240\u6709\u8f93\u5165\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 \u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002","title":"1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2_6","text":"","title":"2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21-hash-sort","text":"\u601d\u8def\uff1a\u5229\u7528HashMap \u952e\u4e3a\u6392\u5e8f\u540e\u76f8\u7b49\u7684\u5f02\u4f4d\u8bcd \u503c\u4e3aList \u91cc\u9762\u88c5\u7684\u662f\u6240\u6709\u6392\u5e8f\u540e\u76f8\u7b49\u7684\u5f02\u6216\u8bcd\u96c6\u5408 Time Complexity: O(NK log K\uff09 Space Complexity: O(NK) class Solution(object): def groupAnagrams(self, strs): \"\"\" :type strs: List[str] :rtype: List[List[str]] \"\"\" dic = collections.defaultdict(list) for s in strs: ss = \"\".join(sorted(list(s))) dic[ss].append(s) return list(dic.values())","title":"2.1 \u65b9\u6cd5\u4e00 Hash sort"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#22-categorize-by-count","text":"\u7edf\u8ba1bagOfWord\u7684\u8bcd\u9891\u6570\u4f5c\u4e3akey Time Complexity: O(NK) Space Complexity: O(NK) class Solution(object): def groupAnagrams(self, strs): \"\"\" :type strs: List[str] :rtype: List[List[str]] \"\"\" dic = collections.defaultdict(list) for s in strs: cnts = [0] * 26 for c in s: cnts[ord(c) - ord('a')] += 1 dic[tuple(cnts)].append(s) return list(dic.values())","title":"2.2 \u65b9\u6cd5\u4e8c Categorize by Count"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#290","text":"","title":"290.\u5355\u8bcd\u6a21\u5f0f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2901","text":"\u7ed9\u5b9a\u4e00\u79cd pattern(\u6a21\u5f0f) \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 str \uff0c\u5224\u65ad str \u662f\u5426\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\u3002 \u8fd9\u91cc\u7684 \u9075\u5faa \u6307\u5b8c\u5168\u5339\u914d\uff0c\u4f8b\u5982\uff0c pattern \u91cc\u7684\u6bcf\u4e2a\u5b57\u6bcd\u548c\u5b57\u7b26\u4e32 str \u4e2d\u7684\u6bcf\u4e2a\u975e\u7a7a\u5355\u8bcd\u4e4b\u95f4\u5b58\u5728\u7740\u53cc\u5411\u8fde\u63a5\u7684\u5bf9\u5e94\u6a21\u5f0f\u3002 \u793a\u4f8b1: \u8f93\u5165: pattern = \"abba\", str = \"dog cat cat dog\" \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165:pattern = \"abba\", str = \"dog cat cat fish\" \u8f93\u51fa: false \u793a\u4f8b 3: \u8f93\u5165: pattern = \"aaaa\", str = \"dog cat cat dog\" \u8f93\u51fa: false \u793a\u4f8b 4: \u8f93\u5165: pattern = \"abba\", str = \"dog dog dog dog\" \u8f93\u51fa: false \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe pattern \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\uff0c str \u5305\u542b\u4e86\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u5c0f\u5199\u5b57\u6bcd\u3002","title":"290.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2902","text":"","title":"290.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#29021","text":"import java.util.HashMap; class Solution { public boolean wordPattern(String pattern, String str) { String[] strArray = str.split(\" \"); if(strArray.length != pattern.length()){ return false; } HashMap<String, Character> map = new HashMap<>(); HashMap<Character, String> cmap = new HashMap<>(); for(int i = 0; i < pattern.length(); i++){ if(map.containsKey(strArray[i])){ if(pattern.charAt(i) != map.get(strArray[i])){ return false; } }else{ map.put(strArray[i], pattern.charAt(i)); } if(cmap.containsKey(pattern.charAt(i))){ if(!strArray[i].equals(cmap.get(pattern.charAt(i)))){ return false; } }else{ cmap.put(pattern.charAt(i), strArray[i]); } } return true; } } public boolean wordPattern(String pattern, String str) { String[] words = str.split(\" \"); if (words.length != pattern.length()) return false; Map index = new HashMap(); for (Integer i=0; i<words.length; ++i) // the previous value associated with `key`, or `null` if there was no mapping for `key`. (A `null` return can also indicate that the map previously associated `null` with `key`.) if (!Objects.equals(index.put(pattern.charAt(i), i), index.put(words[i], i))) return false; return true; } public class Solution { public boolean wordPattern(String pattern, String str) { String[] arr= str.split(\" \"); HashMap<Character, String> map = new HashMap<Character, String>(); if(arr.length!= pattern.length()) return false; for(int i=0; i<arr.length; i++){ char c = pattern.charAt(i); if(map.containsKey(c)){ if(!map.get(c).equals(arr[i])) return false; }else{ if(map.containsValue(arr[i])) return false; map.put(c, arr[i]); } } return true; } }","title":"290.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#29022","text":"","title":"290.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#187dna","text":"","title":"187.\u91cd\u590d\u7684DNA\u5e8f\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1871","text":"\u6240\u6709 DNA \u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a A\uff0cC\uff0cG \u548c T \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a\u201cACGAATTCCG\u201d\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e DNA \u5206\u5b50\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u591a\u4e00\u6b21\u768410\u4e2a\u5b57\u6bcd\u957f\u7684\u5e8f\u5217\uff08\u5b50\u4e32\uff09\u3002 \u793a\u4f8b: \u8f93\u5165: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\" \u8f93\u51fa: [\"AAAAACCCCC\", \"CCCCCAAAAA\"]","title":"187.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1872","text":"","title":"187.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#18721","text":"class Solution(object): def findRepeatedDnaSequences(self, s): \"\"\"s :type s: str :rtype: List[str] \"\"\" sset = set() res = set() for i in range(len(s) - 9): if s[i: i + 10] in sset: res.add(s[i: i + 10]) else: sset.add(s[i: i + 10]) return list(res)","title":"187.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#18722","text":"class Solution { public List<String> findRepeatedDnaSequences(String s) { Set<Integer> words = new HashSet<>(); Set<Integer> doubleWords = new HashSet<>(); List<String> ans = new ArrayList<>(); char[] map = new char[26]; map['A' - 'A'] = 0; map['C' - 'A'] = 1; map['G' - 'A'] = 2; map['T' - 'A'] = 3; for(int i = 0; i < s.length() - 9; i++){ int v = 0; for(int j = i; j < i + 10; j++){ // --- \u6bcf\u4e2a\u5b57\u7b26\u5360\u4e24\u4f4d -- v <<= 2; v |= map[s.charAt(j) - 'A']; // --- v\u5373\u662f\u6700\u540e\u6211\u4eec\u8981\u7684\u5b57\u7b26 -- } if(!words.add(v) && doubleWords.add(v)){ ans.add(s.substring(i, i+10)); } } return ans; } }","title":"187.2.2 \u65b9\u6cd5\u4e8c \u4f4d\u8fd0\u7b97"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_249","text":"","title":"\u56de\u6eaf"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#17","text":"","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#171","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002 \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002 \u793a\u4f8b: \u8f93\u5165\uff1a\"23\" \u8f93\u51fa\uff1a[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. \u8bf4\u660e: \u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002","title":"17.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#172","text":"\u9012\u5f52\u6cd5","title":"17.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1721","text":"class Solution: def letterCombinations(self, digits: str) -> List[str]: \"7:15\" def generate(i, item, result, nums): \"\"\" (x - a)//3 + 2 \"\"\" if i == len(nums): result.append(''.join(item)) return for v in dic[nums[i]]: item.append(v) generate(i+1, item, result, nums) item.pop() dic = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']} nums = list(digits) item = [] result = [] if nums: generate(0, item, result, nums) return result","title":"17.2.1 \u65b9\u6cd5\u4e00 \u56de\u6eaf"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1722","text":"class Solution: def letterCombinations(self, digits): \"\"\" :type digits: str :rtype: List[str] \"\"\" phone = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'], '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']} def backtrack(combination, next_digits): # if there is no more digits to check if len(next_digits) == 0: # the combination is done output.append(combination) # if there are still digits to check else: # iterate over all letters which map # the next available digit for letter in phone[next_digits[0]]: # append the current letter to the combination # and proceed to the next digits backtrack(combination + letter, next_digits[1:]) output = [] if digits: backtrack(\"\", digits) return output Complexity Analysis Time complexity : O(3N\u00d74M)where N is the number of digits in the input that maps to 3 letters ( e.g. 2, 3, 4, 5, 6, 8 ) and M is the number of digits in the input that maps to 4 letters ( e.g. 7, 9 ), and N+M is the total number digits in the input. Space complexity : O(3N\u00d74M) since one has to keep 3N\u00d74M3 N \u00d74 M solutions.","title":"17.2.2 \u65b9\u6cd5\u4e8c \u56de\u6eaf"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#78","text":"","title":"78 \u5b50\u96c6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#781","text":"\u7ed9\u5b9a\u4e00\u7ec4\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u8bf4\u660e\uff1a\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002 \u793a\u4f8b: \u8f93\u5165: nums = [1,2,3] \u8f93\u51fa: [ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], [] ]","title":"78.1 \u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#782","text":"\u9996\u5148 \uff0c\u8fd9\u4e2a\u9898\u662fNP\u95ee\u9898\uff0c\u6ca1\u6709\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u7684\u7b97\u6cd5\uff0c\u53ea\u80fd\u7528\u641c\u7d22\u89e3\u51b3\u7684\u95ee\u9898 \u9009\u62e9\u7528DFS-backtracking \u7684\u9012\u5f52\u65b9\u5f0f\u89e3\u51b3","title":"78.2 \u601d\u8def"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7821","text":"import copy class Solution: def subsets(self, nums: List[int]) -> List[List[int]]: result = [] if len(nums) == 0: return [[]] # \u5f85\u5224\u65ad\u662f\u5426\u653e\u5165\u96c6\u5408\u7684\u5143\u7d20 sub_result = self.subsets(nums[1:]) result.extend(copy.deepcopy(sub_result)) for item in sub_result: item.append(nums[0]) result.append(item) return result","title":"78.2.1 \u9012\u5f52\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7822-o2n","text":"\u56de\u6eaf\u6cd5: \u5229\u7528\u56de\u6eaf\u6cd5\u751f\u6210\u5b50\u96c6, \u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20, \u90fd\u6709\u8bd5\u63a2\u653e\u5165\u6216\u4e0d\u653e\u5165\u96c6\u5408\u4e2d\u7684\u4e24\u4e2a\u9009\u62e9: \u653e\u5165\u8be5\u5143\u7d20, \u9012\u5f52\u7684\u8fdb\u884c\u540e\u7eed\u5143\u7d20\u7684\u9009\u62e9, \u5b8c\u6210\u653e\u5165\u8be5\u5143\u7d20\u7684\u540e\u7eed\u6240\u6709\u5143\u7d20\u7684\u8bd5\u63a2 \u4e0d\u653e\u5165\u8be5\u5143\u7d20, \u9012\u5f52\u7684\u8fdb\u884c\u540e\u7eed\u5143\u7d20\u7684\u9009\u62e9, \u5b8c\u6210\u4e0d\u653e\u5165\u8be5\u5143\u7d20\u7684\u6240\u6709\u5143\u7d20\u7684\u8bd5\u63a2 \u4f8b\u5982 nums=[1, 2, 3, 4, 5], \u82e5\u653e\u51651, subset =[1], \u7ee7\u7eed\u9012\u5f52\u5904\u7406[2, 3, 4, 5]; \u82e5\u7ee7\u7eed\u653e\u51652, item=[1, 2] \u82e5\u4e0d\u653e\u51651, subset = [], \u7ee7\u7eed\u9012\u5f52\u5904\u7406[2, 3, 4, 5] \u672c\u89e3\u6cd5\u91c7\u7528\u56de\u6eaf\u7b97\u6cd5\u5b9e\u73b0\uff0c\u56de\u6eaf\u7b97\u6cd5\u7684\u57fa\u672c\u5f62\u5f0f\u662f\u201c**\u9012\u5f52+\u5faa\u73af**\u201d\uff0c\u6b63\u56e0\u4e3a\u5faa\u73af\u4e2d\u5d4c\u5957\u7740\u9012\u5f52\uff0c\u9012\u5f52\u4e2d\u5305\u542b\u5faa\u73af\uff0c\u8fd9\u624d\u4f7f\u5f97\u56de\u6eaf\u6bd4\u4e00\u822c\u7684\u9012\u5f52\u548c\u5355\u7eaf\u7684\u5faa\u73af\u66f4\u96be\u7406\u89e3\uff0c\u5176\u5b9e\u6211\u4eec\u719f\u6089\u4e86\u5b83\u7684\u57fa\u672c\u5f62\u5f0f\uff0c\u5c31\u4f1a\u89c9\u5f97\u8fd9\u6837\u7684\u7b97\u6cd5\u96be\u5ea6\u4e5f\u4e0d\u662f\u5f88\u5927\u3002\u539f\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u6709\u4e24\u79cd\u72b6\u6001\uff1a\u5b58\u5728\u548c\u4e0d\u5b58\u5728\u3002 \u2460 \u5916\u5c42\u5faa\u73af\u9010\u4e00\u5f80\u4e2d\u95f4\u96c6\u5408 temp \u4e2d\u52a0\u5165\u5143\u7d20 nums[i]\uff0c\u4f7f\u8fd9\u4e2a\u5143\u7d20\u5904\u4e8e\u5b58\u5728\u72b6\u6001 \u2461 \u5f00\u59cb\u9012\u5f52\uff0c\u9012\u5f52\u4e2d\u643a\u5e26\u52a0\u5165\u65b0\u5143\u7d20\u7684 temp\uff0c\u5e76\u4e14\u4e0b\u4e00\u6b21\u5faa\u73af\u7684\u8d77\u59cb\u662f i \u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\uff0c\u56e0\u800c\u9012\u5f52\u4e2d\u66f4\u65b0 i \u503c\u4e3a i + 1 \u2462 \u5c06\u8fd9\u4e2a\u4ece\u4e2d\u95f4\u96c6\u5408 temp \u4e2d\u79fb\u9664\uff0c\u4f7f\u8be5\u5143\u7d20\u5904\u4e8e\u4e0d\u5b58\u5728\u72b6\u6001 ** \u6e05\u6670 ** \u63a8\u8350 ** def generate(i, nums, item, result): if i == len(nums): return item.append(nums[i]) result.append(copy.deepcopy(item)) generate(i+1, nums, item, result) item.pop() generate(i+1, nums, item, result) item = [] result = [] result.append(item) generate(0, nums, item, result) return result class Solution: def subsets(self, nums): # \u662f\u4e0a\u9762\u89e3\u9898\u5f62\u5f0f\u7684\u53d8\u79cd \u4e0d\u597d\u7406\u89e3 \u53ef\u4ee5\u8bb0\u4f5c\u4e00\u79cd\u5957\u8def \u8fed\u4ee3+\u9012\u5f52 def generate(i, nums, item, result): result.append(list(item)) for j in range(i, len(nums)): item.append(nums[j]) generate(j+1, nums, item, result) item.pop() result = [] generate(0, nums, [], result) return result","title":"78.2.2 \u56de\u6eaf(\u66b4\u529b\u641c\u7d22\u6cd5O(2^n))(\u7279\u6b8a\u65b9\u6cd5 \u4e0d\u6e05\u695a\u7684\u5f88\u96be\u81ea\u5df1\u60f3\u51fa)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7823","text":"& | ^ ~ << >> \u672c\u9898\u4f7f\u7528\u5230 & and << public: std::vector<std::vector<int>> subsets(std::vector<int>& nums){ // \u8bbe\u7f6e\u5168\u90e8\u96c6\u5408\u7684\u6700\u5927\u503c + 1 \u5373(2 ^ nums.size()+1 int all_set = 1 << nums.size() // \u6574\u6570i\u4ee3\u8868\u4ece0\u81f32^n-1\u8fd9\u6240\u6709\u7684\u96c6\u5408 // (1<<j)\u5373\u4e3a\u6784\u9020nums\u6570\u7ec4\u7684\u7b2cj\u4e2a\u5143\u7d20 // \u82e5i & (1<<j) \u4e3a\u771f\u5219nums[j]\u653e\u5165item for(int i = 0; i < all_set; i++){ std::vector<int> item; // j\u662f ABC\u662f\u5426\u51fa\u73b0 \u51fa\u73b0\u5219\u5c06\u8be5\u5143\u7d20push\u5165\u96c6\u5408 for int j = 0; j < nums.size(); j++){ // \u82e5i \u548c 100 010 001 \u4f4d\u4e0e(&)\u8fd0\u7b97\u540e\u4e3a1 push\u5165item if(i & (1 << j)){ item.push_back(nums[j]) } } // \u6839\u636e\u4e0a\u4e00\u4e2afor loop\u5f97\u77e5\u8fd9\u4e00\u4e2a\u96c6\u5408\u662f\u4ec0\u4e48 \u653e\u5165result\u4e2d result.push_back(item) } }","title":"78.2.3 \u4f4d\u8fd0\u7b97\u6cd5(\u7279\u6b8a\u65b9\u6cd5 \u4e0d\u6e05\u695a\u7684\u5f88\u96be\u81ea\u5df1\u60f3\u51fa)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#783","text":"result.extend(copy.deepcopy(sub_result)) 1\u3001copy.copy \u6d45\u62f7\u8d1d \u53ea\u62f7\u8d1d\u7236\u5bf9\u8c61\uff0c\u4e0d\u4f1a\u62f7\u8d1d\u5bf9\u8c61\u7684\u5185\u90e8\u7684\u5b50\u5bf9\u8c61\u3002 2\u3001copy.deepcopy \u6df1\u62f7\u8d1d \u62f7\u8d1d\u5bf9\u8c61\u53ca\u5176\u5b50\u5bf9\u8c61 \u66f4\u63a8\u8350\u7684\u5199\u6cd5 result.extend(list(sub_result))","title":"78.3 \u95ee\u9898 \u6570\u7ec4\u6d45\u62f7\u8d1d\u6df1\u62f7\u8d1d\u95ee\u9898"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#90-ii","text":"","title":"90 \u5b50\u96c6II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#901","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 *nums *\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u8bf4\u660e\uff1a \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,2] \u8f93\u51fa: [ [2], [1], [1,2,2], [2,2], [1,2], [] ]","title":"90.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#902","text":"","title":"90.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#9021","text":"class Solution: def subsetsWithDup(self, nums: List[int]) -> List[List[int]]: \"\"\" \u548c\u5b50\u96c6I\u533a\u522b\u5728\u4e8e\u6709\u91cd\u590d \u91cd\u590d\u5206\u4e24\u79cd \u4e00\u79cd\u662f\u96c6\u5408\u76f8\u540c\u4f46\u4f4d\u7f6e\u4e0d\u540c \u53ef\u901a\u8fc7\u6392\u5e8f\u89e3\u51b3 \u4e00\u79cd\u662f\u96c6\u5408\u76f8\u540c\u4f4d\u7f6e\u4e5f\u76f8\u540c \u53ef\u901a\u8fc7\u7ed3\u679c\u7528set\u4fdd\u5b58 set \u76f4\u63a5\u5b58list \u8fd4\u56de type error: unhashable type: list \"\"\" def generate(i, nums, item, result): result.append(list(item)) for j in range(i, len(nums)): item.append(nums[j]) generate(j+1, nums, item, result) item.pop() # \u505a\u6392\u5e8f \u9632\u6b62\u7b2c\u4e00\u79cd\u91cd\u590d nums = sorted(nums) result = [] item = [] generate(0, nums, item, result) ## \u5982\u4f55\u5bf9\u5217\u8868\u4e2d\u7684\u5217\u8868\u53bb\u91cd \u6216\u8005\u7a0b\u5e8f\u4e2d\u5982\u4f55\u505a\u5224\u65ad\u9632\u6b62\u76f8\u540c\u7684\u5217\u8868\u8fdb\u5165 result = [list(j) for j in set([tuple(item) for item in result])] return result","title":"90.2.1 \u65b9\u6cd5\u4e00 \u56de\u6eaf"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#9022","text":"class Solution: def subsetsWithDup(self, nums: List[int]) -> List[List[int]]: if not nums: return [[]] nums = sorted(nums) num = nums[0] subsets = self.subsetsWithDup(nums[1:]) subsets = subsets + [i+[num] for i in subsets] subsets = [list(j) for j in set([tuple(item) for item in subsets])] return subsets","title":"90.2.2 \u65b9\u6cd5\u4e8c \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#904-unhash-able-type-list","text":"","title":"90.4 \u95ee\u9898 unhash able type list"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#9041-unhash-able-type-list","text":"set\u4e2d\u5b58\u6709\u7684\u662fhash\u5316\u7684\u5bf9\u8c61, \u7136\u800clist\u7b49\u503c\u53ef\u4ee5\u6539\u53d8\u7684\u5bf9\u8c61\u96be\u4ee5hash, \u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u653e\u5165","title":"90.4.1 unhash able type list"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#9042","text":"result = [list(j) for j in set([tuple(item) for item in result])]","title":"90.4.2 \u5bf9\u5217\u8868\u4e2d\u7684\u5217\u8868(\u4e8c\u7ea7\u5217\u8868)\u53bb\u91cd"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#39_1","text":"","title":"39.\u7ec4\u5408\u603b\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#291","text":"\u7ed9\u5b9a\u4e00\u4e2a \u65e0\u91cd\u590d\u5143\u7d20 \u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target \uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: \u8f93\u5165: candidates = [2,3,6,7], target = 7, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [7], [2,2,3] ] \u793a\u4f8b 2: \u8f93\u5165: candidates = [2,3,5], target = 8, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [2,2,2,2], [2,3,3], [3,5] ]","title":"29.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#292","text":"","title":"29.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2921","text":"class Solution: def combinationSum(self, candidates, target): def generate(i, item, result, candidates, target): if target < 0: return elif target == 0: result.append(list(item)) else: for j in range(i, len(candidates)): item.append(candidates[j]) # not i + 1 because we can reuse same elements generate(j, item, result, candidates, target - candidates[j]) item.pop() item = [] result = [] candidates = sorted(candidates) generate(0, item, result, candidates, target) return result sol = Solution() print(sol.combinationSum([2,3,5], 8))","title":"29.2.1 \u65b9\u6cd5\u4e00 \u56de\u6eaf **"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#40-ii","text":"","title":"40 \u7ec4\u5408\u603b\u548cII"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#401","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: \u8f93\u5165: candidates = [10,1,2,7,6,1,5], target = 8, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ] \u793a\u4f8b 2: \u8f93\u5165: candidates = [2,5,2,1,2], target = 5, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1,2,2], [5] ]","title":"40.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#402","text":"import copy class Solution: def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]: \"\"\" \u8fb9\u754c\u6761\u4ef6: candidates\u4e2d\u53ef\u80fd\u542b\u6709\u91cd\u590d\u503c \u524d\u7f6e\u9898\u76ee: 78 \u5b50\u96c6 90 \u5b50\u96c6II \u672c\u9898\u521b\u65b0\u70b9: \u5982\u4f55\u526a\u679d \u601d\u8003: \u5f53\u5b50\u96c6\u7d2f\u8ba1\u503c\u5927\u4e8e >= target\u65f6 \u526a\u679d(\u56e0\u4e3a\u6240\u6709\u6570\u5b57\u90fd\u662f\u6b63\u6574\u6570) \u9632\u6b62\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408: \u4e24\u79cd\u91cd\u590d: 1.\u96c6\u5408\u4e2d\u5143\u7d20\u4f4d\u7f6e\u4e0d\u540c \u503c\u76f8\u540c(\u5148\u6392\u5e8f) 2.\u96c6\u5408\u4e2d\u5143\u7d20\u76f8\u540c(\u4e8c\u91cd\u5217\u8868\u53bb\u91cd \u6216\u9632\u6b62\u91cd\u590d\u96c6\u5408\u8fdb\u5165\u7ed3\u679c\u96c6) \u6700\u540e\u8ba1\u7b97\u5269\u4f59\u96c6\u5408\u4e2d\u5143\u7d20\u548c\u7b49\u4e8etarget\u7684\u5b50\u96c6 Note: deepcopy \"\"\" def back_track(i, item, candidates, set_sum, result): \"\"\" set_sum: \u5f85\u4f20\u5165\u7684\u5b50\u96c6\u7684\u548c \u4e0esubsets\u9898\u76ee\u76f8\u6bd4 \u589e\u52a0\u4e2a\u526a\u679d \u5982\u4f55\u526a\u679d \u589e\u52a0set_sum\u53d8\u91cf\u6765\u5224\u65ad \"\"\" # \u8df3\u51fa\u6761\u4ef6 if i >= len(candidates) or set_sum > target: return # *** \u526a\u679d *** set_sum = candidates[i] + set_sum item.append(candidates[i]) if set_sum == target: result.append(copy.deepcopy(item)) back_track(i+1, item, candidates, set_sum, result) # ** back_track ** \u8fd9\u4e2a\u5730\u65b9\u5bb9\u6613\u56de\u6eaf\u65f6\u5bb9\u6613\u5fd8\u8bb0\u51cf\u6389\u4e0d\u52a0\u5165\u7684\u5143\u7d20\u503c set_sum = set_sum - candidates[i] item.pop() back_track(i+1, item, candidates, set_sum, result) result = [] # \u6392\u5e8f\u9632\u6b62\u7b2c\u4e00\u79cd\u91cd\u590d candidates.sort() # \u5b50\u96c6 item = [] back_track(0, item, candidates, 0, result) final_result = [] # \u5bf9result\u53bb\u91cd\u4e14\u4fdd\u7559\u7b49\u4e8etarget\u7684\u5b50\u96c6 final_result = list(set([tuple(f) for f in result])) final_result = [list(f) for f in final_result] return final_result def combinationSum2(self, candidates, target): # Sorting is really helpful, se we can avoid over counting easily candidates.sort() result = [] self.combine_sum_2(candidates, 0, [], result, target) return result def combine_sum_2(self, nums, start, path, result, target): # Base case: if the sum of the path satisfies the target, we will consider # it as a solution, and stop there if not target: result.append(path) return for i in xrange(start, len(nums)): # Very important here! We don't use `i > 0` because we always want # to count the first element in this recursive step even if it is the same # as one before. To avoid overcounting, we just ignore the duplicates # after the first element. if i > start and nums[i] == nums[i - 1]: continue # If the current element is bigger than the assigned target, there is # no need to keep searching, since all the numbers are positive if nums[i] > target: break # We change the start to `i + 1` because one element only could # be used once self.combine_sum_2(nums, i + 1, path + [nums[i]], result, target - nums[i])","title":"40.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4222","text":"class Solution: def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]: def generate(start, item, result, nums, target): if target < 0: return if target == 0: result.append(list(item)) return for j in range(start, len(nums)): if j > start and nums[j] == nums[j-1]: continue item.append(nums[j]) generate(j+1, item, result, nums, target - nums[j]) item.pop() nums = sorted(candidates) item = [] result = [] generate(0, item, result, nums, target) return result","title":"42.2.2 \u56de\u6eaf \uff08\u63a8\u8350\uff09"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#216-iii","text":"","title":"216. \u7ec4\u5408\u603b\u548c III"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2161","text":"\u627e\u51fa\u6240\u6709\u76f8\u52a0\u4e4b\u548c\u4e3a n \u7684 k \u4e2a\u6570\u7684\u7ec4\u5408 \u3002 \u7ec4\u5408\u4e2d\u53ea\u5141\u8bb8\u542b\u6709 1 - 9 \u7684\u6b63\u6574\u6570\uff0c\u5e76\u4e14\u6bcf\u79cd\u7ec4\u5408\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u6570\u5b57\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: \u8f93\u5165: k = 3, n = 7 \u8f93\u51fa: [[1,2,4]] \u793a\u4f8b 2: \u8f93\u5165: k = 3, n = 9 \u8f93\u51fa: [[1,2,6], [1,3,5], [2,3,4]]","title":"216.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2162","text":"","title":"216.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21621","text":"class Solution: def combinationSum3(self, k: int, n: int) -> List[List[int]]: def generate(start, item, result, nums, n): if n < 0 or len(item) > k: return if n == 0 and len(item) == k: result.append(list(item)) return for j in range(start, len(nums)): item.append(nums[j]) generate(j+1, item, result, nums, n-nums[j]) item.pop() nums = range(1, min(10, n)) item = [] result = [] generate(0, item, result, nums, n) return result","title":"216.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21622","text":"","title":"216.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#377-iv-dp","text":"","title":"377. \u7ec4\u5408\u603b\u548c \u2163 DP[\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3771","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u4e14\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u4e3a\u7ed9\u5b9a\u76ee\u6807\u6b63\u6574\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\u3002 \u793a\u4f8b: nums = [1, 2, 3] target = 4 \u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u4e3a\uff1a (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) \u8bf7\u6ce8\u610f\uff0c\u987a\u5e8f\u4e0d\u540c\u7684\u5e8f\u5217\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u7ec4\u5408\u3002 \u56e0\u6b64\u8f93\u51fa\u4e3a 7\u3002 \u8fdb\u9636\uff1a \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u4e2d\u542b\u6709\u8d1f\u6570\u4f1a\u600e\u4e48\u6837\uff1f \u95ee\u9898\u4f1a\u4ea7\u751f\u4ec0\u4e48\u53d8\u5316\uff1f \u6211\u4eec\u9700\u8981\u5728\u9898\u76ee\u4e2d\u6dfb\u52a0\u4ec0\u4e48\u9650\u5236\u6765\u5141\u8bb8\u8d1f\u6570\u7684\u51fa\u73b0\uff1f","title":"377.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3772","text":"","title":"377.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#37721","text":"class Solution { public int combinationSum4(int[] nums, int target) { if (target == 0){ return 1; } int res = 0; for(int i = 0; i < nums.length; i++){ if(target >= nums[i]){ res += combinationSum4(nums, target- nums[i]); } } return res; } }","title":"377.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52 \u8d85\u51fa\u65f6\u95f4\u9650\u5236"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#37722-dp","text":"class Solution: def combinationSum4(self, nums: List[int], target: int) -> int: dp = [0] * (target+1) dp[0] = 1 for i in range(1, target+1): for num in nums: if i >= num: dp[i] += dp[i-num] return dp[target]","title":"377.2.2 \u65b9\u6cd5\u4e8c DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#46","text":"","title":"46.\u5168\u6392\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#461_1","text":"\u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 \u8fdb\u9636\uff1a\u6709\u91cd\u590d\u6570\u5b57 \u793a\u4f8b: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]","title":"46.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#462","text":"","title":"46.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4621_1","text":"class Solution: def permute(self, nums: List[int]) -> List[List[int]]: def generate(item, result, nums): if len(item) == len(nums): result.append(list(item)) else: for j in range(len(nums)): if nums[j] not in item: item.append(nums[j]) generate(item, result, nums) item.pop() item = [] result = [] generate(item, result, nums) return result","title":"46.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4622_1","text":"","title":"46.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#47-ii","text":"","title":"47. \u5168\u6392\u5217 II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#471","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002 \u793a\u4f8b: \u8f93\u5165: [1,1,2] \u8f93\u51fa: [ [1,1,2], [1,2,1], [2,1,1] ]","title":"47.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#472","text":"","title":"47.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4721","text":"\u5173\u952e : \u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u5178\u6765\u8bb0\u5f55\u662f\u5426\u67d0\u4e2a\u4f4d\u7f6e\u7684\u503c\u5df2\u7ecf\u88ab\u4f7f\u7528\u4e86 result\u4f7f\u7528set class Solution: def permuteUnique(self, nums: List[int]) -> List[List[int]]: \"\"\"\u8fd4\u56de\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217(\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57) \"\"\" def backtrack(nums, i, items, result, dic): \"\"\" nums(list): \u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217 i, \u5e8f\u5217\u5305\u542b\u51e0\u4e2a\u6570\u5b57 \"\"\" if len(items) == len(nums): # \u662f\u5426\u91cd\u590d result.add(tuple(items)) return for i in range(len(nums)): if dic[i]: continue items.append(nums[i]) dic[i] = True backtrack(nums, i+1, items, result, dic) dic[i] = False items.pop() result = set() items = [] dic = dict((i, False) for i in range(len(nums))) backtrack(nums, 0, items, result, dic) result = [list(x) for x in result] return result result\u4f7f\u7528list (nums\u5148\u6392\u5e8f, dfs\u505a\u6821\u9a8c if(i>0 &&nums[i-1]==nums[i] && !used[i-1]) continue;) public class Solution { public List<List<Integer>> permuteUnique(int[] nums) { List<List<Integer>> res = new ArrayList<List<Integer>>(); if(nums==null || nums.length==0) return res; boolean[] used = new boolean[nums.length]; List<Integer> list = new ArrayList<Integer>(); // result\u4f7f\u7528list Arrays.sort(nums); dfs(nums, used, list, res); return res; } public void dfs(int[] nums, boolean[] used, List<Integer> list, List<List<Integer>> res){ if(list.size()==nums.length){ res.add(new ArrayList<Integer>(list)); return; } for(int i=0;i<nums.length;i++){ if(used[i]) continue; // result\u4f7f\u7528list\u5bfc\u81f4\u8981\u6821\u9a8c\u91cd\u590d\u60c5\u51b5 (\u526a\u679d) if(i>0 &&nums[i-1]==nums[i] && !used[i-1]) continue; used[i]=true; list.add(nums[i]); dfs(nums,used,list,res); used[i]=false; list.remove(list.size()-1); } } }","title":"47.2.1 \u56de\u6eaf(\u57fa\u4e8e\u6570\u7ec4\u4f4d\u7f6e)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4722","text":"","title":"47.2.2 \u56de\u6eaf(\u57fa\u4e8e\u5404\u5b57\u6bcd\u7684\u6570\u91cf)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#4723-todo","text":"https://leetcode.com/problems/permutations-ii/discuss/18602/9-line-python-solution-with-1-line-to-handle-duplication-beat-99-of-others-%3A-) Great solution! Here is a short (casual) proof about why break can avoid the duplication. Argument: Assume ans is a list of unique permutations with each item length k , then new_ans is a list of unique permutation with length k+1 . When k=0 , it holds. Then we prove it will also holds in each iteration using proof by contradiction. Suppose duplicate happens when inserting n into the i th location, the result is [l2[:i], n, l2[i:]] , and it duplicates with the item [l1[:j], n, l1[j:]] Suppose i < j , then we have l1[i] ==n , however, we will break when l1[i]==n , and thus n will not be inserted after l1[:j] -> contradiction, Suppose i > j , then we have l2[j] == n , however we will break when l2[j] == n , and thus n will not be inserted after l2[:i] -> contradiction. Suppose i==j , then we have l1==l2 , which contradicts the assumption that ans is a list of unique permutations. Thus the argument hold. def permuteUnique(self, nums): ans = [[]] for n in nums: new_ans = [] for l in ans: for i in xrange(len(l)+1): new_ans.append(l[:i]+[n]+l[i:]) if i<len(l) and l[i]==n: break #handles duplication ans = new_ans return ans","title":"47.2.3 (todo: )"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#22_2","text":"","title":"22.\u62ec\u53f7\u751f\u6210"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#221","text":"\u7ed9\u51fa n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa n = 3\uff0c\u751f\u6210\u7ed3\u679c\u4e3a\uff1a [ \"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\" ]","title":"22.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#222","text":"import copy class Solution: def generateParenthesis(self, n: int) -> List[str]: \"\"\" 1.\u641c\u7d22\u6240\u6709\u7684\u60c5\u51b5(\u4e0d\u8003\u8651\u62ec\u53f7\u5bf9\u9519) 2.\u526a\u679d: 2.1 \u5de6\u62ec\u53f7\u6570 > n or \u53f3\u62ec\u53f7\u6570 > n 2.2 \u5de6\u62ec\u53f7\u6570 > \u53f3\u62ec\u53f7\u6570 \"\"\" # def search(n, item, result): # \"\"\" # \u641c\u7d22\u6240\u6709\u7684\u60c5\u51b5(\u4e0d\u8003\u8651\u62ec\u53f7\u5bf9\u9519) # item(str): \u62ec\u53f7\u4e32 # \"\"\" # if len(item) == 2 * n: # result.append(item) # return # search(n-1, item+'(', result) # search(n-1, item+')', result) def search_condition(item, left, right, result): \"\"\" item(str): \u62ec\u53f7\u4e32 left(int): \u5de6\u62ec\u53f7\u5269\u4f59\u6570\u91cf right(int): \u53f3\u62ec\u53f7\u5269\u4f59\u6570\u91cf result(list) \"\"\" if left == 0 and right == 0: result.append(copy.deepcopy(item)) if left > 0: search_condition(item+'(', left-1, right, result) if right > 0 and left < right: search_condition(item+')', left, right-1, result) result = [] search_condition(\"\", n, n, result) return result","title":"22.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_251","text":"# \u6cd5\u4e00 def generateParenthesis(self, n): def generate(p, left, right, parens=[]): \"\"\" p is the parenthesis-string built so far, left and right tell the number of left and right parentheses still to add, parens collects the parentheses. \u89e3\u6cd5\u548c\u4e0a\u9762\u89e3\u6cd5\u4e00\u81f4 \"\"\" if left: generate(p + '(', left-1, right) if right > left: generate(p + ')', left, right-1) if not right: parens += p, return parens return generate('', n, n) # \u6cd5\u4e8c Here I wrote an actual Python generator. I allow myself to put the yield q at the end of the line because it's not that bad and because in \"real life\" I use Python 3 where I just say yield from generate(...). def generateParenthesis(self, n): def generate(p, left, right): if right >= left >= 0: if not right: yield p for q in generate(p + '(', left-1, right): yield q for q in generate(p + ')', left, right-1): yield q return list(generate('', n, n)) # \u6cd5\u4e09 Improved version of this. Parameter open tells the number of \"already opened\" parentheses, and I continue the recursion as long as I still have to open parentheses (n > 0) and I haven't made a mistake yet (open >= 0). def generateParenthesis(self, n, open=0): if n > 0 <= open: return ['(' + p for p in self.generateParenthesis(n-1, open+1)] + \\ [')' + p for p in self.generateParenthesis(n, open-1)] return [')' * open] * (not n) class Solution(object): def generateParenthesis(self, n): \"\"\" :type n: int :rtype: List[str] \"\"\" def generate(l, r, item, res): if r < l or l < 0 or r < 0: return elif l == 0 and r == 0: res.append(item) else: if l > 0: generate(l - 1, r, item + \"(\", res) if r > 0: generate(l, r - 1, item + \")\", res) item = \"\" res = [] generate(n, n, item, res) return res","title":"\u5176\u4ed6\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#51n","text":"","title":"51.N\u7687\u540e"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#511","text":"n \u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n \u00d7 n* \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002 \u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u660e\u786e\u7684 n \u7687\u540e\u95ee\u9898\u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d 'Q' \u548c '.' \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002 \u793a\u4f8b: \u8f93\u5165: 4 \u8f93\u51fa: [ [\".Q..\", // \u89e3\u6cd5 1 \"...Q\", \"Q...\", \"..Q.\"], [\"..Q.\", // \u89e3\u6cd5 2 \"Q...\", \"...Q\", \".Q..\"] ] \u89e3\u91ca: 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002","title":"51.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#512","text":"","title":"51.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5121","text":"import copy class Solution: def solveNQueens(self, n: int) -> List[List[str]]: \"\"\" 1.\u521d\u59cb\u5316\u4e00\u4e2a n * n \u7684\u68cb\u76d8\u77e9\u9635 2.\u653e\u7f6e\u7687\u540e\u7684\u7b56\u7565: \u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u4efb\u9009\u4e00\u4e2a\u4f4d\u7f6e\u5f53\u505a\u7687\u540e\u5e76\u66f4\u65b0\u68cb\u76d8\u7b2c\u4e00\u4e2a\u7687\u540e\u7684\u653b\u51fb\u8303\u56f4 \u8fb9\u754c\u6761\u4ef6: \"\"\" def put_down_queen(x, y, n, board): \"\"\" O(n**2) \u4f5c\u7528: \u653e\u4e0b\u4e00\u4e2a\u7687\u540e, \u66f4\u65b0\u68cb\u76d8\u77e9\u9635\u7684\u503c \u6b65\u9aa4: \u6784\u5efa\u65b9\u5411\u6570\u7ec4\u7528\u6765\u66f4\u65b0\u68cb\u76d8 \"\"\" dx = [-1, -1, 0, 1, 1, 1, 0, -1] dy = [0, 1, 1, 1, 0, -1, -1, -1] # \u653e\u7f6e\u7687\u540e board[x][y] = 1 # \u7f6e\u7687\u540e\u7684\u653b\u51fb\u8303\u56f4\u5747\u4e3a1 for i in range(8): for j in range(n): if (x + dx[i] * j) >= 0 and (x + dx[i] * j) < n and (y + dy[i] * j) >= 0 and (y + dy[i] * j) < n: board[x+dx[i]*j][y+dy[i]*j] = 1 return board def dfsHelper(i, n, board, queen_board, result): # i == n \u5b58\u5165board if i == n: queen_str = [''.join(lst) for lst in queen_board] result.append(copy.deepcopy(queen_str)) return # \u8fd9\u4e00\u5217\u503c\u5168\u4e3a1 \u6ca1\u6709\u7687\u540e\u53ef\u653e\u7f6e\u4f4d\u7f6e if sum(board[i]) == n: return for j in range(n): if board[i][j] == 0: tmp = copy.deepcopy(board) queen_board[i][j] = 'Q' board = put_down_queen(i, j, n, board) dfsHelper(i+1, n, board, queen_board, result) board = copy.deepcopy(tmp) queen_board[i][j] = '.' # 1.\u521d\u59cb\u5316n * n\u7684\u68cb\u76d8 board = [[0 for j in range(n)] for i in range(n)] queen_board = [['.' for j in range(n)] for i in range(n)] result = [] dfsHelper(0, n, board, queen_board, result) return result","title":"51.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5122","text":"[\u540e\u9762\u7684\u65b9\u6cd5\u601d\u8def\u90fd\u7c7b\u4f3c\u4e8e\u65b9\u6cd5\u4e8c, \u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u4f4e] In this problem, we can go row by row, and in each position, we need to check if the column , the 45\u00b0 diagonal and the 135\u00b0 diagonal had a queen before. Solution A: Directly check the validity of each position, 12ms : class Solution { public: std::vector<std::vector<std::string> > solveNQueens(int n) { std::vector<std::vector<std::string> > res; std::vector<std::string> nQueens(n, std::string(n, '.')); solveNQueens(res, nQueens, 0, n); return res; } private: void solveNQueens(std::vector<std::vector<std::string> > &res, std::vector<std::string> &nQueens, int row, int &n) { if (row == n) { res.push_back(nQueens); return; } for (int col = 0; col != n; ++col) if (isValid(nQueens, row, col, n)) { nQueens[row][col] = 'Q'; solveNQueens(res, nQueens, row + 1, n); nQueens[row][col] = '.'; } } bool isValid(std::vector<std::string> &nQueens, int row, int col, int &n) { // \u65f6\u95f4\u590d\u6742\u5ea6 O(n) //check if the column had a queen before. for (int i = 0; i != row; ++i) if (nQueens[i][col] == 'Q') return false; //check if the 45\u00b0 diagonal had a queen before. for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) if (nQueens[i][j] == 'Q') return false; //check if the 135\u00b0 diagonal had a queen before. for (int i = row - 1, j = col + 1; i >= 0 && j < n; --i, ++j) if (nQueens[i][j] == 'Q') return false; return true; } };","title":"51.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5223","text":"https://www.youtube.com/watch?v=wGbuCyNpxIg","title":"52.2.3 \u65b9\u6cd5\u4e09(\u63a8\u8350\u638c\u63e1 \u5f88\u89c4\u8303)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5224","text":"Use the DFS helper function to find solutions recursively. A solution will be found when the length of queens is equal to n ( queens is a list of the indices of the queens). In this problem, whenever a location (x, y ) is occupied, any other locations (p, q ) where p + q == x + y or p - q == x - y would be invalid. We can use this information to keep track of the indicators ( xy_dif and xy_sum ) of the invalid positions and then call DFS recursively with valid positions only. At the end, we convert the result (a list of lists; each sublist is the indices of the queens) into the desire format. def solveNQueens(self, n): def DFS(queens, xy_dif, xy_sum): \"\"\" queens(list): \u6bcf\u4e00\u79cd\u68cb\u76d8 \u6bcf\u4e00\u4e2a\u5143\u7d20\u662fqueen\u5728\u6bcf\u4e00\u884c\u7684index `queens` is a list of the indices of the queens xy_dif(list): x - y xy_sum(list): x + y result \u8bb0\u5f55\u7684\u662f \"\"\" # p\u884c\u6570 q\u5217\u6570 p = len(queens) if p==n: result.append(queens) return None for q in range(n): # \u9650\u5236\u6761\u4ef6 `p + q == x + y` or `p - q == x - y` is invalid if q not in queens and p-q not in xy_dif and p+q not in xy_sum: DFS(queens+[q], xy_dif+[p-q], xy_sum+[p+q]) result = [] DFS([],[],[]) return [ [\".\"*i + \"Q\" + \".\"*(n-i-1) for i in sol] for sol in result]","title":"52.2.4 \u65b9\u6cd5\u56db"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#131","text":"","title":"131.\u5206\u5272\u5b57\u7b26\u4e32 \u3010\u91cd\u70b9\u3011"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_252","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002 \u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002 \u793a\u4f8b: \u8f93\u5165: \"aab\" \u8f93\u51fa: [ [\"aa\",\"b\"], [\"a\",\"a\",\"b\"] ]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_253","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_254","text":"\u5982\u679c\u8f93\u5165\u662f\u201caab\u201d\uff0c\u68c0\u67e5[0,0]\u201ca\u201d\u662f\u5426\u662f\u56de\u6587\u3002\u7136\u540e\u68c0\u67e5[0,1]\u201caa\u201d\uff0c\u7136\u540e\u68c0\u67e5[0,2]\u201caab\u201d\u3002 \u5728\u68c0\u67e5[0,0]\u65f6\uff0c\u5b57\u7b26\u4e32\u7684\u5176\u4f59\u90e8\u5206\u4e3a\u201cab\u201d\uff0c\u4f7f\u7528ab\u4f5c\u4e3a\u8f93\u5165\u6765\u8fdb\u884c\u9012\u5f52\u8c03\u7528\u3002 \u5982\u679c\u8f93\u5165\u662f\u201caab\u201d\uff0c\u68c0\u67e5[0,0]\u201ca\u201d\u662f\u5426\u662f\u56de\u6587\u3002\u7136\u540e\u68c0\u67e5[0,1]\u201caa\u201d\uff0c\u7136\u540e\u68c0\u67e5[0,2]\u201caab\u201d\u3002\u5728\u68c0\u67e5[0,0]\u65f6\uff0c\u5b57\u7b26\u4e32\u7684\u5176\u4f59\u90e8\u5206\u4e3a\u201cab\u201d\uff0c\u4f7f\u7528ab\u4f5c\u4e3a\u8f93\u5165\u6765\u8fdb\u884c\u9012\u5f52\u8c03\u7528 class Solution: def partition(self, s: str) -> List[List[str]]: def isPalindrome(l, r): if l == r: return True while l < r: if s[l] != s[r]: return False l += 1 r -= 1 return True def generate(i, item, s, result): if i == len(s): result.append(item) else: for j in range(i, len(s)): # key: \u5982\u679c\u5df2\u6709\u7684\u662f\u56de\u6587\u5b50\u4e32 \u5269\u4e0b\u7684\u7ee7\u7eed\u56de\u6eaf if isPalindrome(i, j): generate(j + 1, item + [s[i: j + 1]], s, result) item = [] result = [] generate(0, item, s, result) return result","title":"\u89e3\u6cd5\u4e00 \u56de\u6eaf"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_255","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#89","text":"","title":"89.\u683c\u96f7\u7f16\u7801"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_256","text":"\u683c\u96f7\u7f16\u7801\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5b57\u7cfb\u7edf\uff0c\u5728\u8be5\u7cfb\u7edf\u4e2d\uff0c\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u503c\u4ec5\u6709\u4e00\u4e2a\u4f4d\u6570\u7684\u5dee\u5f02\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u7f16\u7801\u603b\u4f4d\u6570\u7684\u975e\u8d1f\u6574\u6570 n\uff0c\u6253\u5370\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u3002\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5fc5\u987b\u4ee5 0 \u5f00\u5934\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 \u8f93\u51fa: [0,1,3,2] \u89e3\u91ca: 00 - 0 01 - 1 11 - 3 10 - 2 \u5bf9\u4e8e\u7ed9\u5b9a\u7684 n\uff0c\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5e76\u4e0d\u552f\u4e00\u3002 \u4f8b\u5982\uff0c[0,2,3,1] \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u3002 00 - 0 10 - 2 11 - 3 01 - 1 \u793a\u4f8b 2: \u8f93\u5165: 0 \u8f93\u51fa: [0] \u89e3\u91ca: \u6211\u4eec\u5b9a\u4e49\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5fc5\u987b\u4ee5 0 \u5f00\u5934\u3002 \u7ed9\u5b9a\u7f16\u7801\u603b\u4f4d\u6570\u4e3a n \u7684\u683c\u96f7\u7f16\u7801\u5e8f\u5217\uff0c\u5176\u957f\u5ea6\u4e3a 2n\u3002\u5f53 n = 0 \u65f6\uff0c\u957f\u5ea6\u4e3a 20 = 1\u3002 \u56e0\u6b64\uff0c\u5f53 n = 0 \u65f6\uff0c\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u4e3a [0]\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_257","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#o2n","text":"class Solution: def grayCode(self, n: int) -> List[int]: def generate(item, visited): res.append(int(item, 2)) for j in range(0, n): if item[:j] + str(1 - int(item[j])) + item[j + 1:] not in visited: item = item[:j] + str(1 - int(item[j])) + item[j + 1:] visited.add(item) generate(item, visited) if n == 0: return [0] item = \"0\" * n res = [] visited = {item} generate(item, visited) return res","title":"\u89e3\u6cd5\u4e00 \u56de\u6eaf O(2**n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#o2n_1","text":"class Solution: def grayCode(self, n: int) -> List[int]: res, head = [0], 1 for i in range(n): for j in range(len(res) - 1, -1, -1): res.append(head + res[j]) head <<= 1 return res","title":"\u89e3\u6cd5\u4e8c \u955c\u9762\u53cd\u5c04\u6cd5(\u52a8\u6001\u89c4\u5212) O(2**n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_2","text":"","title":"DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#79","text":"","title":"79.\u5355\u8bcd\u641c\u7d22"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_258","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u548c\u4e00\u4e2a\u5355\u8bcd\uff0c\u627e\u51fa\u8be5\u5355\u8bcd\u662f\u5426\u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: board = [ ['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E'] ] \u7ed9\u5b9a word = \"ABCCED\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"SEE\", \u8fd4\u56de true. \u7ed9\u5b9a word = \"ABCB\", \u8fd4\u56de false.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_259","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_3","text":"class Solution(object): def exist(self, board, word): \"\"\" :type board: List[List[str]] :type word: str :rtype: bool \"\"\" def dfs(i, j, board, word): if not word: return True directions = [(0, -1), (-1, 0), (0, 1), (1, 0)] for dx, dy in directions: if i >= 0 and i < m and j >= 0 and j < n and board[i][j] == word[0]: temp = board[i][j] board[i][j] = '#' if dfs(i + dx, j + dy, board, word[1:]): return True board[i][j] = temp return False if not board or len(board) == 0: return False m = len(board) n = len(board[0]) for i in range(m): for j in range(n): if dfs(i, j, board, word): return True return False","title":"\u89e3\u6cd5\u4e00 DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_260","text":"class Solution(object): def exist(self,board,word): if not board: return False for i in range(len(board)): for j in range(len(board[0])): if self.dfs(board,i,j,word): return True return False def dfs(self,board,i,j,word): if len(word)==0: return True # \u7ec8\u6b62\u6761\u4ef6 if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or word[0] != board[i][j]: return False tmp = board[i][j] # \u6807\u8bb0 board[i][j] = '#' res = self.dfs(board, i + 1, j, word[1:]) or self.dfs(board, i - 1, j, word[1:]) \\ or self.dfs(board, i, j + 1, word[1:]) or self.dfs(board, i, j - 1, word[1:]) # \u6062\u590d\u6807\u8bb0 board[i][j] = tmp return res","title":"\u89e3\u6cd5\u4e8c \u63a8\u8350"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_261","text":"class Solution(object): # \u5b9a\u4e49\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u884c\u8d70\u65b9\u5411 directs = [(0, 1), (0, -1), (1, 0), (-1, 0)] def exist(self, board, word): \"\"\" :type board: List[List[str]] :type word: str :rtype: bool \"\"\" m = len(board) if m == 0: return False n = len(board[0]) mark = [[0 for _ in range(n)] for _ in range(m)] for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == word[0]: # \u5c06\u8be5\u5143\u7d20\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528 mark[i][j] = 1 if self.backtrack(i, j, mark, board, word[1:]) == True: return True else: # \u56de\u6eaf mark[i][j] = 0 return False def backtrack(self, i, j, mark, board, word): if len(word) == 0: return True for direct in self.directs: cur_i = i + direct[0] cur_j = j + direct[1] if cur_i >= 0 and cur_i < len(board) and cur_j >= 0 and cur_j < len(board[0]) and board[cur_i][cur_j] == word[0]: # \u5982\u679c\u662f\u5df2\u7ecf\u4f7f\u7528\u8fc7\u7684\u5143\u7d20\uff0c\u5ffd\u7565 if mark[cur_i][cur_j] == 1: continue # \u5c06\u8be5\u5143\u7d20\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528 mark[cur_i][cur_j] = 1 if self.backtrack(cur_i, cur_j, mark, board, word[1:]) == True: return True else: # \u56de\u6eaf mark[cur_i][cur_j] = 0 return False","title":"\u89e3\u6cd5\u4e09"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_262","text":"class Solution: def exist(self, board: List[List[str]], word: str) -> bool: row = len(board) col = len(board[0]) def helper(i, j, k, visited): #print(i,j, k,visited) if k == len(word): return True for x, y in [(-1, 0), (1, 0), (0, 1), (0, -1)]: tmp_i = x + i tmp_j = y + j if 0 <= tmp_i < row and 0 <= tmp_j < col and (tmp_i, tmp_j) not in visited \\ and board[tmp_i][tmp_j] == word[k]: visited.add((tmp_i, tmp_j)) if helper(tmp_i, tmp_j, k+1, visited): return True visited.remove((tmp_i, tmp_j)) # \u56de\u6eaf return False for i in range(row): for j in range(col): if board[i][j] == word[0] and helper(i, j, 1,{(i, j)}) : return True return False","title":"\u89e3\u6cd5\u56db \u56de\u6eaf"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#100","text":"","title":"100.\u76f8\u540c\u7684\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1001","text":"\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002 \u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1 1 / \\ / \\ 2 3 2 3 [1,2,3], [1,2,3] \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: 1 1 / \\ 2 2 [1,2], [1,null,2] \u8f93\u51fa: false \u793a\u4f8b 3: \u8f93\u5165: 1 1 / \\ / \\ 2 1 1 2 [1,2,1], [1,1,2] \u8f93\u51fa: false","title":"100.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1002","text":"","title":"100.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#10021","text":"class Solution: def isSameTree(self, p: TreeNode, q: TreeNode) -> bool: \"\"\" \u65b9\u6cd5\u4e00: \u9012\u5f52 \"\"\" if not p and not q: return True if not p or not q: return False if p.val != q.val: return False return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)","title":"100.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#10022-bfs","text":"from collections import deque class Solution: def isSameTree(self, p, q): \"\"\" :type p: TreeNode :type q: TreeNode :rtype: bool \"\"\" def check(p, q): if not p and not q: return True if not q or not p: return False if p.val != q.val: return False return True deq = deque([(p, q),]) while deq: p, q = deq.popleft() if not check(p, q): return False if p: deq.append((p.left, q.left)) deq.append((p.right, q.right)) return True","title":"100.2.2 \u65b9\u6cd5\u4e8c BFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#10023-dfs","text":"class Solution: def isSameTree(self, p, q): \"\"\" :type p: TreeNode :type q: TreeNode :rtype: bool \"\"\" def check(p, q): if not p and not q: return True if not q or not p: return False if p.val != q.val: return False return True stack = [(p, q)] while stack: p, q = stack.pop() if not check(p, q): return False if p: stack.append((p.left, q.left)) stack.append((p.right, q.right)) return True","title":"100.2.3 \u65b9\u6cd5\u4e09 DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#101","text":"","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#101-1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002 \u4f8b\u5982\uff0c\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3] \u662f\u5bf9\u79f0\u7684\u3002 1 / \\\u00b712 2 2 / \\ / \\ 3 4 4 3 \u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a [1,2,2,null,3,null,3] \u5219\u4e0d\u662f\u955c\u50cf\u5bf9\u79f0\u7684: 1 / \\ 2 2 \\ \\ 3 3","title":"101. 1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#101-2","text":"","title":"101. 2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#101-21","text":"class Solution: def isSymmetric(self, root: TreeNode) -> bool: \"\"\" \u9012\u5f52 \"\"\" def symSame(p, q): if not p and not q: return True if not p or not q: return False if p.val != q.val: return False return symSame(p.left, q.right) and symSame(p.right, q.left) if not root: return True return symSame(root.left, root.right)","title":"101. 2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#101-22-bfs","text":"from collections import deque class Solution: def isSymmetric(self, root: TreeNode) -> bool: def check(p, q): if not p and not q: return True if not p or not q: return False if p.val != q.val: return False return True if not root: return True deq = deque([(root.left, root.right)]) while deq: p, q = deq.popleft() if not check(p, q): return False if p: deq.append((p.left, q.right)) deq.append((p.right, q.left)) return True","title":"101. 2.2 \u65b9\u6cd5\u4e8c BFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#10123-1-dfs","text":"class Solution: def isSymmetric(self, root: TreeNode) -> bool: def check(p, q): if not p and not q: return True if not p or not q: return False if p.val != q.val: return False return True if not root: return True stack = [(root.left, root.right)] while stack: p, q = stack.pop() if not check(p, q): return False if p: stack.append((p.left, q.right)) stack.append((p.right, q.left)) return True","title":"101.2.3 \u65b9\u6cd51\u4e09 DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#104","text":"","title":"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1041","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7] \uff0c 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u5b83\u7684\u6700\u5927\u6df1\u5ea6 3","title":"104.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1042","text":"","title":"104.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#10421","text":"class Solution: def maxDepth(self, root: TreeNode) -> int: if not root: return 0 return max(1+self.maxDepth(root.left), 1+self.maxDepth(root.right))","title":"104.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#10422-bfs","text":"from collections import deque class Solution: def maxDepth(self, root: TreeNode) -> int: if not root: return 0 max_v = 0 deq = deque([(root, 1)]) while deq: p, cur_v = deq.popleft() if p: max_v = max(max_v, cur_v) deq.append((p.left, cur_v+1)) deq.append((p.right, cur_v+1)) return max_v","title":"104.2.2 \u65b9\u6cd5\u4e8c BFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#10423-dfs","text":"class Solution: def maxDepth(self, root: TreeNode) -> int: if not root: return 0 max_v = 0 stack = [(root, 1)] while stack: p, cur_v = stack.pop() if p: max_v = max(max_v, cur_v) stack.append((p.left, cur_v+1)) stack.append((p.right, cur_v+1)) return max_v","title":"104.2.3 \u65b9\u6cd5\u4e09 DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#108","text":"","title":"108. \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1081","text":"\u5c06\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u8f6c\u6362\u4e3a\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u6307\u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u6709\u5e8f\u6570\u7ec4: [-10,-3,0,5,9], \u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f\uff1a[0,-3,9,-10,null,5]\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u4e0b\u9762\u8fd9\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1a 0 / \\ -3 9 / / -10 5","title":"108.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1082","text":"","title":"108.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#10821","text":"class Solution: def sortedArrayToBST(self, nums: List[int]) -> TreeNode: if not nums: return None mid = len(nums) >> 1 root = TreeNode(nums[mid]) root.left = self.sortedArrayToBST(nums[:mid]) root.right = self.sortedArrayToBST(nums[mid+1:]) return root","title":"108.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#110","text":"","title":"110.\u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1101","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a \u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7] 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de true \u3002 \u793a\u4f8b 2: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [1,2,2,3,3,null,null,4,4] 1 / \\ 2 2 / \\ 3 3 / \\ 4 4 \u8fd4\u56de false \u3002","title":"110.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1102","text":"","title":"110.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#11021","text":"class Solution: def isBalanced(self, root: TreeNode) -> bool: \"\"\" \u9012\u5f52 \"\"\" def helper(root): if not root: return 0 l_len = helper(root.left) if l_len == -1: return -1 r_len = helper(root.right) if r_len == -1: return -1 if abs(l_len - r_len) <= 1: return max(l_len, r_len) + 1 else: return -1 return helper(root) >= 0","title":"110.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#111","text":"","title":"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1111","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002 \u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7] , 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u5b83\u7684\u6700\u5c0f\u6df1\u5ea6 2.","title":"111.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1112","text":"","title":"111.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#11121","text":"class Solution: def minDepth(self, root: TreeNode) -> int: if not root: return 0 l_len = self.minDepth(root.left) r_len = self.minDepth(root.right) if l_len == 0 or r_len == 0: return max(l_len, r_len) + 1 return min(l_len, r_len) + 1","title":"111.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#112","text":"","title":"112. \u8def\u5f84\u603b\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1121","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811\uff0c\u4ee5\u53ca\u76ee\u6807\u548c sum = 22 \uff0c 5 / \\ 4 8 / / \\ 11 13 4 / \\ \\ 7 2 1 \u8fd4\u56de true , \u56e0\u4e3a\u5b58\u5728\u76ee\u6807\u548c\u4e3a 22 \u7684\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84 5->4->11->2 \u3002","title":"112.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1122","text":"","title":"112.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#11221","text":"class Solution: def hasPathSum(self, root: TreeNode, sum: int) -> bool: if not root: return False sum -= root.val if not root.left and not root.right: return sum == 0 return self.hasPathSum(root.left, sum) or self.hasPathSum(root.right, sum)","title":"112.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#11222-dfs","text":"class Solution: def hasPathSum(self, root: TreeNode, sum: int) -> bool: if not root: return False stack = [(root, sum - root.val)] while stack: node, sum = stack.pop() if not node.left and not node.right and sum == 0: return True if node.left: stack.append((node.left, sum - node.left.val)) if node.right: stack.append((node.right, sum - node.right.val)) return False","title":"112.2.2 \u65b9\u6cd5\u4e8c dfs"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#113-ii","text":"","title":"113.\u8def\u5f84\u603b\u548c II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_263","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b: \u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811\uff0c\u4ee5\u53ca\u76ee\u6807\u548c sum = 22\uff0c 5 / \\ 4 8 / / \\ 11 13 4 / \\ / \\ 7 2 5 1 \u8fd4\u56de: [ [5,4,11,2], [5,8,4,5] ] \u5728\u771f\u5b9e\u7684\u9762\u8bd5","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_264","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_4","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]: if not root: return [] parents = {root: None} stack = [(root, sum - root.val)] ends = [] while stack: root, sum = stack.pop() if not root.left and not root.right and sum == 0: ends.append(root) if root.left: parents[root.left] = root stack.append((root.left, sum - root.left.val)) if root.right: parents[root.right] = root stack.append((root.right, sum - root.right.val)) res = [] for end in ends: lst = [] while end: lst.append(end.val) end = parents[end] res.append(lst[::-1]) return res","title":"\u89e3\u6cd5\u4e00 dfs"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_265","text":"class Solution: def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]: if not root: return [] res = [] def dfs(root, sum, tmp): if not root: return if not root.left and not root.right and sum - root.val == 0 : tmp += [root.val] res.append(tmp) dfs(root.left, sum - root.val, tmp + [root.val]) dfs(root.right, sum - root.val, tmp + [root.val]) dfs(root, sum, []) return res","title":"\u89e3\u6cd5\u4e8c \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#200","text":"","title":"200.\u5c9b\u5c7f\u6570\u91cf"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_266","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531 '1'\uff08\u9646\u5730\uff09\u548c '0'\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8ba1\u7b97\u5c9b\u5c7f\u7684\u6570\u91cf\u3002\u4e00\u4e2a\u5c9b\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u5b83\u662f\u901a\u8fc7\u6c34\u5e73\u65b9\u5411\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u800c\u6210\u7684\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u7f51\u683c\u7684\u56db\u4e2a\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002 \u793a\u4f8b 1: \u8f93\u5165: 11110 11010 11000 00000 \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: 11000 11000 00100 00011 \u8f93\u51fa: 3","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_267","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_5","text":"\u601d\u8def\u4e00\uff1a\u9047\u5230\u4e00\u4e2a'1' \u628a\u548c\u8fd9\u4e2a'1'\u76f8\u8fde\u7684\u6240\u6709'1'\u53d8\u4e3a0 \u7ed3\u679c\u7d2f\u52a01 \u65b9\u6cd5\uff1aDFS or BFS \u601d\u8def\u4e8c: \u78b0\u5230\u4e00\u4e2a\u65b0\u7684'1'(\u5373\u5de6\u9762\u548c\u4e0a\u9762\u5747\u6ca1\u6709'1')\u7d2f\u52a01 class Solution: def numIslands(self, grid: List[List[str]]) -> int: \"\"\" \u601d\u8def\u4e00\uff1a\u9047\u5230\u4e00\u4e2a'1' \u628a\u548c\u8fd9\u4e2a'1'\u76f8\u8fde\u7684\u6240\u6709'1'\u53d8\u4e3a0 \u7ed3\u679c\u7d2f\u52a01 \u601d\u8def\u4e8c: \u78b0\u5230\u4e00\u4e2a\u65b0\u7684'1'(\u5373\u5de6\u9762\u548c\u4e0a\u9762\u5747\u6ca1\u6709'1')\u7d2f\u52a01 \"\"\" def dfs(grid, i, j): # \u8bb0\u5f55\u5df2\u8bbf\u95ee grid[i][j] = 0 # \u5de6 \u4e0a \u53f3 \u4e0b directions = [(0, -1), (-1, 0), (0, 1), (1, 0)] for dx, dy in directions: if (i + dx) >= 0 and (i + dx) < length and (j + dy) >= 0 and (j + dy) < width and grid[i + dx][j + dy] == '1': dfs(grid, i + dx, j + dy) if not grid: return 0 length = len(grid) width = len(grid[0]) res = 0 for i in range(length): for j in range(width): if grid[i][j] == '1': res += 1 dfs(grid, i, j) return res","title":"\u89e3\u6cd5\u4e00 DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bfs_1","text":"from typing import List from collections import deque class Solution: # x-1,y # x,y-1 x,y x,y+1 # x+1,y # \u65b9\u5411\u6570\u7ec4\uff0c\u5b83\u8868\u793a\u4e86\u76f8\u5bf9\u4e8e\u5f53\u524d\u4f4d\u7f6e\u7684 4 \u4e2a\u65b9\u5411\u7684\u6a2a\u3001\u7eb5\u5750\u6807\u7684\u504f\u79fb\u91cf\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6280\u5de7 directions = [(-1, 0), (0, -1), (1, 0), (0, 1)] def numIslands(self, grid: List[List[str]]) -> int: m = len(grid) # \u7279\u5224 if m == 0: return 0 n = len(grid[0]) marked = [[False for _ in range(n)] for _ in range(m)] count = 0 # \u4ece\u7b2c 1 \u884c\u3001\u7b2c 1 \u683c\u5f00\u59cb\uff0c\u5bf9\u6bcf\u4e00\u683c\u5c1d\u8bd5\u8fdb\u884c\u4e00\u6b21 DFS \u64cd\u4f5c for i in range(m): for j in range(n): # \u53ea\u8981\u662f\u9646\u5730\uff0c\u4e14\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 BFS \u53d1\u73b0\u4e0e\u4e4b\u76f8\u8fde\u7684\u9646\u5730\uff0c\u5e76\u8fdb\u884c\u6807\u8bb0 if not marked[i][j] and grid[i][j] == '1': # count \u53ef\u4ee5\u7406\u89e3\u4e3a\u8fde\u901a\u5206\u91cf\uff0c\u4f60\u53ef\u4ee5\u5728\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u5b8c\u6210\u4ee5\u540e\uff0c\u518d\u8ba1\u6570\uff0c # \u5373\u8fd9\u884c\u4ee3\u7801\u653e\u5728\u3010\u4f4d\u7f6e 1\u3011\u4e5f\u662f\u53ef\u4ee5\u7684 count += 1 queue = deque() queue.append((i, j)) # \u6ce8\u610f\uff1a\u8fd9\u91cc\u8981\u6807\u8bb0\u4e0a\u5df2\u7ecf\u8bbf\u95ee\u8fc7 marked[i][j] = True while queue: cur_x, cur_y = queue.popleft() # \u5f97\u5230 4 \u4e2a\u65b9\u5411\u7684\u5750\u6807 for direction in self.directions: new_i = cur_x + direction[0] new_j = cur_y + direction[1] # \u5982\u679c\u4e0d\u8d8a\u754c\u3001\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u3001\u5e76\u4e14\u8fd8\u8981\u662f\u9646\u5730\uff0c\u6211\u5c31\u7ee7\u7eed\u653e\u5165\u961f\u5217\uff0c\u653e\u5165\u961f\u5217\u7684\u540c\u65f6\uff0c\u8981\u8bb0\u5f97\u6807\u8bb0\u5df2\u7ecf\u8bbf\u95ee\u8fc7 if 0 <= new_i < m and 0 <= new_j < n and not marked[new_i][new_j] and grid[new_i][new_j] == '1': queue.append((new_i, new_j)) #\u3010\u7279\u522b\u6ce8\u610f\u3011\u5728\u653e\u5165\u961f\u5217\u4ee5\u540e\uff0c\u8981\u9a6c\u4e0a\u6807\u8bb0\u6210\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u8bed\u4e49\u4e5f\u662f\u5341\u5206\u6e05\u695a\u7684\uff1a\u53cd\u6b63\u53ea\u8981\u8fdb\u5165\u4e86\u961f\u5217\uff0c\u4f60\u8fdf\u65e9\u90fd\u4f1a\u904d\u5386\u5230\u5b83 # \u800c\u4e0d\u662f\u5728\u51fa\u961f\u5217\u7684\u65f6\u5019\u518d\u6807\u8bb0 #\u3010\u7279\u522b\u6ce8\u610f\u3011\u5982\u679c\u662f\u51fa\u961f\u5217\u7684\u65f6\u5019\u518d\u6807\u8bb0\uff0c\u4f1a\u9020\u6210\u5f88\u591a\u91cd\u590d\u7684\u7ed3\u70b9\u8fdb\u5165\u961f\u5217\uff0c\u9020\u6210\u91cd\u590d\u7684\u64cd\u4f5c\uff0c\u8fd9\u53e5\u8bdd\u5982\u679c\u4f60\u6ca1\u6709\u5199\u5bf9\u5730\u65b9\uff0c\u4ee3\u7801\u4f1a\u4e25\u91cd\u8d85\u65f6\u7684 marked[new_i][new_j] = True #\u3010\u4f4d\u7f6e 1\u3011 return count","title":"\u89e3\u6cd5\u4e8c BFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#236","text":"","title":"236.\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_268","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002 \u767e\u5ea6\u767e\u79d1\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a\u201c\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\uff09\u3002\u201d \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811: root = [3,5,1,6,2,0,8,null,null,7,4 \u793a\u4f8b 1: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 \u8f93\u51fa: 3 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 1 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 \u8f93\u51fa: 5 \u89e3\u91ca: \u8282\u70b9 5 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 5\u3002\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002 \u8bf4\u660e: \u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002 p\u3001q \u4e3a\u4e0d\u540c\u8282\u70b9\u4e14\u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e2d\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_269","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_270","text":"\u5f53\u4f60\u9047\u5230\u8282\u70b9 p \u6216 q \u65f6\uff0c\u8fd4\u56de\u4e00\u4e9b\u5e03\u5c14\u6807\u8bb0\u3002\u8be5\u6807\u5fd7\u6709\u52a9\u4e8e\u786e\u5b9a\u662f\u5426\u5728\u4efb\u4f55\u8def\u5f84\u4e2d\u627e\u5230\u4e86\u6240\u9700\u7684\u8282\u70b9\u3002\u6700\u4e0d\u5e38\u89c1\u7684\u7956\u5148\u5c06\u662f\u4e24\u4e2a\u5b50\u6811\u9012\u5f52\u90fd\u8fd4\u56de\u771f\u6807\u5fd7\u7684\u8282\u70b9\u3002\u5b83\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u672c\u8eab\u662fp\u6216q\u4e2d\u7684\u4e00\u4e2a\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u8282\u70b9,\u5b50\u6811\u9012\u5f52\u8fd4\u56de\u4e00\u4e2a\u771f\u6807\u5fd7\u3002 class Solution: def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode': \"\"\" \u601d\u8def1: \u9012\u5f52 \u601d\u8def1: \u67d0\u7ed3\u70b9\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7ed3\u70b9\u7684\u7956\u5148\u7ed3\u70b9 n * n \u601d\u8def2: DFS \u601d\u8def3: \u6309\u7167\u6807\u53f7\u96642 \"\"\" # 1.\u7ec8\u6b62\u6761\u4ef6 if not root: return root if root == p or root == q: return root # 2.\u9012\u5f52 left = self.lowestCommonAncestor(root.left, p, q) right = self.lowestCommonAncestor(root.right, p, q) # 3.\u9012\u5f52\u7ed3\u679c\u5904\u7406 if left and right: return root elif left: return left elif right: return right return None \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO\\big(N\\big)O(N)\uff0cNN \u662f\u4e8c\u53c9\u6811\u4e2d\u7684\u8282\u70b9\u6570\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u8bbf\u95ee\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8282\u70b9\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(N)O(N)\uff0c\u8fd9\u662f\u56e0\u4e3a\u9012\u5f52\u5806\u6808\u4f7f\u7528\u7684\u6700\u5927\u7a7a\u95f4\u4f4d NN,\u659c\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u53ef\u4ee5\u662f NN\u3002","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_6","text":"class Solution: def lowestCommonAncestor(self, root, p, q): # 1.dfs\u904d\u5386 \u5b58\u50a8\u6bcf\u4e2a\u7236\u4eb2\u7ed3\u70b9 stack = [root] parent= {root:None} while p not in parent or q not in parent: node = stack.pop() if node.left: parent[node.left] = node stack.append(node.left) if node.right: parent[node.right] = node stack.append(node.right) # 2.\u5148\u627e\u5230p\u7684\u6240\u6709\u7956\u5148\u7ed3\u70b9\u653e\u5165set ancestors = set() while p: ancestors.add(p) p = parent[p] # 3.\u5224\u65adq\u7684\u7956\u5148\u7ed3\u70b9\u662f\u5426\u662fp\u7684\u7956\u5148\u7ed3\u70b9 while q not in ancestors: q = parent[q] return def lowestCommonAncestor(self, root, p, q): if not root: return None parents = {root: None} stack = [root] while stack: node = stack.pop() if node.left: parents[node.left] = node stack.append(node.left) if node.right: parents[node.right] = node stack.append(node.right) left_set = set() while p: left_set.add(p) p = parents[p] while q: if q in left_set: return q else: q = parents[q] return None","title":"\u89e3\u6cd5\u4e8c \u5b57\u5178\u5b58\u50a8\u53cc\u4eb2\u7ed3\u70b9 + DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bfs_2","text":"\u7c7b\u4f3c\u89e3\u6cd5\u4e8c BFS\u904d\u5386\u5b58\u50a8\u6240\u6709\u7ed3\u70b9\u7684\u7d22\u5f15 \u4ece1\u5f00\u59cb \u7c7b\u7528\u7236\u4eb2\u7ed3\u70b9\u662f\u5b69\u5b50\u7ed3\u70b9\u76841/2\u6765\u5224\u65ad class Solution: def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode': tree = dict() # 1. BFS\u904d\u5386\u5b58\u50a8\u6240\u6709\u7ed3\u70b9\u7684\u7d22\u5f15 \u4ece1\u5f00\u59cb que = queue.Queue() que.put((root, 1)) p_index = -1 q_index = -1 while not que.empty(): node, index = que.get() if p == node: p_index = index elif q == node: q_index = index tree[index] = node if node.left: que.put((node.left, 2 * index)) if node.right: que.put((node.right, 2 * index + 1)) p_set = set() # 2.\u8ba1\u7b97\u6240\u6709p\u7684\u7956\u5148\u7ed3\u70b9\uff08\u5305\u62ec\u81ea\u5df1\uff09 while p_index: p_set.add(p_index) p_index = p_index >> 1 # 3. \u5224\u65adp q\u7684\u516c\u5171\u7956\u5148\u7ed3\u70b9 while q_index: if q_index in p_set: return tree[q_index] q_index= q_index >> 1","title":"\u89e3\u6cd5\u4e09  BFS + \u6811\u7d22\u5f15\u6027\u8d28"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_271","text":"","title":"\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2_7","text":"","title":"2. \u4e24\u6570\u76f8\u52a0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_272","text":"\u7ed9\u51fa\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\u7528\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5176\u4e2d\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u4f4d\u6570\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u5982\u679c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u52a0\u8d77\u6765\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u8868\u793a\u5b83\u4eec\u7684\u548c\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a(2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a7 -> 0 -> 8 \u539f\u56e0\uff1a342 + 465 = 807","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_273","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_274","text":"class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: jinwei = 0 head = None tail = None while l1 or l2: l1_val = l1.val if l1 else 0 l2_val = l2.val if l2 else 0 val = (l1_val + l2_val + jinwei) % 10 jinwei = (l1_val + l2_val + jinwei) // 10 if head: tail.next = ListNode(val) tail = tail.next else: head = ListNode(val) tail = head l1 = l1.next if l1 else l1 l2 = l2.next if l2 else l2 if jinwei: tail.next = ListNode(jinwei) return head","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_275","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#19-n","text":"","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_276","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c n = 2. \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5. \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_277","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_278","text":"class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode: f, cur, p = None, head, head for i in range(n): p = p.next if not p: return head.next while p: f = cur cur = cur.next p = p.next if cur and cur.next: f.next = cur.next elif cur: f.next = None return head","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_279","text":"class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode: \"\"\" \u8fb9\u754c\u6761\u4ef6: \u5220\u9664\u672b\u5c3e \"\"\" dummy = ListNode(0) dummy.next = head first, second = dummy, dummy while n + 1: first = first.next n -= 1 while first: first = first.next second = second.next second.next = second.next.next return dummy.next","title":"\u89e3\u6cd5\u4e8c \u63a8\u8350"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21_3","text":"","title":"21.\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_280","text":"\u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a1->2->4, 1->3->4 \u8f93\u51fa\uff1a1->1->2->3->4->4","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_281","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_282","text":"class Solution: def mergeTwoLists(self, l1, l2): dummy = ListNode(-1) prev = dummy while l1 and l2: if l1.val <= l2.val: prev.next = l1 l1 = l1.next else: prev.next = l2 l2 = l2.next prev = prev.next prev.next = l1 if l1 is not None else l2 return dummy.next","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_283","text":"class Solution: def mergeTwoLists(self, l1, l2): if l1 is None: return l2 elif l2 is None: return l1 elif l1.val < l2.val: l1.next = self.mergeTwoLists(l1.next, l2) return l1 else: l2.next = self.mergeTwoLists(l1, l2.next) return l2","title":"\u89e3\u6cd5\u4e8c \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#24","text":"","title":"24.\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_284","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u793a\u4f8b: \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_285","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_286","text":"# Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def swapPairs(self, head: ListNode) -> ListNode: if not head: return head dummy = ListNode(-1) dummy.next = head p = dummy while p.next and p.next.next: second = p.next.next p.next.next = second.next second.next = p.next p.next = second p = p.next.next return dummy.next","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_287","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#61","text":"","title":"61.\u65cb\u8f6c\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_288","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL, k = 2 \u8f93\u51fa: 4->5->1->2->3->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 5->1->2->3->4->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 4->5->1->2->3->NULL \u793a\u4f8b 2: \u8f93\u5165: 0->1->2->NULL, k = 4 \u8f93\u51fa: 2->0->1->NULL \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: 2->0->1->NULL \u5411\u53f3\u65cb\u8f6c 2 \u6b65: 1->2->0->NULL \u5411\u53f3\u65cb\u8f6c 3 \u6b65: 0->1->2->NULL \u5411\u53f3\u65cb\u8f6c 4 \u6b65: 2->0->1->NULL \u5728\u771f\u5b9e\u7684\u9762\u8bd5\u4e2d\u9047\u5230\u8fc7\u8fd9\u9053\u9898\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_289","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_290","text":"# Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def rotateRight(self, head: ListNode, k: int) -> ListNode: \"\"\" \u6cd5\u4e00 \u9006\u8f6c\u94fe\u8868 \u4e14\u628a\u524dk\u4e2a\u518d\u6b21\u9006\u8f6c, \u518d\u628a\u5269\u4e0b\u7684\u9006\u8f6c \u8fb9\u754c\u6761\u4ef6: k\u5927\u4e8e\u94fe\u8868\u957f\u5ea6 \"\"\" def getLength(head): cnt = 0 while head: cnt += 1 head = head.next return cnt if not head: return None # \u8ba1\u7b97\u957f\u5ea6 Len = getLength(head) k = k % Len first, second = head, head while k: first = first.next k -= 1 if not first: return head while first.next: first = first.next second = second.next first.next = head res = second.next second.next = None return res","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_291","text":"\u5148\u5c06\u94fe\u8868\u95ed\u5408\u6210\u73af \u627e\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u65ad\u5f00\u8fd9\u4e2a\u73af\uff0c\u786e\u5b9a\u65b0\u7684\u94fe\u8868\u5934\u548c\u94fe\u8868\u5c3e def rotateRight(self, head: 'ListNode', k: 'int') -> 'ListNode': # base cases if not head: return None if not head.next: return head # close the linked list into the ring old_tail = head n = 1 while old_tail.next: old_tail = old_tail.next n += 1 old_tail.next = head # find new tail : (n - k % n - 1)th node # and new head : (n - k % n)th node new_tail = head for i in range(n - k % n - 1): new_tail = new_tail.next new_head = new_tail.next # break the ring new_tail.next = None return new_head","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#86","text":"","title":"86.\u5206\u9694\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_292","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c x\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e x \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u4e4b\u524d\u3002 \u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002 \u793a\u4f8b: \u8f93\u5165: head = 1->4->3->2->5->2, x = 3 \u8f93\u51fa: 1->2->2->4->3->5","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_293","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_294","text":"class Solution(object): def partition(self, head, x): \"\"\" :type head: ListNode :type x: int :rtype: ListNode \"\"\" f_dummy, s_dummy = ListNode(-1), ListNode(-1) first, second = f_dummy, s_dummy while head: if head.val < x: first.next = head first = first.next else: second.next = head second = second.next head = head.next second.next = None first.next = s_dummy.next return f_dummy.next","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_295","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#92-ii","text":"","title":"92. \u53cd\u8f6c\u94fe\u8868 II [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#921","text":"\u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002 \u8bf4\u660e: 1 \u2264 m \u2264 n \u2264 \u94fe\u8868\u957f\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL, m = 2, n = 4 \u8f93\u51fa: 1->4->3->2->5->NULL","title":"92.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#922","text":"92.2.1 \u65b9\u6cd5\u4e00 \u7ef4\u62a4\u4e2a\u524d\u7ed3\u70b9 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def reverseBetween(self, head, m, n): \"\"\" :type head: ListNode :type m: int :type n: int :rtype: ListNode \"\"\" if not head: return head cur, prev = head, None while m > 1: prev = cur cur = cur.next m, n = m-1, n-1 tail, con = cur, prev while n: third = cur.next cur.next = prev prev = cur cur = third n -= 1 if con: con.next = prev else: head = prev tail.next = cur return head","title":"92.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#138","text":"","title":"138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_296","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488\uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002 \u8981\u6c42\u8fd4\u56de\u8fd9\u4e2a\u94fe\u8868\u7684\u6df1\u62f7\u8d1d\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a {\"$id\":\"1\",\"next\":{\"$id\":\"2\",\"next\":null,\"random\":{\"$ref\":\"2\"},\"val\":2},\"random\":{\"$ref\":\"2\"},\"val\":1} \u89e3\u91ca\uff1a \u8282\u70b9 1 \u7684\u503c\u662f 1\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u548c\u968f\u673a\u6307\u9488\u90fd\u6307\u5411\u8282\u70b9 2 \u3002 \u8282\u70b9 2 \u7684\u503c\u662f 2\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u6307\u5411 null\uff0c\u968f\u673a\u6307\u9488\u6307\u5411\u5b83\u81ea\u5df1\u3002 \u63d0\u793a\uff1a \u4f60\u5fc5\u987b\u8fd4\u56de\u7ed9\u5b9a\u5934\u7684\u62f7\u8d1d\u4f5c\u4e3a\u5bf9\u514b\u9686\u5217\u8868\u7684\u5f15\u7528\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_297","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_298","text":"\"\"\" # Definition for a Node. class Node: def __init__(self, val, next, random): self.val = val self.next = next self.random = random \"\"\" class Solution: def copyRandomList(self, head: 'Node') -> 'Node': if not head: return None node_index_dic = dict() index_node_dic = dict() cur = head i = 0 dummy = ListNode(-1) new_cur = dummy while cur: node_index_dic[cur] = i new_cur.next = ListNode(cur.val) cur = cur.next new_cur = new_cur.next index_node_dic[i] = new_cur i += 1 cur = head new_cur = dummy.next while cur: new_cur.random = index_node_dic[node_index_dic[cur.random]] if cur.random else None new_cur = new_cur.next cur = cur.next return dummy.next","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_299","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#141","text":"","title":"141. \u73af\u5f62\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_300","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002 \u5982\u679c pos \u662f -1\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [3,2,0,-4], pos = 1 \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1ahead = [1,2], pos = 0 \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1ahead = [1], pos = -1 \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u7528 O(1)\uff08\u5373\uff0c\u5e38\u91cf\uff09\u5185\u5b58\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_301","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_302","text":"def hasCycle(self, head: ListNode) -> bool: if not head: return False slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False","title":"\u89e3\u6cd5\u4e00 \u5feb\u6162\u6307\u9488"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_303","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#142-ii","text":"","title":"142. \u73af\u5f62\u94fe\u8868 II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_304","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de null\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002 \u5982\u679c pos \u662f -1\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002 \u8bf4\u660e\uff1a\u4e0d\u5141\u8bb8\u4fee\u6539\u7ed9\u5b9a\u7684\u94fe\u8868\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [3,2,0,-4], pos = 1 \u8f93\u51fa\uff1atail connects to node index 1 \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1ahead = [1,2], pos = 0 \u8f93\u51fa\uff1atail connects to node index 0 \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1ahead = [1], pos = -1 \u8f93\u51fa\uff1ano cycle \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6ca1\u6709\u73af","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_305","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_306","text":"class Solution: def detectCycle(self, head: ListNode) -> ListNode: if not head: return None slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break if not fast or not fast.next: return None fast = head while fast != slow: slow = slow.next fast = fast.next return fast","title":"\u89e3\u6cd5\u4e00 \u5feb\u6162\u6307\u9488"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_307","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#148","text":"","title":"148.\u6392\u5e8f\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_308","text":"\u5728 O(n log n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c \u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6 \uff08\u6ca1\u6cd5\u7528\u9012\u5f52\uff09\u4e0b\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\u3002 \u793a\u4f8b 1: \u8f93\u5165: 4->2->1->3 \u8f93\u51fa: 1->2->3->4 \u793a\u4f8b 2: \u8f93\u5165: -1->5->3->4->0 \u8f93\u51fa: -1->0->3->4->5","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_309","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_310","text":"# Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def sortList(self, head: ListNode) -> ListNode: \"\"\" \u5f52\u5e76 \"\"\" if not head or not head.next: return head # 1.\u8ba1\u7b97\u94fe\u8868\u957f\u5ea6 length = 0 p = head while p: p = p.next length += 1 # 2.\u628a\u539f\u59cb\u94fe\u8868\u5e73\u5747\u62c6\u5206\u6210\u4e24\u90e8\u5206 head1 = head head2 = head prev = None for _ in range(length//2): prev = head2 head2 = head2.next prev.next = None # 3.\u628a\u4e24\u90e8\u5206\u94fe\u8868\u9012\u5f52\u6392\u5e8f head1 = self.sortList(head1) head2 = self.sortList(head2) dummy = ListNode(-1) p = dummy # 4.\u5408\u5e76\u4e24\u4e2a\u94fe\u8868 while head1 and head2: if head1.val < head2.val: p.next = head1 head1 = head1.next else: p.next = head2 head2 = head2.next p = p.next if not head1: p.next = head2 if not head2: p.next = head1 return dummy.next","title":"\u89e3\u6cd5\u4e00 \u5f52\u5e76 \u5229\u7528\u4e86\u9012\u5f52 \u4e0d\u662f\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bottom-to-up","text":"","title":"\u89e3\u6cd5\u4e8c bottom-to-up\u5f52\u5e76 \u5e38\u6570\u7ea7\u7a7a\u95f4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#160","text":"","title":"160.\u76f8\u4ea4\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1601","text":"\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u5230\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002 \u5982\u4e0b\u9762\u7684\u4e24\u4e2a\u94fe\u8868 \uff1a \u5728\u8282\u70b9 c1 \u5f00\u59cb\u76f8\u4ea4\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1aintersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3 \u8f93\u51fa\uff1aReference of the node with value = 8 \u8f93\u5165\u89e3\u91ca\uff1a\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e3a 8 \uff08\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u5217\u8868\u76f8\u4ea4\u5219\u4e0d\u80fd\u4e3a 0\uff09\u3002\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [4,1,8,4,5]\uff0c\u94fe\u8868 B \u4e3a [5,0,1,8,4,5]\u3002\u5728 A \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 2 \u4e2a\u8282\u70b9\uff1b\u5728 B \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 3 \u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aintersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1 \u8f93\u51fa\uff1aReference of the node with value = 2 \u8f93\u5165\u89e3\u91ca\uff1a\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e3a 2 \uff08\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u5217\u8868\u76f8\u4ea4\u5219\u4e0d\u80fd\u4e3a 0\uff09\u3002\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [0,9,1,2,4]\uff0c\u94fe\u8868 B \u4e3a [3,2,4]\u3002\u5728 A \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 3 \u4e2a\u8282\u70b9\uff1b\u5728 B \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 1 \u4e2a\u8282\u70b9\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1aintersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2 \u8f93\u51fa\uff1anull \u8f93\u5165\u89e3\u91ca\uff1a\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [2,6,4]\uff0c\u94fe\u8868 B \u4e3a [1,5]\u3002\u7531\u4e8e\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5 intersectVal \u5fc5\u987b\u4e3a 0\uff0c\u800c skipA \u548c skipB \u53ef\u4ee5\u662f\u4efb\u610f\u503c\u3002 \u89e3\u91ca\uff1a\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\uff0c\u56e0\u6b64\u8fd4\u56de null\u3002 \u6ce8\u610f\uff1a \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de null . \u5728\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u4e24\u4e2a\u94fe\u8868\u4ecd\u987b\u4fdd\u6301\u539f\u6709\u7684\u7ed3\u6784\u3002 \u53ef\u5047\u5b9a\u6574\u4e2a\u94fe\u8868\u7ed3\u6784\u4e2d\u6ca1\u6709\u5faa\u73af\u3002 \u7a0b\u5e8f\u5c3d\u91cf\u6ee1\u8db3 O( n ) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e14\u4ec5\u7528 O( 1 ) \u5185\u5b58\u3002","title":"160.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1602","text":"","title":"160.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#approach-1-brute-force","text":"For each node ai in list A, traverse the entire list B and check if any node in list B coincides with ai. Complexity Analysis Time complexity : O(mn)O Space complexity : O(1)","title":"Approach 1: Brute Force"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#approach-2-hash-table","text":"Traverse list A and store the address / reference to each node in a hash set. Then check every node bi in list B: if biappears in the hash set, then bi is the intersection node. Complexity Analysis Time complexity : O(m+n) Space complexity : O(m) or O(n)","title":"Approach 2: Hash Table"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#approach-3-two-pointers-todo","text":"Maintain two pointers pA and pB initialized at the head of A and B, respectively. Then let them both traverse through the lists, one node at a time. When pA reaches the end of a list, then redirect it to the head of B (yes, B, that's right.); similarly when pB reaches the end of a list, redirect it the head of A. If at any point pA meets pB, then pA/pB is the intersection node. To see why the above trick would work, consider the following two lists: A = {1,3,5,7,9,11} and B = {2,4,9,11}, which are intersected at node '9'. Since B.length (=4) < A.length (=6), pB would reach the end of the merged list first, because pB traverses exactly 2 nodes less than pA does. By redirecting pB to head A, and pA to head B, we now ask pB to travel exactly 2 more nodes than pA would. So in the second iteration, they are guaranteed to reach the intersection node at the same time. If two lists have intersection, then their last nodes must be the same one. So when pA/pB reaches the end of a list, record the last element of A/B respectively. If the two last elements are not the same one, then the two lists have no intersections. Complexity Analysis Time complexity : O(m+n) Space complexity : O(1) \u6211\u53d1\u73b0\u5927\u591a\u6570\u89e3\u51b3\u65b9\u6848\u5728\u8fd9\u91cc\u9884\u5904\u7406\u94fe\u63a5\u5217\u8868\u4ee5\u83b7\u5f97len\u7684\u5dee\u5f02\u3002 \u5b9e\u9645\u4e0a\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u5dee\u5f02\u7684\u201c\u4ef7\u503c\u201d\uff0c\u6211\u4eec\u53ea\u60f3\u786e\u4fdd\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u5230\u8fbe\u4ea4\u53c9\u70b9\u8282\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u6b21\u8fed\u4ee3\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u5230\u8fbe\u5c3e\u8282\u70b9\u4e4b\u540e\u5c06\u4e00\u4e2a\u94fe\u8868\u7684\u6307\u9488\u91cd\u7f6e\u5230\u53e6\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u3002\u5728\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u76f4\u5230\u5b83\u4eec\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\u3002\u6211\u4eec\u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\u7684\u64cd\u4f5c\u5c06\u5e2e\u52a9\u6211\u4eec\u62b5\u6d88\u5dee\u5f02\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u76f8\u4ea4\uff0c\u5219\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\u7684\u4f1a\u5408\u70b9\u5fc5\u987b\u662f\u4ea4\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\u7684\u4f1a\u8bae\u6307\u9488\u5fc5\u987b\u662f\u4e24\u4e2a\u5217\u7684\u5c3e\u8282\u70b9\uff0c\u5373null # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def getIntersectionNode(self, headA, headB): \"\"\" 1.\u8ba1\u7b97\u6bcf\u4e2a\u94fe\u8868\u957f\u5ea6, \u8ba1\u7b97\u94fe\u8868\u957f\u5ea6\u5dee\u503c, \u957f\u94fe\u8868\u5148\u8d70\u5dee\u503c\u6b65 tO(m+n) sO(1) 2.\u904d\u5386\u4e00\u4e2a\u94fe\u8868, \u653e\u5165map\u4e2d, \u53e6\u4e00\u4e2a\u7ed3\u70b9\u904d\u5386\u5224\u65ad\u662f\u5426\u5728map\u4e2d tO(m+n) sO(m) 3.\u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u5230\u8fbe\u5c3e\u8282\u70b9\u4e4b\u540e\u5c06\u4e00\u4e2a\u94fe\u8868\u7684\u6307\u9488\u91cd\u7f6e\u5230\u53e6\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u3002\u5728\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u76f4\u5230\u5b83\u4eec\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\u3002 tO(m+n) sO(1) \"\"\" if not headA or not headB: return pa = headA pb = headB while pa != pb: pa = pa.next if pa else headB pb = pb.next if pb else headA return pa","title":"Approach 3: Two Pointers [todo]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_311","text":"\u8ba1\u7b97\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6 \u628a\u957f\u94fe\u8868\u53bb\u6389\u957f\u5ea6\u5dee # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def getIntersectionNode(self, headA, headB): \"\"\" :type head1, head1: ListNode :rtype: ListNode \u601d\u8def1: set \u601d\u8def2: \u8ba1\u7b97\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6 \u628a\u957f\u94fe\u8868\u53bb\u6389\u957f\u5ea6\u5dee \"\"\" if not headA or not headB: return None def cal_len(head): linked_len = 0 while head: head = head.next linked_len = linked_len + 1 return linked_len def move_n_forward(head, n): for i in range(n): head = head.next return head if not headA or not headB: return None lenA = cal_len(headA) lenB = cal_len(headB) if lenA < lenB: headB = move_n_forward(headB, lenB - lenA) else: headA = move_n_forward(headA, lenA - lenB) while headA and headB: if headA is headB: return headA headA = headA.next headB = headB.next return None","title":"\u65b9\u6cd5\u56db [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#206","text":"","title":"206.\u53cd\u8f6c\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2061","text":"\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u8fdb\u9636: \u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f","title":"206.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2062","text":"","title":"206.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#20621","text":"class Solution(object): def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" new_head = None while head: tmp = head head = head.next tmp.next = new_head new_head = tmp return new_head","title":"206.2.1 \u65b9\u6cd5\u4e00  \u8fed\u4ee3"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#20622","text":"public ListNode reverseList(ListNode head) { if (head == null || head.next == null) return head; ListNode p = reverseList(head.next); head.next.next = head; head.next = null; return p; }","title":"206.2.2 \u65b9\u6cd5\u4e8c \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#234","text":"","title":"234.\u56de\u6587\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_312","text":"\u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2 \u8f93\u51fa: false \u793a\u4f8b 2: \u8f93\u5165: 1->2->2->1 \u8f93\u51fa: true \u8fdb\u9636\uff1a \u4f60\u80fd\u5426\u7528 O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_313","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_314","text":"# Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def isPalindrome(self, head: ListNode) -> bool: \"\"\" \u524d\u534a\u90e8\u5206\u94fe\u8868\u9006\u5e8f \u4e4b\u540e\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u5f00\u59cb\u548c\u4e2d\u95f4 \u6216\u8005\u5feb\u6162\u6307\u9488\u627e\u4e2d\u70b9 \"\"\" # 1.\u8ba1\u7b97\u94fe\u8868\u957f\u5ea6 p = head Len = 0 while p: Len += 1 p = p.next cnt = (Len + 1) // 2 # 2.\u524d\u534a\u90e8\u5206\u9006\u5e8f p = head new_head = None while p and cnt: temp = p.next p.next = new_head new_head = p p = temp cnt -= 1 # 3.\u5bf9\u6bd4\u4e24\u7aef\u94fe\u8868 if Len & 1: new_head = new_head.next while new_head and p and new_head.val == p.val: new_head = new_head.next p = p.next if not new_head and not p: return True return False","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_315","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#328","text":"","title":"328.\u5947\u5076\u94fe\u8868 [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_316","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002 \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 1->3->5->2->4->NULL \u793a\u4f8b 2: \u8f93\u5165: 2->1->3->5->6->4->7->NULL \u8f93\u51fa: 2->3->6->7->1->5->4->NULL \u8bf4\u660e: \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_317","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_318","text":"class Solution: def oddEvenList(self, head: ListNode) -> ListNode: if not head or not head.next: return head odd = head even_head = head.next even = even_head while even and even.next: odd.next = even.next odd = odd.next even.next = odd.next even = even.next odd.next = even_head return head","title":"\u89e3\u6cd5\u4e00 \u53cc\u6307\u9488\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_319","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_320","text":"","title":"\u6808"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#155","text":"","title":"155.\u6700\u5c0f\u6808"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_321","text":"\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push\uff0cpop\uff0ctop \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002 push(x) -- \u5c06\u5143\u7d20 x \u63a8\u5165\u6808\u4e2d\u3002 pop() -- \u5220\u9664\u6808\u9876\u7684\u5143\u7d20\u3002 top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20\u3002 getMin() -- \u68c0\u7d22\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u793a\u4f8b: MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --> \u8fd4\u56de -3. minStack.pop(); minStack.top(); --> \u8fd4\u56de 0. minStack.getMin(); --> \u8fd4\u56de -2.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_322","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_323","text":"class MinStack: def __init__(self): \"\"\" initialize your data structure here. \"\"\" self.stack = [] self.min_stack = [] def push(self, x: int) -> None: self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) else: self.min_stack.append(self.min_stack[-1]) def pop(self) -> None: self.stack.pop() self.min_stack.pop() def top(self) -> int: return self.stack[-1] def getMin(self) -> int: return self.min_stack[-1]","title":"\u89e3\u6cd5\u4e00 \u8f85\u52a9\u6700\u5c0f\u6808"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_324","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#227ii","text":"","title":"227.\u57fa\u672c\u8ba1\u7b97\u5668II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_325","text":"\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u8ba1\u7b97\u5668\u6765\u8ba1\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u4ec5\u5305\u542b\u975e\u8d1f\u6574\u6570\uff0c+\uff0c - \uff0c*\uff0c/ \u56db\u79cd\u8fd0\u7b97\u7b26\u548c\u7a7a\u683c \u3002 \u6574\u6570\u9664\u6cd5\u4ec5\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"3+2*2\" \u8f93\u51fa: 7 \u793a\u4f8b 2: \u8f93\u5165: \" 3/2 \" \u8f93\u51fa: 1 \u793a\u4f8b 3: \u8f93\u5165: \" 3+5 / 2 \" \u8f93\u51fa: 5 \u8bf4\u660e\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u6709\u6548\u7684\u3002 \u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684\u5e93\u51fd\u6570 eval\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_326","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_327","text":"class Solution: def calculate(self, s: str) -> int: \"\"\" 1.\u4e3a\u4ec0\u4e48\u4f1a\u6709\u7a7a\u683c 2.stack 3.\u4e58\u9664\u4f18\u5148\u7ea7\u9ad8 \u53ef\u4ee5\u5148\u6309\u7167\u7b26\u53f7 split \"\"\" def is_number(c): return c >= '0' and c <= '9' stack = [] sign_stack = [] signs = {'+', '-', '*', '/'} ans = 0 for i, c in enumerate(s): if c == ' ': continue elif c in signs: sign_stack.append(c) else: if i > 0 and is_number(s[i - 1]): stack[-1] = stack[-1] * 10 + int(c) else: stack.append(int(c)) if i + 1 < len(s) and is_number(s[i + 1]): continue if sign_stack and sign_stack[-1] in {'*', '/'}: num2 = stack.pop() num1 = stack.pop() op = sign_stack.pop() if op == '*': stack.append(num1 * num2) else: stack.append(num1 // num2) ans = stack[0] for i in range(len(sign_stack)): if sign_stack[i] == '+': ans += stack[i+1] elif sign_stack[i] == '-': ans -= stack[i+1] return ans","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_328","text":"\u5148\u6309\u7167\u52a0\u51cfsplit, \u5269\u4e0b\u5c31\u5269\u4e58\u6cd5\u9664\u6cd5\u7684\u5148\u6309\u6b21\u5e8f\u7b97\u597d\u4e86\u3002\u518d\u56de\u5230\u5faa\u73af\u7d2f\u51cf\u518d\u7d2f\u52a0\u5c31\u597d\u4e86 import re class Solution: def calculate(self, s: str) -> int: \"\"\" \u5148\u52a0\u51cfsplit \u518d\u4e58\u9664 \"\"\" ss = re.split(\"[+-]\", s) add_plus = re.sub(\"[^+-]\", \"\", s) res = 0 for i in range(len(ss)): sss = re.split(\"[*/]\", ss[i]) mul_div = re.sub(\"[^*/]\", \"\", ss[i]) c = 0 for j in range(len(sss)): if j == 0: c = int(sss[j]) else: if mul_div[j - 1] == '*': c *= int(sss[j]) else: c //= int(sss[j]) if i == 0: res = c else: if add_plus[i - 1] == '+': res += c else: res -= c return res","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#232","text":"","title":"232. \u7528\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2321","text":"\u4f7f\u7528\u6808\u5b9e\u73b0\u961f\u5217\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a push(x) -- \u5c06\u4e00\u4e2a\u5143\u7d20\u653e\u5165\u961f\u5217\u7684\u5c3e\u90e8\u3002 pop() -- \u4ece\u961f\u5217\u9996\u90e8\u79fb\u9664\u5143\u7d20\u3002 peek() -- \u8fd4\u56de\u961f\u5217\u9996\u90e8\u7684\u5143\u7d20\u3002 empty() -- \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u3002 \u793a\u4f8b: MyQueue queue = new MyQueue(); queue.push(1); queue.push(2); queue.peek(); // \u8fd4\u56de 1 queue.pop(); // \u8fd4\u56de 1 queue.empty(); // \u8fd4\u56de false \u8bf4\u660e: \u4f60\u53ea\u80fd\u4f7f\u7528\u6807\u51c6\u7684\u6808\u64cd\u4f5c -- \u4e5f\u5c31\u662f\u53ea\u6709 push to top , peek/pop from top , size , \u548c is empty \u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u6808\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u6808\uff0c\u53ea\u8981\u662f\u6807\u51c6\u7684\u6808\u64cd\u4f5c\u5373\u53ef\u3002 \u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 peek \u64cd\u4f5c\uff09\u3002","title":"232.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2322","text":"class MyQueue(object): def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.stack = [] def push(self, x): \"\"\" Push element x to the back of queue. :type x: int :rtype: None \"\"\" tmp = self.stack[::-1] tmp.append(x) self.stack = tmp[::-1] def pop(self): \"\"\" Removes the element from in front of queue and returns that element. :rtype: int \u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 peek \u64cd\u4f5c\uff09 \"\"\" return self.stack.pop() def peek(self): \"\"\" Get the front element. :rtype: int \u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 peek \u64cd\u4f5c\uff09 \"\"\" return self.stack[-1] def empty(self): \"\"\" Returns whether the queue is empty. :rtype: bool \"\"\" return len(self.stack) == 0 # Your MyQueue object will be instantiated and called as such: # obj = MyQueue() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.peek() # param_4 = obj.empty() class MyQueue: def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.stack = [] self.asstack = [] def push(self, x: int) -> None: \"\"\" Push element x to the back of queue. \"\"\" while self.stack: self.asstack.append(self.stack.pop()) self.stack.append(x) while self.asstack: self.stack.append(self.asstack.pop()) def pop(self) -> int: \"\"\" Removes the element from in front of queue and returns that element. \"\"\" if self.stack: return self.stack.pop() def peek(self) -> int: \"\"\" Get the front element. \"\"\" if self.stack: return self.stack[-1] def empty(self) -> bool: \"\"\" Returns whether the queue is empty. \"\"\" return self.stack == [] # Your MyQueue object will be instantiated and called as such: # obj = MyQueue() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.peek() # param_4 = obj.empty()","title":"232.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_329","text":"","title":"\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#96","text":"","title":"96.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#961","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u6c42\u4ee5 1 ... n \u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u591a\u5c11\u79cd\uff1f \u793a\u4f8b: \u8f93\u5165: 3 \u8f93\u51fa: 5 \u89e3\u91ca: \u7ed9\u5b9a n = 3, \u4e00\u5171\u6709 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811: 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3","title":"96.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#962","text":"","title":"96.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#9621-dp","text":"\u7ed3\u9898\u601d\u8def\uff1a\u5047\u8bben\u4e2a\u8282\u70b9\u5b58\u5728\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u4e2a\u6570\u662fG(n)\uff0c1\u4e3a\u6839\u8282\u70b9\uff0c2\u4e3a\u6839\u8282\u70b9\uff0c...\uff0cn\u4e3a\u6839\u8282\u70b9\uff0c\u5f531\u4e3a\u6839\u8282\u70b9\u65f6\uff0c\u5176\u5de6\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e3a0\uff0c\u53f3\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e3an-1\uff0c\u540c\u7406\u5f532\u4e3a\u6839\u8282\u70b9\u65f6\uff0c\u5176\u5de6\u5b50\u6811\u8282\u70b9\u4e2a\u6570\u4e3a1\uff0c\u53f3\u5b50\u6811\u8282\u70b9\u4e3an-2\uff0c\u6240\u4ee5\u53ef\u5f97G(n) = G(0) G(n-1)+G(1) (n-2)+...+G(n-1)*G(0) class Solution: def numTrees(self, n: int) -> int: dp = [0] * (n+1) dp[0], dp[1] = 1, 1 for i in range(2, n+1): for j in range(1, i+1): dp[i] += dp[j-1]*dp[i-j] return dp[n]","title":"96.2.1 \u65b9\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#98","text":"","title":"98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_330","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 / \\ 1 3 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: 5 / \\ 1 4 / \\ 3 6 \u8f93\u51fa: false \u89e3\u91ca: \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002 \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_331","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_332","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def isValidBST(self, root: TreeNode) -> bool: # \u6807\u8bb0\u6821\u9a8c\u4e0d\u901a\u8fc7\u7684\u60c5\u51b5 minValue = float('-inf') # \u68c0\u9a8c\u662f\u5426\u662f\u4e8c\u53c9\u641c\u7d22\u6811 \u82e5\u662f\u8fd4\u56de\u6700\u5c0f\u6700\u5927\u503c \u82e5\u4e0d\u662f\u8fd4\u56de(minValue, minValue) def helper(root): if not root: return None, None lmin, lmax = helper(root.left) if lmin == minValue: return minValue, minValue if lmin != None and lmax >= root.val: return minValue, minValue rmin, rmax = helper(root.right) if rmin == minValue: return minValue, minValue if rmin != None and rmin <= root.val: return minValue, minValue return lmin if lmin else root.val, rmax if rmax else root.val if not root: return True return helper(root) != (minValue, minValue)","title":"\u89e3\u6cd5\u4e00 \u6700\u5c0f\u6700\u5927\u503c\u8f85\u52a9\u51fd\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_333","text":"\u4e2d\u5e8f\u904d\u5386 + \u4e8c\u53c9\u641c\u7d22\u6811 == \u6709\u5e8f class Solution: def isValidBST(self, root: TreeNode) -> bool: def inorder(root): if root: inorder(root.left) arr.append(root.val) inorder(root.right) arr = [] inorder(root) for i in range(1, len(arr)): if arr[i] <= arr[i-1]: return False return True # \u975e\u9012\u5f52\u7248 def isValidBST(self, root: TreeNode) -> bool: arr = [] stack = [] while stack or root: if root: stack.append(root) root = root.left else: root = stack.pop() arr.append(root.val) root = root.right for i in range(1, len(arr)): if arr[i] <= arr[i-1]: return False return True","title":"\u89e3\u6cd5\u4e8c \u4e2d\u5e8f\u904d\u5386"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_334","text":"class Solution: def isValidBST(self, root: TreeNode) -> bool: # \u9a8c\u8bc1\u8fd9\u4e2a\u4e8c\u53c9\u5e73\u8861\u6811(\u5b50\u6811)\u7684\u8303\u56f4 def isValidBST(root, minVal, maxVal): if not root: return True if root.val >= maxVal or root.val <= minVal: return False return isValidBST(root.left, minVal, root.val) and isValidBST(root.right, root.val, maxVal) return isValidBST(root, float('-inf'), float('inf'))","title":"\u89e3\u6cd5\u4e09 \u533a\u95f4\u9a8c\u8bc1"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#102","text":"","title":"102.\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_335","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u6309\u5c42\u6b21\u904d\u5386\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002 \u4f8b\u5982: \u7ed9\u5b9a\u4e8c\u53c9\u6811: [3,9,20,null,null,15,7], 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a [ [3], [9,20], [15,7] ]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_336","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_337","text":"\u5c42\u6b21\u904d\u5386\u7684\u6539\u8fdb \u589e\u52a0\u4e86\u6811\u6df1\u5ea6 class Solution: def levelOrder(self, root: TreeNode) -> List[List[int]]: if not root: return [] que = [] que.append((root, 0)) ans = [] while que: node, depth = que[0] que = que[1:] if depth == len(ans): ans.append([]) ans[depth].append(node.val) if node.left: que.append((node.left, depth+1)) if node.right: que.append((node.right, depth+1)) return ans","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_338","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#103","text":"","title":"103.\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_339","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386\u3002\uff08\u5373\u5148\u4ece\u5de6\u5f80\u53f3\uff0c\u518d\u4ece\u53f3\u5f80\u5de6\u8fdb\u884c\u4e0b\u4e00\u5c42\u904d\u5386\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u4ea4\u66ff\u8fdb\u884c\uff09\u3002 \u4f8b\u5982\uff1a \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7], 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386\u5982\u4e0b\uff1a [ [3], [20,9], [15,7] ]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_340","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_341","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None import queue class Solution: def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]: \"\"\" \u5148\u5c42\u6b21\u904d\u5386 \u5728\u9006\u8f6c\u5947\u6570\u7d22\u5f15\u7684\u6570\u7ec4 \"\"\" def reverse(lst): return lst[::-1] if not root: return [] ans = [] que = queue.Queue() que.put((root, 0)) while not que.empty(): root, ls = que.get() if ls == len(ans): ans.append([]) ans[ls].append(root.val) if root.left: que.put((root.left, ls + 1)) if root.right: que.put((root.right, ls + 1)) # \u9006\u8f6c\u5947\u6570\u7d22\u5f15\u6570\u7ec4 for i in range(1, len(ans), 2): ans[i] = reverse(ans[i]) return ans","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_342","text":"class Solution { public List<List<Integer>> zigzagLevelOrder(TreeNode root) { List<List<Integer>> result = new ArrayList<>(); if (root == null) return result; Queue<TreeNode> queue = new LinkedList<>(); queue.add(root); // \u8bb0\u5f55\u662f\u5426\u53cd\u8f6c boolean isReverse = false; while (!queue.isEmpty()) { LinkedList<Integer> oneLevel = new LinkedList<>(); // \u6bcf\u6b21\u90fd\u53d6\u51fa\u4e00\u5c42\u7684\u6240\u6709\u6570\u636e int count = queue.size(); for (int i = 0; i < count; i++) { TreeNode node = queue.poll(); if (!isReverse) oneLevel.add(node.val); else oneLevel.addFirst(node.val); if (node.left != null) queue.add(node.left); if (node.right != null) queue.add(node.right); } isReverse = !isReverse; result.add(oneLevel); } return result; } }","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#105","text":"","title":"105.\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_343","text":"\u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u524d\u5e8f\u904d\u5386 preorder = [3,9,20,15,7] \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_344","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_345","text":"class Solution(object): def buildTree(self, preorder, inorder): \"\"\" :type preorder: List[int] :type inorder: List[int] :rtype: TreeNode \"\"\" if len(inorder) == 0: return None # \u524d\u5e8f\u904d\u5386\u7b2c\u4e00\u4e2a\u503c\u4e3a\u6839\u8282\u70b9 root = TreeNode(preorder[0]) # \u56e0\u4e3a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6839\u636e\u503c\u6765\u67e5\u627e\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e mid = inorder.index(preorder[0]) # \u6784\u5efa\u5de6\u5b50\u6811 root.left = self.buildTree(preorder[1:mid+1], inorder[:mid]) # \u6784\u5efa\u53f3\u5b50\u6811 root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:]) return root","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_346","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#106","text":"","title":"106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_347","text":"\u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002 \u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u540e\u5e8f\u904d\u5386 postorder = [9,15,7,20,3] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_348","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_349","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode: if not inorder or not postorder: return None root = TreeNode(postorder[-1]) mid = inorder.index(postorder[-1]) root.left = self.buildTree(inorder[:mid], postorder[: mid]) root.right = self.buildTree(inorder[mid + 1:], postorder[mid: -1]) return root","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_350","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#110_1","text":"","title":"110.\u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1101_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a \u4e00\u4e2a\u4e8c\u53c9\u6811 \u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7] 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de true \u3002 \u793a\u4f8b 2: \u7ed9\u5b9a\u4e8c\u53c9\u6811 [1,2,2,3,3,null,null,4,4] 1 / \\ 2 2 / \\ 3 3 / \\ 4 4 \u8fd4\u56de false \u3002","title":"110.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1102_1","text":"This problem is generally believed to have two solutions: the top down approach and the bottom up way.","title":"110.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#11021_1","text":"The second method is based on DFS. Instead of calling depth() explicitly for each child node, we return the height of the current node in DFS recursion. When the sub tree of the current node (inclusive) is balanced, the function dfsHeight() returns a non-negative value as the height. Otherwise -1 is returned. According to the leftHeight and rightHeight of the two children, the parent node could check if the sub tree is balanced, and decides its return value. # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def isBalanced(self, root: TreeNode) -> bool: def treeHelper(sub_node): \"\"\" \u5982\u679c\u8be5\u5b50\u6811\u662fbalanced_tree \u8fd4\u56de\u6811\u7684\u9ad8\u5ea6 \u5426\u5219\u8fd4\u56de-1 \"\"\" if not sub_node: return 0 left_height = treeHelper(sub_node.left) if left_height == -1: return -1 right_height = treeHelper(sub_node.right) if right_height == -1: return -1 return max(left_height, right_height)+1 if abs(left_height-right_height) <= 1 else -1 return if treeHelper(root) != -1","title":"110.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52 \u81ea\u5e95\u5411\u4e0a"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#11022","text":"The first method checks whether the tree is balanced strictly according to the definition of balanced binary tree: the difference between the heights of the two sub trees are not bigger than 1, and both the left sub tree and right sub tree are also balanced. With the helper function depth(), we could easily write the code; For the current node root, calling depth() for its left and right children actually has to access all of its children, thus the complexity is O(N). We do this for each node in the tree, so the overall complexity of isBalanced will be O(N^2)\u274c. This is a top down approach. class solution { public: int depth (TreeNode *root) { if (root == NULL) return 0; return max (depth(root -> left), depth (root -> right)) + 1; } bool isBalanced (TreeNode *root) { if (root == NULL) return true; int left=depth(root->left); int right=depth(root->right); return abs(left - right) <= 1 && isBalanced(root->left) && isBalanced(root->right); } };","title":"110.2.2 \u9012\u5f52 \u81ea\u9876\u5411\u4e0b"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#114","text":"","title":"114. \u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_351","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u539f\u5730\u5c06\u5b83\u5c55\u5f00\u4e3a\u94fe\u8868\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e8c\u53c9\u6811 \u200b 1 / \\ 2 5 / \\ \\ 3 4 6 \u5c06\u5176\u5c55\u5f00\u4e3a\uff1a 1 \\ 2 \\ 3 \\ 4 \\ 5 \\ 6","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_352","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_353","text":"class Solution: def flatten(self, root: TreeNode) -> None: if not root: return right = root.right left = root.left self.flatten(root.left) self.flatten(right) root.right = left p = root while p.right: p = p.right p.right = right root.left = None","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_354","text":"","title":"\u89e3\u6cd5\u4e8c \u524d\u5e8f\u904d\u5386"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#116","text":"","title":"116. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_355","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u5176\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\uff0c\u6bcf\u4e2a\u7236\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u3002\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a struct Node { int val; Node left; Node right; Node *next; } \u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u8ba9\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u3002\u5982\u679c\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5219\u5c06 next \u6307\u9488\u8bbe\u7f6e\u4e3a NULL\u3002 \u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6240\u6709 next \u6307\u9488\u90fd\u88ab\u8bbe\u7f6e\u4e3a NULL\u3002 \u8f93\u5165\uff1a{\"$id\":\"1\",\"left\":{\"$id\":\"2\",\"left\":{\"$id\":\"3\",\"left\":null,\"next\":null,\"right\":null,\"val\":4},\"next\":null,\"right\":{\"$id\":\"4\",\"left\":null,\"next\":null,\"right\":null,\"val\":5},\"val\":2},\"next\":null,\"right\":{\"$id\":\"5\",\"left\":{\"$id\":\"6\",\"left\":null,\"next\":null,\"right\":null,\"val\":6},\"next\":null,\"right\":{\"$id\":\"7\",\"left\":null,\"next\":null,\"right\":null,\"val\":7},\"val\":3},\"val\":1} \u8f93\u51fa\uff1a{\"$id\":\"1\",\"left\":{\"$id\":\"2\",\"left\":{\"$id\":\"3\",\"left\":null,\"next\":{\"$id\":\"4\",\"left\":null,\"next\":{\"$id\":\"5\",\"left\":null,\"next\":{\"$id\":\"6\",\"left\":null,\"next\":null,\"right\":null,\"val\":7},\"right\":null,\"val\":6},\"right\":null,\"val\":5},\"right\":null,\"val\":4},\"next\":{\"$id\":\"7\",\"left\":{\"$ref\":\"5\"},\"next\":null,\"right\":{\"$ref\":\"6\"},\"val\":3},\"right\":{\"$ref\":\"4\"},\"val\":2},\"next\":null,\"right\":{\"$ref\":\"7\"},\"val\":1} \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4e8c\u53c9\u6811\u5982\u56fe A \u6240\u793a\uff0c\u4f60\u7684\u51fd\u6570\u5e94\u8be5\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u4ee5\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5982\u56fe B \u6240\u793a\u3002 \u63d0\u793a\uff1a \u4f60\u53ea\u80fd\u4f7f\u7528\u5e38\u91cf\u7ea7\u989d\u5916\u7a7a\u95f4\u3002 \u4f7f\u7528\u9012\u5f52\u89e3\u9898\u4e5f\u7b26\u5408\u8981\u6c42\uff0c\u672c\u9898\u4e2d\u9012\u5f52\u7a0b\u5e8f\u5360\u7528\u7684\u6808\u7a7a\u95f4\u4e0d\u7b97\u505a\u989d\u5916\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_356","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bfs_3","text":"\"\"\" # Definition for a Node. class Node: def __init__(self, val, left, right, next): self.val = val self.left = left self.right = right self.next = next \"\"\" import queue class Solution: def connect(self, root: 'Node') -> 'Node': \"\"\" BFS\u904d\u5386 \u5b58\u50a8\u4e0a\u4e00\u4e2a\u904d\u5386\u7684\u7ed3\u70b9 \"\"\" if not root: return root que = queue.Queue() que.put((root, 0)) last = None last_l = -1 while not que.empty(): node, ls = que.get() if ls != last_l: last_l = ls else: last.next = node last = node if node.left: que.put((node.left, ls + 1)) if node.right: que.put((node.right, ls + 1)) return root","title":"\u89e3\u6cd5\u4e00 BFS \u672a\u6ee1\u8db3\u5e38\u91cf\u7ea7\u8f85\u52a9\u7a7a\u95f4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_357","text":"\"\"\" # Definition for a Node. class Node: def __init__(self, val, left, right, next): self.val = val self.left = left self.right = right self.next = next \"\"\" class Solution: def connect(self, root: 'Node') -> 'Node': if not root: return None leftT = self.connect(root.left) rightT = self.connect(root.right) while leftT and rightT: leftT.next = rightT leftT = leftT.right if leftT.right else leftT.left rightT = rightT.left if rightT.left else rightT.right return root","title":"\u89e3\u6cd5\u4e8c \u5206\u6cbb\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_358","text":"\"\"\" # Definition for a Node. class Node: def __init__(self, val, left, right, next): self.val = val self.left = left self.right = right self.next = next \"\"\" import queue class Solution: def connect(self, root: 'Node') -> 'Node': # \u6ce8\u610f\u9898\u76ee\u5b8c\u7f8e\u4e8c\u53c9\u6811 \u6240\u6709\u5c42\u90fd\u662f\u6ee1\u7684 layer_start_node = root while layer_start_node: p = layer_start_node # \u5904\u7406\u4e00\u5c42\u7684\u7ed3\u70b9 \u4ece\u8fd9\u4e00\u5c42\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u5904\u7406\u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 while p: if p.left: p.left.next = p.right if p.right and p.next: p.right.next = p.next.left p = p.next # \u8df3\u5230\u4e0b\u4e00\u5c42 layer_start_node = layer_start_node.left return root","title":"\u89e3\u6cd5\u4e09 \u975e\u9012\u5f52\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#117-ii","text":"","title":"117. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_359","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811 struct Node { int val; Node left; Node right; Node *next; } \u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u8ba9\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u3002\u5982\u679c\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5219\u5c06 next \u6307\u9488\u8bbe\u7f6e\u4e3a NULL\u3002 \u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6240\u6709 next \u6307\u9488\u90fd\u88ab\u8bbe\u7f6e\u4e3a NULL\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a{\"$id\":\"1\",\"left\":{\"$id\":\"2\",\"left\":{\"$id\":\"3\",\"left\":null,\"next\":null,\"right\":null,\"val\":4},\"next\":null,\"right\":{\"$id\":\"4\",\"left\":null,\"next\":null,\"right\":null,\"val\":5},\"val\":2},\"next\":null,\"right\":{\"$id\":\"5\",\"left\":null,\"next\":null,\"right\":{\"$id\":\"6\",\"left\":null,\"next\":null,\"right\":null,\"val\":7},\"val\":3},\"val\":1} \u8f93\u51fa\uff1a{\"$id\":\"1\",\"left\":{\"$id\":\"2\",\"left\":{\"$id\":\"3\",\"left\":null,\"next\":{\"$id\":\"4\",\"left\":null,\"next\":{\"$id\":\"5\",\"left\":null,\"next\":null,\"right\":null,\"val\":7},\"right\":null,\"val\":5},\"right\":null,\"val\":4},\"next\":{\"$id\":\"6\",\"left\":null,\"next\":null,\"right\":{\"$ref\":\"5\"},\"val\":3},\"right\":{\"$ref\":\"4\"},\"val\":2},\"next\":null,\"right\":{\"$ref\":\"6\"},\"val\":1} \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4e8c\u53c9\u6811\u5982\u56fe A \u6240\u793a\uff0c\u4f60\u7684\u51fd\u6570\u5e94\u8be5\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u4ee5\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5982\u56fe B \u6240\u793a\u3002 \u63d0\u793a\uff1a \u4f60\u53ea\u80fd\u4f7f\u7528\u5e38\u91cf\u7ea7\u989d\u5916\u7a7a\u95f4\u3002 \u4f7f\u7528\u9012\u5f52\u89e3\u9898\u4e5f\u7b26\u5408\u8981\u6c42\uff0c\u672c\u9898\u4e2d\u9012\u5f52\u7a0b\u5e8f\u5360\u7528\u7684\u6808\u7a7a\u95f4\u4e0d\u7b97\u505a\u989d\u5916\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_360","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_361","text":"\"\"\" # Definition for a Node. class Node: def __init__(self, val, left, right, next): self.val = val self.left = left self.right = right self.next = next \"\"\" class Solution: def connect(self, root: 'Node') -> 'Node': \"\"\" \u5c42\u5e8f\u904d\u5386 \u4f46\u8fdd\u53cd\u7a7a\u95f4\u9650\u5236 \u5c42\u5e8f\u904d\u5386\u53d8\u79cd \u6bcf\u5c42\u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf(\u76f8\u5f53\u4e8e\u6bcf\u5c42\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868) \"\"\" head = root while head: layer_head = Node(-1) layer_tail = layer_head node = head while node: if node.left: layer_tail.next = node.left layer_tail = layer_tail.next if node.right: layer_tail.next = node.right layer_tail = layer_tail.next node = node.next head = layer_head.next return root","title":"\u89e3\u6cd5\u4e00 \u5c42\u6b21\u94fe\u8868\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_362","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#129","text":"","title":"129. \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_363","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u653e\u4e00\u4e2a 0-9 \u7684\u6570\u5b57\uff0c\u6bcf\u6761\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 1->2->3 \u4ee3\u8868\u6570\u5b57 123\u3002 \u8ba1\u7b97\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u751f\u6210\u7684\u6240\u6709\u6570\u5b57\u4e4b\u548c\u3002 \u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3] 1 / \\ 2 3 \u8f93\u51fa: 25 \u89e3\u91ca: \u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 1->2 \u4ee3\u8868\u6570\u5b57 12. \u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 1->3 \u4ee3\u8868\u6570\u5b57 13. \u56e0\u6b64\uff0c\u6570\u5b57\u603b\u548c = 12 + 13 = 25. \u793a\u4f8b 2: \u8f93\u5165: [4,9,0,5,1] 4 / \\ 9 0 / \\ 5 1 \u8f93\u51fa: 1026 \u89e3\u91ca: \u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 4->9->5 \u4ee3\u8868\u6570\u5b57 495. \u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 4->9->1 \u4ee3\u8868\u6570\u5b57 491. \u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 4->0 \u4ee3\u8868\u6570\u5b57 40. \u56e0\u6b64\uff0c\u6570\u5b57\u603b\u548c = 495 + 491 + 40 = 1026.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_364","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_7","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def sumNumbers(self, root: TreeNode) -> int: if not root: return 0 stack = [(root, root.val)] res = [] while stack: node, val = stack.pop() if not node.left and not node.right: res.append(val) if node.left: stack.append((node.left, val * 10 + node.left.val)) if node.right: stack.append((node.right, val * 10 + node.right.val)) return sum(res)","title":"\u89e3\u6cd5\u4e00 dfs"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_365","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#144","text":"","title":"144.\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1441","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \u524d\u5e8f \u904d\u5386\u3002 \u793a\u4f8b: \u8f93\u5165: [1,null,2,3] 1 \\ 2 / 3 \u8f93\u51fa: [1,2,3] \u8fdb\u9636: \u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f","title":"144.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1442","text":"\u524d\u5e8f\u904d\u5386\uff1a\u6839\u8282\u70b9->\u5de6\u5b50\u6811->\u53f3\u5b50\u6811 \u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\u5b50\u6811->\u6839\u8282\u70b9->\u53f3\u5b50\u6811 \u540e\u5e8f\u904d\u5386\uff1a\u5de6\u5b50\u6811->\u53f3\u5b50\u6811->\u6839\u8282\u70b9","title":"144.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#14421","text":"def preorderTraversal(self, root: TreeNode) -> List[int]: def treeHelper(sub_root, res): if not sub_root: return res.append(sub_root.val) treeHelper(sub_root.left, res) treeHelper(sub_root.right, res) res = [] treeHelper(root, res) return res","title":"144.2.1 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#14422","text":"def preorderTraversal(self, root: TreeNode) -> List[int]: if not root: return [] stack = [root] res = [] while stack: node = stack.pop() res.append(node.val) # \u5148\u53f3\u540e\u5de6 if node.right: stack.append(node.right) if node.left: stack.append(node.left) return res","title":"144.2.2 \u975e\u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#14423","text":"\u5148\u904d\u5386\u5de6\u5b50\u6811 \u5728\u904d\u5386\u53f3\u5b50\u6811 def preorderTraversal(self, root: TreeNode) -> List[int]: stack = [] res = [] while stack or root: if root: res.append(root.val) stack.append(root) root = root.left else: root = stack.pop() root = root.right return res","title":"144.2.3 \u975e\u9012\u5f52\u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#173","text":"","title":"173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_366","text":"\u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668\u3002\u4f60\u5c06\u4f7f\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002 \u8c03\u7528 next() \u5c06\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002 \u793a\u4f8b\uff1a BSTIterator iterator = new BSTIterator(root); iterator.next(); // \u8fd4\u56de 3 iterator.next(); // \u8fd4\u56de 7 iterator.hasNext(); // \u8fd4\u56de true iterator.next(); // \u8fd4\u56de 9 iterator.hasNext(); // \u8fd4\u56de true iterator.next(); // \u8fd4\u56de 15 iterator.hasNext(); // \u8fd4\u56de true iterator.next(); // \u8fd4\u56de 20 iterator.hasNext(); // \u8fd4\u56de false \u63d0\u793a\uff1a next() \u548c hasNext() \u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u5e76\u4f7f\u7528 O(h) \u5185\u5b58\uff0c\u5176\u4e2d h \u662f\u6811\u7684\u9ad8\u5ea6\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe next() \u8c03\u7528\u603b\u662f\u6709\u6548\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u8c03\u7528 next() \u65f6\uff0cBST \u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_367","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_368","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class BSTIterator: # \u89c1\u5230\u4e8c\u53c9\u641c\u7d22\u6811\u60f3\u4e2d\u5e8f\u904d\u5386 def __init__(self, root: TreeNode): self.stack = [] while root: self.stack.append(root) root = root.left def next(self) -> int: \"\"\" @return the next smallest number \"\"\" root = self.stack.pop() res = root.val root = root.right while root: self.stack.append(root) root = root.left return res def hasNext(self) -> bool: \"\"\" @return whether we have a next smallest number \"\"\" return len(self.stack) != 0 # Your BSTIterator object will be instantiated and called as such: # obj = BSTIterator(root) # param_1 = obj.next() # param_2 = obj.hasNext() \u4f46\u662f\u5f88\u591a\u5c0f\u4f19\u4f34\u4f1a\u5bf9next()\u4e2d\u7684\u5faa\u73af\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u611f\u5230\u7591\u60d1\uff0c\u8ba4\u4e3a\u65e2\u7136\u52a0\u5165\u4e86\u5faa\u73af\u5728\u91cc\u9762\uff0c\u90a3\u65f6\u95f4\u590d\u6742\u5ea6\u80af\u5b9a\u662f\u5927\u4e8eO(1)\u4e0d\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u3002 \u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\uff0c\u8be5\u5faa\u73af\u53ea\u6709\u5728\u8282\u70b9\u6709\u53f3\u5b50\u6811\u7684\u65f6\u5019\u624d\u9700\u8981\u8fdb\u884c\uff0c\u4e5f\u5c31\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u64cd\u4f5c\u90fd\u9700\u8981\u5faa\u73af\u7684\uff0c\u5faa\u73af\u7684\u6b21\u6570\u52a0\u4e0a\u521d\u59cb\u5316\u7684\u5faa\u73af\u603b\u5171\u4f1a\u6709O(n)\u6b21\u64cd\u4f5c\uff0c\u5747\u644a\u5230\u6bcf\u4e00\u6b21next()\u7684\u8bdd\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5219\u662fO(n)/n=O(1)\uff0c\u56e0\u6b64\u53ef\u4ee5\u786e\u5b9a\u8be5\u5b9e\u73b0\u65b9\u5f0f\u6ee1\u8db3O(1)\u7684\u8981\u6c42\u3002 \u8fd9\u79cd\u5206\u6790\u65b9\u5f0f\u79f0\u4e3a\u644a\u8fd8\u5206\u6790\uff0c\u8be6\u7ec6\u7684\u5b66\u4e60\u53ef\u4ee5\u770b\u770b \u300a\u7b97\u6cd5\u5bfc\u8bba\u300b- \u7b2c17\u7ae0 \u644a\u8fd8\u5206\u6790","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_369","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#199","text":"","title":"199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_370","text":"\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u60f3\u8c61\u81ea\u5df1\u7ad9\u5728\u5b83\u7684\u53f3\u4fa7\uff0c\u6309\u7167\u4ece\u9876\u90e8\u5230\u5e95\u90e8\u7684\u987a\u5e8f\uff0c\u8fd4\u56de\u4ece\u53f3\u4fa7\u6240\u80fd\u770b\u5230\u7684\u8282\u70b9\u503c\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3,null,5,null,4] \u8f93\u51fa: [1, 3, 4] \u89e3\u91ca: 1 <--- / \\ 2 3 <--- \\ \\ 5 4 <---","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_371","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_372","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None import queue class Solution: def rightSideView(self, root: TreeNode) -> List[int]: if not root: return [] que = queue.Queue() que.put((root, 0)) last = -1 res = [] while not que.empty(): root, d = que.get() if d != last: res.append(root.val) last = d if root.right: que.put((root.right, d + 1)) if root.left: que.put((root.left, d + 1)) return res","title":"\u89e3\u6cd5\u4e00 \u5c42\u6b21\u904d\u5386"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_8","text":"class Solution(object): def rightSideView(self, root): rightmost_value_at_depth = dict() # depth -> node.val max_depth = -1 stack = [(root, 0)] while stack: node, depth = stack.pop() if node is not None: # maintain knowledge of the number of levels in the tree. max_depth = max(max_depth, depth) # only insert into dict if depth is not already present. rightmost_value_at_depth.setdefault(depth, node.val) stack.append((node.left, depth+1)) stack.append((node.right, depth+1)) return [rightmost_value_at_depth[depth] for depth in range(max_depth+1)]","title":"\u89e3\u6cd5\u4e8c dfs"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#208-trie","text":"","title":"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2081","text":"\u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b insert , search , \u548c startsWith \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002 \u793a\u4f8b: Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\"); // \u8fd4\u56de true trie.search(\"app\"); // \u8fd4\u56de false trie.startsWith(\"app\"); // \u8fd4\u56de true trie.insert(\"app\"); trie.search(\"app\"); // \u8fd4\u56de true \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd a-z \u6784\u6210\u7684\u3002 \u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002","title":"208.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2082","text":"","title":"208.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2081_1","text":"class Trie: def __init__(self): \"\"\" Initialize your data structure here. \"\"\" self.root = dict() def insert(self, word: str) -> None: \"\"\" Inserts a word into the trie. \"\"\" node = self.root for c in word: if c in node: node = node[c] else: node[c] = dict() node = node[c] node['is_word'] = True def search(self, word: str) -> bool: \"\"\" Returns if the word is in the trie. \"\"\" node = self.root for c in word: if c in node: node = node[c] else: return False return 'is_word' in node def startsWith(self, prefix: str) -> bool: \"\"\" Returns if there is any word in the trie that starts with the given prefix. \"\"\" node = self.root for c in prefix: if c not in node: return False else: node = node[c] return True # Your Trie object will be instantiated and called as such: # obj = Trie() # obj.insert(word) # param_2 = obj.search(word) # param_3 = obj.startsWith(prefix)","title":"208.1 \u65b9\u6cd5\u4e00 \u5b57\u5178\u5efa\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#230-k","text":"","title":"230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2301","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570 kthSmallest \u6765\u67e5\u627e\u5176\u4e2d\u7b2c k \u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c1 \u2264 k \u2264 \u4e8c\u53c9\u641c\u7d22\u6811\u5143\u7d20\u4e2a\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: root = [3,1,4,null,2], k = 1 3 / \\ 1 4 \\ 2 \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: root = [5,3,6,2,4,null,null,1], k = 3 5 / \\ 3 6 / \\ 2 4 / 1 \u8f93\u51fa: 3 \u8fdb\u9636\uff1a \u5982\u679c\u4e8c\u53c9\u641c\u7d22\u6811\u7ecf\u5e38\u88ab\u4fee\u6539\uff08\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\uff09\u5e76\u4e14\u4f60\u9700\u8981\u9891\u7e41\u5730\u67e5\u627e\u7b2c k \u5c0f\u7684\u503c\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316 kthSmallest \u51fd\u6570\uff1f","title":"230.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2302","text":"","title":"230.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#23021","text":"class Solution: def kthSmallest(self, root: TreeNode, k: int) -> int: \"\"\" \u4e2d\u5e8f\u904d\u5386, \u904d\u5386\u5230\u7b2ck\u4e2a\u5143\u7d20\u65f6\u505c\u6b62 \"\"\" def treeHelper(sub_root, res): if not sub_root: return treeHelper(sub_root.left, res) res.append(sub_root.val) treeHelper(sub_root.right, res) res = [] treeHelper(root, res) return res[k-1]","title":"230.2.1 \u65b9\u6cd5\u4e00 \u4e2d\u5e8f\u904d\u5386 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#23021_1","text":"def kthSmallest(self, root: TreeNode, k: int) -> int: \"\"\" \u4e2d\u5e8f\u904d\u5386, \u904d\u5386\u5230\u7b2ck\u4e2a\u5143\u7d20\u65f6\u505c\u6b62 \"\"\" def treeHelper(sub_root, res): if not sub_root: return treeHelper(sub_root.left, res) if len(res) == k: return res.append(sub_root.val) treeHelper(sub_root.right, res) res = [] treeHelper(root, res) return res[k-1]","title":"230.2.1 \u65b9\u6cd5\u4e8c \u65b9\u6cd5\u4e00\u6539\u8fdb\u7248"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#23023","text":"def kthSmallest(self, root: TreeNode, k:int) -> int: stack = [] while stack or root: if root: stack.append(root) root = root.left else: root = stack.pop() k = k-1 if not k: return root.val root = root.right","title":"230.2.3 \u65b9\u6cd5\u4e09 \u4e2d\u5e8f\u904d\u5386 \u975e\u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#23024","text":"def kthSmallest(self, root: TreeNode, k:int) -> int: \"\"\" \u4e8c\u5206\u641c\u7d22 \"\"\" def cnt_nodes(sub_root): if not sub_root: return 0 return cnt_nodes(sub_root.left) + cnt_nodes(sub_root.right) + 1 left_num = cnt_nodes(root.left) if k == left_num + 1: return root.val elif k > left_num + 1: return self.kthSmallest(root.right, k - 1 - left_num) else: return self.kthSmallest(root.left, k)","title":"230.2.4 \u65b9\u6cd5\u56db \u4e8c\u5206\u641c\u7d22"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#23025-yield","text":"class Solution: # @param {TreeNode} root # @param {integer} k # @return {integer} def kthSmallest(self, root, k): for val in self.inorder(root): if k == 1: return val else: k -= 1 def inorder(self, root): if root is not None: for val in self.inorder(root.left): yield val yield root.val for val in self.inorder(root.right): yield val","title":"230.2.5 \u65b9\u6cd5\u4e94 yield"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#437iii","text":"","title":"437.\u8def\u5f84\u603b\u548cIII"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_373","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u653e\u7740\u4e00\u4e2a\u6574\u6570\u503c\u3002 \u627e\u51fa\u8def\u5f84\u548c\u7b49\u4e8e\u7ed9\u5b9a\u6570\u503c\u7684\u8def\u5f84\u603b\u6570\u3002 \u8def\u5f84\u4e0d\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e5f\u4e0d\u9700\u8981\u5728\u53f6\u5b50\u8282\u70b9\u7ed3\u675f\uff0c\u4f46\u662f\u8def\u5f84\u65b9\u5411\u5fc5\u987b\u662f\u5411\u4e0b\u7684\uff08\u53ea\u80fd\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\uff09\u3002 \u4e8c\u53c9\u6811\u4e0d\u8d85\u8fc71000\u4e2a\u8282\u70b9\uff0c\u4e14\u8282\u70b9\u6570\u503c\u8303\u56f4\u662f [-1000000,1000000] \u7684\u6574\u6570\u3002 \u793a\u4f8b\uff1a root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8 10 / \\ 5 -3 / \\ \\ 3 2 11 / \\ \\ 3 -2 1 \u8fd4\u56de 3\u3002\u548c\u7b49\u4e8e 8 \u7684\u8def\u5f84\u6709: 5 -> 3 5 -> 2 -> 1 -3 -> 11","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_374","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_375","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def pathSum(self, root: TreeNode, sum: int) -> int: \"\"\" \u8fb9\u754c\u6761\u4ef6: \u8d1f\u6570 0 \u524d\u7f00\u548c \u9012\u5f52 \"\"\" def helper(root, sum): \"\"\" \u5305\u62ec\u6839\u8282\u70b9\u7684\u6307\u5b9a\u8def\u5f84\u6570\u91cf \"\"\" if not root: return 0 return helper(root.left, sum - root.val) + helper(root.right, sum - root.val) + (1 if sum == root.val else 0) if not root: return 0 return self.pathSum(root.left, sum) + self.pathSum(root.right, sum) + helper(root, sum)","title":"\u89e3\u6cd5\u4e00 \u53cc\u9012\u5f52\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_376","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#513","text":"","title":"513. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5131","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5728\u6811\u7684\u6700\u540e\u4e00\u884c\u627e\u5230\u6700\u5de6\u8fb9\u7684\u503c\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 / \\ 1 3 \u8f93\u51fa: 1 \u793a\u4f8b 2: \u8f93\u5165: 1 / \\ 2 3 / / \\ 4 5 6 / 7 \u8f93\u51fa: 7 \u6ce8\u610f: \u60a8\u53ef\u4ee5\u5047\u8bbe\u6811\uff08\u5373\u7ed9\u5b9a\u7684\u6839\u8282\u70b9\uff09\u4e0d\u4e3a NULL \u3002","title":"513.1 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5132","text":"","title":"513.2 \u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#51321","text":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def findBottomLeftValue(self, root: TreeNode) -> int: def treeHelper(sub_root): \"\"\" \u8fd4\u56de\u5b50\u6811\u7684\u9ad8\u5ea6\u4ee5\u53ca\u5de6\u4e0b\u89d2\u7684\u503c \"\"\" if not sub_root: return 0, None left_height, left_val = treeHelper(sub_root.left) right_height, right_val = treeHelper(sub_root.right) if not left_val and not right_val: return 1, sub_root.val return max(left_height, right_height)+1, right_val if right_height>left_height else left_val return treeHelper(root)[1]","title":"513.2.1 \u65b9\u6cd5\u4e00 \u9012\u5f52\u81ea\u5e95\u5411\u4e0a"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#51322-bfs","text":"def findLeftMostNode(self, root): queue = [root] for node in queue: # queue += filter(None, (node.right, node.left)) if node.right: queue += node.right if node.left: queue += node.left return node.val","title":"513.2.2 BFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#51323-dfs","text":"class Solution { public: int findBottomLeftValue(TreeNode* root) { int bottomLeft = 0; int height = 0; dfs(root, 1, height, bottomLeft); return bottomLeft; } private: void dfs(TreeNode* node, int depth, int& height, int& res) { if (!node) { return; } if (depth > height) { res = node->val; // update res only when redefine the height height = depth; } dfs(node->left, depth + 1, height, res); dfs(node->right, depth + 1, height, res); } };","title":"513.2.3 DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#51324-dfs-stack","text":"#DFS + stack def findBottomLeftValue(self, root): if not root: return max_depth = 0 stack = [(root, 1)] while stack: curr, level = stack.pop() if curr: if level > max_depth: max_depth = level ans = curr.val stack.append((curr.right, level + 1)) stack.append((curr.left, level + 1)) return ans","title":"513.2.4 DFS + stack"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#538","text":"","title":"538.\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_377","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff08Binary Search Tree\uff09\uff0c\u628a\u5b83\u8f6c\u6362\u6210\u4e3a\u7d2f\u52a0\u6811\uff08Greater Tree)\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u662f\u539f\u6765\u7684\u8282\u70b9\u503c\u52a0\u4e0a\u6240\u6709\u5927\u4e8e\u5b83\u7684\u8282\u70b9\u503c\u4e4b\u548c\u3002 \u4f8b\u5982\uff1a \u8f93\u5165: \u4e8c\u53c9\u641c\u7d22\u6811: 5 / \\ 2 13 \u8f93\u51fa: \u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811: 18 / \\ 20 13","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_378","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_379","text":"\"\"\" \u8fb9\u754c\u6761\u4ef6 :\u76f8\u7b49\u7684\u70b9 \u4e0d\u8981\u7d2f\u52a0 \u4e8c\u53c9\u641c\u7d22\u6811 \u5de6 < \u4e2d < \u53f3 \u4e2d\u5e8f\u904d\u5386 \u5de6 -> \u4e2d -> \u53f3 \u9006\u4e2d\u5e8f\u601d\u8def \u53f3 -> \u4e2d -> \u5de6 \u9012\u5f52\u7248 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def convertBST(self, root: TreeNode) -> TreeNode: \"\"\" \u8fb9\u754c\u6761\u4ef6 :\u76f8\u7b49\u7684\u70b9 \u4e0d\u8981\u7d2f\u52a0 \u4e8c\u53c9\u641c\u7d22\u6811 \u5de6 < \u4e2d < \u53f3 \u4e2d\u5e8f\u904d\u5386 \u5de6 -> \u4e2d -> \u53f3 \u9006\u4e2d\u5e8f\u601d\u8def \u53f3 -> \u4e2d -> \u5de6 \u9012\u5f52\u7248 \"\"\" p = root stack = [] cum = 0 last_v = 0 while stack or p: if p: stack.append(p) p = p.right else: p = stack.pop() if p.val == last_v: p.val = cum else: p.val += cum cum = p.val p = p.left return root","title":"\u89e3\u6cd5\u4e00 \u9006\u4e2d\u5e8f\u904d\u5386"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_380","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#543","text":"","title":"543.\u4e8c\u53c9\u6811\u7684\u76f4\u5f84"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_381","text":"\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5b83\u7684\u76f4\u5f84\u957f\u5ea6\u3002\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u76f4\u5f84\u957f\u5ea6\u662f\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u8def\u5f84\u957f\u5ea6\u4e2d\u7684\u6700\u5927\u503c\u3002\u8fd9\u6761\u8def\u5f84\u53ef\u80fd\u7a7f\u8fc7\u6839\u7ed3\u70b9\u3002 \u793a\u4f8b : \u7ed9\u5b9a\u4e8c\u53c9\u6811 1 / \\ 2 3 / \\ 4 5 \u8fd4\u56de 3, \u5b83\u7684\u957f\u5ea6\u662f\u8def\u5f84 [4,2,1,3] \u6216\u8005 [5,2,1,3]\u3002 \u6ce8\u610f\uff1a\u4e24\u7ed3\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u662f\u4ee5\u5b83\u4eec\u4e4b\u95f4\u8fb9\u7684\u6570\u76ee\u8868\u793a\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_382","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_383","text":"\u8ba1\u7b97\u5de6\u5b50\u6811\u7684\u6700\u5927\u76f4\u5f84 \u8ba1\u7b97\u53f3\u5b50\u6811\u7684\u6700\u5927\u76f4\u5f84 (\u8ba1\u7b97\u5de6\u5b50\u6811\u7684\u6df1\u5ea6 - 1 + \u53f3\u5b50\u6811\u7684\u6df1\u5ea6 - 1 + 2) \u4e09\u8005\u6700\u5927\u503c\u4e3a\u7ed3\u679c # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def diameterOfBinaryTree(self, root: TreeNode) -> int: \"\"\" \u9012\u5f52 \"\"\" def getDepth(root): if not root: return 0 return max(getDepth(root.left), getDepth(root.right)) + 1 if not root: return 0 leftmax = self.diameterOfBinaryTree(root.left) rightmax = self.diameterOfBinaryTree(root.right) return max(getDepth(root.left) + getDepth(root.right), leftmax, rightmax)","title":"\u89e3\u6cd5\u4e00 \u53cc\u91cd\u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_384","text":"\u8ba1\u7b97\u6df1\u5ea6\u7684\u8fc7\u7a0b\u4e2d\u628a\u6240\u6709\u5b50\u6811\u7684\u6700\u5927\u76f4\u5f84\u4f5c\u6bd4\u8f83 \u627e\u5230\u6700\u5927\u7684 class Solution: def diameterOfBinaryTree(self, root: TreeNode) -> int: self.ans = 1 def depth(node): if not node: return 0 L = depth(node.left) R = depth(node.right) self.ans = max(self.ans, L + R + 1) return max(L, R) + 1 depth(root) return self.ans - 1","title":"\u89e3\u6cd5\u4e8c \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#617","text":"","title":"617.\u5408\u5e76\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_385","text":"\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u60f3\u8c61\u5f53\u4f60\u5c06\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u8986\u76d6\u5230\u53e6\u4e00\u4e2a\u4e0a\u65f6\uff0c\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u4e00\u4e9b\u8282\u70b9\u4fbf\u4f1a\u91cd\u53e0\u3002 \u4f60\u9700\u8981\u5c06\u4ed6\u4eec\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u4e8c\u53c9\u6811\u3002\u5408\u5e76\u7684\u89c4\u5219\u662f\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u91cd\u53e0\uff0c\u90a3\u4e48\u5c06\u4ed6\u4eec\u7684\u503c\u76f8\u52a0\u4f5c\u4e3a\u8282\u70b9\u5408\u5e76\u540e\u7684\u65b0\u503c\uff0c\u5426\u5219\u4e0d\u4e3a NULL \u7684\u8282\u70b9\u5c06\u76f4\u63a5\u4f5c\u4e3a\u65b0\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: Tree 1 Tree 2 1 2 / \\ / \\ 3 2 1 3 / \\ \\ 5 4 7 \u8f93\u51fa: \u5408\u5e76\u540e\u7684\u6811: 3 / \\ 4 5 / \\ \\ 5 4 7 \u6ce8\u610f: \u5408\u5e76\u5fc5\u987b\u4ece\u4e24\u4e2a\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_386","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_387","text":"Time complexity : O(m) O ( m ). A total of m m nodes need to be traversed. Here, m m represents the minimum number of nodes from the two given trees. Space complexity : O(m) O ( m ). The depth of the recursion tree can go upto m m in the case of a skewed tree. In average case, depth will be O(logm) O ( l o g m ). class Solution: def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode: if not t1: return t2 if not t2: return t1 head = TreeNode(t1.val + t2.val) head.left = self.mergeTrees(t1.left, t2.left) head.right = self.mergeTrees(t1.right, t2.right) return head","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_9","text":"Time complexity : O(n) O ( n ). We traverse over a total of n n nodes. Here, n n refers to the smaller of the number of nodes in the two trees. Space complexity : O(n) O ( n ). The depth of stack can grow upto n n in case of a skewed tree. /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ public class Solution { public TreeNode mergeTrees(TreeNode t1, TreeNode t2) { if (t1 == null) return t2; Stack < TreeNode[] > stack = new Stack < > (); stack.push(new TreeNode[] {t1, t2}); while (!stack.isEmpty()) { TreeNode[] t = stack.pop(); if (t[0] == null || t[1] == null) { continue; } t[0].val += t[1].val; if (t[0].left == null) { t[0].left = t[1].left; } else { stack.push(new TreeNode[] {t[0].left, t[1].left}); } if (t[0].right == null) { t[0].right = t[1].right; } else { stack.push(new TreeNode[] {t[0].right, t[1].right}); } } return t1; } }","title":"\u89e3\u6cd5\u4e8c dfs"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_388","text":"","title":"\u56fe"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_389","text":"BFS DFS \u62d3\u6251\u6392\u5e8f \u5e76\u67e5\u96c6 \u9ed1\u767d\u67d3\u8272\u6cd5 \u6700\u77ed\u8def\u5f84 \u4e00\u7b14\u753b\u95ee\u9898(\u6b27\u62c9\u56de\u8def \u6b27\u62c9\u8def\u5f84) \u62d3\u6251\u6392\u5e8f\u53ef\u4ee5\u89e3\u51b3\u6709\u5411\u65e0\u73af\u56fe \u627e\u56fe\u4e2d\u7684\u73af","title":"\u56fe\u7684\u5e38\u7528\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#127","text":"","title":"127.\u5355\u8bcd\u63a5\u9f99"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_390","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08beginWord \u548c endWord\uff09\u548c\u4e00\u4e2a\u5b57\u5178\uff0c\u627e\u5230\u4ece beginWord \u5230 endWord \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a \u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002 \u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u8bf4\u660e: \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002 \u6240\u6709\u5355\u8bcd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002 \u6240\u6709\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002 \u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5355\u8bcd\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe beginWord \u548c endWord \u662f\u975e\u7a7a\u7684\uff0c\u4e14\u4e8c\u8005\u4e0d\u76f8\u540c\u3002 \u793a\u4f8b 1: \u8f93\u5165: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"] \u8f93\u51fa: 5 \u89e3\u91ca: \u4e00\u4e2a\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u662f \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", \u8fd4\u56de\u5b83\u7684\u957f\u5ea6 5\u3002 \u793a\u4f8b 2: \u8f93\u5165: beginWord = \"hit\" endWord = \"cog\" wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"] \u8f93\u51fa: 0 \u89e3\u91ca: endWord \"cog\" \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u8f6c\u6362\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_391","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bfs_4","text":"1.\u628a\u53ea\u5dee\u4e00\u4e2a\u5b57\u6bcd\u7684\u5355\u8bcd\u76f8\u8fde\uff0c\u53ef\u5f62\u6210\u4e00\u4e2a\u5173\u4e8eword\u7684\u56fe\uff0c\u7528BFS\u904d\u5386 2.\u5bf9wordList\u505a\u9884\u5904\u7406\uff0c\u751f\u6210\u4e00\u4e2akey\u4e3a\u67d0\u4e00\u5143\u7d20\u88ab*\u66ff\u4ee3\u7684\u901a\u7528\u5f62\u5f0f\uff0cvalue\u662f\u7b26\u5408\u901a\u7528\u5f62\u5f0f\u7684\u5177\u4f53\u7684\u5355\u8bcd import queue class Solution: def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int: \"\"\" 1.\u628a\u53ea\u5dee\u4e00\u4e2a\u5b57\u6bcd\u7684\u5355\u8bcd\u76f8\u8fde\uff0c\u53ef\u5f62\u6210\u4e00\u4e2a\u5173\u4e8eword\u7684\u56fe\uff0c\u7528BFS\u904d\u5386 2.\u5bf9wordList\u505a\u9884\u5904\u7406\uff0c\u751f\u6210\u4e00\u4e2akey\u4e3a\u67d0\u4e00\u5143\u7d20\u88ab*\u66ff\u4ee3\u7684\u901a\u7528\u5f62\u5f0f\uff0cvalue\u662f\u7b26\u5408\u901a\u7528\u5f62\u5f0f\u7684\u5177\u4f53\u7684\u5355\u8bcd \"\"\" # wordList\u9884\u5904\u7406 word_dic = dict() word_len = len(beginWord) for word in wordList: for i in range(word_len): key = word[:i] + '*' + word[i + 1:] if key in word_dic: word_dic[key].append(word) else: word_dic[key] = [word] # BFS visited = {beginWord} que = queue.Queue() que.put((beginWord, 1)) while not que.empty(): node, dist = que.get() # \u901a\u8fc7key\u627e\u5230\u76f8\u90bb\u7684\u7ed3\u70b9\u904d\u5386 for i in range(word_len): key = node[:i] + '*' + node[i + 1:] if key not in word_dic: continue for tail in word_dic[key]: if tail == endWord: return dist + 1 if tail not in visited: que.put((tail, dist + 1)) visited.add(tail) return 0 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(M\u00d7N)\uff0c\u5176\u4e2d M \u662f\u5355\u8bcd\u7684\u957f\u5ea6 N \u662f\u5355\u8bcd\u8868\u4e2d\u5355\u8bcd\u7684\u603b\u6570\u3002\u627e\u5230\u6240\u6709\u7684\u53d8\u6362\u9700\u8981\u5bf9\u6bcf\u4e2a\u5355\u8bcd\u505a MM\u6b21\u64cd\u4f5c\u3002\u540c\u65f6\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u4e5f\u8981\u8bbf\u95ee\u6240\u6709\u7684 N \u4e2a\u5355\u8bcd\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(M\u00d7N)\uff0c\u8981\u5728 all_combo_dict \u5b57\u5178\u4e2d\u8bb0\u5f55\u6bcf\u4e2a\u5355\u8bcd\u7684 M \u4e2a\u901a\u7528\u72b6\u6001\u3002\u8bbf\u95ee\u6570\u7ec4\u7684\u5927\u5c0f\u662f NN\u3002\u5e7f\u641c\u961f\u5217\u6700\u574f\u60c5\u51b5\u4e0b\u9700\u8981\u5b58\u50a8 NN \u4e2a\u5355\u8bcd\u3002","title":"\u89e3\u6cd5\u4e00 BFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bfs_5","text":"\u6839\u636e\u7ed9\u5b9a\u5b57\u5178\u6784\u9020\u7684\u56fe\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u800c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u641c\u7d22\u7a7a\u95f4\u5927\u5c0f\u4f9d\u8d56\u4e8e\u6bcf\u5c42\u8282\u70b9\u7684\u5206\u652f\u6570\u91cf\u3002\u5047\u5982\u6bcf\u4e2a\u8282\u70b9\u7684\u5206\u652f\u6570\u91cf\u76f8\u540c\uff0c\u641c\u7d22\u7a7a\u95f4\u4f1a\u968f\u7740\u5c42\u6570\u7684\u589e\u957f\u6307\u6570\u7ea7\u7684\u589e\u52a0\u3002\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e00\u5c42\u90fd\u662f\u6ee1\u4e8c\u53c9\u6811\u7684\u6269\u5c55\uff0c\u8282\u70b9\u7684\u6570\u91cf\u4f1a\u4ee5 2 \u4e3a\u5e95\u6570\u5448\u6307\u6570\u589e\u957f\u3002 \u5982\u679c\u4f7f\u7528\u4e24\u4e2a\u540c\u65f6\u8fdb\u884c\u7684\u5e7f\u641c\u53ef\u4ee5\u6709\u6548\u5730\u51cf\u5c11\u641c\u7d22\u7a7a\u95f4\u3002\u4e00\u8fb9\u4ece beginWord \u5f00\u59cb\uff0c\u53e6\u4e00\u8fb9\u4ece endWord \u5f00\u59cb\u3002\u6211\u4eec\u6bcf\u6b21\u4ece\u4e24\u8fb9\u5404\u6269\u5c55\u4e00\u4e2a\u8282\u70b9\uff0c\u5f53\u53d1\u73b0\u67d0\u4e00\u65f6\u523b\u4e24\u8fb9\u90fd\u8bbf\u95ee\u4e86\u67d0\u4e00\u9876\u70b9\u65f6\u5c31\u505c\u6b62\u641c\u7d22\u3002\u8fd9\u5c31\u662f\u53cc\u5411\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5b83\u53ef\u4ee5\u53ef\u89c2\u5730\u51cf\u5c11\u641c\u7d22\u7a7a\u95f4\u5927\u5c0f\uff0c\u4ece\u800c\u964d\u4f4e\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u7b97\u6cd5 \u7b97\u6cd5\u4e0e\u4e4b\u524d\u63cf\u8ff0\u7684\u6807\u51c6\u5e7f\u641c\u65b9\u6cd5\u76f8\u7c7b\u4f3c\u3002 \u552f\u4e00\u7684\u4e0d\u540c\u662f\u6211\u4eec\u4ece\u4e24\u4e2a\u8282\u70b9\u540c\u65f6\u5f00\u59cb\u641c\u7d22\uff0c\u540c\u65f6\u641c\u7d22\u7684\u7ed3\u675f\u6761\u4ef6\u4e5f\u6709\u6240\u53d8\u5316\u3002 \u6211\u4eec\u73b0\u5728\u6709\u4e24\u4e2a\u8bbf\u95ee\u6570\u7ec4\uff0c\u5206\u522b\u8bb0\u5f55\u4ece\u5bf9\u5e94\u7684\u8d77\u70b9\u662f\u5426\u5df2\u7ecf\u8bbf\u95ee\u4e86\u8be5\u8282\u70b9\u3002 \u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u8282\u70b9\u88ab\u4e24\u4e2a\u641c\u7d22\u540c\u65f6\u8bbf\u95ee\uff0c\u5c31\u7ed3\u675f\u641c\u7d22\u8fc7\u7a0b\u3002\u56e0\u4e3a\u6211\u4eec\u627e\u5230\u4e86\u53cc\u5411\u641c\u7d22\u7684\u4ea4\u70b9\u3002\u8fc7\u7a0b\u5982\u540c\u4ece\u4e2d\u95f4\u76f8\u9047\u800c\u4e0d\u662f\u6cbf\u7740\u641c\u7d22\u8def\u5f84\u4e00\u76f4\u8d70\u3002 \u53cc\u5411\u641c\u7d22\u7684\u7ed3\u675f\u6761\u4ef6\u662f\u627e\u5230\u4e00\u4e2a\u5355\u8bcd\u88ab\u4e24\u8fb9\u641c\u7d22\u90fd\u8bbf\u95ee\u8fc7\u4e86\u3002 \u6700\u77ed\u53d8\u6362\u5e8f\u5217\u7684\u957f\u5ea6\u5c31\u662f\u4e2d\u95f4\u8282\u70b9\u5728\u4e24\u8fb9\u7684\u5c42\u6b21\u4e4b\u548c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8bbf\u95ee\u6570\u7ec4\u4e2d\u8bb0\u5f55\u8282\u70b9\u7684\u5c42\u6b21\u3002 from collections import defaultdict class Solution(object): def __init__(self): self.length = 0 # Dictionary to hold combination of words that can be formed, # from any given word. By changing one letter at a time. self.all_combo_dict = defaultdict(list) def visitWordNode(self, queue, visited, others_visited): current_word, level = queue.pop(0) for i in range(self.length): # Intermediate words for current word intermediate_word = current_word[:i] + \"*\" + current_word[i+1:] # Next states are all the words which share the same intermediate state. for word in self.all_combo_dict[intermediate_word]: # If the intermediate state/word has already been visited from the # other parallel traversal this means we have found the answer. if word in others_visited: return level + others_visited[word] if word not in visited: # Save the level as the value of the dictionary, to save number of hops. visited[word] = level + 1 queue.append((word, level + 1)) return None def ladderLength(self, beginWord, endWord, wordList): \"\"\" :type beginWord: str :type endWord: str :type wordList: List[str] :rtype: int \"\"\" if endWord not in wordList or not endWord or not beginWord or not wordList: return 0 # Since all words are of same length. self.length = len(beginWord) for word in wordList: for i in range(self.length): # Key is the generic word # Value is a list of words which have the same intermediate generic word. self.all_combo_dict[word[:i] + \"*\" + word[i+1:]].append(word) # Queues for birdirectional BFS queue_begin = [(beginWord, 1)] # BFS starting from beginWord queue_end = [(endWord, 1)] # BFS starting from endWord # Visited to make sure we don't repeat processing same word visited_begin = {beginWord: 1} visited_end = {endWord: 1} ans = None # We do a birdirectional search starting one pointer from begin # word and one pointer from end word. Hopping one by one. while queue_begin and queue_end: # One hop from begin word ans = self.visitWordNode(queue_begin, visited_begin, visited_end) if ans: return ans # One hop from end word ans = self.visitWordNode(queue_end, visited_end, visited_begin) if ans: return ans return 0 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(M \\times N)O(M\u00d7N)\uff0c\u5176\u4e2d MM \u662f\u5355\u8bcd\u7684\u957f\u5ea6 NN \u662f\u5355\u8bcd\u8868\u4e2d\u5355\u8bcd\u7684\u603b\u6570\u3002\u4e0e\u5355\u5411\u641c\u7d22\u76f8\u540c\u7684\u662f\uff0c\u627e\u5230\u6240\u6709\u7684\u53d8\u6362\u9700\u8981 M * NM\u2217N \u6b21\u64cd\u4f5c\u3002\u4f46\u662f\u641c\u7d22\u65f6\u95f4\u4f1a\u88ab\u7f29\u5c0f\u4e00\u534a\uff0c\u56e0\u4e3a\u4e24\u4e2a\u641c\u7d22\u4f1a\u5728\u4e2d\u95f4\u67d0\u5904\u76f8\u9047\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(M \\times N)O(M\u00d7N)\uff0c\u8981\u5728 all_combo_dict \u5b57\u5178\u4e2d\u8bb0\u5f55\u6bcf\u4e2a\u5355\u8bcd\u7684 MM \u4e2a\u901a\u7528\u72b6\u6001\uff0c\u8fd9\u4e0e\u5355\u5411\u641c\u7d22\u76f8\u540c\u3002\u4f46\u662f\u56e0\u4e3a\u4f1a\u5728\u4e2d\u95f4\u76f8\u9047\uff0c\u6240\u4ee5\u53cc\u5411\u641c\u7d22\u7684\u641c\u7d22\u7a7a\u95f4\u53d8\u5c0f\u3002","title":"\u89e3\u6cd5\u4e8c \u53cc\u7aefBFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#133","text":"","title":"133. \u514b\u9686\u56fe"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_392","text":"\u7ed9\u5b9a\u65e0\u5411\u8fde\u901a\u56fe\u4e2d\u4e00\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8fd4\u56de\u8be5\u56fe\u7684\u6df1\u62f7\u8d1d\uff08\u514b\u9686\uff09\u3002\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u5b83\u7684\u503c val\uff08Int\uff09 \u548c\u5176\u90bb\u5c45\u7684\u5217\u8868\uff08list[Node]\uff09\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a {\"$id\":\"1\",\"neighbors\":[{\"$id\":\"2\",\"neighbors\":[{\"$ref\":\"1\"},{\"$id\":\"3\",\"neighbors\":[{\"$ref\":\"2\"},{\"$id\":\"4\",\"neighbors\":[{\"$ref\":\"3\"},{\"$ref\":\"1\"}],\"val\":4}],\"val\":3}],\"val\":2},{\"$ref\":\"4\"}],\"val\":1} \u89e3\u91ca\uff1a \u8282\u70b9 1 \u7684\u503c\u662f 1\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 2 \u548c 4 \u3002 \u8282\u70b9 2 \u7684\u503c\u662f 2\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 1 \u548c 3 \u3002 \u8282\u70b9 3 \u7684\u503c\u662f 3\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 2 \u548c 4 \u3002 \u8282\u70b9 4 \u7684\u503c\u662f 4\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 1 \u548c 3 \u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_393","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_10","text":"\"\"\" # Definition for a Node. class Node: def __init__(self, val, neighbors): self.val = val self.neighbors = neighbors \"\"\" class Solution: def cloneGraph(self, node: 'Node') -> 'Node': copy = Node(node.val, []) stack = [node] cp_stack = [copy] visited = {node.val: copy} while stack: v = stack.pop() cp_v = cp_stack.pop() for adj_v in v.neighbors: if adj_v.val not in visited: stack.append(adj_v) cp_adj_v = Node(adj_v.val, []) visited[adj_v.val] = cp_adj_v cp_v.neighbors.append(cp_adj_v) cp_stack.append(cp_adj_v) else: cp_v.neighbors.append(visited[adj_v.val]) return copy","title":"\u89e3\u6cd5\u4e00 DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_394","text":"/* // Definition for a Node. class Node { public int val; public List<Node> neighbors; public Node() {} public Node(int _val,List<Node> _neighbors) { val = _val; neighbors = _neighbors; } }; */","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#207","text":"","title":"207.\u8bfe\u7a0b\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_395","text":"\u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 n-1\u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f \u793a\u4f8b 1: \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: true \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002 \u793a\u4f8b 2: \u8f93\u5165: 2, [[1,0],[0,1]] \u8f93\u51fa: false \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u8bf4\u660e: \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531\u8fb9\u7f18\u5217\u8868\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\u56fe\u7684\u8868\u793a\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 \u63d0\u793a: \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002 \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7 BFS \u5b8c\u6210\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_396","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_397","text":"import queue class Graph: def __init__(self, N): self.V = N # \u90bb\u63a5\u8868 self.adj_list = [[] for _ in range(N)] # \u7ef4\u6301\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9\u961f\u5217 self.que = queue.Queue() # \u5165\u5ea6 self.indegree = [0] * N def add_path(self, s, t): self.adj_list[s].append(t) self.indegree[t] += 1 def topological_sort(self): # 1.\u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u5165\u961f for i, d in enumerate(self.indegree): if d == 0: self.que.put(i) # 2.\u62d3\u6251\u6392\u5e8f count = 0 while not self.que.empty(): v = self.que.get() count += 1 for adj_v in self.adj_list[v]: self.indegree[adj_v] -= 1 if self.indegree[adj_v] == 0: self.que.put(adj_v) # 3. \u5224\u65ad\u73af if count < self.V: return False else: return True class Solution: def canFinish(self, a: int, prerequisites: List[List[int]]) -> bool: \"\"\" \u62d3\u6251\u6392\u5e8f \u5bfb\u627e\u6ca1\u6709\u5165\u5ea6\u7684\u70b9 DFS \u5224\u65ad\u904d\u5386\u6240\u6709\u70b9\u4e4b\u540e\u662f\u5426\u4f1a\u5b58\u5728\u5faa\u73af \"\"\" g = Graph(numCourses) for t, s in prerequisites: g.add_path(s, t) return g.topological_sort() import queue class Solution: def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool: # \u62d3\u6251\u6392\u5e8f # todo change c # 1.\u6784\u5efa\u56fe\u53ca\u4fdd\u5b58\u5165\u5ea6 graph = [[] for _ in range(N)] indegree = [0] * N for t, s in nums: indegree[t] += 1 graph[s].append(t) # 2.\u62d3\u6251\u6392\u5e8f\u5f00\u59cb\u4e4b\u524d\uff0c\u5148\u628a\u6240\u6709\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\u52a0\u5165\u5230\u4e00\u4e2a\u961f\u5217\u4e2d zero_que = queue.Queue() for i, d in enumerate(indegree): if d == 0: zero_que.put(i) # 3.\u62d3\u6251\u6392\u5e8f BFS\u9010\u6b65\u6d88\u9664\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9 cnt = 0 while not zero_que.empty(): node = zero_que.get() cnt += 1 for adj_v in graph[node]: indegree[adj_v] -= 1 if indegree[adj_v] == 0: zero_que.put(adj_v) return cnt == N","title":"\u89e3\u6cd5\u4e00 \u62d3\u6251\u6392\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_398","text":"import queue class Solution: def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool: # \u62d3\u6251\u6392\u5e8f # todo change N = numCourses nums = prerequisites # 1.\u6784\u5efa\u56fe\u53ca\u4fdd\u5b58\u5165\u5ea6 graph = [[] for _ in range(N)] indegree = [0] * N for t, s in nums: indegree[t] += 1 graph[s].append(t) # 2.\u62d3\u6251\u6392\u5e8f\u5f00\u59cb\u4e4b\u524d\uff0c\u5148\u628a\u6240\u6709\u5165\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\u52a0\u5165\u5230\u4e00\u4e2a\u961f\u5217\u4e2d zero_que = queue.Queue() for i, d in enumerate(indegree): if d == 0: zero_que.put(i) # 3.\u62d3\u6251\u6392\u5e8f BFS\u9010\u6b65\u6d88\u9664\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9 cnt = 0 while not zero_que.empty(): node = zero_que.get() cnt += 1 for adj_v in graph[node]: indegree[adj_v] -= 1 if indegree[adj_v] == 0: zero_que.put(adj_v) return cnt == N","title":"\u89e3\u6cd5\u4e8c  \u63a8\u8350"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#210ii","text":"","title":"210.\u8bfe\u7a0b\u8868II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_399","text":"\u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 n-1\u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002 \u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: [0,1] \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a [0,1] \u3002 \u793a\u4f8b 2: \u8f93\u5165: 4, [[1,0],[2,0],[3,1],[3,2]] \u8f93\u51fa: [0,1,2,3] or [0,2,1,3] \u89e3\u91ca: \u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002 \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f [0,1,2,3] \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f [0,2,1,3] \u3002 \u8bf4\u660e: \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531\u8fb9\u7f18\u5217\u8868\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\u56fe\u7684\u8868\u793a\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 \u63d0\u793a: \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002 \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7 BFS \u5b8c\u6210","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_400","text":"","title":"\u89e3\u6cd5 \u62d3\u6251\u6392\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#on_3","text":"import queue class Graph: def __init__(self, N): self.V = N self.adj_list = [[] for _ in range(N)] self.que = queue.Queue() self.indegree = [0] * N def add_path(self, s, t): self.adj_list[s].append(t) self.indegree[t] += 1 def topological_sort(self): # 1.\u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u5165\u961f for i, d in enumerate(self.indegree): if d == 0: self.que.put(i) # 2.\u62d3\u6251\u6392\u5e8f orders = [] count = 0 while not self.que.empty(): v = self.que.get() count += 1 orders.append(v) for adj_v in self.adj_list[v]: self.indegree[adj_v] -= 1 if self.indegree[adj_v] == 0: self.que.put(adj_v) # 3. \u5224\u65ad\u73af if count < self.V: return [] else: return orders class Solution: def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]: g = Graph(numCourses) for t, s in prerequisites: g.add_path(s, t) return g.topological_sort()","title":"\u89e3\u6cd5\u4e00 O(n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_401","text":"import queue class Solution: def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]: N = numCourses nums = prerequisites # 1.\u521d\u59cb\u5316\u56fe & \u8bb0\u5f55\u5165\u5ea6 graph = [[] for _ in range(N)] indegree = [0] * N for t, s in nums: graph[s].append(t) indegree[t] += 1 # 2.\u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9\u653e\u5165\u96f6\u5165\u5ea6\u961f\u5217\u4e2d que = queue.Queue() for i, d in enumerate(indegree): if d == 0: que.put(i) # 3. BFS topo\u6392\u5e8f res = [] cnt = 0 while not que.empty(): node = que.get() cnt += 1 res.append(node) for adj_v in graph[node]: indegree[adj_v] -= 1 if indegree[adj_v] == 0: que.put(adj_v) return res if cnt == N else []","title":"\u89e3\u6cd5\u4e8c \u63a8\u8350"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#332","text":"","title":"332.\u91cd\u65b0\u5b89\u6392\u884c\u7a0b"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_402","text":"\u7ed9\u5b9a\u4e00\u4e2a\u673a\u7968\u7684\u5b57\u7b26\u4e32\u4e8c\u7ef4\u6570\u7ec4 [from, to]\uff0c\u5b50\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6210\u5458\u5206\u522b\u8868\u793a\u98de\u673a\u51fa\u53d1\u548c\u964d\u843d\u7684\u673a\u573a\u5730\u70b9\uff0c\u5bf9\u8be5\u884c\u7a0b\u8fdb\u884c\u91cd\u65b0\u89c4\u5212\u6392\u5e8f\u3002\u6240\u6709\u8fd9\u4e9b\u673a\u7968\u90fd\u5c5e\u4e8e\u4e00\u4e2a\u4eceJFK\uff08\u80af\u5c3c\u8fea\u56fd\u9645\u673a\u573a\uff09\u51fa\u53d1\u7684\u5148\u751f\uff0c\u6240\u4ee5\u8be5\u884c\u7a0b\u5fc5\u987b\u4ece JFK \u51fa\u53d1\u3002 \u8bf4\u660e: \u5982\u679c\u5b58\u5728\u591a\u79cd\u6709\u6548\u7684\u884c\u7a0b\uff0c\u4f60\u53ef\u4ee5\u6309\u5b57\u7b26\u81ea\u7136\u6392\u5e8f\u8fd4\u56de\u6700\u5c0f\u7684\u884c\u7a0b\u7ec4\u5408\u3002\u4f8b\u5982\uff0c\u884c\u7a0b [\"JFK\", \"LGA\"] \u4e0e [\"JFK\", \"LGB\"] \u76f8\u6bd4\u5c31\u66f4\u5c0f\uff0c\u6392\u5e8f\u66f4\u9760\u524d \u6240\u6709\u7684\u673a\u573a\u90fd\u7528\u4e09\u4e2a\u5927\u5199\u5b57\u6bcd\u8868\u793a\uff08\u673a\u573a\u4ee3\u7801\uff09\u3002 \u5047\u5b9a\u6240\u6709\u673a\u7968\u81f3\u5c11\u5b58\u5728\u4e00\u79cd\u5408\u7406\u7684\u884c\u7a0b\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[\"MUC\", \"LHR\"], [\"JFK\", \"MUC\"], [\"SFO\", \"SJC\"], [\"LHR\", \"SFO\"]] \u8f93\u51fa: [\"JFK\", \"MUC\", \"LHR\", \"SFO\", \"SJC\"] \u793a\u4f8b 2: \u8f93\u5165: [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]] \u8f93\u51fa: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"] \u89e3\u91ca: \u53e6\u4e00\u79cd\u6709\u6548\u7684\u884c\u7a0b\u662f [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"]\u3002\u4f46\u662f\u5b83\u81ea\u7136\u6392\u5e8f\u66f4\u5927\u66f4\u9760\u540e\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_403","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs_11","text":"class Solution: def findItinerary(self, tickets: List[List[str]]) -> List[str]: \"\"\" \u8fb9\u754c\u6761\u4ef6\uff1a\u53ef\u80fd\u6709\u73af dfs\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u6709\u601d\u8def \u8d70\u4e0d\u901a\u56de\u6eaf \"\"\" def DFS(s, path, paths): if len(path) == N: path.append(s) return path for v in g[s]: if (s, v) in paths and paths[(s, v)] != 0: paths[(s, v)] -= 1 ans = DFS(v, path + [s], paths) if ans: return ans paths[(s, v)] += 1 # 1.\u6784\u5efa\u56fe g = dict() paths = collections.defaultdict(int) for s, t in tickets: g.setdefault(s, []) g.setdefault(t, []) g[s].append(t) paths[(s, t)] += 1 for k, v in g.items(): g[k] = sorted(v) N = len(tickets) return DFS(\"JFK\", [], paths)","title":"\u89e3\u6cd5\u4e00 DFS"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_404","text":"import java.util.*; class Solution { public List findItinerary(List> tickets) { // \u56e0\u4e3a\u9006\u5e8f\u63d2\u5165\uff0c\u6240\u4ee5\u7528\u94fe\u8868 List ans = new LinkedList<>(); if (tickets == null || tickets.size() == 0) return ans; Map<> graph = new HashMap<>(); for (List pair : tickets) { // \u56e0\u4e3a\u6d89\u53ca\u5220\u9664\u64cd\u4f5c\uff0c\u6211\u4eec\u7528\u94fe\u8868 PriorityQueue nbr = graph.computeIfAbsent(pair.get(0), k -> new PriorityQueue<>()); nbr.add(pair.get(1)); } visit(graph, \"JFK\", ans); return ans; } // DFS\u65b9\u5f0f\u904d\u5386\u56fe\uff0c\u5f53\u8d70\u5230\u4e0d\u80fd\u8d70\u4e3a\u6b62\uff0c\u518d\u5c06\u8282\u70b9\u52a0\u5165\u5230\u7b54\u6848 private void visit(Map> graph, String src, List ans) { PriorityQueue nbr = graph.get(src); while (nbr != null && nbr.size() > 0) { String dest = nbr.poll(); visit(graph, dest, ans); } ans.add(0, src); // \u9006\u5e8f\u63d2\u5165 } }","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#785","text":"","title":"785.\u5224\u65ad\u4e8c\u5206\u56fe"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7851","text":"\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe graph \uff0c\u5f53\u8fd9\u4e2a\u56fe\u4e3a\u4e8c\u5206\u56fe\u65f6\u8fd4\u56de true \u3002 \u5982\u679c\u6211\u4eec\u80fd\u5c06\u4e00\u4e2a\u56fe\u7684\u8282\u70b9\u96c6\u5408\u5206\u5272\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u96c6A\u548cB\uff0c\u5e76\u4f7f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u4e2a\u6765\u81eaA\u96c6\u5408\uff0c\u4e00\u4e2a\u6765\u81eaB\u96c6\u5408\uff0c\u6211\u4eec\u5c31\u5c06\u8fd9\u4e2a\u56fe\u79f0\u4e3a\u4e8c\u5206\u56fe\u3002 graph \u5c06\u4f1a\u4ee5\u90bb\u63a5\u8868\u65b9\u5f0f\u7ed9\u51fa\uff0c graph[i] \u8868\u793a\u56fe\u4e2d\u4e0e\u8282\u70b9 i \u76f8\u8fde\u7684\u6240\u6709\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u5728 0 \u5230 graph.length-1 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u8fd9\u56fe\u4e2d\u6ca1\u6709\u81ea\u73af\u548c\u5e73\u884c\u8fb9\uff1a graph[i] \u4e2d\u4e0d\u5b58\u5728 i \uff0c\u5e76\u4e14 graph[i] \u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u503c\u3002 \u793a\u4f8b 1: \u8f93\u5165: [[1,3], [0,2], [1,3], [0,2]] \u8f93\u51fa: true \u89e3\u91ca: \u65e0\u5411\u56fe\u5982\u4e0b: 0----1 | | | | 3----2 \u6211\u4eec\u53ef\u4ee5\u5c06\u8282\u70b9\u5206\u6210\u4e24\u7ec4: {0, 2} \u548c {1, 3}\u3002 \u793a\u4f8b 2: \u8f93\u5165: [[1,2,3], [0,2], [0,1,3], [0,2]] \u8f93\u51fa: false \u89e3\u91ca: \u65e0\u5411\u56fe\u5982\u4e0b: 0----1 | \\ | | \\ | 3----2 \u6211\u4eec\u4e0d\u80fd\u5c06\u8282\u70b9\u5206\u5272\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u96c6\u3002 \u6ce8\u610f: graph \u7684\u957f\u5ea6\u8303\u56f4\u4e3a [1, 100] \u3002 graph[i] \u4e2d\u7684\u5143\u7d20\u7684\u8303\u56f4\u4e3a [0, graph.length - 1] \u3002 graph[i] \u4e0d\u4f1a\u5305\u542b i \u6216\u8005\u6709\u91cd\u590d\u7684\u503c\u3002 \u56fe\u662f\u65e0\u5411\u7684: \u5982\u679c j \u5728 graph[i] \u91cc\u8fb9, \u90a3\u4e48 i \u4e5f\u4f1a\u5728 graph[j] \u91cc\u8fb9\u3002","title":"785.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7852","text":"","title":"785.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#78521","text":"Our goal \u6b63\u5728\u5c1d\u8bd5\u4f7f\u7528\u4e24\u79cd\u989c\u8272\u4e3a\u56fe\u5f62\u7740\u8272\uff0c\u5e76\u67e5\u770b\u662f\u5426\u6709\u4efb\u4f55\u76f8\u90bb\u7684\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u989c\u8272\u3002 \u4e3a\u6bcf\u4e2a\u8282\u70b9\u521d\u59cb\u5316\u4e00\u4e2acolor []\u6570\u7ec4\u3002\u8fd9\u662f colors[] \u6570\u7ec4\u7684\u4e09\u79cd\u72b6\u6001\uff1a 0: Haven't been colored yet. 1: Blue. -1: Red. \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c \u5982\u679c\u5c1a\u672a\u7740\u8272\uff0c\u8bf7\u4f7f\u7528\u4e00\u79cd\u989c\u8272\u5bf9\u5176\u8fdb\u884c\u7740\u8272\u3002\u7136\u540e\u4f7f\u7528\u53e6\u4e00\u79cd\u989c\u8272\u4e3a\u5176\u6240\u6709\u76f8\u90bb\u8282\u70b9\uff08DFS\uff09\u7740\u8272\u3002 \u5982\u679c\u5df2\u7740\u8272\uff0c\u8bf7\u68c0\u67e5\u5f53\u524d\u989c\u8272\u662f\u5426\u4e0e\u5c06\u7528\u4e8e\u7740\u8272\u7684\u989c\u8272\u76f8\u540c class Solution: def isBipartite(self, graph: List[List[int]]) -> bool: color = {} def dfs(i): for adj in graph[i]: if adj in color: if color[adj] == color[i]: return False else: color[adj] = -color[i] if not dfs(adj): return False return True # his graph might be a disconnected graph. So check each unvisited node. for i in range(len(graph)): if i not in color: color[i] = 1 if not dfs(i): return False return True class Solution { public boolean isBipartite(int[][] graph) { int n = graph.length; int[] colors = new int[n]; for (int i = 0; i < n; i++) { //This graph might be a disconnected graph. So check each unvisited node. if (colors[i] == 0 && !validColor(graph, colors, 1, i)) { return false; } } return true; } public boolean validColor(int[][] graph, int[] colors, int color, int node) { if (colors[node] != 0) { return colors[node] == color; } colors[node] = color; for (int next : graph[node]) { if (!validColor(graph, colors, -color, next)) { return false; } } return true; } }","title":"785.2.1 \u65b9\u6cd5\u4e00 \u9ed1\u767d\u67d3\u8272\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#78522","text":"","title":"785.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#274h","text":"","title":"274.H\u6307\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2741","text":"\u7ed9\u5b9a\u4e00\u4f4d\u7814\u7a76\u8005\u8bba\u6587\u88ab\u5f15\u7528\u6b21\u6570\u7684\u6570\u7ec4\uff08\u88ab\u5f15\u7528\u6b21\u6570\u662f\u975e\u8d1f\u6574\u6570\uff09\u3002\u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8ba1\u7b97\u51fa\u7814\u7a76\u8005\u7684 h \u6307\u6570\u3002 h \u6307\u6570\u7684\u5b9a\u4e49 : \u201ch \u4ee3\u8868\u201c\u9ad8\u5f15\u7528\u6b21\u6570\u201d\uff08high citations\uff09\uff0c\u4e00\u540d\u79d1\u7814\u4eba\u5458\u7684 h \u6307\u6570\u662f\u6307\u4ed6\u7684\u8f6e\u79cd\u6709 h \u7bc7\u8bba\u6587\u5206\u522b\u88ab\u5f15\u7528\u4e86 \u81f3\u5c11 h \u6b21\uff0c\u5176\u4f59\u7684 N - h \u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528\u6b21\u6570 \u5c0f\u4e8e h \u6b21 A scientist has index h if h of his/her N papers have at least h citations each, and the other N \u2212 h papers have no more than h citations each \u793a\u4f8b: \u8f93\u5165: citations = [3,0,6,1,5] \u8f93\u51fa: 3 \u89e3\u91ca: \u7ed9\u5b9a\u6570\u7ec4\u8868\u793a\u7814\u7a76\u8005\u603b\u5171\u6709 5 \u7bc7\u8bba\u6587\uff0c\u6bcf\u7bc7\u8bba\u6587\u76f8\u5e94\u7684\u88ab\u5f15\u7528\u4e86 3, 0, 6, 1, 5 \u6b21\u3002 \u7531\u4e8e\u7814\u7a76\u8005\u6709 3 \u7bc7\u8bba\u6587\u6bcf\u7bc7\u81f3\u5c11\u88ab\u5f15\u7528\u4e86 3 \u6b21\uff0c\u5176\u4f59\u4e24\u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528\u4e0d\u591a\u4e8e 3 \u6b21\uff0c\u6240\u4ee5\u5979\u7684 h \u6307\u6570\u662f 3\u3002 \u8bf4\u660e: \u5982\u679c h \u6709\u591a\u79cd\u53ef\u80fd\u7684\u503c\uff0c h \u6307\u6570\u662f\u5176\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u3002","title":"274.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2742","text":"","title":"274.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#27421","text":"class Solution: def hIndex(self, citations: List[int]) -> int: for h in range(len(citations), -1, -1): cnt = 0 for num in citations: if num < h: cnt += 1 if cnt <= len(citations) - h: return h return 0","title":"274.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#27422","text":"class Solution: def hIndex(self, citations: List[int]) -> int: citations.sort() for i, num in enumerate(citations): if len(citations) - i <= num: return len(citations) - i return 0 class NumArray { int[] tree; int n; public NumArray(int[] nums) { if (nums.length > 0) { n = nums.length; tree = new int[n * 2]; buildTree(nums); } } private void buildTree(int[] nums) { for (int i = n, j = 0; i < 2 * n; i++, j++) tree[i] = nums[j]; for (int i = n - 1; i > 0; --i) tree[i] = tree[i * 2] + tree[i * 2 + 1]; } void update(int pos, int val) { pos += n; tree[pos] = val; while (pos > 0) { int left = pos; int right = pos; if (pos % 2 == 0) { right = pos + 1; } else { left = pos - 1; } // parent is updated after child is updated tree[pos / 2] = tree[left] + tree[right]; pos /= 2; } } public int sumRange(int l, int r) { // get leaf with value 'l' l += n; // get leaf with value 'r' r += n; int sum = 0; while (l <= r) { if ((l % 2) == 1) { sum += tree[l]; l++; } if ((r % 2) == 0) { sum += tree[r]; r--; } l /= 2; r /= 2; } return sum; } } /** * Your NumArray object will be instantiated and called as such: * NumArray obj = new NumArray(nums); * obj.update(i,val); * int param_2 = obj.sumRange(i,j); */","title":"274.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#399","text":"","title":"399.\u9664\u6cd5\u6c42\u503c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_405","text":"\u7ed9\u51fa\u65b9\u7a0b\u5f0f A / B = k, \u5176\u4e2d A \u548c B \u5747\u4e3a\u4ee3\u8868\u5b57\u7b26\u4e32\u7684\u53d8\u91cf\uff0c k \u662f\u4e00\u4e2a\u6d6e\u70b9\u578b\u6570\u5b57\u3002\u6839\u636e\u5df2\u77e5\u65b9\u7a0b\u5f0f\u6c42\u89e3\u95ee\u9898\uff0c\u5e76\u8fd4\u56de\u8ba1\u7b97\u7ed3\u679c\u3002\u5982\u679c\u7ed3\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1.0\u3002 \u793a\u4f8b : \u7ed9\u5b9a a / b = 2.0, b / c = 3.0 \u95ee\u9898: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? \u8fd4\u56de [6.0, 0.5, -1.0, 1.0, -1.0 ] \u8f93\u5165\u4e3a: vector > equations, vector & values, vector > queries(\u65b9\u7a0b\u5f0f\uff0c\u65b9\u7a0b\u5f0f\u7ed3\u679c\uff0c\u95ee\u9898\u65b9\u7a0b\u5f0f)\uff0c \u5176\u4e2d equations.size() == values.size()\uff0c\u5373\u65b9\u7a0b\u5f0f\u7684\u957f\u5ea6\u4e0e\u65b9\u7a0b\u5f0f\u7ed3\u679c\u957f\u5ea6\u76f8\u7b49\uff08\u7a0b\u5f0f\u4e0e\u7ed3\u679c\u4e00\u4e00\u5bf9\u5e94\uff09\uff0c\u5e76\u4e14\u7ed3\u679c\u503c\u5747\u4e3a\u6b63\u6570\u3002\u4ee5\u4e0a\u4e3a\u65b9\u7a0b\u5f0f\u7684\u63cf\u8ff0\u3002 \u8fd4\u56devector \u7c7b\u578b\u3002 \u57fa\u4e8e\u4e0a\u8ff0\u4f8b\u5b50\uff0c\u8f93\u5165\u5982\u4e0b\uff1a equations(\u65b9\u7a0b\u5f0f) = [ [\"a\", \"b\"], [\"b\", \"c\"] ], values(\u65b9\u7a0b\u5f0f\u7ed3\u679c) = [2.0, 3.0], queries(\u95ee\u9898\u65b9\u7a0b\u5f0f) = [ [\"a\", \"c\"], [\"b\", \"a\"], [\"a\", \"e\"], [\"a\", \"a\"], [\"x\", \"x\"] ]. \u8f93\u5165\u603b\u662f\u6709\u6548\u7684\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u6cd5\u8fd0\u7b97\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u9664\u6570\u4e3a0\u7684\u60c5\u51b5\uff0c\u4e14\u4e0d\u5b58\u5728\u4efb\u4f55\u77db\u76fe\u7684\u7ed3\u679c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_406","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_407","text":"import queue class Solution(object): def calcEquation(self, equations, values, queries): g = collections.defaultdict(dict) for [s, t], v in zip(equations, values): g[s][t] = v g[t][s] = 1 / v g[s][s] = 1.0 g[t][t] = 1.0 def find_path(s, t): if s not in g or t not in g: return -1. que = queue.Queue() que.put((s, 1.0)) visited = set() while not que.empty(): v, cur_product = que.get() if v == t: return cur_product visited.add(v) for adj_v, val in g[v].items(): if adj_v not in visited: # \u8fd9\u91cc\u662f\u4e58\u6cd5 que.put((adj_v, cur_product * val)) return -1.0 return [find_path(s, t) for s, t in queries]","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_408","text":"\u9677\u9631 \u987a\u5e8f\u4e0d\u4e00\u6837\u6709\u53ef\u80fd\u5bfc\u81f4\u4e0d\u80fd\u5efa\u7acb\u6240\u6709\u7684\u8fde\u63a5 class Solution: def calcEquation(self, equations, values, queries): path_w = collections.defaultdict(dict) for (num1, num2), val in zip(equations, values): path_w[num1][num1] = 1.0 path_w[num2][num2] = 1.0 path_w[num1][num2] = val path_w[num2][num1] = 1 / val # for k, i, j in itertools.permutations(quot, 3): for k in path_w: for i in path_w[k]: for j in path_w[k]: path_w[i][j] = path_w[i][k] * path_w[k][j] return [path_w[num1].get(num2, -1.0) for num1, num2 in queries]","title":"\u89e3\u6cd5\u4e8c \u9884\u5148\u5efa\u7acb\u6240\u6709\u7684\u8fde\u63a5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#684","text":"","title":"684.\u5197\u4f59\u8fde\u63a5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_409","text":"\u5728\u672c\u95ee\u9898\u4e2d, \u6811\u6307\u7684\u662f\u4e00\u4e2a\u8fde\u901a\u4e14\u65e0\u73af\u7684\u65e0\u5411\u56fe\u3002 \u8f93\u5165\u4e00\u4e2a\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002 \u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5\u8fb9\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002\u6bcf\u4e00\u4e2a\u8fb9\u7684\u5143\u7d20\u662f\u4e00\u5bf9[u, v] \uff0c\u6ee1\u8db3 u < v\uff0c\u8868\u793a\u8fde\u63a5\u9876\u70b9u \u548cv\u7684\u65e0\u5411\u56fe\u7684\u8fb9\u3002 \u8fd4\u56de\u4e00\u6761\u53ef\u4ee5\u5220\u53bb\u7684\u8fb9\uff0c\u4f7f\u5f97\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9\u7684\u6811\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u8fb9\u3002\u7b54\u6848\u8fb9 [u, v] \u5e94\u6ee1\u8db3\u76f8\u540c\u7684\u683c\u5f0f u < v\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [[1,2], [1,3], [2,3]] \u8f93\u51fa: [2,3] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a: 1 / \\ 2 - 3 \u793a\u4f8b 2\uff1a \u8f93\u5165: [[1,2], [2,3], [3,4], [1,4], [1,5]] \u8f93\u51fa: [1,4] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a: 5 - 1 - 2 | | 4 - 3 \u6ce8\u610f: \u8f93\u5165\u7684\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u5728 3 \u5230 1000\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2dN\u662f\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_410","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_411","text":"import queue class Solution: def findRedundantConnection(self, edges: List[List[int]]) -> List[int]: \"\"\" \u62d3\u6251\u6392\u5e8f(\u65e0\u5411\u56fe) \"\"\" # 1.\u521d\u59cb\u5316\u56fe\u53ca\u5ea6 graph = [[] for _ in range(len(edges))] degree = [0] * len(edges) for s, t in edges: graph[s - 1].append(t - 1) graph[t - 1].append(s - 1) degree[s - 1] += 1 degree[t - 1] += 1 # 2.\u627e\u5230\u5ea6\u4e3a1\u7684\u70b9 que = queue.Queue() for i, d in enumerate(degree): if d == 1: print(i) que.put(i) # 3.\u62d3\u6251\u6392\u5e8f visited = set() while not que.empty(): node = que.get() visited.add(node) for adj in graph[node]: degree[node] -= 1 degree[adj] -= 1 if degree[adj] == 1: que.put(adj) not_visited = set(range(len(edges))) - visited for s, t in edges[::-1]: if s - 1 in not_visited and t - 1 in not_visited: return [s, t] # \u62d3\u6251\u6392\u5e8f \u65e0\u5411\u56fe \u6bcf\u4e00\u8bba\u53bb\u6389\u5ea6\u4e3a1\u7684\u70b9 import queue class Graph: def __init__(self, N): \"\"\" \u65e0\u5411\u56fe\u7684\u7c7b\u62d3\u6251\u6392\u5e8f V: \u9876\u70b9\u6570 node_list: \u90bb\u63a5\u8868 que: \u5ea6\u4e3a1\u7684\u9876\u70b9\u7684\u96c6\u5408 degree: \u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u7684\u5ea6 \"\"\" self.V = N self.adj_list = [[] for _ in range(N)] self.que = queue.Queue() self.degree = [0] * N self.visited = set() self.not_visited = set() def addEdge(self, s, t): self.adj_list[s].append(t) self.adj_list[t].append(s) self.degree[s] += 1 self.degree[t] += 1 # O(n + e) def topological_sort(self): # 1.\u5c06\u6240\u6709\u5165\u5ea6\u4e3a1\u7684\u70b9\u5165\u961f for i in range(self.V): if self.degree[i] == 1: self.que.put(i) # 2.\u8ba1\u6570\uff0c\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u8f93\u51fa\u7684\u9876\u70b9\u6570 count = 0 self.visited = set() while not self.que.empty(): v = self.que.get() self.visited.add(v) count += 1 # 2.1 \u5c06\u6240\u6709v\u6307\u5411\u7684\u9876\u70b9\u5ea6\u51cf\u4e00\uff0c\u540c\u65f6\u628a\u5ea6\u4e3a1\u7684\u70b9\u5165\u961f\u5217 for adj_v in self.adj_list[v]: self.degree[adj_v] -= 1 if self.degree[adj_v] == 1: self.que.put(adj_v) # 3.\u672a\u6d4f\u89c8\u8fc7\u7684\u7ed3\u70b9\u662f\u73af\u4e2d\u7ed3\u70b9 self.not_visited = set(range(self.V)) - self.visited # 4.\u5982\u679c\u6ca1\u6709\u5168\u90e8\u8f93\u51fa\u9876\u70b9\uff0c\u4ee3\u8868\u56fe\u4e2d\u6709\u73af\u8def if count < self.V: return False else: return True class Solution: def findRedundantConnection(self, edges: List[List[int]]) -> List[int]: \"\"\" \u9898\u76ee\u53ef\u8f6c\u53d8\u4e3a\u627e\u73af\uff0c\u5220\u6389\u73af\u7684\u4efb\u610f\u4e00\u4e2a\u8fb9 \u6cd5\u4e00\uff1a\u5e76\u67e5\u96c6 \u6cd5\u4e8c\uff1a\u62d3\u6251\u6392\u5e8f \"\"\" # 1.\u5efa\u90bb\u63a5\u8868 g = Graph(len(edges)) for s, t in edges: g.addEdge(s - 1, t - 1) g.topological_sort() # print(g.not_visited) for s, t in edges[::-1]: if s - 1 in g.not_visited and t - 1 in g.not_visited: return [s, t]","title":"\u89e3\u6cd5\u4e00 \u62d3\u6251\u6392\u5e8f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_412","text":"class DFU: def __init__(self, N): self.subsets = list(range(N)) # \u96c6\u5408\u4e2d\u5143\u7d20\u6570\u91cf\u6216\u6df1\u5ea6 self.rank = [1] * N def find(self, x): if self.subsets[x] != x: self.subsets[x] = self.find(self.subsets[x]) return self.subsets[x] def union(self, x, y): xp = self.find(x) yp = self.find(y) if xp != yp: if self.rank[x] <= self.rank[y]: self.subsets[xp] = yp elif self.rank[x] > self.rank[y]: self.subsets[yp] = xp self.rank[x] = self.rank[y] = self.rank[x] + self.rank[y] class Solution: def findRedundantConnection(self, edges: List[List[int]]) -> List[int]: \"\"\" \u62d3\u6251\u6392\u5e8f(\u65e0\u5411\u56fe) \u5e76\u67e5\u96c6 \"\"\" N = len(edges) dfu = DFU(N) for x, y in edges: if dfu.find(x - 1) == dfu.find(y - 1): return [x, y] else: dfu.union(x - 1, y - 1)","title":"\u89e3\u6cd5\u4e8c \u5e76\u67e5\u96c6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#743","text":"","title":"743.\u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4 [\u63a8\u8350 \u6700\u77ed\u8def\u5f84]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_413","text":"\u6709 N \u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a 1 \u5230 N\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 times\uff0c\u8868\u793a\u4fe1\u53f7\u7ecf\u8fc7\u6709\u5411\u8fb9\u7684\u4f20\u9012\u65f6\u95f4\u3002 times[i] = (u, v, w)\uff0c\u5176\u4e2d u \u662f\u6e90\u8282\u70b9\uff0cv \u662f\u76ee\u6807\u8282\u70b9\uff0c w \u662f\u4e00\u4e2a\u4fe1\u53f7\u4ece\u6e90\u8282\u70b9\u4f20\u9012\u5230\u76ee\u6807\u8282\u70b9\u7684\u65f6\u95f4\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5411\u5f53\u524d\u7684\u8282\u70b9 K \u53d1\u9001\u4e86\u4e00\u4e2a\u4fe1\u53f7\u3002\u9700\u8981\u591a\u4e45\u624d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u90fd\u6536\u5230\u4fe1\u53f7\uff1f\u5982\u679c\u4e0d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u6536\u5230\u4fe1\u53f7\uff0c\u8fd4\u56de -1\u3002 \u6ce8\u610f: N \u7684\u8303\u56f4\u5728 [1, 100] \u4e4b\u95f4\u3002 K \u7684\u8303\u56f4\u5728 [1, N] \u4e4b\u95f4\u3002 times \u7684\u957f\u5ea6\u5728 [1, 6000] \u4e4b\u95f4\u3002 \u6240\u6709\u7684\u8fb9 times[i] = (u, v, w) \u90fd\u6709 1 <= u, v <= N \u4e14 0 <= w <= 100\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_414","text":"\u6700\u77ed\u8def\u5f84\u95ee\u9898","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#oe-log-n","text":"class Solution: def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int: # 1.\u6784\u5efa\u56fe graph = collections.defaultdict(dict) for u, v, w in times: graph[u][v] = w heap = [(0, K)] visited = set() res = -1 # 2.\u6700\u77ed\u8def\u5f84\u95ee\u9898 \u904d\u5386 \u6bcf\u6b21\u627e\u8ddd\u6e90\u70b9\u6700\u77ed\u7684\u8ddd\u79bb\u904d\u5386 while heap: w, v = heapq.heappop(heap) if v not in visited: visited.add(v) res = w for adj in graph[v]: heapq.heappush(heap, (w + graph[v][adj], adj)) return res if len(visited) == N else -1","title":"\u89e3\u6cd5\u4e00 \u6bcf\u6b21\u627e\u6700\u77ed\u7684\u8ddd\u79bb\u8fdb\u884c\u904d\u5386 \u4f18\u5148\u7ea7\u961f\u5217 O(E log N)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dfs-brute","text":"class Solution(object): def networkDelayTime(self, times, N, K): g = collections.defaultdict(list) for u, v, w in times: g[u].append((w, v)) dist = {v: float('inf') for v in range(1, N + 1)} def dfs(v, elapsed): if elapsed >= dist[v]: return dist[v] = elapsed # key sorted for w, adj_v in sorted(g[v]): dfs(adj_v, elapsed + w) dfs(K, 0) ans = max(dist.values()) return ans if ans < float('inf') else -1","title":"\u89e3\u6cd5\u4e8c DFS brute \u8f83\u6162"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bellman-ford-one","text":"class Solution(object): def networkDelayTime(self, times, N, K): def bellman_ford(edges, s): for _ in range(N - 1): for u, v, w in edges: dist[v] = min(dist[v], dist[u] + w) dist = {v: float('inf') for v in range(1, N + 1)} dist[K] = 0 bellman_ford(times, K) max_d = max(dist.values()) return max_d if max_d != float('inf') else -1","title":"\u89e3\u6cd5\u4e09 Bellman-Ford\u7b97\u6cd5 O(NE)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#997","text":"","title":"997.\u627e\u5230\u5c0f\u9547\u7684\u6cd5\u5b98"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_415","text":"","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_416","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_417","text":"\u627e\u5230\u5165\u8bfb\u4e3aN-1\u51fa\u5ea6\u4e3a0\u7684\u70b9 class Solution: def findJudge(self, N: int, trust: List[List[int]]) -> int: indegree = [0] * N outdegree = [0] * N for s, t in trust: indegree[t - 1] += 1 outdegree[s - 1] += 1 for i in range(N): if outdegree[i] == 0 and indegree[i] == N - 1 : return i + 1 return -1","title":"\u89e3\u6cd5\u4e00 \u5165\u5ea6\u51fa\u5ea6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_418","text":"Consider trust as a graph, all pairs are directed edge. The point with in-degree - out-degree = N - 1 become the judge Explanation : Count the degree, and check at the end Time Complexity : Time O(T + N) , space O(N) class Solution: def findJudge(self, N, trust): count = [0] * (N + 1) for i, j in trust: count[i] -= 1 count[j] += 1 for i in range(1, N + 1): if count[i] == N - 1: return i return -1","title":"\u89e3\u6cd5\u4e8c \u4f18\u5316"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1042_1","text":"","title":"1042. \u4e0d\u90bb\u63a5\u690d\u82b1 [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_419","text":"\u6709 N \u4e2a\u82b1\u56ed\uff0c\u6309\u4ece 1 \u5230 N \u6807\u8bb0\u3002\u5728\u6bcf\u4e2a\u82b1\u56ed\u4e2d\uff0c\u4f60\u6253\u7b97\u79cd\u4e0b\u56db\u79cd\u82b1\u4e4b\u4e00\u3002 paths[i] = [x, y] \u63cf\u8ff0\u4e86\u82b1\u56ed x \u5230\u82b1\u56ed y \u7684\u53cc\u5411\u8def\u5f84\u3002 \u53e6\u5916\uff0c\u6ca1\u6709\u82b1\u56ed\u6709 3 \u6761\u4ee5\u4e0a\u7684\u8def\u5f84\u53ef\u4ee5\u8fdb\u5165\u6216\u8005\u79bb\u5f00\u3002 \u4f60\u9700\u8981\u4e3a\u6bcf\u4e2a\u82b1\u56ed\u9009\u62e9\u4e00\u79cd\u82b1\uff0c\u4f7f\u5f97\u901a\u8fc7\u8def\u5f84\u76f8\u8fde\u7684\u4efb\u4f55\u4e24\u4e2a\u82b1\u56ed\u4e2d\u7684\u82b1\u7684\u79cd\u7c7b\u4e92\u4e0d\u76f8\u540c\u3002 \u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u9009\u62e9\u7684\u65b9\u6848\u4f5c\u4e3a\u7b54\u6848 answer\uff0c\u5176\u4e2d answer[i] \u4e3a\u5728\u7b2c (i+1) \u4e2a\u82b1\u56ed\u4e2d\u79cd\u690d\u7684\u82b1\u7684\u79cd\u7c7b\u3002\u82b1\u7684\u79cd\u7c7b\u7528 1, 2, 3, 4 \u8868\u793a\u3002\u4fdd\u8bc1\u5b58\u5728\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1aN = 3, paths = [[1,2],[2,3],[3,1]] \u8f93\u51fa\uff1a[1,2,3] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aN = 4, paths = [[1,2],[3,4]] \u8f93\u51fa\uff1a[1,2,1,2] \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1aN = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]] \u8f93\u51fa\uff1a[1,2,3,4] \u63d0\u793a\uff1a 1 <= N <= 10000 0 <= paths.size <= 20000 \u4e0d\u5b58\u5728\u82b1\u56ed\u6709 4 \u6761\u6216\u8005\u66f4\u591a\u8def\u5f84\u53ef\u4ee5\u8fdb\u5165\u6216\u79bb\u5f00\u3002 \u4fdd\u8bc1\u5b58\u5728\u7b54\u6848\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_420","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_421","text":"class Solution: def gardenNoAdj(self, N: int, paths: List[List[int]]) -> List[int]: graph = [[] for _ in range(N)] for x, y in paths: graph[x - 1].append(y - 1) graph[y - 1].append(x - 1) res = [0] * N for i in range(N): left = {1, 2, 3, 4} for j in graph[i]: left = left - {res[j]} res[i] = left.pop() return res","title":"\u89e3\u6cd5\u4e00 \u90bb\u63a5\u8868 + \u904d\u5386"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_422","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_423","text":"","title":"\u52a8\u89c4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#01","text":"","title":"01\u80cc\u5305\u95ee\u9898"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_424","text":"\u6709 $N$ \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f $V$ \u7684\u80cc\u5305\u3002\u6bcf\u4ef6\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u7b2c $i$ \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f $v_i$\uff0c\u4ef7\u503c\u662f $w_i$\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_425","text":"\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0c$N\uff0cV$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u6570\u91cf\u548c\u80cc\u5305\u5bb9\u79ef\u3002 \u63a5\u4e0b\u6765\u6709 $N$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 $v_i, w_i$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7b2c $i$ \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u3002","title":"\u8f93\u5165\u683c\u5f0f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_426","text":"\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u4ef7\u503c\u3002","title":"\u8f93\u51fa\u683c\u5f0f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_427","text":"$0 \\lt N, V \\le 1000$ $0\\lt v_i, w_i \\le 1000$","title":"\u6570\u636e\u8303\u56f4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_428","text":"4 5 1 2 2 4 3 4 4 5","title":"\u8f93\u5165\u6837\u4f8b"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_429","text":"8","title":"\u8f93\u51fa\u6837\u4f8b\uff1a"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_430","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_6","text":"/* f[i][j]: \u53ea\u653e\u524di\u4e2a\u7269\u54c1, \u603b\u4f53\u79ef\u662fj\u7684\u60c5\u51b5\u4e0b\u603b\u4ef7\u503c\u6700\u5927\u662f\u591a\u5c11 result = max(f[n][0~V]) f[i][j] = max(f[i-1][j], f[i-1][j-[i]] + w[i]) f[0][0] = 0 */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 1010; int n, m; int f[N][N]; int v[N], w[N]; int main() { cin >> n >> m; for (int i = 1; i <= n; i++) cin >> v[i] >> w[i]; for (int i = 1; i <= n; i++) for (int j = 0; j <= m; j++) { f[i][j] = f[i-1][j]; if (j >= v[i]) f[i][j] = max(f[i][j], f[i-1][j-v[i]] + w[i]); } cout << f[n][m] << endl; return 0; }","title":"\u89e3\u6cd5\u4e00 dp"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_7","text":"\u7a7a\u95f4\u4f18\u5316\u5173\u952e\u662f\u4ece\u5927\u5230\u5c0f\u679a\u4e3e /* f[i][j]: \u53ea\u653e\u524di\u4e2a\u7269\u54c1, \u603b\u4f53\u79ef\u662fj\u7684\u60c5\u51b5\u4e0b\u603b\u4ef7\u503c\u6700\u5927\u662f\u591a\u5c11 result = max(f[n][0~V]) f[i][j] = max(f[i-1][j], f[i-1][j-[i]] + w[i]) f[0][0] = 0 */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 1010; int n, m; int f[N]; int v[N], w[N]; int main() { cin >> n >> m; for (int i = 1; i <= n; i++) cin >> v[i] >> w[i]; for (int i = 1; i <= n; i++) for (int j = m; j >= v[i]; j--) { // \u7a7a\u95f4\u4f18\u5316key: \u82e5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e, f[j-v[i]]\u4f7f\u7528\u7684\u662ff[i][j-v[i]], \u6240\u4ee5\u4ece\u5927\u5230\u5c0f\u679a\u4e3e f[j] = max(f[j], f[j-v[i]] + w[i]); } cout << f[m] << endl; return 0; }","title":"\u89e3\u6cd5\u4e8c dp \u7a7a\u95f4\u4f18\u5316"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_431","text":"","title":"\u5b8c\u5168\u80cc\u5305\u95ee\u9898"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_432","text":"\u6709 $N$ \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f $V$ \u7684\u80cc\u5305\uff0c\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4ef6\u53ef\u7528\u3002 \u7b2c $i$ \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662f $v_i$\uff0c\u4ef7\u503c\u662f $w_i$\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_433","text":"\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0c$N\uff0cV$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u79cd\u6570\u548c\u80cc\u5305\u5bb9\u79ef\u3002 \u63a5\u4e0b\u6765\u6709 $N$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 $v_i, w_i$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7b2c $i$ \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u3002","title":"\u8f93\u5165\u683c\u5f0f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_434","text":"\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u4ef7\u503c\u3002","title":"\u8f93\u51fa\u683c\u5f0f"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_435","text":"$0 \\lt N, V \\le 1000$ $0 \\lt v_i, w_i \\le 1000$","title":"\u6570\u636e\u8303\u56f4"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_436","text":"4 5 1 2 2 4 3 4 4 5","title":"\u8f93\u5165\u6837\u4f8b"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_437","text":"10","title":"\u8f93\u51fa\u6837\u4f8b\uff1a"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_438","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_439","text":"","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_440","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#53","text":"","title":"53.\u6700\u5927\u5b50\u5e8f\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#531","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 \u793a\u4f8b: \u8f93\u5165: [-2,1,-3,4,-1,2,1,-5,4], \u8f93\u51fa: 6 \u89e3\u91ca: \u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6\u3002 \u8fdb\u9636: \u5982\u679c\u4f60\u5df2\u7ecf\u5b9e\u73b0\u590d\u6742\u5ea6\u4e3a O( n ) \u7684\u89e3\u6cd5\uff0c\u5c1d\u8bd5\u4f7f\u7528\u66f4\u4e3a\u7cbe\u5999\u7684\u5206\u6cbb\u6cd5\u6c42\u89e3\u3002","title":"53.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#532","text":"","title":"53.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5321-dp","text":"state: \u4ee5i\u4e3a\u8fde\u7eed\u5b50\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7d22\u5f15\u7684\u548c class Solution { public int maxSubArray(int[] nums) { int[] dp = new int[nums.length+1]; int ans = Integer.MIN_VALUE; for(int i = 0; i < nums.length; i++){ if(dp[i] <= 0){ dp[i+1] = nums[i]; }else{ dp[i+1] = dp[i] + nums[i]; } if(dp[i+1] > ans){ ans = dp[i+1]; } } return ans; } } class Solution: def maxSubArray(self, nums: List[int]) -> int: if not nums: return 0 res = float('-inf') sumv = 0 for num in nums: sumv += num res = max(sumv, res) if sumv < 0: sumv = 0 return res","title":"53.2.1 \u65b9\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#5322-dc","text":"class Solution { public int maxSubArray(int[] nums) { return maxSubArray(nums, 0, nums.length-1); } private int maxSubArray(int[] nums, int left, int right){ // \u7ec8\u6b62\u6761\u4ef6 if(left == right){ return nums[left]; } int mid = (left + right) >> 1; int leftSum = maxSubArray(nums, left, mid); int rightSum = maxSubArray(nums, mid+1, right); int crossSum = crossSubArray(nums, left, right); return Math.max(Math.max(leftSum, rightSum), crossSum); } private int crossSubArray(int[] nums, int left, int right){ int mid = (left + right) >> 1; // \u6700\u5c0f\u503c int leftSum = Integer.MIN_VALUE; int rightSum = Integer.MIN_VALUE; int sum = 0; for(int i = mid; i >= left; i--){ sum += nums[i]; leftSum = Math.max(leftSum, sum); } sum = 0; for(int i = mid+1; i <= right; i++){ sum += nums[i]; rightSum = Math.max(rightSum, sum); } return leftSum + rightSum; } }","title":"53.2.2 \u65b9\u6cd5\u4e8c D&amp;C"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#70","text":"","title":"70.\u722c\u697c\u68af"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#701","text":"\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f \u6ce8\u610f\uff1a \u7ed9\u5b9a n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a 2 \u8f93\u51fa\uff1a 2 \u89e3\u91ca\uff1a \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 2. 2 \u9636 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a 3 \u8f93\u51fa\uff1a 3 \u89e3\u91ca\uff1a \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 + 1 \u9636 2. 1 \u9636 + 2 \u9636 3. 2 \u9636 + 1 \u9636","title":"70.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#702","text":"","title":"70.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7021-dp","text":"class Solution { public int climbStairs(int n) { int[] dp = new int[n+1]; dp[0] = 1; dp[1] = 1; for(int i = 2; i <= n; i++){ dp[i] = dp[i-1] + dp[i-2]; } return dp[n]; } }","title":"70.2.1 \u65b9\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#72_1","text":"","title":"72. \u7f16\u8f91\u8ddd\u79bb"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_441","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c\u8ba1\u7b97\u51fa\u5c06 word1 \u8f6c\u6362\u6210 word2 \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570 \u3002 \u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26 \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 \u66ff\u6362\u4e00\u4e2a\u5b57\u7b26 \u793a\u4f8b 1: \u8f93\u5165: word1 = \"horse\", word2 = \"ros\" \u8f93\u51fa: 3 \u89e3\u91ca: horse -> rorse (\u5c06 'h' \u66ff\u6362\u4e3a 'r') rorse -> rose (\u5220\u9664 'r') rose -> ros (\u5220\u9664 'e') \u793a\u4f8b 2: \u8f93\u5165: word1 = \"intention\", word2 = \"execution\" \u8f93\u51fa: 5 \u89e3\u91ca: intention -> inention (\u5220\u9664 't') inention -> enention (\u5c06 'i' \u66ff\u6362\u4e3a 'e') enention -> exention (\u5c06 'n' \u66ff\u6362\u4e3a 'x') exention -> exection (\u5c06 'n' \u66ff\u6362\u4e3a 'c') exection -> execution (\u63d2\u5165 'u')","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_442","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_8","text":"\u52a8\u6001\u89c4\u5212\uff1a dp[i][j] \u4ee3\u8868 word1 \u5230 i \u4f4d\u7f6e\u8f6c\u6362\u6210 word2 \u5230 j \u4f4d\u7f6e\u9700\u8981\u6700\u5c11\u6b65\u6570 \u6240\u4ee5\uff0c \u5f53 word1[i] == word2[j]\uff0cdp[i][j] = dp[i-1][j-1]\uff1b \u5f53 word1[i] != word2[j]\uff0cdp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1 \u5176\u4e2d\uff0cdp[i-1][j-1] \u8868\u793a\u66ff\u6362\u64cd\u4f5c\uff0cdp[i-1][j] \u8868\u793a\u5220\u9664\u64cd\u4f5c\uff0cdp[i][j-1] \u8868\u793a\u63d2\u5165\u64cd\u4f5c\u3002 \u6ce8\u610f\uff0c\u9488\u5bf9\u7b2c\u4e00\u884c\uff0c\u7b2c\u4e00\u5217\u8981\u5355\u72ec\u8003\u8651\uff0c\u6211\u4eec\u5f15\u5165 '' \u4e0b\u56fe\u6240\u793a\uff1a \u7b2c\u4e00\u884c\uff0c\u662f word1 \u4e3a\u7a7a\u53d8\u6210 word2 \u6700\u5c11\u6b65\u6570\uff0c\u5c31\u662f\u63d2\u5165\u64cd\u4f5c \u7b2c\u4e00\u5217\uff0c\u662f word2 \u4e3a\u7a7a\uff0c\u9700\u8981\u7684\u6700\u5c11\u6b65\u6570\uff0c\u5c31\u662f\u5220\u9664\u64cd\u4f5c \u2460\u5148\u5220\u9664\u5b57\u7b26\u4e32X \u7684\u7b2c i \u4e2a\u5b57\u7b26source[i] \u518d\u5c06\u6e90\u5b57\u7b26\u4e32X \u7684\u524d i-1 \u4e2a\u5b57\u7b26 X[1...i-1] \u8f6c\u6362\u6210 \u76ee\u6807\u5b57\u7b26\u4e32Y[1...j]\uff0c \u2461\u5148\u5c06 \u63d2\u5165\u5b57\u7b26\u4e32Y\u7684\u7b2c j \u4e2a\u5b57\u7b26 target[j] \uff0c\u7136\u540e\u518d \u2462\u5148\u5c06 \u6e90\u5b57\u7b26\u4e32\u4e2d\u7684 \u7b2c i \u4e2a\u5b57\u7b26X[i] \u66ff\u6362\u4e3a \u76ee\u6807\u5b57\u7b26\u4e32\u7684\u7b2c j \u4e2a\u5b57\u7b26 Y[j]\uff0c\u7136\u540e \u6e90\u5b57\u7b26\u4e32X[1...i-1] \u8f6c\u6362\u6210 \u76ee\u6807\u5b57\u7b26\u4e32Y[1...j-1] class Solution: def minDistance(self, word1: str, word2: str) -> int: \"\"\" \u52a8\u6001\u89c4\u5212: \"\"\" res1, res2 = [], [] m, n = len(word1), len(word2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j for i in range(1, m + 1): for j in range(1, n + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + 1) return dp[m][n]","title":"\u89e3\u6cd5\u4e00 dp"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_443","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#95ii-dp","text":"","title":"95.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811II \u4e0d\u7528DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_444","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n\uff0c\u751f\u6210\u6240\u6709\u7531 1 ... n \u4e3a\u8282\u70b9\u6240\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u793a\u4f8b: \u8f93\u5165: 3 \u8f93\u51fa: [ [1,null,3,2], [3,2,null,1], [3,1,null,null,2], [2,1,3], [1,null,2,null,3] ] \u89e3\u91ca: \u4ee5\u4e0a\u7684\u8f93\u51fa\u5bf9\u5e94\u4ee5\u4e0b 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_445","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_446","text":"\u6211\u4eec\u4ece\u5e8f\u5217 1 ..n \u4e2d\u53d6\u51fa\u6570\u5b57 i \uff0c\u4f5c\u4e3a\u5f53\u524d\u6811\u7684\u6811\u6839\u3002\u4e8e\u662f\uff0c\u5269\u4f59 i - 1 \u4e2a\u5143\u7d20\u53ef\u7528\u4e8e\u5de6\u5b50\u6811\uff0c n - i \u4e2a\u5143\u7d20\u7528\u4e8e\u53f3\u5b50\u6811\u3002 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def generateTrees(self, n: int) -> List[TreeNode]: \"\"\" \u52a8\u6001\u89c4\u5212 \u4ece1...n\u9009\u51fa\u4e00\u4e2a\u6570i\u4f5c\u4e3aroot, 1...i-1\u505a\u4e3a\u5de6\u5b50\u6811 i+1...n\u4f5c\u4e3a\u53f3\u5b50\u6811 \"\"\" def helper(m, n): if m > n: return [None,] res = [] for i in range(m, n + 1): left_trees = helper(m, i - 1) right_trees = helper(i + 1, n) for l in left_trees: for r in right_trees: root = TreeNode(i) root.left = l root.right = r res.append(root) return res return helper(1, n) if n else []","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_447","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#120","text":"","title":"120.\u4e09\u89d2\u5f62\u5185\u89d2\u548c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1201","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e09\u89d2\u5f62\uff1a [ [2], [3,4], [6,5,7], [4,1,8,3] ] \u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a 11 \uff08\u5373\uff0c 2 + 3 + 5 + 1 = 11\uff09\u3002 \u8bf4\u660e\uff1a \u5982\u679c\u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528 O ( n ) \u7684\u989d\u5916\u7a7a\u95f4\uff08 n \u4e3a\u4e09\u89d2\u5f62\u7684\u603b\u884c\u6570\uff09\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u7684\u7b97\u6cd5\u4f1a\u5f88\u52a0\u5206\u3002","title":"120.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1202","text":"","title":"120.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#12021-ton","text":"state: \u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u8282\u70b9\u7684 class Solution { public int minimumTotal(List<List<Integer>> triangle) { int[] A = new int[triangle.size()+1]; for(int i = triangle.size() - 1; i >= 0; i--){ for(int j = 0; j < triangle.get(i).size(); j++){ A[j] = Math.min(A[j], A[j+1]) + triangle.get(i).get(j); } } return A[0]; } }","title":"120.2.1 \u65b9\u6cd5\u4e00 TO(n)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#12022","text":"","title":"120.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#121","text":"","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1211d","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002 \u793a\u4f8b 2: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002","title":"121.1.\u9898\u76ee\u63cf\u8ff0d"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1212","text":"","title":"121.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#12121-dp","text":"class Solution { public int maxProfit(int[] prices) { // \u8bb0\u5f55\u5230\u5f53\u524d\u65e5\u671f\u7684\u80a1\u7968\u6700\u4f4e\u4ef7\u683c // \u524di\u5929\u7684\u6700\u5927\u4ef7\u683c = max(\u524di-1\u5929\u7684\u6700\u5927\u4ef7\u683c, \u7b2ci\u5929\u7684\u4ef7\u683c-\u5230\u5f53\u524d\u65e5\u671f\u7684\u80a1\u7968\u6700\u4f4e\u4ef7\u683c\uff09 if(prices.length == 0){ return 0; } int[] dp = new int[prices.length]; int minPrice = prices[0]; for(int i = 1; i < prices.length; i++){ dp[i] = Math.max(dp[i-1], prices[i] - minPrice); minPrice = Math.min(minPrice, prices[i]); } return dp[prices.length-1]; } }","title":"121.2.1 \u65b9\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#12122","text":"\u7ef4\u6301\u4e24\u4e2a\u53d8\u91cf \"\u6700\u5c0f\u4ef7\u683c\" \"\u6700\u5927\u5229\u6da6\" class Solution { public int maxProfit(int[] prices) { int minprice = Integer.MAX_VALUE; int maxprofit = 0; for(int i = 0; i < prices.length; i++){ if(prices[i] < minprice){ minprice = prices[i]; }else if(prices[i] - minprice > maxprofit){ maxprofit = prices[i] - minprice } } return maxprofit; } }","title":"121.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#122-ii","text":"","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_448","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_449","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_450","text":"\u627e\u5230\u5c40\u90e8\u6700\u4f18\u5c31\u5356\u6389 class Solution: def maxProfit(self, prices: List[int]) -> int: \"\"\" \u8d2a\u5fc3 \u627e\u5230\u5c40\u90e8\u6700\u4f18\u5c31\u5356\u6389 \u6ce2\u5cf0\u6ce2\u8c37 \"\"\" if not prices: return 0 min_value = prices[0] ans = 0 for i in range(1, len(prices)): if min_value >= prices[i]: min_value = prices[i] else: if (i + 1 < len(prices) and prices[i] > prices[i+1]): ans = ans + prices[i] - min_value min_value = prices[i + 1] elif (i == len(prices) - 1 and prices[i] > min_value): ans += prices[i] - min_value return ans","title":"\u89e3\u6cd5\u4e00 \u8d2a\u5fc3"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_451","text":"\u8be5\u89e3\u51b3\u65b9\u6848\u9075\u5faa \u65b9\u6cd5\u4e8c \u7684\u672c\u8eab\u4f7f\u7528\u7684\u903b\u8f91\uff0c\u4f46\u6709\u4e00\u4e9b\u8f7b\u5fae\u7684\u53d8\u5316\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u7ee7\u7eed\u5728\u659c\u5761\u4e0a\u722c\u5347\u5e76\u6301\u7eed\u589e\u52a0\u4ece\u8fde\u7eed\u4ea4\u6613\u4e2d\u83b7\u5f97\u7684\u5229\u6da6\uff0c\u800c\u4e0d\u662f\u5728\u8c37\u4e4b\u540e\u5bfb\u627e\u6bcf\u4e2a\u5cf0\u503c\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u6709\u6548\u5730\u4f7f\u7528\u5cf0\u503c\u548c\u8c37\u503c\uff0c\u4f46\u6211\u4eec\u4e0d\u9700\u8981\u8ddf\u8e2a\u5cf0\u503c\u548c\u8c37\u503c\u5bf9\u5e94\u7684\u6210\u672c\u4ee5\u53ca\u6700\u5927\u5229\u6da6\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ee7\u7eed\u589e\u52a0\u52a0\u6570\u7ec4\u7684\u8fde\u7eed\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u5982\u679c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5927\u4e8e\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u83b7\u5f97\u7684\u603b\u548c\u5c06\u662f\u6700\u5927\u5229\u6da6\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c06\u7b80\u5316\u89e3\u51b3\u65b9\u6848\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u66f4\u6e05\u695a\u5730\u5c55\u73b0\u4e0a\u8ff0\u60c5\u51b5\uff1a [1, 7, 2, 3, 6, 7, 6, 7] \u4e0e\u6b64\u6570\u7ec4\u5bf9\u5e94\u7684\u56fe\u5f62\u662f\uff1a class Solution { public int maxProfit(int[] prices) { int maxprofit = 0; for (int i = 1; i < prices.length; i++) { if (prices[i] > prices[i - 1]) maxprofit += prices[i] - prices[i - 1]; } return maxprofit; } }","title":"\u89e3\u6cd5\u4e8c \u8d2a\u5fc3\u4f18\u5316"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#139","text":"","title":"139.\u5355\u8bcd\u62c6\u5206"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_452","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5305\u542b\u975e\u7a7a\u5355\u8bcd\u5217\u8868\u7684\u5b57\u5178 wordDict\uff0c\u5224\u5b9a s \u662f\u5426\u53ef\u4ee5\u88ab\u7a7a\u683c\u62c6\u5206\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u5728\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002 \u8bf4\u660e\uff1a \u62c6\u5206\u65f6\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u5178\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5355\u8bcd\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: s = \"leetcode\", wordDict = [\"leet\", \"code\"] \u8f93\u51fa: true \u89e3\u91ca: \u8fd4\u56de true \u56e0\u4e3a \"leetcode\" \u53ef\u4ee5\u88ab\u62c6\u5206\u6210 \"leet code\"\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"] \u8f93\u51fa: true \u89e3\u91ca: \u8fd4\u56de true \u56e0\u4e3a \"applepenapple\" \u53ef\u4ee5\u88ab\u62c6\u5206\u6210 \"apple pen apple\"\u3002 \u6ce8\u610f\u4f60\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"] \u8f93\u51fa: false","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_453","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_9","text":"dp[i] \u8868\u793ai\u524d\u9762\u7684\u5b57\u7b26\u4e32\u80fd\u5426\u62c6\u5206 class Solution: def wordBreak(self, s: str, wordDict: List[str]) -> bool: \"\"\" dp[i] \u8868\u793ai\u524d\u9762\u7684\u5b57\u7b26\u4e32\u80fd\u5426\u62c6\u5206 \"\"\" dp = [False] * (len(s) + 1) dp[0] = True wordset = set(wordDict) for i in range(1, len(s) + 1): for j in range(i - 1, -1, -1): if dp[j] and s[j: i] in wordset: dp[i] = True break return dp[len(s)] \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\u3002dp \u6570\u7ec4\u9700\u8981\u4e24\u91cd\u5faa\u73af \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u3002dp \u6570\u7ec4\u7684\u957f\u5ea6\u662f n+1 \u3002","title":"\u89e3\u6cd5\u4e00 dp"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#bruce_1","text":"\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u6cd5\u662f\u7528\u9012\u5f52\u548c\u56de\u6eaf\u3002\u4e3a\u4e86\u627e\u5230\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u5b57\u5178\u5355\u8bcd\u4e2d\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684\u53ef\u80fd\u524d\u7f00\uff0c\u5982\u679c\u5728\u5b57\u5178\u4e2d\u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u53bb\u6389\u8fd9\u4e2a\u524d\u7f00\u540e\u5269\u4f59\u90e8\u5206\u56de\u5f52\u8c03\u7528\u3002\u540c\u65f6\uff0c\u5982\u679c\u67d0\u6b21\u51fd\u6570\u8c03\u7528\u4e2d\u53d1\u73b0\u6574\u4e2a\u5b57\u7b26\u4e32\u90fd\u5df2\u7ecf\u88ab\u62c6\u5206\u4e14\u5728\u5b57\u5178\u4e2d\u51fa\u73b0\u8fc7\u4e86\uff0c\u51fd\u6570\u5c31\u8fd4\u56de true \u3002 public class Solution { public boolean wordBreak(String s, List<String> wordDict) { return word_Break(s, new HashSet(wordDict), 0); } public boolean word_Break(String s, Set<String> wordDict, int start) { if (start == s.length()) { return true; } for (int end = start + 1; end <= s.length(); end++) { if (wordDict.contains(s.substring(start, end)) && word_Break(s, wordDict, end)) { return true; } } return false; } } \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^n)\u3002\u8003\u8651\u6700\u574f\u60c5\u51b5 s = \\text{aaaaaaa}\u3002\u6bcf\u4e00\u4e2a\u524d\u7f00\u90fd\u5728\u5b57\u5178\u4e2d\uff0c\u6b64\u65f6\u56de\u6eaf\u6811\u7684\u590d\u6742\u5ea6\u4f1a\u8fbe\u5230 n^n\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u3002\u56de\u6eaf\u6811\u7684\u6df1\u5ea6\u6700\u6df1\u8fbe\u5230 n \u3002","title":"\u89e3\u6cd5\u4e8c bruce"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_454","text":"\u7531\u4e8e\u524d\u9762\u5355\u8bcd\u4e0d\u5b9a\u957f\uff0c\u6240\u4ee5\u540e\u4e00\u6b65\u7684\u9012\u5f52\u6709\u53ef\u80fd\u91cd\u590d\u88ab\u8c03\u7528\uff0c\u5229\u7528\u8bb0\u5fc6\u5316\u65b9\u6cd5\u63d0\u4ea4\u6548\u7387 public class Solution { public boolean wordBreak(String s, List<String> wordDict) { // Boolean[] \u521d\u59cb\u5316\u4e0d\u662f false \u800c\u662f null return word_Break(s, new HashSet(wordDict), 0, new Boolean[s.length()]); } public boolean word_Break(String s, Set<String> wordDict, int start, Boolean[] memo) { if (start == s.length()) { return true; } // \u5229\u7528\u8bb0\u5fc6\u5316 if(memo[start] != null){ return memo[start]; } for (int end = start + 1; end <= s.length(); end++) { if (wordDict.contains(s.substring(start, end)) && word_Break(s, wordDict, end, memo)){ // \u8fd4\u56de\u524d\u5b58\u50a8\u8bb0\u5fc6\u5316 memo[start] = true; return true; } } // \u8fd4\u56de\u524d\u5b58\u50a8\u8bb0\u5fc6\u5316 memo[start] = false; return false; } } \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\u3002\u56de\u6eaf\u6811\u7684\u5927\u5c0f\u6700\u591a\u8fbe\u5230 n^2\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u3002\u56de\u6eaf\u6811\u7684\u6df1\u5ea6\u6700\u6df1\u8fbe\u5230 n","title":"\u89e3\u6cd5\u4e09 \u8bb0\u5fc6\u5316\u56de\u6eaf"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#198","text":"","title":"198.\u6253\u5bb6\u52ab\u820d"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1981","text":"\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c \u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66 \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c \u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3,1] \u8f93\u51fa: 4 \u89e3\u91ca: \u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002 \u793a\u4f8b 2: \u8f93\u5165: [2,7,9,3,1] \u8f93\u51fa: 12 \u89e3\u91ca: \u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002","title":"198.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1982","text":"","title":"198.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#19821","text":"class Solution { public int rob(int[] nums) { if(nums.length == 0){ return 0; }else if(nums.length == 1){ return nums[0]; } int[] dp = new int[nums.length]; dp[0] = nums[0]; dp[1] = Math.max(nums[1], nums[0]); for(int i = 2; i < nums.length; i++){ dp[i] = Math.max(dp[i-1], dp[i-2] + nums[i]); } return dp[nums.length-1]; } }","title":"198.2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#19822","text":"class Solution(object): def rob(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" last = 0 now = 0 for i in nums: #\u8fd9\u662f\u4e00\u4e2a\u52a8\u6001\u89c4\u5212\u95ee\u9898 last, now = now, max(last + i, now) return now","title":"198.2.2 \u65b9\u6cd5\u4e8c \u8fed\u4ee3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#213ii","text":"","title":"213.\u6253\u5bb6\u52ab\u820dII"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_455","text":"\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\uff0c\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\u3002\u8fd9\u4e2a\u5730\u65b9\u6240\u6709\u7684\u623f\u5c4b\u90fd\u56f4\u6210\u4e00\u5708\uff0c\u8fd9\u610f\u5473\u7740\u7b2c\u4e00\u4e2a\u623f\u5c4b\u548c\u6700\u540e\u4e00\u4e2a\u623f\u5c4b\u662f\u7d27\u6328\u7740\u7684\u3002\u540c\u65f6\uff0c\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1: \u8f93\u5165: [2,3,2] \u8f93\u51fa: 3 \u89e3\u91ca: \u4f60\u4e0d\u80fd\u5148\u5077\u7a83 1 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 2\uff09\uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 2\uff09, \u56e0\u4e3a\u4ed6\u4eec\u662f\u76f8\u90bb\u7684\u3002 \u793a\u4f8b 2: \u8f93\u5165: [1,2,3,1] \u8f93\u51fa: 4 \u89e3\u91ca: \u4f60\u53ef\u4ee5\u5148\u5077\u7a83 1 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 1\uff09\uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 3\uff09\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_456","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_10","text":"class Solution: def rob(self, nums: List[int]) -> int: \"\"\" \u95ee\u9898\u53d8\u6210 max(House[1]...House[n-1], House[2]...House[n]) \"\"\" if not nums: return 0 if len(nums) < 2: return nums[0] # House[1]...House[n-1] n = len(nums) dp = [0] * n dp[1] = nums[0] for i, num in enumerate(nums[1: n - 1]): dp[i + 2] = max(dp[i + 1], dp[i] + num) res = dp[n - 1] dp = [0] * n dp[1] = nums[1] for i, num in enumerate(nums[2:]): dp[i + 2] = max(dp[i + 1], dp[i] + num) res = max(dp[n - 1], res) return res","title":"\u89e3\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_457","text":"class Solution: def rob(self, nums: [int]) -> int: def my_rob(nums): cur, pre = 0, 0 for num in nums: cur, pre = max(pre + num, cur), cur return cur return max(my_rob(nums[:-1]),my_rob(nums[1:])) if len(nums) != 1 else nums[0]","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2211","text":"","title":"221.1 \u6700\u5927\u6b63\u65b9\u5f62"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1_8","text":"\u5728\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b 1 \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002 \u793a\u4f8b: \u8f93\u5165: 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 \u8f93\u51fa: 4","title":"1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#2_8","text":"","title":"2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#21_4","text":"\u6d41\u51fa\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u4f5c\u4e3a\u521d\u59cb\u5316 state: \u4ee5i, j\u4f4d\u7f6e\u4e0a\u5143\u7d20\u4e3a\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u6b63\u65b9\u5f62\u8fb9\u957f dp(i, j) = min{ dp(i-1, j-1), dp(i-1, j), dp(i, j-1) } public class Solution { public int maximalSquare(char[][] matrix) { int rows = matrix.length, cols = rows > 0 ? matrix[0].length : 0; int[][] dp = new int[rows + 1][cols + 1]; int maxsqlen = 0; for (int i = 1; i <= rows; i++) { for (int j = 1; j <= cols; j++) { if (matrix[i-1][j-1] == '1'){ dp[i][j] = Math.min(Math.min(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]) + 1; maxsqlen = Math.max(maxsqlen, dp[i][j]); } } } return maxsqlen * maxsqlen; } } \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn) O ( m n )\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(mn) O ( m n )\uff0c\u7528\u4e86\u4e00\u4e2a\u5927\u5c0f\u76f8\u540c\u7684\u77e9\u9635 dp\u3002","title":"2.1 \u65b9\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#22_3","text":"public class Solution { public int maximalSquare(char[][] matrix) { int rows = matrix.length, cols = rows > 0 ? matrix[0].length : 0; int[] dp = new int[cols + 1]; int maxsqlen = 0, prev = 0; for (int i = 1; i <= rows; i++) { for (int j = 1; j <= cols; j++) { int temp = dp[j]; if (matrix[i - 1][j - 1] == '1') { dp[j] = Math.min(Math.min(dp[j - 1], prev), dp[j]) + 1; maxsqlen = Math.max(maxsqlen, dp[j]); } else { dp[j] = 0; } prev = temp; } } return maxsqlen * maxsqlen; } }","title":"2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#300","text":"","title":"300.\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_458","text":"\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: [10,9,2,5,3,7,101,18] \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c\u5b83\u7684\u957f\u5ea6\u662f 4\u3002 \u8bf4\u660e: \u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u7ec4\u5408\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u5bf9\u5e94\u7684\u957f\u5ea6\u5373\u53ef\u3002 \u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a O(n2) \u3002 \u8fdb\u9636: \u4f60\u80fd\u5c06\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230 O(n log n) \u5417?","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_459","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_11","text":"O(n ** 2) class Solution: def lengthOfLIS(self, nums: List[int]) -> int: \"\"\" dp: \u4ee5nums[i]\u4e3a\u4e0a\u5347\u5b50\u5e8f\u5217\u6700\u540e\u4e00\u4e2a\u503c\u7684\u957f\u5ea6 \u8fdb\u9636\uff1a \u4fee\u6539logn\u65f6\u95f4\u627e\u5230\u5f85\u66f4\u65b0\u7684\u70b9 \"\"\" if not nums: return 0 res = 1 dp = [1] * len(nums) for i, num in enumerate(nums): for j in range(i - 1, -1, -1): if nums[j] < num: dp[i] = max(dp[j] + 1, dp[i]) res = max(dp[i], res) return res","title":"\u89e3\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_460","text":"O(nlogn) \u8d2a\u5fc3\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\uff1a \u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u5982\u4e0b\uff1a \u5982\u679c\u524d\u9762\u7684\u6570\u8d8a\u5c0f\uff0c\u540e\u9762\u63a5\u4e0a\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u5c31\u4f1a\u6709\u66f4\u5927\u7684\u53ef\u80fd\u6027\u6784\u6210\u4e00\u4e2a\u66f4\u957f\u7684\u201c\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u3002 \u8fd9\u4e2a\u601d\u60f3\u4e5f\u4e0d\u96be\u7406\u89e3\uff0c\u6211\u4eec\u4e3e\u4f8b\u8bf4\u660e\uff1a\u5982\u679c\u524d\u9762\u7684\u6570\u662f 11\uff0c\u540e\u9762\u63a5\u4e0a\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u80fd\u591f\u6784\u6210\u957f\u5ea6\u4e3a 22 \u7684\u201c\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u7684\u53ef\u80fd\u6027\uff0c\u5c31\u8fdc\u8fdc\u5927\u4e8e\u524d\u9762\u7684\u6570\u662f 1000010000\uff0c\u540e\u9762\u63a5\u4e0a\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u80fd\u591f\u6784\u6210\u957f\u5ea6\u4e3a 22 \u7684\u201c\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u7684\u53ef\u80fd\u6027\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u601d\u60f3\uff0c\u6211\u4eec\u5148\u4ecb\u7ecd\u7b97\u6cd5\u7684\u6d41\u7a0b\uff0c\u7136\u540e\u518d\u505a\u603b\u7ed3\uff0c\u6700\u540e\u628a\u5176\u4e2d\u5173\u952e\u7684\u5730\u65b9\u5411\u5927\u5bb6\u6307\u51fa \u7b97\u6cd5\u7684\u6267\u884c\u6d41\u7a0b\uff1a 1 \u3001\u8bbe\u7f6e\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4 tail\uff0c\u521d\u59cb\u65f6\u4e3a\u7a7a\uff1b \u6570\u7ec4\u547d\u540d\u4e3a tail \u5927\u5bb6\u5148\u4e0d\u7528\u7ea0\u7ed3\uff0c\u53ea\u8981\u5148\u6709\u4e2a\u5370\u8c61\uff0c\u53cd\u6b63\u6709\u5e8f\u6570\u7ec4 tail \u4e0d\u662f\u201c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\uff08\u4e0b\u6587\u8fd8\u4f1a\u5f3a\u8c03\uff09\uff0c\u4e0d\u80fd\u547d\u540d\u4e3a LIS\uff0c\u6709\u5e8f\u6570\u7ec4 tail \u662f\u7528\u4e8e\u6c42\u89e3 LIS \u95ee\u9898\u7684\u8f85\u52a9\u6570\u7ec4\uff0c\u5982\u679c\u5927\u5bb6\u6709\u66f4\u8d34\u5207\u7684\u547d\u540d\uff0c\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u5411\u6211\u6307\u51fa\u3002 2\u3001\u5728\u904d\u5386\u6570\u7ec4 nums \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6765\u4e00\u4e2a\u65b0\u6570 num\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\uff08\u4e25\u683c\uff09\u5927\u4e8e\u6709\u5e8f\u6570\u7ec4 tail \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5c31\u628a num \u653e\u5728\u6709\u5e8f\u6570\u7ec4 tail \u7684\u540e\u9762\uff0c\u5426\u5219\u8fdb\u5165\u7b2c 3 \u70b9\uff1b \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u5927\u4e8e\u662f\u201c\u4e25\u683c\u5927\u4e8e\u201d\uff0c\u4e0d\u5305\u62ec\u7b49\u4e8e\u7684\u60c5\u51b5\u3002 3\u3001\u5728\u6709\u5e8f\u6570\u7ec4 tail \u4e2d\u67e5\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u7b49\u4e8e num \u7684\u90a3\u4e2a\u6570\uff0c\u8bd5\u56fe\u8ba9\u5b83\u53d8\u5c0f\uff1b \u201c\u8bd5\u56fe\u8ba9\u5b83\u53d8\u5c0f\u201d\u7684\u542b\u4e49\u662f\uff1a\u5982\u679c\u5728\u6709\u5e8f\u6570\u7ec4 tail \u4e2d\u67e5\u627e\u7b2c 1 \u4e2a\u7b49\u4e8e num \u7684\u90a3\u4e2a\u6570\uff0c\u7b49\u4e8e\u5c31\u6ca1\u6709\u529e\u6cd5\u8ba9\u5b83\u53d8\u5c0f\u5566\uff0c\u8fd9\u4e2a\u4f01\u56fe\u5931\u8d25\uff1b\u5982\u679c\u5728\u6709\u5e8f\u6570\u7ec4 tail \u4e2d\u67e5\u627e\u7b2c 1 \u4e2a\uff08\u4e25\u683c\uff09\u5927\u4e8e num \u7684\u90a3\u4e2a\u6570\uff0c\u5c31\u53ef\u4ee5\u8ba9\u5b83\u53d8\u5c0f\uff0c\u4f01\u56fe\u6210\u529f\uff1b \u5728\u6709\u5e8f\u6570\u7ec4 tail \u4e2d\u627e\u5927\u4e8e\u7b49\u4e8e num \u7684\u7b2c 1 \u4e2a\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u3002 4\u3001\u904d\u5386\u65b0\u7684\u6570 num \uff0c\u5148\u5c1d\u8bd5\u4e0a\u8ff0\u7b2c 2 \u70b9\uff0c\u7b2c 2 \u70b9\u884c\u4e0d\u901a\u5c31\u6267\u884c\u7b2c 3 \u70b9\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4 nums\uff0c\u6700\u7ec8\u6709\u5e8f\u6570\u7ec4 tail \u7684\u957f\u5ea6\uff0c\u5c31\u662f\u6240\u6c42\u7684\u201c\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u7684\u957f\u5ea6\u3002 \u4ee5\u4e0a\u7b97\u6cd5\u80fd\u591f\u594f\u6548\u7684\u5173\u952e\u662f\uff1a \u6839\u636e\u6700\u5f00\u59cb\u63d0\u5230\u7684\u201c\u57fa\u672c\u601d\u60f3\u201d\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u79cd\u201c\u8d2a\u5fc3\u9009\u62e9\u201d\u7684\u601d\u60f3\uff1a\u53ea\u8981\u8ba9\u524d\u9762\u7684\u6570\u5c3d\u91cf\u5c0f\uff0c\u5728\u7b97\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u7b2c 2 \u70b9\u88ab\u6267\u884c\u7684\u673a\u4f1a\u5c31\u66f4\u591a\u3002 class Solution: def lengthOfLIS(self, nums: List[int]) -> int: # key: \u8f85\u52a9\u961f\u5217 \u5728j\u5143\u7d20\u5904 \u957f\u5ea6m\u662f\u5f53\u524d\u5217\u8868\u7684\u6700\u957f\u5b50\u5e8f\u5217\u957f\u5ea6 \u5185\u5bb9\u662ftop least m # \u76ee\u7684\u662f\u904d\u5386\u4e0b\u4e00\u4e2a\u5143\u7d20\u65f6\u80fd\u66f4\u5feb\u627e\u5230\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20 if len(nums) < 2: return len(nums) tail = [] for num in nums: if not tail or num > tail[-1]: tail.append(num) continue # \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5\uff0c\u5728\u6709\u5e8f\u6570\u7ec4 tail \u4e2d # \u627e\u5230\u7b2c 1 \u4e2a\u5927\u4e8e\u7b49\u4e8e nums[i] \u7684\u5143\u7d20\uff0c\u5c1d\u8bd5\u8ba9\u90a3\u4e2a\u5143\u7d20\u66f4\u5c0f left = 0 right = len(tail) - 1 while left < right: mid = left + ((right - left) >> 1) # \u8fd9\u6837\u627e\u7684\u5c31\u662f\u5de6\u8fb9\u754c, \u5373\u6bd4num\u66f4\u5927\u7684\u6570\u5b57\u4e2d\u7684\u6700\u5c0f\u503c if tail[mid] < num: left = mid + 1 else: right = mid tail[left] = num return len(tail)","title":"\u89e3\u6cd5\u4e8c \u8d2a\u5fc3\u7b97\u6cd5 + \u4e8c\u5206\u67e5\u627e [\u8bb0\u4f4f]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#303-_1","text":"","title":"303.\u533a\u57df\u548c\u68c0\u7d22-\u6570\u7ec4\u4e0d\u53ef\u53d8"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3031","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15 i \u5230 j ( i \u2264 j ) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b i, j \u4e24\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a nums = [-2, 0, 3, -5, 2, -1]\uff0c\u6c42\u548c\u51fd\u6570\u4e3a sumRange() sumRange(0, 2) -> 1 sumRange(2, 5) -> -1 sumRange(0, 5) -> -3 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e0d\u53ef\u53d8\u3002 \u4f1a\u591a\u6b21\u8c03\u7528 sumRange \u65b9\u6cd5\u3002","title":"303.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#3032","text":"","title":"303.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#30321-dp","text":"class NumArray { private int[] dp; public NumArray(int[] nums) { dp = new int[nums.length+1]; dp[0] = 0; for(int i = 0; i < nums.length; i++){ dp[i+1] = dp[i] + nums[i]; } } public int sumRange(int i, int j) { return dp[j+1] - dp[i]; } } /** * Your NumArray object will be instantiated and called as such: * NumArray obj = new NumArray(nums); * int param_1 = obj.sumRange(i,j); */","title":"303.2.1 \u65b9\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#30322","text":"Imagine that sumRange is called one thousand times with the exact same arguments. How could we speed that up? We could trade in extra space for speed. By pre-computing all range sum possibilities and store its results in a hash table, we can speed up the query to constant time. import javafx.util.Pair; // \u7c7b\u4f3c\u4e8etuple class NumArray { private Map<Pair<Integer, Integer>, Integer> map = new HashMap<>(); public NumArray(int[] nums) { for (int i = 0; i < nums.length; i++) { int sum = 0; for (int j = i; j < nums.length; j++) { sum += nums[j]; map.put(Pair.create(i, j), sum); } } } public int sumRange(int i, int j) { return map.get(Pair.create(i, j)); } } /** * Your NumArray object will be instantiated and called as such: * NumArray obj = new NumArray(nums); * int param_1 = obj.sumRange(i,j); */","title":"303.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#309","text":"","title":"309.\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_461","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c i \u4e2a\u5143\u7d20\u4ee3\u8868\u4e86\u7b2c i \u5929\u7684\u80a1\u7968\u4ef7\u683c \u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09: \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002 \u793a\u4f8b: \u8f93\u5165: [1,2,3,0,2] \u8f93\u51fa: 3 \u89e3\u91ca: \u5bf9\u5e94\u7684\u4ea4\u6613\u72b6\u6001\u4e3a: [\u4e70\u5165, \u5356\u51fa, \u51b7\u51bb\u671f, \u4e70\u5165, \u5356\u51fa]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_462","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp-on2-python","text":"class Solution: def maxProfit(self, prices: List[int]) -> int: \"\"\" \u8fb9\u754c\u6761\u4ef6 \u72b6\u6001: \u4ee5\u7b2ci\u5929\u7684\u6700\u5927\u5229\u6da6dp[i] \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b dp[i] \"\"\" if len(prices) < 2: return 0 dp = [0] * (len(prices) + 1) for i in range(2, len(prices) + 1): dp[i] = dp[i - 1] for j in range(i - 1, 0, -1): if prices[i - 1] - prices[j - 1] > 0: temp = dp[j - 2] if j > 2 else 0 dp[i] = max(dp[i], temp + prices[i - 1] - prices[j - 1]) return dp[-1]","title":"\u89e3\u6cd5\u4e00 DP O(n**2) python\u8d85\u65f6"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp-hold-unhold","text":"class Solution: def maxProfit(self, prices: List[int]) -> int: \"\"\" state: hold[i]: \u7b2ci\u5929\u6301\u6709\u80a1\u7968\u7684\u6700\u5927profit unhold[i]: \u7b2ci\u5929\u4e0d\u6301\u6709\u80a1\u7968\u7684\u6700\u5927profit state transfer: hold[i] = max(hold[i-1], unhold[i-2] - prices[i]) unhold[i] = max(unhold[i-1], hold[i-1] + prices[i]) base case: \"\"\" if len(prices) < 2: return 0 hold = [0] * len(prices) unhold = [0] * len(prices) hold[0] = -prices[0] unhold[0] = 0 for i in range(1, len(prices)): if i == 1: hold[i] = max(hold[i-1], -prices[i]) else: # \u6709\u4e00\u5929\u7684\u51b7\u51bb\u65f6\u95f4 hold[i] = max(hold[i-1], unhold[i-2] - prices[i]) unhold[i] = max(unhold[i-1], hold[i-1] + prices[i]) return unhold[-1] \u7a7a\u95f4\u4f18\u5316 \u53ef\u75283\u4e2a\u53d8\u91cf\u66ff\u6362\u4e24\u4e2adp\u6570\u7ec4 unhold[i-1] unhold[i-2] hold[i-1]","title":"\u89e3\u6cd5\u4e8c dp hold unhold"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#23","text":"","title":"2.3 \u65b9\u6cd5\u4e09"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_463","text":"sell[i]\u8868\u793a\u622a\u81f3\u7b2ci\u5929\uff0c\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u662f\u5356\u65f6\u7684\u6700\u5927\u6536\u76ca\uff1b buy[i]\u8868\u793a\u622a\u81f3\u7b2ci\u5929\uff0c\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u662f\u4e70\u65f6\u7684\u6700\u5927\u6536\u76ca\uff1b cool[i]\u8868\u793a\u622a\u81f3\u7b2ci\u5929\uff0c\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u662f\u51b7\u51bb\u671f\u65f6\u7684\u6700\u5927\u6536\u76ca\uff1b \u9012\u63a8\u516c\u5f0f\uff1a sell[i] = max(buy[i-1]+prices[i], sell[i-1]) (\u7b2c\u4e00\u9879\u8868\u793a\u7b2ci\u5929\u5356\u51fa\uff0c\u7b2c\u4e8c\u9879\u8868\u793a\u7b2ci\u5929\u51b7\u51bb) buy[i] = max(cool[i-1]-prices[i], buy[i-1]) \uff08\u7b2c\u4e00\u9879\u8868\u793a\u7b2ci\u5929\u4e70\u8fdb\uff0c\u7b2c\u4e8c\u9879\u8868\u793a\u7b2ci\u5929\u51b7\u51bb\uff09 cool[i] = max(sell[i-1], buy[i-1], cool[i-1]) class Solution: def maxProfit(self, prices): n = len(prices) if n == 0: return 0 sell = [0 for _ in range(n)] buy = [0 for _ in range(n)] cool = [0 for _ in range(n)] buy[0] = -prices[0] for i in range(1,n): sell[i] = max(buy[i-1] + prices[i], sell[i-1]) buy[i] = max(cool[i-1] - prices[i], buy[i-1]) cool[i] = max(sell[i-1], buy[i-1],cool[i-1]) return sell[-1]","title":"\u65b9\u6cd5\u4e09"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#322","text":"","title":"322. \u96f6\u94b1\u5151\u6362"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#322-1","text":"\u7ed9\u5b9a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01 coins \u548c\u4e00\u4e2a\u603b\u91d1\u989d amount\u3002\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u7684\u786c\u5e01\u4e2a\u6570\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u786c\u5e01\u7ec4\u5408\u80fd\u7ec4\u6210\u603b\u91d1\u989d\uff0c\u8fd4\u56de -1 \u3002 \u793a\u4f8b 1: \u8f93\u5165: coins = [1, 2, 5], amount = 11 \u8f93\u51fa: 3 \u89e3\u91ca: 11 = 5 + 5 + 1 \u793a\u4f8b 2: \u8f93\u5165: coins = [2], amount = 3 \u8f93\u51fa: -1 \u8bf4\u660e : \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u79cd\u786c\u5e01\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\u3002","title":"322. 1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#322-2","text":"","title":"322. 2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#322-21-dp","text":"class Solution { public int coinChange(int[] coins, int amount) { int[] dp = new int[amount+1]; // \u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u786c\u5e01\u7ec4\u5408\u80fd\u7ec4\u6210\u603b\u91d1\u989d\uff0c\u8fd4\u56de -1\u3002 // \u7531\u4e0a\u9762\u521d\u59cb\u5316dp\u4e3a-1 for(int i = 0; i <= amount; i++){ dp[i] = -1; } // \u4ee3\u8868i\u91d1\u989d\u6700\u5c11\u786c\u5e01\u4e2a\u6570 dp[0] = 0; for(int i = 1; i <= amount; i++){ for(int j = 0; j < coins.length; j++){ // \u5224\u65ad i - coins[j] \u662f\u5426\u6709\u503c if(i - coins[j] >= 0 && dp[i - coins[j]] != -1){ // \u82e5\u6709\u66f4\u5c0f\u7684\u786c\u5e01\u6570 \u66f4\u65b0dp if(dp[i] == -1 || dp[i] > dp[i -coins[j]] + 1){ dp[i] = dp[i - coins[j]] + 1; } } } } return dp[amount]; } }","title":"322. 2.1 \u65b9\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#337iii","text":"","title":"337.\u6253\u5bb6\u52ab\u820dIII"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_464","text":"\u5728\u4e0a\u6b21\u6253\u52ab\u5b8c\u4e00\u6761\u8857\u9053\u4e4b\u540e\u548c\u4e00\u5708\u623f\u5c4b\u540e\uff0c\u5c0f\u5077\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u533a\u3002\u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u201c\u6839\u201d\u3002 \u9664\u4e86\u201c\u6839\u201d\u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u201c\u7236\u201c\u623f\u5b50\u4e0e\u4e4b\u76f8\u8fde\u3002\u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230\u201c\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u7684\u6392\u5217\u7c7b\u4f3c\u4e8e\u4e00\u68f5\u4e8c\u53c9\u6811\u201d\u3002 \u5982\u679c\u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab\uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002 \u8ba1\u7b97\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b\uff0c\u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1: \u8f93\u5165: [3,2,3,null,3,null,1] 3 / \\ 2 3 \\ \\ 3 1 \u8f93\u51fa: 7 \u89e3\u91ca: \u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = 3 + 3 + 1 = 7. \u793a\u4f8b 2: \u8f93\u5165: [3,4,5,1,3,null,1] 3 / \\ 4 5 / \\ \\ 1 3 1 \u8f93\u51fa: 9 \u89e3\u91ca: \u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = 4 + 5 = 9.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_465","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_466","text":"import queue class Solution: memo = dict() def rob(self, root: TreeNode) -> int: \"\"\" bottom-to-up dp \u5e8f\u6570\u6cd5 \u9012\u5f52 \"\"\" # \u7ec8\u6b62\u6761\u4ef6 if not root: return 0 if not root.left and not root.right: return root.val if root in self.memo: return self.memo[root] left = 0 right = 0 lleft = 0 rleft = 0 lright = 0 rright = 0 if root.left: left = self.rob(root.left) lleft = self.rob(root.left.left) rleft = self.rob(root.left.right) if root.right: right = self.rob(root.right) lright = self.rob(root.right.left) rright = self.rob(root.right.right) rootv = root.val + lleft + rleft + lright + rright childv = left + right self.memo[root] = max(rootv, childv) return self.memo[root]","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52 + \u8bb0\u5fc6\u5316"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_467","text":"\"\"\" \u9009\u4e2droot, \u4e00\u5b9a\u4e0d\u53ef\u9009\u4ed6\u7684\u5de6\u53f3\u5b69\u5b50\u7ed3\u70b9 \u4e0d\u9009root, \u4e0d\u4e00\u5b9a\u9009\u4ed6\u7684\u5de6\u53f3\u5b69\u5b50\u7ed3\u70b9 \"\"\" cache = {} def max_with_root(node): return node.val + max_without_root(node.left) + max_without_root(node.right) if node else 0 def max_without_root(node): return helper(node.left) + helper(node.right) if node else 0 def helper(node): if node in cache: return cache[node] cache[node] = max(max_with_root(node), max_without_root(node)) if node else 0 return cache[node] class Solution(object): def rob(self, root): \"\"\" :type root: TreeNode :rtype: int \"\"\" return helper(root)","title":"\u89e3\u6cd5\u4e8c \u9012\u5f52 + \u8bb0\u5fc6\u5316"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#343","text":"","title":"343. \u6574\u6570\u62c6\u5206"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_468","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0c\u5c06\u5176\u62c6\u5206\u4e3a\u81f3\u5c11\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\uff0c\u5e76\u4f7f\u8fd9\u4e9b\u6574\u6570\u7684\u4e58\u79ef\u6700\u5927\u5316\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1\u3002 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36\u3002 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe n \u4e0d\u5c0f\u4e8e 2 \u4e14\u4e0d\u5927\u4e8e 58\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_469","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_470","text":"class Solution: def integerBreak(self, n: int) -> int: if n < 3: return 1 dp = [0] * (n + 1) dp[1] = 1 dp[2] = 1 for i in range(3, n + 1): for j in range(1, i): # **** dp[i] = max(dp[i], j * dp[i - j], j * (i - j)) return dp[n]","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_471","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#357","text":"","title":"357. \u8ba1\u7b97\u5404\u4e2a\u4f4d\u6570\u4e0d\u540c\u7684\u6570\u5b57\u4e2a\u6570"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_472","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 n\uff0c\u8ba1\u7b97\u5404\u4f4d\u6570\u5b57\u90fd\u4e0d\u540c\u7684\u6570\u5b57 x \u7684\u4e2a\u6570\uff0c\u5176\u4e2d 0 \u2264 x < 10n \u3002 \u793a\u4f8b: \u8f93\u5165: 2 \u8f93\u51fa: 91 \u89e3\u91ca: \u7b54\u6848\u5e94\u4e3a\u9664\u53bb 11,22,33,44,55,66,77,88,99 \u5916\uff0c\u5728 [0,100) \u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5b57\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_473","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_12","text":"class Solution: def countNumbersWithUniqueDigits(self, n: int) -> int: \"\"\" DP n=1: res=10 n=2: res=9*9+10=91 # \u4e24\u4f4d\u6570\u7b2c\u4e00\u4f4d\u53ea\u80fd\u4e3a1-9\uff0c\u7b2c\u4e8c\u4f4d\u53ea\u80fd\u4e3a\u975e\u7b2c\u4e00\u4f4d\u7684\u6570\uff0c\u52a0\u4e0a\u4e00\u4f4d\u6570\u7684\u6240\u6709\u7ed3\u679c n=3: res=9 * 9 * 8+91=739 # \u4e09\u4f4d\u6570\u7b2c\u4e00\u4f4d\u53ea\u80fd\u4e3a1-9\uff0c\u7b2c\u4e8c\u4f4d\u53ea\u80fd\u4e3a\u975e\u7b2c\u4e00\u4f4d\u7684\u6570\uff0c\u7b2c\u4e09\u4f4d\u53ea\u80fd\u4e3a\u975e\u524d\u4e24\u4f4d\u7684\u6570\uff0c\u52a0\u4e0a\u4e24\u4f4d\u6570\u7684\u6240\u6709\u7ed3\u679c n=4: res=9 * 9 * 8 * 7+739=5275 # \u540c\u4e0a\u63a8\u6cd5 \"\"\" dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): dp[i] = 9 for j in range(i - 1): dp[i] = dp[i] * (9 - j) dp[i] += dp[i - 1] return dp[-1]","title":"\u89e3\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_474","text":"def countNumbersWithUniqueDigits(self, n: int) -> int: if not n: return 1 res, muls = 10, 9 for i in range(1, min(n,10)): muls *= 10 - i res += muls return res","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#368","text":"","title":"368.\u6700\u5927\u6574\u6570\u5b50\u96c6 [\u63a8\u8350]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_475","text":"\u7ed9\u51fa\u4e00\u4e2a\u7531\u65e0\u91cd\u590d\u7684\u6b63\u6574\u6570\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5927\u7684\u6574\u9664\u5b50\u96c6\uff0c\u5b50\u96c6\u4e2d\u4efb\u610f\u4e00\u5bf9 (Si\uff0cSj) \u90fd\u8981\u6ee1\u8db3\uff1aSi % Sj = 0 \u6216 Sj % Si = 0\u3002 \u5982\u679c\u6709\u591a\u4e2a\u76ee\u6807\u5b50\u96c6\uff0c\u8fd4\u56de\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5747\u53ef\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,2,3] \u8f93\u51fa: [1,2] (\u5f53\u7136, [1,3] \u4e5f\u6b63\u786e) \u793a\u4f8b 2: \u8f93\u5165: [1,2,4,8] \u8f93\u51fa: [1,2,4,8]","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_476","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#dp_13","text":"dp[i] \u5b58\u50a8\u7684\u662f\u5230\u6392\u5e8f\u540e\u7684\u7b2ci\u4e2a\u6700\u957f\u5b50\u96c6 class Solution(object): def largestDivisibleSubset(self, nums): \"\"\" :type nums: List[int] :rtype: List[int] \"\"\" if not nums: return nums if len(nums) == 1: return nums l = len(nums) nums.sort() dp = [[i] for i in nums] for i in range(1, l): for j in range(i-1, -1, -1): if nums[i]%nums[j] == 0: dp[i] = max(dp[j] + [nums[i]], dp[i],key=len) return max(dp,key=len)","title":"\u89e3\u6cd5\u4e00 dp"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#392","text":"","title":"392. \u5224\u65ad\u5b50\u5e8f\u5217"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_477","text":"\u7ed9\u5b9a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u5224\u65ad s \u662f\u5426\u4e3a t \u7684\u5b50\u5e8f\u5217\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a s \u548c t \u4e2d\u4ec5\u5305\u542b\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u3002\u5b57\u7b26\u4e32 t \u53ef\u80fd\u4f1a\u5f88\u957f\uff08\u957f\u5ea6 ~= 500,000\uff09\uff0c\u800c s \u662f\u4e2a\u77ed\u5b57\u7b26\u4e32\uff08\u957f\u5ea6 <=100\uff09\u3002 \u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u800c\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c\"ace\"\u662f\"abcde\"\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c\"aec\"\u4e0d\u662f\uff09\u3002 \u793a\u4f8b 1: s = \"abc\", t = \"ahbgdc\" \u8fd4\u56de true. \u793a\u4f8b 2: s = \"axc\", t = \"ahbgdc\" \u8fd4\u56de false. \u540e\u7eed\u6311\u6218 : \u5982\u679c\u6709\u5927\u91cf\u8f93\u5165\u7684 S\uff0c\u79f0\u4f5cS1, S2, ... , Sk \u5176\u4e2d k >= 10\u4ebf\uff0c\u4f60\u9700\u8981\u4f9d\u6b21\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u4e3a T \u7684\u5b50\u5e8f\u5217\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u600e\u6837\u6539\u53d8\u4ee3\u7801\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_478","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#on_4","text":"class Solution: def isSubsequence(self, s: str, t: str) -> bool: \"\"\" \u5b50\u5e8f\u5217 \"\"\" i = 0 j = 0 while i < len(s) and j < len(t): if s[i] == t[j]: i += 1 j += 1 return i == len(s)","title":"\u89e3\u6cd5\u4e00 \u53cc\u6307\u9488 O(N)"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_479","text":"class Solution: def isSubsequence(self, s: str, t: str) -> bool: for cs in s: if cs not in t: return False else: t = t[t.index(cs)+1:] return True","title":"\u89e3\u6cd5\u4e8c ?"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#746","text":"","title":"746.\u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7461","text":"\u6570\u7ec4\u7684\u6bcf\u4e2a\u7d22\u5f15\u505a\u4e3a\u4e00\u4e2a\u9636\u68af\uff0c\u7b2c i \u4e2a\u9636\u68af\u5bf9\u5e94\u7740\u4e00\u4e2a\u975e\u8d1f\u6570\u7684\u4f53\u529b\u82b1\u8d39\u503c cost[i] (\u7d22\u5f15\u4ece0\u5f00\u59cb)\u3002 \u6bcf\u5f53\u4f60\u722c\u4e0a\u4e00\u4e2a\u9636\u68af\u4f60\u90fd\u8981\u82b1\u8d39\u5bf9\u5e94\u7684\u4f53\u529b\u82b1\u8d39\u503c\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u9009\u62e9\u7ee7\u7eed\u722c\u4e00\u4e2a\u9636\u68af\u6216\u8005\u722c\u4e24\u4e2a\u9636\u68af\u3002 \u60a8\u9700\u8981\u627e\u5230\u8fbe\u5230\u697c\u5c42\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002 \u793a\u4f8b 1: \u8f93\u5165: cost = [10, 15, 20] \u8f93\u51fa: 15 \u89e3\u91ca: \u6700\u4f4e\u82b1\u8d39\u662f\u4ececost[1]\u5f00\u59cb\uff0c\u7136\u540e\u8d70\u4e24\u6b65\u5373\u53ef\u5230\u9636\u68af\u9876\uff0c\u4e00\u5171\u82b1\u8d3915\u3002 \u793a\u4f8b 2: \u8f93\u5165: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] \u8f93\u51fa: 6 \u89e3\u91ca: \u6700\u4f4e\u82b1\u8d39\u65b9\u5f0f\u662f\u4ececost[0]\u5f00\u59cb\uff0c\u9010\u4e2a\u7ecf\u8fc7\u90a3\u4e9b1\uff0c\u8df3\u8fc7cost[3]\uff0c\u4e00\u5171\u82b1\u8d396\u3002 \u6ce8\u610f\uff1a cost \u7684\u957f\u5ea6\u5c06\u4f1a\u5728 [2, 1000] \u3002 \u6bcf\u4e00\u4e2a cost[i] \u5c06\u4f1a\u662f\u4e00\u4e2aInteger\u7c7b\u578b\uff0c\u8303\u56f4\u4e3a [0, 999] \u3002","title":"746.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#7462","text":"\u9898\u76ee\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u9876\u5c42\u4e0d\u662f\u6700\u540e\u4e00\u7ea7\u53f0\u9636","title":"746.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#74621-dp","text":"class Solution { public int minCostClimbingStairs(int[] cost) { if(cost.length == 0){ return 0; } if(cost.length == 1){ return cost[0]; } int[] dp = new int[cost.length+1]; dp[0] = 0; dp[1] = cost[0]; for(int i = 2; i <= cost.length; i++){ dp[i] = Math.min(dp[i-1], dp[i-2]) + cost[i-1]; } return Math.min(dp[cost.length], dp[cost.length-1]); } }","title":"746.2.1 \u65b9\u6cd5\u4e00 DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#74622","text":"class Solution { public int minCostClimbingStairs(int[] cost) { int f1 = 0, f2 = 0; for(int i = cost.length - 1; i >= 0; --i){ int f0 = cost[i] + Math.min(f1, f2); f2 = f1; f1 = f0; } return Math.min(f1, f2); } }","title":"746.2.2 \u65b9\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#1025","text":"","title":"1025.\u9664\u6570\u535a\u5f08 \u770b\u5230\u8fd9\u7c7b\u9898\u5148\u8bd5\u7740\u6253\u5370\u7ed3\u679c [\u627e\u89c4\u5f8b]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#10251","text":"\u7231\u4e3d\u4e1d\u548c\u9c8d\u52c3\u4e00\u8d77\u73a9\u6e38\u620f\uff0c\u4ed6\u4eec\u8f6e\u6d41\u884c\u52a8\u3002\u7231\u4e3d\u4e1d\u5148\u624b\u5f00\u5c40\u3002 \u6700\u521d\uff0c\u9ed1\u677f\u4e0a\u6709\u4e00\u4e2a\u6570\u5b57 N \u3002\u5728\u6bcf\u4e2a\u73a9\u5bb6\u7684\u56de\u5408\uff0c\u73a9\u5bb6\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u9009\u51fa\u4efb\u4e00 x \uff0c\u6ee1\u8db3 0 < x < N \u4e14 N % x == 0 \u3002 \u7528 N - x \u66ff\u6362\u9ed1\u677f\u4e0a\u7684\u6570\u5b57 N \u3002 \u5982\u679c\u73a9\u5bb6\u65e0\u6cd5\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u5c31\u4f1a\u8f93\u6389\u6e38\u620f\u3002 \u53ea\u6709\u5728\u7231\u4e3d\u4e1d\u5728\u6e38\u620f\u4e2d\u53d6\u5f97\u80dc\u5229\u65f6\u624d\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de false \u3002\u5047\u8bbe\u4e24\u4e2a\u73a9\u5bb6\u90fd\u4ee5\u6700\u4f73\u72b6\u6001\u53c2\u4e0e\u6e38\u620f\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a2 \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u7231\u4e3d\u4e1d\u9009\u62e9 1\uff0c\u9c8d\u52c3\u65e0\u6cd5\u8fdb\u884c\u64cd\u4f5c\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a3 \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a\u7231\u4e3d\u4e1d\u9009\u62e9 1\uff0c\u9c8d\u52c3\u4e5f\u9009\u62e9 1\uff0c\u7136\u540e\u7231\u4e3d\u4e1d\u65e0\u6cd5\u8fdb\u884c\u64cd\u4f5c\u3002 \u63d0\u793a\uff1a * 1 <= N <= 1000","title":"1025.1.\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#10252","text":"","title":"1025.2.\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#102521","text":"class Solution { public boolean divisorGame(int N) { //\u9898\u89e3\u601d\u8def\uff1a\u4e24\u4eba\u9009\u62e9\u7684\u6bcf\u4e00\u6b65\u90fd\u662f\u8981\u8003\u8651\u9009\u62e9\u6b64\u6b65\u662f\u5426\u5bf9\u81ea\u5df1\u6709\u5229\uff08\u540e\u7eed\u6bcf\u6b65\u7684\u64cd\u4f5c\uff09\uff0c\u5206\u6790\u53ef\u77e5\uff0c\u82e5N\u662f\u5076\u6570\uff0c\u5728\u7231\u4e3d\u4e1d\u6bcf\u6b65\u90fd\u662f\u4ee5\u6700\u4f73\u72b6\u6001 // \u9009\u62e9\u7684\u60c5\u51b5\u4e0b\uff0c\u7231\u4e3d\u4e1d\u53ef\u4ee5\u8d62\u5f97\u6bd4\u8d5b\uff1b\u82e5N\u662f\u5947\u6570\uff0c\u5728\u9c8d\u52c3\u4ee5\u6700\u4f73\u72b6\u6001\u9009\u62e9\u7684\u60c5\u51b5\u4e0b\uff0c\u9c8d\u52c3\u53ef\u4ee5\u8d62\u5f97\u6bd4\u8d5b return N % 2 == 0; } }","title":"1025.2.1 \u65b9\u6cd5\u4e00 \u6570\u5b66\u5f52\u7eb3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#102522-dp","text":"class Solution { public boolean divisorGame(int N) { // \u521d\u59cb\u5316\u7684\u503c\u5747\u4e3afalse boolean[] dp = new boolean[N+1]; dp[0] = false; dp[1] = false; for(int i = 2; i <= N; i++){ // \u5728\u67d0\u4e00\u4e2a\u6570\u4e2d\u627e\u5230\u5bf9\u65b9\u4e0d\u5229\u7684\u7ed3\u679c for(int j = 1; j < i; j++){ if(i % j == 0 && dp[i-j] == false){ dp[i] = true; break; }else{ dp[i] = false; } } } return dp[N]; }","title":"1025.2.2 \u65b9\u6cd5\u4e8c DP"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_481","text":"","title":"\u8bbe\u8ba1"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#146lru","text":"","title":"146.LRU\u7f13\u5b58\u673a\u5236 [\u9ad8\u9891\u9762\u8bd5\u9898]"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_482","text":"\u8fd0\u7528\u4f60\u6240\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u4e2a LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58\u673a\u5236\u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u83b7\u53d6\u6570\u636e get \u548c \u5199\u5165\u6570\u636e put \u3002 \u83b7\u53d6\u6570\u636e get(key) - \u5982\u679c\u5bc6\u94a5 (key) \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u5bc6\u94a5\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002 \u5199\u5165\u6570\u636e put(key, value) - \u5982\u679c\u5bc6\u94a5\u4e0d\u5b58\u5728\uff0c\u5219\u5199\u5165\u5176\u6570\u636e\u503c\u3002\u5f53\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u5199\u5165\u65b0\u6570\u636e\u4e4b\u524d\u5220\u9664\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u503c\uff0c\u4ece\u800c\u4e3a\u65b0\u7684\u6570\u636e\u503c\u7559\u51fa\u7a7a\u95f4\u3002 \u8fdb\u9636: \u4f60\u662f\u5426\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff1f \u793a\u4f8b: LRUCache cache = new LRUCache( 2 / \u7f13\u5b58\u5bb9\u91cf / ); cache.put(1, 1); cache.put(2, 2); cache.get(1); // \u8fd4\u56de 1 cache.put(3, 3); // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 2 \u4f5c\u5e9f cache.get(2); // \u8fd4\u56de -1 (\u672a\u627e\u5230) cache.put(4, 4); // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 1 \u4f5c\u5e9f cache.get(1); // \u8fd4\u56de -1 (\u672a\u627e\u5230) cache.get(3); // \u8fd4\u56de 3 cache.get(4); // \u8fd4\u56de 4","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_483","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_484","text":"class ListNode: def __init__(self, key=None, value=None): self.key = key self.value = value self.prev = None self.next = None # \u8fd9\u9898\u76ee\u91cd\u7684\u5220\u9664\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u4e0d\u662f\u6309\u7167\u6b21\u6570\uff0c\u800c\u662f\u6309\u7167put\u548cget\u7684\u65f6\u95f4 # \u89e3\u51b3\u65b9\u6cd5 hashmap + bi_linked_list(\u53cc\u5411\u94fe\u8868) class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.hashmap = dict() # \u65b0\u5efa\u4e24\u4e2a\u7ed3\u70b9 \u5934\u7ed3\u70b9 \u5c3e\u7ed3\u70b9 self.head = ListNode() self.tail = ListNode() # \u521d\u59cb\u5316\u94fe\u8868\u4e3ahead <-> tail self.head.next = self.tail self.tail.prev = self.head # \u56e0\u4e3aget\u4e0eput\u64cd\u4f5c\u90fd\u53ef\u80fd\u9700\u8981\u5c06\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\u79fb\u5230\u672b\u5c3e\uff0c\u6240\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5 # key: ** O(1) def move_node_to_tail(self, key): node = self.hashmap[key] node.prev.next = node.next node.next.prev = node.prev node.prev = self.tail.prev node.next = self.tail self.tail.prev.next = node self.tail.prev = node def get(self, key: int) -> int: if key in self.hashmap: self.move_node_to_tail(key) res = self.hashmap.get(key, -1) if res == -1: return res else: return res.value def put(self, key: int, value: int) -> None: if key in self.hashmap: # \u5982\u679ckey\u672c\u8eab\u5df2\u7ecf\u5728\u54c8\u5e0c\u8868\u4e2d\u4e86\u5c31\u4e0d\u9700\u8981\u5728\u94fe\u8868\u4e2d\u52a0\u5165\u65b0\u7684\u8282\u70b9 # \u4f46\u662f\u9700\u8981\u66f4\u65b0\u5b57\u5178\u8be5\u503c\u5bf9\u5e94\u8282\u70b9\u7684value self.hashmap[key].value = value # \u4e4b\u540e\u5c06\u8be5\u8282\u70b9\u79fb\u5230\u672b\u5c3e self.move_node_to_tail(key) else: if len(self.hashmap) == self.capacity: # \u53bb\u6389\u54c8\u5e0c\u8868\u5bf9\u5e94\u9879 self.hashmap.pop(self.head.next.key) # \u53bb\u6389\u6700\u4e45\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u5373\u5934\u8282\u70b9\u4e4b\u540e\u7684\u8282\u70b9 self.head.next = self.head.next.next self.head.next.prev = self.head # \u5982\u679c\u4e0d\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230\u5c3e\u8282\u70b9\u524d new = ListNode(key, value) self.hashmap[key] = new new.prev = self.tail.prev new.next = self.tail self.tail.prev.next = new self.tail.prev = new # Your LRUCache object will be instantiated and called as such: # obj = LRUCache(capacity) # param_1 = obj.get(key) # obj.put(key,value)","title":"\u89e3\u6cd5\u4e00 \u53cc\u5411\u94fe\u8868+\u54c8\u5e0c\u8868"},{"location":"\u7b97\u6cd5/LeetCode\u9898\u76ee\u603b\u7ed3.html#_485","text":"****","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html","text":"\u5251\u6307offer Java\u8bed\u6cd5 1.StringBuffer: setLength | charAt | setCharAt | replace | toString 2.Arrays.copyOfRange \u7c7b\u4f3c\u4e8ePython\u5207\u7247 3.Java\u4e2d ^ \u8868\u793a\u5f02\u6216\uff0c\u800c\u4e0d\u662f\u5e42\uff0c java.lang.Math.pow(arg0, arg1) 4.-1 >> 1 == -1 \u6b7b\u5faa\u73af 5.\u5de6\u79fb\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6bd4\u8f83 \u4f7f\u7528\u6280\u5de7 ((n>>1) == 1\uff09 6.\u5224\u65ad\u4e24\u6d6e\u70b9\u6570\u662f\u5426\u76f8\u7b49 \u6bd4\u8f83double\u6570\u636e\u662f\u5426\u76f8\u7b49\u7684\u65b9\u6cd5 \u65b9\u6cd5\u4e00\uff1a \u82e5\u7cbe\u5ea6\u8981\u6c42\u4e0d\u9ad8\uff0c\u6bd4\u5982\u56e0\u4e3a\u4f20\u611f\u5668\u6709\u8bef\u5dee\uff0c\u5c0f\u4e8e0.001\u7684\u6570\u90fd\u53ef\u4ee5\u8ba4\u4e3a\u7b49\u4e8e0\uff0c\u90a3\u4e48\u5c31\u5b9a\u4e49epsilon = 0.001: \u65b9\u6cd5\u4e8c\uff1a \u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u4e4b\u540e\u7528equals\u65b9\u6cd5\u6bd4\u8f83 \u5982\u679c\u8981\u6bd4\u8f83\u7684\u4e24\u4e2adouble\u6570\u636e\u7684\u5b57\u7b26\u4e32\u7cbe\u5ea6\u76f8\u7b49\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u8f6c\u6362\u6210String\u7136\u540e\u501f\u52a9String\u7684equals\u65b9\u6cd5\u6765\u95f4\u63a5\u5b9e\u73b0\u6bd4\u8f83\u4e24\u4e2adouble\u6570\u636e\u662f\u5426\u76f8\u7b49\u3002 Double.toString(double_x).equals(Double.toString(double_y)) \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u6cd5\u53ea\u9002\u7528\u4e8e\u6bd4\u8f83\u7cbe\u5ea6\u76f8\u540c\u7684\u6570\u636e\uff0c\u5e76\u4e14\u662f\u53ea\u7528\u7528\u4e8e\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u7528\u6765\u5224\u65ad\u5927\u5c0f\u3002 \u65b9\u6cd5\u4e09\uff1a \u8f6c\u6362\u6210Long\u4e4b\u540e\u7528==\u65b9\u6cd5\u6bd4\u8f83 \u4f7f\u7528Sun\u63d0\u4f9b\u7684Double.doubleToLongBits()\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5c06double\u8f6c\u6362\u6210long\u578b\u6570\u636e\uff0c\u4ece\u800c\u53ef\u4ee5\u4f7fdouble\u6309\u7167long\u7684\u65b9\u6cd5\uff08<, >, ==\uff09\u5224\u65ad\u662f\u5426\u5927\u5c0f\u548c\u662f\u5426\u76f8\u7b49\u3002 Double.doubleToLongBits(0.01) == Double.doubleToLongBits(0.01) Double.doubleToLongBits(0.02) > Double.doubleToLongBits(0.01) Double.doubleToLongBits(0.02) < Double.doubleToLongBits(0.01) \u65b9\u6cd5\u56db\uff1a \u4f7f\u7528BigDecimal\u7c7b\u578b\u7684equals\u65b9\u6cd5\u6216compareTo\u65b9\u6cd5 \u7c7b\u52a0\u8f7d\uff1a import java.math.BigDecimal; \u4f7f\u7528 \u5b57\u7b26\u4e32\u5f62\u5f0f \u7684float\u578b\u548cdouble\u578b\u6784\u9020BigDecimal\uff1aBigDecimal(String val)\u3002BigDecimal\u7684euquals\u65b9\u6cd5\u662f\u5148\u5224\u65ad\u8981\u6bd4\u8f83\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982\u679c\u5bf9\u8c61\u7c7b\u578b\u4e00\u81f4\u524d\u63d0\u4e0b\u540c\u65f6\u5224\u65ad\u7cbe\u786e\u5ea6(scale)\u548c\u503c\u662f\u5426\u4e00\u81f4\uff1bcompareTo\u65b9\u6cd5\u5219\u4e0d\u4f1a\u6bd4\u8f83\u7cbe\u786e\u5ea6\uff0c\u628a\u7cbe\u786e\u5ea6\u4f4e\u7684\u90a3\u4e2a\u5bf9\u8c61\u8f6c\u6362\u4e3a\u9ad8\u7cbe\u786e\u5ea6\uff0c\u53ea\u6bd4\u8f83\u6570\u503c\u7684\u5927\u5c0f\u3002 System.out.println(new BigDecimal(\"1.2\").equals(new BigDecimal(\"1.20\"))); //\u8f93\u51fafalse System.out.println(new BigDecimal(\"1.2\").compareTo(new BigDecimal(\"1.20\")) == 0); //\u8f93\u51fatrue System.out.println(new BigDecimal(1.2).equals(new BigDecimal(\"1.20\"))); //\u8f93\u51fafalse System.out.println(new BigDecimal(1.2).compareTo(new BigDecimal(\"1.20\")) == 0); //\u8f93\u51fafalse System.out.println(new BigDecimal(1.2).equals(new BigDecimal(1.20))); //\u8f93\u51fatrue 7.\u6808 Stack\uff1apush pop peek empty 8.\u975e\u7ebf\u7a0b\u5b89\u5168\u961f\u5217 ArrayDeque(\u4e5f\u53ef\u505aStack) isEmpty | offer offerFirst offerLast | poll pollFirst pollLast | peek peekFirst peekLast 9.<>\u4e2d\u4e0d\u80fd\u6709\u57fa\u672c\u7c7b\u578b\uff0c\u5305\u88c5\u7c7b\u578b 10.\u968f\u673a java.util.Random \u2014> rand.nextInt(int bound) [bound(exclusive)] 11.\u6700\u5c0f\u5806 \u6700\u5927\u5806 java.util.PriorityQueue | java.util.Comparator // \u9ed8\u8ba4\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6700\u5c0f\u5806\u3002 Queue<Integer> priorityQueue = new PriorityQueue<>(); // \u5b9e\u73b0\u6700\u5927\u5806 or \u628a\u503c\u53d8\u4e3a\u8d1f\u6570\u4f7f\u7528\u6700\u5c0f\u5806 Queue<ListNode> priorityQueue = new PriorityQueue<ListNode>(lists.size(),new Comparator<ListNode>(){ @Override public int compare(ListNode o1, ListNode o2) { return o1.val-o2.val; } }); 12.HashMap put put public V put(K key, V value) Returns: the previous value associated with key , or null if there was no mapping for key . (A null return can also indicate that the map previously associated null with key .) values return Collection Returns a Collection view of the values contained in this map. 13.HashSet add remove public boolean add(E e) Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if this set contains no element e2 such that (e==null ? e2==null : e.equals(e2)) . If this set already contains the element, the call leaves the set unchanged and returns false . 14.Integer.MAX_VALUE || Integer.MIN_VALUE 15.Java\u4e2d\u7684tuple\uff1aPair\uff08javafx.util.Pair) Modifier and Type Method and Description boolean equals(Object o) Test this Pair for equality with another Object . K getKey() Gets the key for this pair. V getValue() Gets the value for this pair. int hashCode() Generate a hash code for this Pair . String toString()``String representation of this Pair . 16.String join(CharSequence delimiter, CharSequence... elements) 17.\u53cc\u5411\u94fe\u8868 LinkedList void addFirst(E object) void addLast(E object) E get(int location) E getFirst() E getLast() E peek() E peekFirst() E peekLast() E poll() E pollFirst() E pollLast() E pop() void push(E e) E remove() E remove(int location) boolean remove(Object object) E removeFirst() E set(int location, E object) int size() <T> T[] toArray(T[] contents) Object[] toArray() 18.Character.getNumericValue | String.valueOf | 'x' - '0' \u2014> \u6570\u503c\u578b\u5b57\u7b26\u8f6cint 19.Character.isDigit(string.charAt(index)) \u67d0\u4e00\u5b57\u7b26\u662f\u5426\u662f\u6570\u503c\u578b 20.\u6570\u503c\u6ea2\u51fa\u95ee\u9898 \u89c1\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6574\u6570 // int\u578b\u6ea2\u51fa\u95ee\u9898, java\u4e2dint\u578b\u6ca1\u6709\u6bd4Integer.MAX_VALUE\u66f4\u5927\u7684\u503c // System.out.println(Integer.MAX_VALUE);2147483647 // System.out.println(0x7fffffff);2147483647 // System.out.println(Integer.MIN_VALUE);-2147483648 // System.out.println(0x80000000);-2147483648 21.ArrayList \u904d\u5386 for (Iterator iterator = arrayList.iterator(); iterator.hasNext();) { System.out.println(iterator.next()); } for(Character c: arrayList){ } 22.\u6570\u7ec4\u8f6cList Arrays.asList(1, 2, 3) Python\u77e5\u8bc6\u70b9 defaultdict Examples \u00b6 Using list as the default_factory , it is easy to group a sequence of key-value pairs into a dictionary of lists: >>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)] >>> d = defaultdict(list) >>> for k, v in s: ... d[k].append(v) ... >>> d.items() [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])] \u601d\u8def\u603b\u7ed3 1.\u94fe\u8868\uff0c\u6811\u5584\u7528 \u9012\u5f52 \u65b9\u6cd5 2.\u9010\u5143\u7d20\u7d2f\u4e58 \u9010\u5143\u7d20\u7d2f\u52a0 \u89c1[238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef] [leetcode209\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4] 3.\u53cc\u6307\u9488\u6cd5 \u5747\u4ece\u5934\u5f00\u59cb\u904d\u5386 \u6216\u8005\u4ece\u5934\u548c\u5c3e\u5939\u903c\u904d\u5386 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff08\u6bcf\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\u76f8\u540c\uff09\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 Bruce TO(n^2) SO(1) public class Solution { public boolean Find(int target, int [][] array) { if(array == null || array.length == 0 ){ return false; } for(int i = 0; i < array.length; i++){ for(int j = 0; j < array[0].length; j++){ if(array[i][j] == target){ return true; } } } return false; } } \u89e3\u6cd5\u4e8c \u4e00\u7ef4\u6570\u7ec4\u7684\u4e8c\u5206\u67e5\u627e TO(nlogn) SO(1) public class Solution { public boolean Find(int target, int [][] array) { /** * \u8fb9\u754c\u6761\u4ef6: \u7a7a\u6570\u7ec4 * \u4e00\u7ef4\u6570\u7ec4\u4e8c\u5206\u67e5\u627e TO(nlogn) SO(1) */ if(array == null || array.length == 0 || array[0].length == 0){ return false; } for(int i = 0; i < array.length; i++){ // \u4e8c\u5206\u67e5\u627e int left = 0; int right = array.length - 1; while(left <= right){ int mid = (left + right) >> 1; if(array[i][mid] == target){ return true; }else if(array[i][mid] > target){ right = mid - 1; }else{ left = mid + 1; } } } return false; } } \u89e3\u6cd5\u4e09 \u77e9\u9635\u4e8c\u5206\u67e5\u627e TO() SO(1) \u4e8c\u5206\u67e5\u627e\u601d\u60f3\u6838\u5fc3\uff1a\u627e\u5230\u4e2d\u5fc3\u70b9\uff0c \u8be5\u77e9\u9635\u7684\u4e2d\u5fc3\u70b9\u5373\u662f\u5de6\u4e0b\u89d2\u7684\u5143\u7d20\uff0c \u5f53target > \u5f85\u6bd4\u8f83\u5143\u7d20\u65f6\uff0c\u5411\u53f3\u67e5\u627e \u5f53target < \u5e26\u6bd4\u8f83\u5143\u7d20\u65f6\uff0c\u5411\u4e0a\u67e5\u627e public class Solution { // 246 public boolean Find(int target, int [][] array) { /** * \u8fb9\u754c\u6761\u4ef6: \u7a7a\u6570\u7ec4 * \u4e8c\u5206\u67e5\u627e * Bruce TO(nlogn) SO(1) */ if(array == null || array.length == 0 || array[0].length == 0){ return false; } int h = array.length - 1; int w = 0; while (h >= 0 && w < array[0].length){ if(array[h][w] == target){ return true; }else if(array[h][w] < target){ w++; }else if(array[h][w] > target){ h--; } } return false; } } \u66ff\u6362\u7a7a\u683c \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3aWe Are Happy.\u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3aWe%20Are%20Happy\u3002 \u8fdb\u9636\uff1a\u5728\u539f\u6709\u5b57\u7b26\u4e32\u4e0a\u505a\u66ff\u6362 \u89e3\u6cd5 \u9898\u76ee\u672c\u8eab\u5f88\u7b80\u5355\uff0c\u4f46\u8981\u60f3\u6709\u8f83\u597d\u7684\u6548\u7387\uff0c \u9700\u8981\u6ce8\u610f\u5230\u66ff\u6362\u540e\u548c\u66ff\u6362\u524d\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4e00\u6837 \u89e3\u6cd5\u4e00 \u65b0\u5f00\u8f9f\u5b57\u7b26\u4e32\u505a\u66ff\u6362 \u8fd0\u884c\u65f6\u95f4\uff1a21ms \u5360\u7528\u5185\u5b58\uff1a9340k public class Solution { public String replaceSpace(StringBuffer str) { StringBuffer str2 = new StringBuffer(); for(int i = 0; i < str.length(); i++){ if(str.charAt(i) == ' '){ str2.append(\"%20\"); }else{ str2.append(str.charAt(i)); } } return str2.toString(); } } \u904d\u5386\u4e00\u904d\u8ba1\u7b97\u6709\u51e0\u4e2a\u7a7a\u683c\uff0c\u521d\u59cb\u5316\u4e00\u4e2aorigin_length+2*space_nums\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\u586b\u8865\u4e0a\u53bb \u89e3\u6cd5\u4e8c \u5728\u539f\u5b57\u7b26\u4e32\u4e0a\u8fdb\u884c\u66ff\u6362 \u8fd0\u884c\u65f6\u95f4\uff1a24ms \u5360\u7528\u5185\u5b58\uff1a9752k \u5728\u5f53\u524d\u5b57\u7b26\u4e32\u66ff\u6362\uff0c\u600e\u4e48\u66ff\u6362\u624d\u66f4\u6709\u6548\u7387\uff08\u4e0d\u8003\u8651java\u91cc\u73b0\u6709\u7684replace\u65b9\u6cd5\uff09\u3002 \u4ece\u524d\u5f80\u540e\u66ff\u6362\uff0c\u540e\u9762\u7684\u5b57\u7b26\u8981\u4e0d\u65ad\u5f80\u540e\u79fb\u52a8\uff0c\u8981\u591a\u6b21\u79fb\u52a8\uff0c\u6240\u4ee5\u6548\u7387\u4f4e\u4e0b \u4ece\u540e\u5f80\u524d\uff0c\u5148\u8ba1\u7b97\u9700\u8981\u591a\u5c11\u7a7a\u95f4\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u79fb\u52a8\uff0c\u5219\u6bcf\u4e2a\u5b57\u7b26\u53ea\u4e3a\u79fb\u52a8\u4e00\u6b21\uff0c\u8fd9\u6837\u6548\u7387\u66f4\u9ad8\u4e00\u70b9\u3002 public class Solution { public static String replaceSpace(StringBuffer str) { int cnt = 0; int oldLength = str.length(); for(int i = 0; i < oldLength; i++){ if(str.charAt(i) == ' '){ cnt += 1; } } int newLength = oldLength + 2 * cnt; str.setLength(newLength); for(int i = oldLength - 1, j = newLength - 1; i >= 0; i--, j--){ if(str.charAt(i) == ' '){ // stringbuffer.replace start:end-str.length() end:\u7ec8\u6b62\u4e8e\u524d\u4e00\u4f4d str.replace(j-2, j+1, \"%20\"); j -= 2; }else{ str.setCharAt(j, str.charAt(i)); } } return str.toString(); } } \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u6309\u94fe\u8868\u503c\u4ece\u5c3e\u5230\u5934\u7684\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2aArrayList\u3002 \u89e3\u6cd5 \u9006\u8f6c\u94fe\u8868 \u904d\u5386\u6253\u5370 \u904d\u5386\u5b58\u5165list\uff0c\u9006\u8f6clist \u5b58\u5165stack\u4e2d\uff0c\u904d\u5386\u8f93\u51fa \u89e3\u6cd5\u4e00 \u9006\u8f6clist import java.util.ArrayList; import java.util.Collections; public class Solution { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList list = new ArrayList(); while(listNode != null){ list.add(listNode.val); listNode = listNode.next; } Collections.reverse(list); return list; } } // ------ \u81ea\u5b9a\u4e49reverse ------ import java.util.ArrayList; public class Solution { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList list = new ArrayList(); while(listNode != null){ list.add(listNode.val); listNode = listNode.next; } // Collections.reverse(list); reverse(list); return list; } public void reverse(ArrayList<Integer> list){ int length = list.size(); for(int i = 0; i < length / 2; i++){ int tmp = list.get(i); list.set(i, list.get(length - 1 - i)); list.set(length - 1 - i, tmp); } } } \u89e3\u6cd5\u4e8c \u9012\u5f52\u6216stack import java.util.ArrayList; public class Solution { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { if(listNode == null){ return new ArrayList(); } ArrayList list = printListFromTailToHead(listNode.next); list.add(listNode.val); return list; } } \u91cd\u5efa\u4e8c\u53c9\u6811 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u524d\u5e8f\u904d\u5386\u5e8f\u5217{1,2,4,7,3,5,6,8}\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217{4,7,2,1,5,3,8,6}\uff0c\u5219\u91cd\u5efa\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u3002 \u89e3\u6cd5 \u524d\u5e8f\u6392\u5217\uff1a\u6839\u7ed3\u70b9\u5728\u524d \u4e2d\u5de6\u53f3 \u4e2d\u5e8f\u6392\u5217\uff1a\u6839\u7ed3\u70b9\u5728\u4e2d \u5de6\u4e2d\u53f3 \u89e3\u6cd5\u4e00 \u9012\u5f52 \u5584\u7528\u6570\u7ec4\u7d22\u5f15 public class Solution { public TreeNode reConstructBinaryTree(int [] pre,int [] in) { return reConstructBinaryTree(pre, 0, pre.length - 1, in, 0, in.length - 1); } private TreeNode reConstructBinaryTree(int[] pre, int preStart, int preEnd, int[] in, int inStart, int inEnd) { if (preStart > preEnd || inStart > inEnd){ return null; } int rootVal = pre[preStart]; TreeNode root = new TreeNode(rootVal); for(int i = inStart; i <= inEnd; i++){ if(in[i] == rootVal){ root.left = reConstructBinaryTree(pre, preStart + 1, preStart + (i - inStart), in, inStart, i - 1); root.right = reConstructBinaryTree(pre, preStart + (i - inStart) + 1, preEnd, in, i + 1, inEnd); } } return root; } } \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u9898\u76ee\u63cf\u8ff0 \u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684Push\u548cPop\u64cd\u4f5c\u3002 \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e3aint\u7c7b\u578b\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 import java.util.Stack; public class Solution { Stack<Integer> stack1 = new Stack<Integer>(); Stack<Integer> stack2 = new Stack<Integer>(); public void push(int node) { while(!stack1.empty()){ stack2.push(stack1.pop()); } stack1.push(node); while(!stack2.empty()){ stack1.push(stack2.pop()); } } public int pop() { if(stack1.empty() && stack2.empty()){ throw new RuntimeException(\"Error pop\"); } return stack1.pop(); } } \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57[\u53ef\u91cd\u590d] \u9898\u76ee\u63cf\u8ff0 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4{3,4,5,1,2}\u4e3a{1,2,3,4,5}\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 NOTE\uff1a\u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de0\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4e8c\u5206\u67e5\u627e import java.util.ArrayList; public class Solution { public int minNumberInRotateArray(int [] array) { if(array == null || array.length == 0){ return 0; } if(array[array.length - 1] > array[0]){ return array[0]; } int left = 0; int right = array.length - 1; int mid = 0; while(left <= right){ mid = (left + right) >> 1; if (array[mid] > array[mid+1]){ return array[mid+1]; }else if(array[mid] < array[right]){ right = mid; }else{ left = mid; } } return array[0]; } } \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u9898\u76ee\u63cf\u8ff0 \u5927\u5bb6\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u73b0\u5728\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u8bf7\u4f60\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879\uff08\u4ece0\u5f00\u59cb\uff0c\u7b2c0\u9879\u4e3a0\uff09\u3002 n<=39 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 \u6700\u5dee\u7684\u65b9\u6cd5 \u8fd0\u884c\u65f6\u95f4\uff1a1273ms \u5360\u7528\u5185\u5b58\uff1a9276k public class Solution { public int Fibonacci(int n) { if(n == 0 || n == 1){ return n; } return Fibonacci(n-1) + Fibonacci(n-2); } } \u89e3\u6cd5\u4e8c \u8fed\u4ee3 DP\u601d\u60f3 \u63a8\u8350 TO(n) SO(1) \u8fd0\u884c\u65f6\u95f4\uff1a20ms \u5360\u7528\u5185\u5b58\uff1a9416k public class Solution { public int Fibonacci(int n) { if(n == 0 || n == 1){ return n; } int a = 0, b = 1; for(int i = 2; i <= n; i++){ b = a + b; a = b - a; } return b; } } \u89e3\u6cd5\u4e09 \u77e9\u9635\u4e58\u65b9+\u7a7a\u95f4\u6362\u65f6\u95f4 TO(logn) \u66f4\u5feb\u4f46\u4e0d\u5b9e\u7528 //\u65f6\u95f4\u590d\u6742\u5ea6\u4e3alogN\uff1b //\u53c2\u8003\u7a0b\u5e8f\u733f\u4ee3\u7801\u9762\u8bd5\u6307\u5357\uff1b class Solution { public: int Fibonacci(int n) { if(n<1) return 0; if(n==1||n==2) return 1; vector<vector<int> > base = {{1,1},{1,0}}; vector<vector<int> > res=matrixPower(base, n-2); return res[0][0]+res[1][0]; } //\u77e9\u9635\u76f8\u4e58 vector<vector<int> > matrix_multiply(vector<vector<int> > arrA, vector<vector<int> > arrB) { int rowA=arrA.size(); int colA=arrA[0].size(); int colB=arrA[0].size(); int rowB=arrA.size(); vector<vector<int> > res (rowA,vector<int> (colB,0)); if(colA!=rowB) return res; for(int i=0;i<rowA;i++) { for(int j=0;j<colB;j++) { for(int m=0;m<colA;m++) res[i][j]+=arrA[i][m]*arrB[m][j]; } } return res; } vector<vector<int> > matrixPower(vector<vector<int> > a,int p) { vector<vector<int> > res (a.size(),vector<int> (a[0].size(),0)); for(int i=0;i<res.size();i++) { res[i][i]=1; } vector<vector<int> > tmp(a); for(;p!=0;p>>=1) { if((p&1)!=0) { res=matrix_multiply(res,tmp); } tmp=matrix_multiply(tmp,tmp); } return res; } \u8df3\u53f0\u9636 \u9898\u76ee\u63cf\u8ff0 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\uff08\u5148\u540e\u6b21\u5e8f\u4e0d\u540c\u7b97\u4e0d\u540c\u7684\u7ed3\u679c\uff09\u3002 \u89e3\u6cd5 \u7c7b\u4f3c\u6590\u6ce2\u90a3\u5951\uff0c\u9664\u521d\u59cb\u6761\u4ef6\u4e0d\u540c\uff08\u4ee51\u5f00\u59cb\uff09 \u89e3\u6cd5\u4e00 \u8fed\u4ee3 public class Solution { public int JumpFloor(int target) { if(target == 1 || target == 2){ return target; } int a = 1, b = 2; for(int i = 3; i <= target; i++){ b = a + b; a = b - a; } return b; } } \u53d8\u6001\u8df3\u9752\u86d9 \u9898\u76ee\u63cf\u8ff0 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u89e3\u6cd5 \u56e0\u4e3an\u7ea7\u53f0\u9636\uff0c\u7b2c\u4e00\u6b65\u6709n\u79cd\u8df3\u6cd5\uff1a\u8df31\u7ea7\u3001\u8df32\u7ea7\u3001\u5230\u8df3n\u7ea7\u8df31\u7ea7\uff0c\u5269\u4e0bn-1\u7ea7\uff0c\u5219\u5269\u4e0b\u8df3\u6cd5\u662ff(n-1)\u8df32\u7ea7\uff0c\u5269\u4e0bn-2\u7ea7\uff0c\u5219\u5269\u4e0b\u8df3\u6cd5\u662ff(n-2)\u6240\u4ee5f(n)=f(n-1)+f(n-2)+...+f(1)\u56e0\u4e3af(n-1)=f(n-2)+f(n-3)+...+f(1)\u6240\u4ee5f(n)=2*f(n-1) \u6bcf\u4e2a\u53f0\u9636\u90fd\u6709\u8df3\u4e0e\u4e0d\u8df3\u4e24\u79cd\u60c5\u51b5\uff08\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u53f0\u9636\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u53f0\u9636\u5fc5\u987b\u8df3\u3002\u6240\u4ee5\u5171\u75282^(n-1)\u4e2d\u60c5\u51b5 \u89e3\u6cd5\u4e00 import java.lang.Math; public class Solution { public int JumpFloorII(int target) { return (int)Math.pow(2, target - 1); } } \u89e3\u6cd5\u4e8c \u5de6\u79fb TO(1) import java.lang.Math; public class Solution { public int JumpFloorII(int target) { return 1 << --target; } } \u77e9\u5f62\u8986\u76d6 \u9898\u76ee\u63cf\u8ff0 \u6211\u4eec\u53ef\u4ee5\u75282 1\u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528n\u4e2a2 1\u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a2*n\u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f \u89e3\u6cd5 \u5f53\u7b2c8\u884c\u7684\u5c0f\u77e9\u5f62\u5982\u679c\u7ad6\u7740\u653e\uff0c\u90a3\u4e48f(7) \u5f53\u7b2c8\u884c\u7684\u5c0f\u77e9\u5f62\u5982\u679c\u6a2a\u7740\u653e\uff0c\u90a3\u4e48f(6) f(8) = f(7) + f(6) \u6590\u6ce2\u90a3\u5951 \u89e3\u6cd5\u4e00 public class Solution { public int RectCover(int target) { // \u5f53\u7b2c8\u884c\u7684\u5c0f\u77e9\u5f62\u5982\u679c\u7ad6\u7740\u653e\uff0c\u90a3\u4e48f(7) // \u5f53\u7b2c8\u884c\u7684\u5c0f\u77e9\u5f62\u5982\u679c\u6a2a\u7740\u653e\uff0c\u90a3\u4e48f(6) // f(8) = f(7) + f(6) // \u6590\u6ce2\u90a3\u5951 if(target < 3){ return target; } int a = 1, b = 2; for(int i = 3; i <= target; i++){ b = a + b; a = b - a; } return b; } } \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002 \u89e3\u6cd5 \u6d4b\u8bd5\u7528\u4f8b\uff1a\u6b63\u6570 \u8d1f\u6570 0 \u89e3\u6cd5\u4e00 \u53ea\u80fd\u5904\u7406\u6b63\u6570 \u8d1f\u6570\u6b7b\u5faa\u73af -1 >> 1 == -1 public class Solution { public int NumberOf1(int n) { // \u8d1f\u6570\u8865\u7801 = \u8d1f\u6570\u53cd\u7801 + 1 // \u6d4b\u8bd5\u7528\u4f8b \u6b63\u6570 \u8d1f\u6570 0 int cnt = 0; while(n > 0){ if((n & 1) == 1){ cnt += 1; } n = n >> 1; } return cnt; } } \u89e3\u6cd5\u4e8c \u6784\u9020\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u4f4d\u4e3a1\u7684flag public class Solution { public int NumberOf1(int n) { // \u8d1f\u6570\u8865\u7801 = \u8d1f\u6570\u53cd\u7801 + 1 // \u6d4b\u8bd5\u7528\u4f8b \u6b63\u6570 \u8d1f\u6570 0 int flag = 1; int cnt = 0; while(flag != 0){ if((n & flag) != 0){ cnt += 1; } flag = flag << 1; } return cnt; } } \u89e3\u6cd5\u4e09 \u63a8\u8350 \u5206\u6790 n & (n-1)\u7684\u7ed3\u679c \u5982\u679c\u4e00\u4e2a\u6574\u6570\u4e0d\u4e3a0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6574\u6570\u81f3\u5c11\u6709\u4e00\u4f4d\u662f1\u3002\u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e2a\u6574\u6570\u51cf1\uff0c\u90a3\u4e48\u539f\u6765\u5904\u5728\u6574\u6570\u6700\u53f3\u8fb9\u76841\u5c31\u4f1a\u53d8\u4e3a0\uff0c\u539f\u6765\u57281\u540e\u9762\u7684\u6240\u6709\u76840\u90fd\u4f1a\u53d8\u62101(\u5982\u679c\u6700\u53f3\u8fb9\u76841\u540e\u9762\u8fd8\u67090\u7684\u8bdd)\u3002\u5176\u4f59\u6240\u6709\u4f4d\u5c06\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u200b \u4e3e\u4e2a\u4f8b\u5b50\uff1a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u65701100\uff0c\u4ece\u53f3\u8fb9\u6570\u8d77\u7b2c\u4e09\u4f4d\u662f\u5904\u4e8e\u6700\u53f3\u8fb9\u7684\u4e00\u4e2a1\u3002\u51cf\u53bb1\u540e\uff0c\u7b2c\u4e09\u4f4d\u53d8\u62100\uff0c\u5b83\u540e\u9762\u7684\u4e24\u4f4d0\u53d8\u6210\u4e861\uff0c\u800c\u524d\u9762\u76841\u4fdd\u6301\u4e0d\u53d8\uff0c\u56e0\u6b64\u5f97\u5230\u7684\u7ed3\u679c\u662f1011.\u6211\u4eec\u53d1\u73b0\u51cf1\u7684\u7ed3\u679c\u662f\u628a\u6700\u53f3\u8fb9\u7684\u4e00\u4e2a1\u5f00\u59cb\u7684\u6240\u6709\u4f4d\u90fd\u53d6\u53cd\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u6211\u4eec\u518d\u628a\u539f\u6765\u7684\u6574\u6570\u548c\u51cf\u53bb1\u4e4b\u540e\u7684\u7ed3\u679c\u505a\u4e0e\u8fd0\u7b97\uff0c\u4ece\u539f\u6765\u6574\u6570\u6700\u53f3\u8fb9\u4e00\u4e2a1\u90a3\u4e00\u4f4d\u5f00\u59cb\u6240\u6709\u4f4d\u90fd\u4f1a\u53d8\u62100\u3002\u59821100&1011=1000.\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u4e00\u4e2a\u6574\u6570\u51cf\u53bb1\uff0c\u518d\u548c\u539f\u6574\u6570\u505a\u4e0e\u8fd0\u7b97\uff0c\u4f1a\u628a\u8be5\u6574\u6570\u6700\u53f3\u8fb9\u4e00\u4e2a1\u53d8\u62100.\u90a3\u4e48\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u6709\u591a\u5c11\u4e2a1\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u591a\u5c11\u6b21\u8fd9\u6837\u7684\u64cd\u4f5c\u3002 public class Solution { public int NumberOf1(int n) { // \u8d1f\u6570\u8865\u7801 = \u8d1f\u6570\u53cd\u7801 + 1 // \u6d4b\u8bd5\u7528\u4f8b \u6b63\u6570 \u8d1f\u6570 0 int cnt = 0; while (n != 0){ cnt += 1; n = n & (n - 1); } return cnt; } } \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2adouble\u7c7b\u578b\u7684\u6d6e\u70b9\u6570base\u548cint\u7c7b\u578b\u7684\u6574\u6570exponent\u3002\u6c42base\u7684exponent\u6b21\u65b9\u3002 \u89e3\u6cd5 \u6d4b\u8bd5\u7528\u4f8b\uff1a \u5e95\u6570 \u548c \u6307\u6570 \u6b63\u6570 \u8d1f\u6570 0 \u89e3\u6cd5\u4e00 public class Solution { public double Power(double base, int exponent) { // \u5e95\u6570\u4e3a0 \u4e0d\u53ef\u505a\u5206\u6bcd if(base == 0){ return 0; } if(exponent == 0){ return 1; } if(exponent < 0){ exponent = -1 * exponent; base = 1 / base; } double ans = 1.0; if ((exponent & 1) == 1){ ans = base * ans; } double half = Power(base, exponent >> 1); return ans * half * half; } } \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002 \u8fdb\u96361: \u539f\u5730\u8c03\u6574\uff0c\u4e0d\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002 \u8fdb\u96362\uff1a\u5e76\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u8fdb\u96361 \u4e0d\u7a33\u5b9a \u7ef4\u62a4\u4e24\u6307\u9488\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u653e\u5728\u6570\u7ec4\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u4ece\u524d\u5411\u540e\u904d\u5386\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u653e\u5728\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4ece\u540e\u5411\u524d\u904d\u5386\uff0c\u4e24\u6307\u9488\u76f8\u9047\u524d\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5076\u6570\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u5947\u6570\uff0c\u4ea4\u6362\u3002 public class Solution { public void reOrderArray(int [] array) { if (array == null || array.length == 0){ return; } int i = 0, j = array.length - 1; while(i < j){ while(i < j && check(array[i])){ i++; } while(i < j && !check(array[j])){ j--; } if(i < j){ int tmp = array[i]; array[i] = array[j]; array[j] = tmp; } } } private boolean check(int num){ return (num & 1) == 1; } } \u89e3\u6cd5\u4e8c \u8fdb\u9636\u4e8c \u65b0\u5efa\u6570\u7ec4 \u6216\u63d2\u5165\u6392\u5e8f public class Solution { public void reOrderArray(int [] array) { if (array == null || array.length == 0){ return; } int[] narray = new int[array.length]; int odd_cnt = 0; for(int i = 0; i < array.length; i++){ if((array[i] & 1) == 1){ narray[odd_cnt] = array[i]; odd_cnt++; } } for(int i = 0; i < array.length; i++){ if((array[i] & 1) != 1){ narray[odd_cnt] = array[i]; odd_cnt++; } } // array = narray; \u9519\u8bef \u8be5\u8bed\u53e5\u662f\u8ba9array\u6307\u5411narray\u7684\u5185\u5b58\u533a\u57df\uff0c\u800c\u4e0d\u662f\u4fee\u6539narray\u7684\u5185\u5b58\u533a\u57df for (int i = 0; i< array.length; i++){ array[i] = narray[i]; } } } public class Solution { public void reOrderArray(int [] array) { /** * \u4e0d\u7a33\u5b9a\u6cd5 \u4ece\u4e24\u4fa7\u903c\u8fd1 * \u65b0\u5efa\u6570\u7ec4 * \u63d2\u5165\u6392\u5e8f */ if (array == null || array.length == 0){ return; } int i = -1; for(int j = 0; j < array.length; j++){ int key = array[j]; if ((key & 1) == 1){ int k = j - 1; while (k > i){ array[k + 1] = array[k]; k--; } array[k + 1] = key; i++; } } } } \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9\u3002 \u89e3\u6cd5 \u53cc\u6307\u9488\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u5148\u8d70\u7b2ck\u4e2a\u7ed3\u70b9\uff0c\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u8d70\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u8d70\u5230\u5c3e\u7ed3\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u5373\u662f\u9700\u8981\u7684\u7ed3\u70b9 \u89e3\u6cd5\u4e00 \u904d\u5386\u4e00\u904d public class Solution { public ListNode FindKthToTail(ListNode head,int k) { if(k <= 0 || head == null){ return null; } // k > lenght ListNode first = head, second = head; for(int i = 0; i < k - 1; i++){ if (first.next == null){ return null; } first = first.next; } while(first.next != null){ first = first.next; second = second.next; } return second; } } \u53cd\u8f6c\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u65b0\u94fe\u8868\u7684\u8868\u5934\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 public class Solution { public ListNode ReverseList(ListNode head) { ListNode nhead = null; while(head != null){ ListNode tmp = head; head = head.next; tmp.next = nhead; nhead = tmp; } return nhead; } } \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u975e\u9012\u5f52 public class Solution { public ListNode Merge(ListNode list1,ListNode list2) { if(list1 == null){ return list2; } if(list2 == null){ return list1; } ListNode ans = null, head = null; int val = 0; while(list1 != null && list2 != null){ if(list1.val <= list2.val){ val = list1.val; list1 = list1.next; }else{ val = list2.val; list2 = list2.next; } if(head == null){ head = new ListNode(val); ans = head; }else{ ans.next = new ListNode(val); ans = ans.next; } } if(list1 != null){ ans.next = list1; }else{ ans.next = list2; } return head; } } \u89e3\u6cd5\u4e8c \u9012\u5f52\u7248\u672c public class Solution { public ListNode Merge(ListNode list1,ListNode list2) { if(list1 == null){ return list2; } if(list2 == null){ return list1; } ListNode head = null; if(list1.val <= list2.val){ head = new ListNode(list1.val); head.next = Merge(list1.next, list2); }else{ head = new ListNode(list2.val); head.next = Merge(list1, list2.next); } return head; } } [\u6536\u85cf]\u6811\u7684\u5b50\u7ed3\u6784 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002\uff08ps\uff1a\u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09 \u89e3\u6cd5 \u7b2c\u4e00\u6b65\uff1a\u5728\u6811A\u4e2d\u627e\u5230\u548c\u6811B\u7684\u6839\u7ed3\u70b9\u7684\u503c\u4e00\u6837\u7684\u7ed3\u70b9R \u7b2c\u4e8c\u6b65\uff1a\u5224\u65ad\u6811A\u4ee5R\u4e3a\u7ed3\u70b9\u7684\u5b50\u6811\u662f\u5426\u5305\u542b\u548c\u6811B\u4e00\u6837\u7684\u7ed3\u6784(\u6811A\u4e2dR\u662f\u548c\u6811B\u4e2d\u6839\u7ed3\u70b9\u5bf9\u5e94\u7684\u7ed3\u70b9) \u89e3\u6cd5\u4e00 public class Solution { public boolean HasSubtree(TreeNode root1,TreeNode root2) { if(root1 == null || root2 == null){ return false; } boolean ans = false; if(root1.val == root2.val){ ans = DoesTree1HasEqualRootTree2(root1, root2); } if(!ans){ ans = HasSubtree(root1.left, root2); } if(!ans){ ans = HasSubtree(root1.right, root2); } return ans; } private boolean DoesTree1HasEqualRootTree2(TreeNode root1, TreeNode root2){ /** * \u540c\u6839\u7684\u68111\u662f\u5426\u5305\u542b\u540c\u6839\u7684\u6811\u4e8c */ if(root2 == null){ return true; } if(root1 == null){ return false; } return root1.val == root2.val && DoesTree1HasEqualRootTree2(root1.left, root2.left) && DoesTree1HasEqualRootTree2(root1.right, root2.right); } } \u89e3\u6cd5\u4e8c \u4fee\u65391\u4f7f\u4e4b\u6613\u4e8e\u7406\u89e3 public class Solution { public boolean HasSubtree(TreeNode root1,TreeNode root2) { if(root1 == null || root2 == null){ return false; } return DoesTree1HasEqualRootTree2(root1, root2) || HasSubtree(root1.left, root2) || HasSubtree(root1.right, root2); } private boolean DoesTree1HasEqualRootTree2(TreeNode root1, TreeNode root2){ /** * \u540c\u6839\u7684\u68111\u662f\u5426\u5305\u542b\u540c\u6839\u7684\u6811\u4e8c */ if(root2 == null){ return true; } if(root1 == null){ return false; } return root1.val == root2.val && DoesTree1HasEqualRootTree2(root1.left, root2.left) && DoesTree1HasEqualRootTree2(root1.right, root2.right); } } \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u9898\u76ee\u63cf\u8ff0 \u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002 \u8f93\u5165\u63cf\u8ff0: \u4e8c\u53c9\u6811\u7684\u955c\u50cf\u5b9a\u4e49\uff1a\u6e90\u4e8c\u53c9\u6811 8 / \\ 6 10 / \\ / \\ 5 7 9 11 \u955c\u50cf\u4e8c\u53c9\u6811 8 / \\ 10 6 / \\ / \\ 11 9 7 5 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 public class Solution { public void Mirror(TreeNode root) { MirrorHelp(root); } public TreeNode MirrorHelp(TreeNode root){ if(root == null){ return null; } TreeNode left = MirrorHelp(root.right); TreeNode right = MirrorHelp(root.left); root.left = left; root.right = right; return root; } } import java.util.Stack; public class Solution { public void Mirror(TreeNode root) { if(root == null){ return; } TreeNode tmp = root.left; root.left = root.right; root.right = tmp; Mirror(root.left); Mirror(root.right); } } \u89e3\u6cd5\u4e8c DFS import java.util.Stack; public class Solution { public void Mirror(TreeNode root) { if(root == null){ return; } Stack<TreeNode> stack = new Stack<>(); stack.push(root); while(!stack.empty()){ TreeNode node = stack.pop(); TreeNode temp = node.left; node.left = node.right; node.right = temp; if(node.left != null){ stack.push(node.left); } if(node.right != null){ stack.push(node.right); } } } } [\u6536\u85cf]\u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u5982\u4e0b4 X 4\u77e9\u9635\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5219\u4f9d\u6b21\u6253\u5370\u51fa\u6570\u5b571,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10. \u89e3\u6cd5 \u753b\u56fe\uff0c\u53d1\u73b0\u7ed3\u679c\u7531\u4e00\u4e2a\u4e2a\u540c\u5fc3\u5708\u7ec4\u6210 \u6d4b\u8bd5\u6848\u4f8b\uff0c\u591a\u884c\u591a\u5217 \u5355\u884c \u5355\u5217 \u5355\u884c\u5355\u5217 \u601d\u8def\uff1a\u9898\u76ee\u5206\u6210\u4e24\u4e2a\u5c0f\u95ee\u9898\uff1a \u627e\u5230\u6bcf\u4e00\u5708\u7684\u5176\u5b9e\u5750\u6807 i < (Math.min(rows, cols)+1)/2 \u627e\u5230\u5faa\u73af\u7ec8\u6b62\u6761\u4ef6 \u89e3\u6cd5\u4e00 import java.util.ArrayList; import java.lang.Math; public class Solution { public ArrayList<Integer> printMatrix(int [][] matrix) { if(matrix == null || matrix.length == 0){ return new ArrayList<Integer>(); } int rows = matrix.length; int cols = matrix[0].length; ArrayList<Integer> printList = new ArrayList<>(rows * cols); // (i, i)\u4ee3\u8868\u6bcf\u4e00\u5708\u7684\u8d77\u59cb\u5143\u7d20 for(int i = 0; i < (Math.min(rows, cols)+1)/2; i++){ printCircle(matrix, rows, cols, i, printList); } return printList; } private void printCircle(int[][] matrix, int rows, int cols, int start, ArrayList<Integer> list){ // \u7ec8\u6b62\u5217\u7d22\u5f15 int endX = cols - 1 - start; // \u7ec8\u6b62\u884c\u7d22\u5f15 int endY = rows - 1 - start; // \u4ece\u5de6\u5230\u53f3\u6253\u5370\u4e00\u884c for(int j = start; j <= endX; j++){ list.add(matrix[start][j]); } // \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e00\u5217 for(int j = start + 1; j <= endY; j++){ list.add(matrix[j][endX]); } // \u4ece\u53f3\u5230\u5de6\u6253\u5370\u4e00\u884c for(int j = endX - 1; (j >= start) && (start < endX && start < endY); j--){ list.add(matrix[endY][j]); } // \u4ece\u4e0b\u5230\u4e0a\u6253\u5370\u4e00\u5217 for(int j = endY - 1; (j > start) && (start < endX && start < endY - 1) ; j--){ list.add(matrix[j][start]); } } } import java.util.ArrayList; import java.lang.Math; public class Solution { public ArrayList<Integer> printMatrix(int [][] matrix) { if(matrix == null || matrix.length == 0){ return new ArrayList<Integer>(); } int rows = matrix.length; int cols = matrix[0].length; ArrayList<Integer> printList = new ArrayList<>(rows * cols); // (i, i)\u4ee3\u8868\u6bcf\u4e00\u5708\u7684\u8d77\u59cb\u5143\u7d20 for(int i = 0; i < (Math.min(rows, cols)+1)/2; i++){ printCircle(matrix, rows, cols, i, printList); } return printList; } private void printCircle(int[][] matrix, int rows, int cols, int start, ArrayList<Integer> list){ int endX = rows - start - 1; int endY = cols - start - 1; for(int i = start;i <= endY; i++){ list.add(matrix[start][i]); } for(int i = start + 1; i <= endX; i++){ list.add(matrix[i][endY]); } if (start != endX){ for(int i = endY - 1; i >= start; i--){ list.add(matrix[endX][i]); } } if (start != endY){ for(int i = endX - 1; i > start; i--){ list.add(matrix[i][start]); } } } } \u5305\u542bmin\u51fd\u6570\u7684\u6808 \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684min\u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO\uff081\uff09\uff09\u3002 \u89e3\u6cd5 \u770b\u5230O(1)\u60f3\u5230\uff0chash\u6216\u8005\u6570\u7ec4\uff0c\u6216\u8005\u4e00\u4e00\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784(\u672c\u9898\u4e3a\u8f85\u52a9\u6808) \u5b9a\u4e49\u4e00\u4e2a\u8f85\u52a9\u6808\uff0c\u6bcf\u6b21\u628a\u4e00\u4e2a\u5143\u7d20\u63a8\u5165\u6808\uff0c\u90fd\u628a\u5f53\u524d\u65f6\u523b\u7684\u6700\u5c0f\u503c\u5b58\u5165\u8f85\u52a9\u6808 \u89e3\u6cd5\u4e00 import java.util.Stack; import java.lang.Math; public class Solution { private Stack<Integer> mainStack = new Stack<>(); private Stack<Integer> secondStack = new Stack<>(); public void push(int node) { mainStack.push(node); if(!secondStack.empty()){ secondStack.push(Math.min(node, secondStack.peek())); }else{ secondStack.push(node); } } public void pop() { if(mainStack.empty()){ throw new RuntimeException(\"null\"); } secondStack.pop(); mainStack.pop(); } public int top() { if(mainStack.empty()){ throw new RuntimeException(\"null\"); } return mainStack.peek(); } public int min() { if(mainStack.empty()){ throw new RuntimeException(\"null\"); } return secondStack.peek(); } } \u6808\u7684\u538b\u5165\u548c\u5f39\u51fa\u5e8f\u5217 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u52171,2,3,4,5\u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u52174,5,3,2,1\u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f464,3,5,1,2\u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u7528ArrayList import java.util.ArrayList; public class Solution { public boolean IsPopOrder(int [] pushA,int [] popA) { ArrayList<Integer> list = new ArrayList<>(pushA.length); int j = 0; for(int i = 0; i < pushA.length; i++){ list.add(pushA[i]); // \u5224\u65ad\u7d22\u5f15\u6821\u9a8c while(j < popA.length && list.get(list.size()-1) == popA[j]){ list.remove(list.size()-1); j++; } } return j == popA.length; } } \u89e3\u6cd5\u4e8c \u7528Stack \u63a8\u8350 import java.util.Stack; public class Solution { public boolean IsPopOrder(int [] pushA,int [] popA) { Stack<Integer> stack = new Stack<>(); int j = 0; for(int i = 0; i < pushA.length; i++){ stack.push(pushA[i]); // \u5224\u65ad\u7d22\u5f15\u6821\u9a8c while(j < popA.length && stack.peek() == popA[j]){ stack.pop(); j++; } } return stack.empty(); } } \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u9898\u76ee\u63cf\u8ff0 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002 \u89e3\u6cd5 BFS \u89e3\u6cd5\u4e00 BFS import java.util.ArrayList; import java.util.ArrayDeque; /** public class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } */ public class Solution { public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) { // BFS if(root == null){ return new ArrayList<Integer>(); } ArrayList<Integer> list = new ArrayList<>(); ArrayDeque<TreeNode> queue = new ArrayDeque(); queue.offer(root); TreeNode node = null; while(!queue.isEmpty()){ node = queue.poll(); list.add(node.val); if(node.left != null){ queue.offer(node.left); } if(node.right != null){ queue.offer(node.right); } } return list; } } [\u6536\u85cf]\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51faYes,\u5426\u5219\u8f93\u51faNo\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 \u5df2\u77e5\u6761\u4ef6 \uff1a \u540e\u5e8f\u5e8f\u5217\u6700\u540e\u4e00\u4e2a\u503c\u4e3aroot\uff1b\u4e8c\u53c9\u641c\u7d22\u6811\u5de6\u5b50\u6811\u503c\u90fd\u6bd4root\u5c0f\uff0c\u53f3\u5b50\u6811\u503c\u90fd\u6bd4root\u5927\u3002 1\u3001\u786e\u5b9aroot\uff1b 2\u3001\u904d\u5386\u5e8f\u5217\uff08\u9664\u53bbroot\u7ed3\u70b9\uff09\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8eroot\u7684\u4f4d\u7f6e\uff0c\u5219\u8be5\u4f4d\u7f6e\u5de6\u8fb9\u4e3a\u5de6\u5b50\u6811\uff0c\u53f3\u8fb9\u4e3a\u53f3\u5b50\u6811\uff1b 3\u3001\u904d\u5386\u53f3\u5b50\u6811\uff0c\u82e5\u53d1\u73b0\u6709\u5c0f\u4e8eroot\u7684\u503c\uff0c\u5219\u76f4\u63a5\u8fd4\u56defalse\uff1b 4\u3001\u5206\u522b\u5224\u65ad\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u662f\u5426\u4ecd\u662f\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u5373\u9012\u5f52\u6b65\u9aa41\u30012\u30013\uff09\u3002 import java.util.Arrays; public class Solution { public boolean VerifySquenceOfBST(int [] sequence) { // [] \u4e3a false if(sequence == null || sequence.length == 0){ return false; } return verifyHelper(sequence); } private boolean verifyHelper(int [] sequence){ if(sequence.length == 0){ return true; } int root = sequence[sequence.length-1]; int left = 0; // \u627e\u5230\u6bd4root\u5c0f\u7684\u5143\u7d20 while(left < sequence.length - 1 && sequence[left] < root){ left++; } // \u5224\u65adright\u505a\u9762\u90fd\u5c0f\u4e8eroot\uff0c\u53f3\u9762\u90fd\u5927\u4e8eroot int right = left; while(right < sequence.length - 1){ if(sequence[right] < root){ return false; } right++; } // \u9012\u5f52\u5224\u65ad\u5b50\u6811\u662f\u5426\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386 return verifyHelper(Arrays.copyOfRange(sequence, 0, left)) && verifyHelper(Arrays.copyOfRange(sequence, left, right)); } } \u89e3\u6cd5\u4e8c \u975e\u9012\u5f52 \u63a8\u8350 \u540e\u5e8f\u904d\u5386\u7684\u89c4\u5f8b //\u975e\u9012\u5f52 //\u975e\u9012\u5f52\u4e5f\u662f\u4e00\u4e2a\u57fa\u4e8e\u9012\u5f52\u7684\u601d\u60f3\uff1a //\u5de6\u5b50\u6811\u4e00\u5b9a\u6bd4\u53f3\u5b50\u6811\u5c0f\uff0c\u56e0\u6b64\u53bb\u6389\u6839\u540e\uff0c\u6570\u5b57\u5206\u4e3aleft\uff0cright\u4e24\u90e8\u5206\uff0cright\u90e8\u5206\u7684 //\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u53f3\u5b50\u6811\u7684\u6839\u4ed6\u4e5f\u6bd4\u5de6\u5b50\u6811\u6240\u6709\u503c\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u53ea\u770b\u6709\u5b50\u6811\u662f\u5426\u7b26\u5408\u6761\u4ef6 //\u5373\u53ef\uff0c\u5373\u4f7f\u5230\u8fbe\u4e86\u5de6\u5b50\u6811\u5de6\u5b50\u6811\u4e5f\u53ef\u4ee5\u770b\u51fa\u7531\u5de6\u53f3\u5b50\u6811\u7ec4\u6210\u7684\u6811\u8fd8\u60f3\u53f3\u5b50\u6811\u90a3\u6837\u5904\u7406 //\u5bf9\u4e8e\u5de6\u5b50\u6811\u56de\u5230\u4e86\u539f\u95ee\u9898\uff0c\u5bf9\u4e8e\u53f3\u5b50\u6811\uff0c\u5de6\u5b50\u6811\u7684\u6240\u6709\u503c\u90fd\u6bd4\u53f3\u5b50\u6811\u7684\u6839\u5c0f\u53ef\u4ee5\u6682\u65f6\u628a\u4ed6\u770b\u51fa\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811 //\u53ea\u9700\u770b\u770b\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u662f\u5426\u7b26\u5408\u8981\u6c42\u5373\u53ef class Solution { public: bool VerifySquenceOfBST(vector<int> sequence) { int size = sequence.size(); if(0==size)return false; int i = 0; while(--size) { while(sequence[i++]<sequence[size]); while(sequence[i++]>sequence[size]); if(i<size)return false; i=0; } return true; } \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002(\u6ce8\u610f: \u5728\u8fd4\u56de\u503c\u7684list\u4e2d\uff0c\u6570\u7ec4\u957f\u5ea6\u5927\u7684\u6570\u7ec4\u9760\u524d) \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 public class Solution { public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) { if(root == null){ return new ArrayList<ArrayList<Integer>>(); } ArrayList<ArrayList<Integer>> result = new ArrayList<>(); ArrayList<Integer> item = new ArrayList<>(); dfsHelper(item, result, root, target); return result; } private void dfsHelper(ArrayList<Integer> item, ArrayList<ArrayList<Integer>> result, TreeNode root, int target){ item.add(root.val); if(target == root.val && root.left == null && root.right == null){ result.add(item); return; } if(root.left != null){ dfsHelper(new ArrayList<Integer>(item), result, root.left, target - root.val); } if(root.right != null){ dfsHelper(new ArrayList<Integer>(item), result, root.right, target - root.val); } } } public class Solution { private ArrayList<ArrayList<Integer>> listAll = new ArrayList<ArrayList<Integer>>(); private ArrayList<Integer> list = new ArrayList<Integer>(); public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) { if(root == null) return listAll; list.add(root.val); target -= root.val; if(target == 0 && root.left == null && root.right == null) listAll.add(new ArrayList<Integer>(list)); FindPath(root.left, target); FindPath(root.right, target); list.remove(list.size()-1); return listAll; } } \u89e3\u6cd5\u4e8c \u975e\u9012\u5f52\u7248\u672c //\u975e\u9012\u5f52\u7248\u672c //\u601d\u8def\uff1a 1.\u6309\u5148\u5e8f\u904d\u5386\u628a\u5f53\u524d\u8282\u70b9cur\u7684\u5de6\u5b69\u5b50\u4f9d\u6b21\u5165\u6808\u540c\u65f6\u4fdd\u5b58\u5f53\u524d\u8282\u70b9\uff0c\u6bcf\u6b21\u66f4\u65b0\u5f53\u524d\u8def\u5f84\u7684\u548csum\uff1b 2.\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u662f\u53f6\u5b50\u8282\u70b9\u4ee5\u53casum\u662f\u5426\u7b49\u4e8eexpectNumber\uff0c\u5982\u679c\u662f\uff0c\u628a\u5f53\u524d\u8def\u5f84\u653e\u5165\u7ed3\u679c\u4e2d\u3002 3.\u9047\u5230\u53f6\u5b50\u8282\u70b9cur\u66f4\u65b0\u4e3aNULL\uff0c\u6b64\u65f6\u770b\u6808\u9876\u5143\u7d20\uff0c\u5982\u679c\u6808\u9876\u5143\u7d20\u7684\u628a\u6808\u9876\u5143\u7d20\u4fdd\u5b58\u5728last\u53d8\u91cf\u4e2d\uff0c\u540c\u65f6\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5f53\u671f\u8def\u5f84\u4e2d\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0csum\u51cf\u6389\u6808\u9876\u5143\u7d20\uff0c\u8fd9\u4e00\u6b65\u9aa4\u4e0d\u66f4\u6539cur\u7684\u503c\uff1b 4.\u5982\u679c\u6b65\u9aa43\u4e2d\u7684\u6808\u9876\u5143\u7d20\u7684\u53f3\u5b69\u5b50\u5b58\u5728\u4e14\u53f3\u5b69\u5b50\u4e4b\u524d\u6ca1\u6709\u904d\u5386\u8fc7\uff0c\u5f53\u524d\u8282\u70b9cur\u66f4\u65b0\u4e3a\u6808\u9876\u7684\u53f3\u5b69\u5b50\uff0c\u6b64\u65f6\u6539\u53d8cur=NULL\u7684\u60c5\u51b5\u3002 #include <iostream> #include <vector> using namespace std; struct TreeNode{ int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL){} } vector<vector<int> > FindPath(TreeNode *root, int expectNumber){ vector<vector<int> > res; if (root == NULL) return res; stack<TreeNode *> s; s.push(root); int sum = 0; //\u5f53\u524d\u548c vector<int> curPath; //\u5f53\u524d\u8def\u5f84 TreeNode *cur = root; //\u5f53\u524d\u8282\u70b9 TreeNode *last = NULL; //\u4fdd\u5b58\u4e0a\u4e00\u4e2a\u8282\u70b9 while (!s.empty()){ if (cur == NULL){ TreeNode *temp = s.top(); if (temp->right != NULL && temp->right != last){ cur = temp->right; //\u8f6c\u5411\u672a\u904d\u5386\u8fc7\u7684\u53f3\u5b50\u6811 }else{ last = temp; //\u4fdd\u5b58\u4e0a\u4e00\u4e2a\u5df2\u904d\u5386\u7684\u8282\u70b9 s.pop(); curPath.pop_back(); //\u4ece\u5f53\u524d\u8def\u5f84\u5220\u9664 sum -= temp->val; } } else{ s.push(cur); sum += cur->val; curPath.push_back(cur->val); if (cur->left == NULL && cur->right == NULL && sum == expectNum){ res.push_back(curPath); } cur = cur->left; //\u5148\u5e8f\u904d\u5386\uff0c\u5de6\u5b50\u6811\u5148\u4e8e\u53f3\u5b50\u6811 } } return res; } \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002\uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09 \u89e3\u6cd5 Hash \u89e3\u6cd5\u4e00 \u4e24\u4e2aMap // \u6784\u5efa \u65e7\u7ed3\u70b9 -> \u65e7\u7ed3\u70b9\u7d22\u5f15 map // \u6784\u5efa \u65b0\u7ed3\u70b9\u7d22\u5f15 -> \u65b0\u7ed3\u70b9 map /* public class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } */ import java.util.HashMap; public class Solution { public RandomListNode Clone(RandomListNode pHead) { RandomListNode cur = pHead, newHead = null, newCur = null; HashMap<RandomListNode, Integer> nodeMap = new HashMap<>(); HashMap<Integer, RandomListNode> intMap = new HashMap<>(); // \u6784\u5efa \u65e7\u7ed3\u70b9 -> \u65e7\u7ed3\u70b9\u7d22\u5f15 map // \u6784\u5efa \u65b0\u7ed3\u70b9\u7d22\u5f15 -> \u65b0\u7ed3\u70b9 map int i = 0; while(cur != null){ if(newHead == null){ newCur = new RandomListNode(cur.label); newHead = newCur; }else{ newCur.next = new RandomListNode(cur.label); newCur = newCur.next; } intMap.put(i, newCur); nodeMap.put(cur, i); cur = cur.next; i++; } // \u6784\u5efa\u968f\u673a\u7ed3\u70b9 cur = pHead; newCur = newHead; while(cur != null){ newCur.random = intMap.get(nodeMap.get(cur.random)); cur = cur.next; newCur = newCur.next; } return newHead; } } \u89e3\u6cd5\u4e8c \u4e00\u4e2amap // \u65e7\u7ed3\u70b9 -> \u65b0\u7ed3\u70b9 map /* public class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } */ import java.util.HashMap; public class Solution { public RandomListNode Clone(RandomListNode pHead) { RandomListNode cur = pHead, newHead = null, newCur = null; HashMap<RandomListNode, RandomListNode> nodeMap = new HashMap<>(); // \u6784\u5efa \u65e7\u7ed3\u70b9 -> \u65b0\u7ed3\u70b9 map while(cur != null){ if(newHead == null){ newCur = new RandomListNode(cur.label); newHead = newCur; }else{ newCur.next = new RandomListNode(cur.label); newCur = newCur.next; } nodeMap.put(cur, newCur); cur = cur.next; } // \u6784\u5efa\u968f\u673a\u7ed3\u70b9 cur = pHead; newCur = newHead; while(cur != null){ newCur.random = nodeMap.get(cur.random); cur = cur.next; newCur = newCur.next; } return newHead; } } \u89e3\u6cd5\u4e09 \u5251\u6307 offer /* *\u89e3\u9898\u601d\u8def\uff1a *1\u3001\u904d\u5386\u94fe\u8868\uff0c\u590d\u5236\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5982\u590d\u5236\u7ed3\u70b9A\u5f97\u5230A1\uff0c\u5c06\u7ed3\u70b9A1\u63d2\u5230\u7ed3\u70b9A\u540e\u9762\uff1b *2\u3001\u91cd\u65b0\u904d\u5386\u94fe\u8868\uff0c\u590d\u5236\u8001\u7ed3\u70b9\u7684\u968f\u673a\u6307\u9488\u7ed9\u65b0\u7ed3\u70b9\uff0c\u5982A1.random = A.random.next; *3\u3001\u62c6\u5206\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u62c6\u5206\u4e3a\u539f\u94fe\u8868\u548c\u590d\u5236\u540e\u7684\u94fe\u8868 */ public class Solution { public RandomListNode Clone(RandomListNode pHead) { if(pHead == null) { return null; } RandomListNode currentNode = pHead; //1\u3001\u590d\u5236\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5982\u590d\u5236\u7ed3\u70b9A\u5f97\u5230A1\uff0c\u5c06\u7ed3\u70b9A1\u63d2\u5230\u7ed3\u70b9A\u540e\u9762\uff1b while(currentNode != null){ RandomListNode cloneNode = new RandomListNode(currentNode.label); RandomListNode nextNode = currentNode.next; currentNode.next = cloneNode; cloneNode.next = nextNode; currentNode = nextNode; } currentNode = pHead; //2\u3001\u91cd\u65b0\u904d\u5386\u94fe\u8868\uff0c\u590d\u5236\u8001\u7ed3\u70b9\u7684\u968f\u673a\u6307\u9488\u7ed9\u65b0\u7ed3\u70b9\uff0c\u5982A1.random = A.random.next; while(currentNode != null) { currentNode.next.random = currentNode.random==null?null:currentNode.random.next; currentNode = currentNode.next.next; } //3\u3001\u62c6\u5206\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u62c6\u5206\u4e3a\u539f\u94fe\u8868\u548c\u590d\u5236\u540e\u7684\u94fe\u8868 currentNode = pHead; RandomListNode pCloneHead = pHead.next; while(currentNode != null) { RandomListNode cloneNode = currentNode.next; currentNode.next = cloneNode.next; cloneNode.next = cloneNode.next==null?null:cloneNode.next.next; currentNode = currentNode.next; } return pCloneHead; } } class Solution { public: /* 1\u3001\u590d\u5236\u6bcf\u4e2a\u8282\u70b9\uff0c\u5982\uff1a\u590d\u5236\u8282\u70b9A\u5f97\u5230A1\uff0c\u5c06A1\u63d2\u5165\u8282\u70b9A\u540e\u9762 2\u3001\u904d\u5386\u94fe\u8868\uff0cA1->random = A->random->next; 3\u3001\u5c06\u94fe\u8868\u62c6\u5206\u6210\u539f\u94fe\u8868\u548c\u590d\u5236\u540e\u7684\u94fe\u8868 */ RandomListNode* Clone(RandomListNode* pHead) { if(!pHead) return NULL; RandomListNode *currNode = pHead; while(currNode){ RandomListNode *node = new RandomListNode(currNode->label); node->next = currNode->next; currNode->next = node; currNode = node->next; } currNode = pHead; while(currNode){ RandomListNode *node = currNode->next; if(currNode->random){ node->random = currNode->random->next; } currNode = node->next; } //\u62c6\u5206 RandomListNode *pCloneHead = pHead->next; RandomListNode *tmp; currNode = pHead; while(currNode->next){ tmp = currNode->next; currNode->next =tmp->next; currNode = tmp; } return pCloneHead; } }; \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u524d\u5e8f\u904d\u5386 \u975e\u9012\u5f52 /** public class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } */ import java.util.ArrayList; import java.util.Stack; public class Solution { public TreeNode Convert(TreeNode pRootOfTree) { if(pRootOfTree == null){ return null; } ArrayList<TreeNode> nodes = new ArrayList<>(); Stack<TreeNode> stack = new Stack<>(); // \u4e2d\u5e8f\u904d\u5386 TreeNode node = pRootOfTree, nHead = pRootOfTree; while(node != null || !stack.empty()){ if(node != null){ stack.push(node); node = node.left; }else{ node = stack.pop(); nodes.add(node); node = node.right; } } // \u6b63\u5411\u8fde\u63a5 nHead = null; for(int i = 0; i < nodes.size(); i++){ if(i == 0){ node = nodes.get(i); nHead = node; }else{ node.right = nodes.get(i); node = node.right; } } node.right = null; // \u53cd\u5411\u8fde\u63a5 for(int i = nodes.size() - 1; i >= 0 ; i--){ if(i == (nodes.size() - 1)){ node = nodes.get(i); }else{ node.left = nodes.get(i); node = node.left; } } node.left = null; return nHead; } } \u89e3\u6cd5\u4e8c \u524d\u5e8f\u904d\u5386 \u975e\u9012\u5f52 \u63a8\u8350 import java.util.Stack; public class Solution { public TreeNode Convert(TreeNode pRootOfTree) { if(pRootOfTree == null){ return null; } Stack<TreeNode> stack = new Stack<>(); // \u4e2d\u5e8f\u904d\u5386 TreeNode node = pRootOfTree, nHead = null, cur = null; while(node != null || !stack.empty()){ if(node != null){ stack.push(node); node = node.left; }else{ node = stack.pop(); // --- \u4fee\u6539\u6307\u9488 -- if(nHead == null){ cur = node; nHead = cur; }else{ cur.right = node; cur.right.left = cur; cur = cur.right; } // --- \u4fee\u6539\u6307\u9488 -- node = node.right; } } return nHead; } } \u89e3\u6cd5\u4e09 \u9012\u5f52 \u89e3\u9898\u601d\u8def\uff1a 1.\u5c06\u5de6\u5b50\u6811\u6784\u9020\u6210\u53cc\u94fe\u8868\uff0c\u5e76\u8fd4\u56de\u94fe\u8868\u5934\u8282\u70b9\u3002 2.\u5b9a\u4f4d\u81f3\u5de6\u5b50\u6811\u53cc\u94fe\u8868\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u3002 3.\u5982\u679c\u5de6\u5b50\u6811\u94fe\u8868\u4e0d\u4e3a\u7a7a\u7684\u8bdd\uff0c\u5c06\u5f53\u524droot\u8ffd\u52a0\u5230\u5de6\u5b50\u6811\u94fe\u8868\u3002 4.\u5c06\u53f3\u5b50\u6811\u6784\u9020\u6210\u53cc\u94fe\u8868\uff0c\u5e76\u8fd4\u56de\u94fe\u8868\u5934\u8282\u70b9\u3002 5.\u5982\u679c\u53f3\u5b50\u6811\u94fe\u8868\u4e0d\u4e3a\u7a7a\u7684\u8bdd\uff0c\u5c06\u8be5\u94fe\u8868\u8ffd\u52a0\u5230root\u8282\u70b9\u4e4b\u540e\u3002 6.\u6839\u636e\u5de6\u5b50\u6811\u94fe\u8868\u662f\u5426\u4e3a\u7a7a\u786e\u5b9a\u8fd4\u56de\u7684\u8282\u70b9\u3002 public class Solution { public TreeNode Convert(TreeNode pRootOfTree) { if(pRootOfTree == null){ return null; } if(pRootOfTree.left == null && pRootOfTree.right == null){ return pRootOfTree; } TreeNode leftLink = Convert(pRootOfTree.left); TreeNode rightLink = Convert(pRootOfTree.right); TreeNode nHead = leftLink, cur = leftLink; if(leftLink != null){ while(cur.right != null){ cur = cur.right; } cur.right = pRootOfTree; cur.right.left = cur; }else{ nHead = pRootOfTree; } if(rightLink != null){ pRootOfTree.right = rightLink; pRootOfTree.right.left = pRootOfTree; } return nHead; } } \u65b9\u6cd5\u56db \u4e2d\u5e8f\u904d\u5386 \u9012\u5f52\u7248 class Solution { public: TreeNode* Convert(TreeNode* pRootOfTree) { if(pRootOfTree == nullptr) return nullptr; TreeNode* pre = nullptr; convertHelper(pRootOfTree, pre); TreeNode* res = pRootOfTree; while(res ->left) res = res ->left; return res; } void convertHelper(TreeNode* cur, TreeNode*& pre) { if(cur == nullptr) return; convertHelper(cur ->left, pre); cur ->left = pre; if(pre) pre ->right = cur; pre = cur; convertHelper(cur ->right, pre); } }; //\u9012\u5f52\u8c03\u7528 \u5de6 \u6839 \u53f3 \u904d\u5386 public class Solution { //\u53cc\u5411\u94fe\u8868\u7684\u5de6\u8fb9\u5934\u7ed3\u70b9\u548c\u53f3\u8fb9\u5934\u8282\u70b9 TreeNode leftHead = null; TreeNode rightHead = null; public TreeNode Convert(TreeNode pRootOfTree) { //\u9012\u5f52\u8c03\u7528\u53f6\u5b50\u8282\u70b9\u7684\u5de6\u53f3\u8282\u70b9\u8fd4\u56denull if(pRootOfTree==null) return null; //\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\uff0c\u5b83\u4f1a\u4f7f\u6700\u5de6\u8fb9\u53f6\u5b50\u8282\u70b9\u4e3a\u94fe\u8868\u7b2c\u4e00\u4e2a\u8282\u70b9 Convert(pRootOfTree.left); if(rightHead==null){ leftHead= rightHead = pRootOfTree; }else{ //\u628a\u6839\u8282\u70b9\u63d2\u5165\u5230\u53cc\u5411\u94fe\u8868\u53f3\u8fb9\uff0crightHead\u5411\u540e\u79fb\u52a8 rightHead.right = pRootOfTree; pRootOfTree.left = rightHead; rightHead = pRootOfTree; } //\u628a\u53f3\u53f6\u5b50\u8282\u70b9\u4e5f\u63d2\u5165\u5230\u53cc\u5411\u94fe\u8868\uff08rightHead\u5df2\u786e\u5b9a\uff0c\u76f4\u63a5\u63d2\u5165\uff09 Convert(pRootOfTree.right); //\u8fd4\u56de\u5de6\u8fb9\u5934\u7ed3\u70b9 return leftHead; } } \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc,\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a,b,c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc,acb,bac,bca,cab\u548ccba\u3002 \u8f93\u5165\u63cf\u8ff0: \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u957f\u5ea6\u4e0d\u8d85\u8fc79(\u53ef\u80fd\u6709\u5b57\u7b26\u91cd\u590d),\u5b57\u7b26\u53ea\u5305\u62ec\u5927\u5c0f\u5199\u5b57\u6bcd\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 \u7b2c\u4e00\u6b65\uff1a\u4ea4\u6362\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u540e\u9762\u6240\u6709\u5b57\u7b26\u4ea4\u6362 \u7b2c\u4e8c\u6b65\uff1a\u56fa\u5b9a\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u9012\u5f52\u5f97\u5230\u540e\u9762\u5143\u7d20\u7684\u6240\u6709\u6392\u5217 import java.util.ArrayList; import java.util.HashSet; import java.util.Arrays; public class Solution { public ArrayList<String> Permutation(String str) { if(str == null || \"\".equals(str)){ return new ArrayList<String>(); } char[] array = str.toCharArray(); // \u5b57\u5178\u5e8f\u8f93\u51fa Arrays.sort(array); return helper(array); } private ArrayList<String> helper(char[] array){ ArrayList<String> result = new ArrayList<String>(); // \u8fd9\u4e2a\u662f\u4e3a\u4ec0\u4e48\u4e0d\u5199\u5728\u4e3b\u51fd\u6570\u7684\u539f\u56e0\uff0c\u5982\u679c\u4e3b\u51fd\u6570\u662f\"\"\uff0c \u90a3\u4e48\u8fd4\u56de\u7684\u4e0d\u662f\"\", \u800c\u662f\u4e0d\u8fd4\u56de if(\"\".equals(new String(array))){ result.add(\"\"); }else{ ArrayList<String> ans = null; HashSet<Character> set = new HashSet(); for(int i = 0; i < array.length; i++){ // \u9632\u6b62\u76f8\u540c\u5143\u7d20\u548c\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362 if(set.contains(array[i])){ continue; } set.add(array[i]); // \u4ea4\u6362\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u540e\u9762\u7684\u5b57\u7b26 char temp = array[0]; array[0] = array[i]; array[i] = temp; ans = helper(Arrays.copyOfRange(array, 1, array.length)); // \u7ed3\u679c\u52a0\u5165 for(String s: ans){ result.add(array[0] + s); } } } return result; } } \u89e3\u6cd5\u4e8c \u56de\u6eaf import java.util.List; import java.util.Collections; import java.util.ArrayList; public class Solution { public ArrayList<String> Permutation(String str) { List<String> res = new ArrayList<>(); if (str != null && str.length() > 0) { PermutationHelper(str.toCharArray(), 0, res); // \u5bf9\u7ed3\u679c\u505a\u4e00\u6b21\u6392\u5e8f Collections.sort(res); } return (ArrayList)res; } public void PermutationHelper(char[] cs, int i, List<String> list) { if (i == cs.length - 1) { String val = String.valueOf(cs); // \u9632\u6b62\u5b57\u7b26\u4e32\u6709\u91cd\u590d\u5b57\u7b26\u5bfc\u81f4\u7684\u7ed3\u679c\u6709\u91cd\u5408 if (!list.contains(val)) list.add(val); } else { for (int j = i; j < cs.length; j++) { swap(cs, i, j); PermutationHelper(cs, i+1, list); swap(cs, i, j); } } } public void swap(char[] cs, int i, int j) { char temp = cs[i]; cs[i] = cs[j]; cs[j] = temp; } } \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u9898\u76ee\u63cf\u8ff0 \u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a9\u7684\u6570\u7ec4{1,2,3,2,2,2,5,4,2}\u3002\u7531\u4e8e\u6570\u5b572\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e865\u6b21\uff0c\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u8f93\u51fa2\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8f93\u51fa0\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 Hash import java.util.HashMap; public class Solution { public int MoreThanHalfNum_Solution(int [] array) { if(array == null || array.length == 0){ return 0; } if(array.length == 1){ return array[0]; } HashMap<Integer, Integer> map = new HashMap<>(); for(int i = 0; i < array.length; i++){ if(map.containsKey(array[i])){ if(map.get(array[i]) + 1 > array.length / 2){ return array[i]; } map.put(array[i], map.get(array[i]) + 1); }else{ map.put(array[i], 1); } } return 0; } } \u89e3\u6cd5\u4e8c Patition \u6211\u4eec\u56de\u5230\u9898\u76ee\u672c\u8eab\u5206\u6790\uff0c\u5c31\u4f1a\u53d1\u73b0\u524d\u9762\u7684\u601d\u8def\u5e76\u6ca1\u6709\u8003\u8651\u5230 \u6570\u7ec4\u7684\u7279\u6027 \uff1a\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u4e86\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\u3002\u5982\u679c\u6211\u628a\u8fd9\u4e2a\u6570\u7ec4\u6392\u5e8f\uff0c\u90a3\u4e48\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u6570\u7ec4\u4e2d\u95f4\u7684\u6570\u5b57\u4e00\u5b9a\u5c31\u662f\u90a3\u4e2a\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u4e00\u534a\u7684\u6570\u5b57\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u6570\u5b57\u5c31\u662f\u7edf\u8ba1\u5b66\u4e0a\u7684\u4e2d\u4f4d\u6570\uff0c\u5373\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u4e2d\u7b2cn/2\u7684\u6570\u5b57\u3002 \u6211\u4eec\u6709\u6210\u719f\u7684O(n)\u7684\u7b97\u6cd5\u5f97\u5230\u6570\u7ec4\u4e2d\u4efb\u610f\u7b2cK\u5927\u7684\u6570\u5b57 \u3002 \u200b \u8fd9\u79cd\u7b97\u6cd5\u662f\u53d7\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u7684\u542f\u53d1\u3002\u5728\u968f\u673a\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u73b0\u5728\u6570\u7ec4\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u8c03\u6574\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6bd4\u9009\u4e2d\u7684\u6570\u5b57\u5c0f\u7684\u6570\u5b57\u90fd\u6392\u5728\u5b83\u7684\u5de6\u8fb9\uff0c\u6bd4\u9009\u4e2d\u7684\u6570\u5b57\u5927\u7684\u6570\u5b57\u90fd\u6392\u5728\u5b83\u7684\u53f3\u8fb9\u3002\u5982\u679c\u8fd9\u4e2a\u9009\u4e2d\u7684\u6570\u5b57\u7684\u4e0b\u6807\u521a\u597d\u662fn/2\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u5b57\u5c31\u662f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002\u5982\u679c\u5b83\u7684\u4e0b\u6807\u5927\u4e8en/2\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5e94\u8be5\u4f4d\u4e8e\u5b83\u7684\u5de6\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u7740\u5728\u5b83\u7684\u5de6\u8fb9\u90e8\u5206\u7684\u6570\u7ec4\u4e2d\u67e5\u627e\u3002\u5982\u679c\u5b83\u7684\u4e0b\u6807\u5c0f\u4e8en/2\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5e94\u8be5\u4f4d\u4e8e\u5b83\u7684\u53f3\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u7740\u5728\u5b83\u7684\u53f3\u8fb9\u90e8\u5206\u7684\u6570\u7ec4\u4e2d\u67e5\u627e\u3002\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u9012\u5f52\u8fc7\u7a0b\uff0c\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a import java.util.Random; public class Solution { public int MoreThanHalfNum_Solution(int [] array) { if(array == null || array.length == 0){ return 0; } int mid = array.length >> 1; int start = 0; int end = array.length - 1; int index = random_partition(array, 0, array.length-1); while(index != mid){ if(index >mid){ end = index - 1; index = random_partition(array, start, end); }else{ start = index + 1; index = random_partition(array, start, end); } } int ans = array[mid]; // \u5224\u65ad\u8be5\u5143\u7d20\u6b21\u6570\u662f\u5426\u8d85\u8fc7\u4e00\u534a int cnt = 0; for(int num: array){ if(num == ans){ cnt++; if(cnt > mid){ return num; } } } return 0; } private int random_partition(int[] array, int start, int end){ // random Random rand = new Random(); int index = rand.nextInt(end + 1); exchange(array, index, end); int i = start - 1; for(int j = start; j < end; j++){ if(array[j] < array[end]){ exchange(array, ++i, j); } } exchange(array, ++i, end); return i; } private void exchange(int[] array, int first, int second){ int temp = array[first]; array[first] = array[second]; array[second] = temp; } } \u89e3\u6cd5\u4e09 Boyer-Moore Voting Algorithm(\u6469\u5c14\u6295\u7968\u6cd5) + \u6821\u9a8c \u627e\u51fa\u4e00\u7ec4\u6570\u5b57\u5e8f\u5217\u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u603b\u65701/2\u7684\u6570\u5b57\uff08\u5e76\u4e14\u5047\u8bbe\u8fd9\u4e2a\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\uff09\u3002\u663e\u7136\u8fd9\u4e2a\u6570\u5b57\u53ea\u53ef\u80fd\u6709\u4e00\u4e2a\u3002 \u6469\u5c14\u6295\u7968\u7b97\u6cd5\u662f\u57fa\u4e8e\u8fd9\u4e2a\u4e8b\u5b9e\uff1a\u6bcf\u6b21\u4ece\u5e8f\u5217\u91cc\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u540c\u7684\u6570\u5b57\u5220\u9664\u6389\uff08\u6216\u79f0\u4e3a\u201c\u62b5\u6d88\u201d\uff09\uff0c\u6700\u540e\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\u6216\u51e0\u4e2a\u76f8\u540c\u7684\u6570\u5b57\uff0c\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u603b\u6570\u4e00\u534a\u7684\u90a3\u4e2a \u3002\u8bf7\u9996\u5148\u8ba4\u540c\u8fd9\u4e2a\u4e8b\u5b9e\uff0c\u8fd9\u91cc\u4e0d\u8bc1\u660e\u4e86~ import java.util.Random; public class Solution { public int MoreThanHalfNum_Solution(int [] array) { if(array == null || array.length == 0){ return 0; } int temp = array[0]; int count = 0; for(int num: array){ if(count == 0){ temp = num; count = 1; }else if(num == temp){ count++; }else{ count--; } } // \u5224\u65ad\u8be5\u5143\u7d20\u6b21\u6570\u662f\u5426\u8d85\u8fc7\u4e00\u534a count = 0; for(int num: array){ if(num == temp){ count++; if(count > array.length/2){ return num; } } } return 0; } } \u6700\u5c0f\u7684K\u4e2a\u6570 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165n\u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684K\u4e2a\u6570\u3002\u4f8b\u5982\u8f93\u51654,5,1,6,2,7,3,8\u8fd98\u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u76844\u4e2a\u6570\u5b57\u662f1,2,3,4,\u3002 \u89e3\u6cd5 Bruce O(n**2) \u89e3\u6cd5\u4e00 partition O(n) \u9650\u5236\uff1a\u4fee\u6539\u539f\u6570\u7ec4 import java.util.Random; import java.util.ArrayList; public class Solution { public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) { if(input == null || input.length == 0 || k > input.length){ return new ArrayList<Integer>(); } // \u627e\u5230\u7b2ck\u4e2a\u503c\uff0c\u4e14\u4f7f\u524dk\u4e2a\u503c\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u7b2ck\u4e2a\u503c int start = 0, end = input.length - 1; int index = random_partition(input, start, end); while(index != k - 1){ if(index > k - 1){ end = index - 1; index = random_partition(input, start, end); }else{ start = index + 1; index = random_partition(input, start, end); } } // \u8f93\u51fa\u524dk\u4e2a\u503c ArrayList<Integer> result = new ArrayList<>(); for (int i = 0; i < k; i++) { result.add(input[i]); } return result; } private int random_partition(int[] array, int start, int end){ // random Random rand = new Random(); int index = rand.nextInt(end + 1); exchange(array, index, end); int i = start - 1; for(int j = start; j < end; j++){ if(array[j] < array[end]){ exchange(array, ++i, j); } } exchange(array, ++i, end); return i; } private void exchange(int[] array, int first, int second){ int temp = array[first]; array[first] = array[second]; array[second] = temp; } } \u89e3\u6cd5\u4e8c \u5806 O(nlogk) import java.util.ArrayList; import java.util.PriorityQueue; public class Solution { public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) { if(input == null || input.length == 0 || k > input.length || k == 0){ return new ArrayList<>(); } // \u9ed8\u8ba4\u5c0f\u9876\u5806\uff0c \u60f3\u8981\u5927\u9876\u5806\u628a\u503c\u53d8\u8d1f\u6570 PriorityQueue<Integer> heap = new PriorityQueue<>(k); int [] negInput = new int[input.length]; for(int i = 0; i < input.length; i++){ negInput[i] = input[i] * -1; if(heap.size() == k){ if(negInput[i] > heap.peek()){ heap.poll(); heap.add(negInput[i]); } }else { heap.add(negInput[i]); } } ArrayList<Integer> result = new ArrayList<>(); for (int i = 0; i < k; i++) { result.add(heap.poll() * -1); } return result; } } import java.util.ArrayList; import java.util.PriorityQueue; import java.util.Comparator; public class Solution { public ArrayList<Integer> GetLeastNumbers_Solution(int[] input, int k) { ArrayList<Integer> result = new ArrayList<Integer>(); int length = input.length; if(k > length || k == 0){ return result; } PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(k, new Comparator<Integer>() { @Override public int compare(Integer o1, Integer o2) { return o2.compareTo(o1); } }); for (int i = 0; i < length; i++) { if (maxHeap.size() != k) { maxHeap.offer(input[i]); } else if (maxHeap.peek() > input[i]) { Integer temp = maxHeap.poll(); temp = null; maxHeap.offer(input[i]); } } for (Integer integer : maxHeap) { result.add(integer); } return result; } } \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u9898\u76ee\u63cf\u8ff0 HZ\u5076\u5c14\u4f1a\u62ff\u4e9b\u4e13\u4e1a\u95ee\u9898\u6765\u5ffd\u60a0\u90a3\u4e9b\u975e\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u540c\u5b66\u3002\u4eca\u5929\u6d4b\u8bd5\u7ec4\u5f00\u5b8c\u4f1a\u540e,\u4ed6\u53c8\u53d1\u8bdd\u4e86:\u5728\u53e4\u8001\u7684\u4e00\u7ef4\u6a21\u5f0f\u8bc6\u522b\u4e2d,\u5e38\u5e38\u9700\u8981\u8ba1\u7b97\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c,\u5f53\u5411\u91cf\u5168\u4e3a\u6b63\u6570\u7684\u65f6\u5019,\u95ee\u9898\u5f88\u597d\u89e3\u51b3\u3002\u4f46\u662f,\u5982\u679c\u5411\u91cf\u4e2d\u5305\u542b\u8d1f\u6570,\u662f\u5426\u5e94\u8be5\u5305\u542b\u67d0\u4e2a\u8d1f\u6570,\u5e76\u671f\u671b\u65c1\u8fb9\u7684\u6b63\u6570\u4f1a\u5f25\u8865\u5b83\u5462\uff1f\u4f8b\u5982:{6,-3,-2,7,-15,1,2,2},\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c\u4e3a8(\u4ece\u7b2c0\u4e2a\u5f00\u59cb,\u5230\u7b2c3\u4e2a\u4e3a\u6b62)\u3002\u7ed9\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u7684\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u7684\u548c\uff0c\u4f60\u4f1a\u4e0d\u4f1a\u88ab\u4ed6\u5ffd\u60a0\u4f4f\uff1f(\u5b50\u5411\u91cf\u7684\u957f\u5ea6\u81f3\u5c11\u662f1) \u89e3\u6cd5 \u6d4b\u8bd5\u7528\u4f8b \u8d1f\u6570 \u6700\u5927\u4e5f\u662f\u8d1f\u6570 \u89e3\u6cd5\u4e00 \u5206\u800c\u6cbb\u4e4b import java.lang.Math; import java.util.Arrays; public static int FindGreatestSumOfSubArray(int[] array) { if(array.length == 0){ return 0; } if (array.length == 1) { return array[0]; } int mid = (array.length - 1) / 2; int leftmax = array[mid], left = array[mid], rightmax = array[mid+1], right = array[mid+1], ans = 0; for (int i = mid - 1; i >= 0; i--) { left += array[i]; if (leftmax < left) { leftmax = left; } } for (int i = mid + 2; i < array.length; i++) { right += array[i]; if (rightmax < right) { rightmax = right; } } left = FindGreatestSumOfSubArray(Arrays.copyOfRange(array, 0, mid + 1)); right = FindGreatestSumOfSubArray(Arrays.copyOfRange(array, mid + 1, array.length)); ans = Math.max(left, right); ans = Math.max(ans, rightmax + leftmax); return ans; } \u89e3\u6cd5\u4e8c \u65f6\u95f4\u7a97\u53e3 import java.lang.Math; import java.util.Arrays; public class Solution { public static int FindGreatestSumOfSubArray(int[] array) { if(array.length == 0){ return 0; } int totalMax = array[0], curMax = array[0]; for(int i = 1; i < array.length; i++){ if(curMax <= 0){ curMax = array[i]; }else{ curMax += array[i]; } totalMax = Math.max(totalMax, curMax); } return totalMax; } } \u89e3\u6cd5\u4e09 dp import java.lang.Math; import java.util.Arrays; public class Solution { public int FindGreatestSumOfSubArray(int[] array) { if(array.length == 0){ return 0; } // \u4ee5\u7b2ci\u4e2a\u5143\u7d20\u4e3a\u7ed3\u5c3e\u7684\u6700\u5927\u548c int[] dp = new int[array.length]; dp[0] = array[0]; for(int i = 1; i < array.length; i++){ if(dp[i-1] > 0){ dp[i] = dp[i-1] + array[i]; }else{ dp[i] = array[i]; } } return max(dp); } private int max(int[] array){ if(array.length == 0){ return 0; } int ans = array[0]; for(int i = 1; i < array.length; i++){ if(ans < array[i]){ ans = array[i]; } } return ans; } } [todo]\u6b63\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570 \u9898\u76ee\u63cf\u8ff0 \u6c42\u51fa1~13\u7684\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570,\u5e76\u7b97\u51fa100~1300\u7684\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff1f\u4e3a\u6b64\u4ed6\u7279\u522b\u6570\u4e86\u4e00\u4e0b1~13\u4e2d\u5305\u542b1\u7684\u6570\u5b57\u67091\u300110\u300111\u300112\u300113\u56e0\u6b64\u5171\u51fa\u73b06\u6b21,\u4f46\u662f\u5bf9\u4e8e\u540e\u9762\u95ee\u9898\u4ed6\u5c31\u6ca1\u8f99\u4e86\u3002ACMer\u5e0c\u671b\u4f60\u4eec\u5e2e\u5e2e\u4ed6,\u5e76\u628a\u95ee\u9898\u66f4\u52a0\u666e\u904d\u5316,\u53ef\u4ee5\u5f88\u5feb\u7684\u6c42\u51fa\u4efb\u610f\u975e\u8d1f\u6574\u6570\u533a\u95f4\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece1 \u5230 n \u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff09\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u89e3\u6cd5\u4e8c [todo]\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\u8f93\u5165\u6570\u7ec4{3\uff0c32\uff0c321}\uff0c\u5219\u6253\u5370\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57\u4e3a321323\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u89e3\u6cd5\u4e8c \u4e11\u6570 \u9898\u76ee\u63cf\u8ff0 \u628a\u53ea\u5305\u542b\u8d28\u56e0\u5b502\u30013\u548c5\u7684\u6570\u79f0\u4f5c\u4e11\u6570\uff08Ugly Number\uff09\u3002\u4f8b\u59826\u30018\u90fd\u662f\u4e11\u6570\uff0c\u4f4614\u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u8d28\u56e0\u5b507\u3002 \u4e60\u60ef\u4e0a\u6211\u4eec\u628a1\u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002\u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2cN\u4e2a\u4e11\u6570\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u89e3\u6cd5\u4e8c \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u5b57\u7b26\u4e32(0<=\u5b57\u7b26\u4e32\u957f\u5ea6<=10000\uff0c\u5168\u90e8\u7531\u5b57\u6bcd\u7ec4\u6210)\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26,\u5e76\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e, \u5982\u679c\u6ca1\u6709\u5219\u8fd4\u56de -1\uff08\u9700\u8981\u533a\u5206\u5927\u5c0f\u5199\uff09. \u89e3\u6cd5 \u89e3\u6cd5\u4e00 TO(n) SO(n) import java.util.HashMap; public class Solution { public int FirstNotRepeatingChar(String str) { if(str == null || \"\".equals(str)){ return -1; } HashMap<Character, Integer> map = new HashMap<>(); for(int i = 0; i < str.length(); i++){ if(map.containsKey(str.charAt(i))){ map.put(str.charAt(i), map.get(str.charAt(i)) + 1); }else{ map.put(str.charAt(i), 1); } } for(int i = 0; i < str.length(); i++){ if(map.get(str.charAt(i)) == 1){ return i; } } return -1; } }s [\u6536\u85cf]\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \u9898\u76ee\u63cf\u8ff0 \u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4,\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570P\u3002\u5e76\u5c06P\u5bf91000000007\u53d6\u6a21\u7684\u7ed3\u679c\u8f93\u51fa\u3002 \u5373\u8f93\u51faP%1000000007 \u8f93\u5165\u63cf\u8ff0: \u9898\u76ee\u4fdd\u8bc1\u8f93\u5165\u7684\u6570\u7ec4\u4e2d\u6ca1\u6709\u7684\u76f8\u540c\u7684\u6570\u5b57\u6570\u636e\u8303\u56f4\uff1a \u5bf9\u4e8e%50\u7684\u6570\u636e,size<=10^4 \u5bf9\u4e8e%75\u7684\u6570\u636e,size<=10^5 \u5bf9\u4e8e%100\u7684\u6570\u636e,size<=2*10^5 \u793a\u4f8b1 \u8f93\u5165 \u590d\u5236 1,2,3,4,5,6,7,0 \u8f93\u51fa \u590d\u5236 7 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 Divide and Conquer \u89e3\u6cd5\u4e8c \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 HashSet import java.util.HashSet; public class Solution { public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) { HashSet<ListNode> nodeSet = new HashSet<>(); ListNode p = pHead1; while(p != null){ nodeSet.add(p); p = p.next; } p = pHead2; while(p != null){ if(nodeSet.contains(p)){ return p; } p = p.next; } return p; } } \u89e3\u6cd5\u4e8c \u7a7a\u95f4\u590d\u6742\u5ea6O(1) \u957f\u5ea6\u5dee\u503c \u627e\u51fa2\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u7136\u540e\u8ba9\u957f\u7684\u5148\u8d70\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\u5dee\uff0c\u7136\u540e\u518d\u4e00\u8d77\u8d70 \uff08\u56e0\u4e3a2\u4e2a\u94fe\u8868\u7528\u516c\u5171\u7684\u5c3e\u90e8\uff09 import java.util.HashSet; import java.lang.Math; public class Solution { public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) { int len1 = 0, len2 = 0; ListNode p = pHead1; while(p != null){ len1++; p = p.next; } p = pHead2; while(p != null){ len2++; p = p.next; } int diff = len1 - len2; for(int i = 0; i < Math.abs(diff); i++){ if(diff > 0){ pHead1 = pHead1.next; }else{ pHead2 = pHead2.next; } } while(pHead1 != null){ if(pHead1 == pHead2){ return pHead2; } pHead1 = pHead1.next; pHead2 = pHead2.next; } return null; } } \u89e3\u6cd5\u4e09 \u53cc\u6307\u9488 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u6b21\u8fed\u4ee3\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u5230\u8fbe\u5c3e\u8282\u70b9\u4e4b\u540e\u5c06\u4e00\u4e2a\u94fe\u8868\u7684\u6307\u9488\u91cd\u7f6e\u5230\u53e6\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u3002 \u5728\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u76f4\u5230\u5b83\u4eec\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\u3002\u6211\u4eec\u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\u7684\u64cd\u4f5c\u5c06\u5e2e\u52a9\u6211\u4eec\u62b5\u6d88\u5dee\u5f02\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u76f8\u4ea4\uff0c\u5219\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\u7684\u4f1a\u5408\u70b9\u5fc5\u987b\u662f\u4ea4\u70b9\u3002 \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\u7684\u4f1a\u8bae\u6307\u9488\u5fc5\u987b\u662f\u4e24\u4e2a\u5217\u7684\u5c3e\u8282\u70b9\uff0c\u5373null public class Solution { public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) { int len1 = 0, len2 = 0; ListNode p1 = pHead1, p2 = pHead2; while(p1 != p2){ if(p1 != null){ p1 = p1.next; }else{ p1 = pHead2; } if(p2 != null){ p2 = p2.next; }else{ p2 = pHead1; } } return p1; } } \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u5e94\u7528 \u9898\u76ee\u63cf\u8ff0 \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4e8c\u5206\u6cd5+\u6269\u6563 public class Solution { public int GetNumberOfK(int [] array , int k) { if(array == null || array.length == 0){ return 0; } int left = 0, right = array.length-1; int mid = 0; int index = -1, ans = 0; while(left <= right){ mid = (left + right) >> 1; if(array[mid] == k){ index = mid; ans++; break; }else if(array[mid] < k){ left = mid + 1; }else{ right = mid - 1; } } for(int i = index - 1; i >= 0; i--){ if(array[i] == k){ ans++; }else{ break; } } for(int i = index + 1; i < array.length; i++){ if(array[i] == k){ ans++; }else{ break; } } return ans; } } \u89e3\u6cd5\u4e8c \u76f8\u540c\u6570\u5b57\u7684\u7d22\u5f15\u4e0a\u4e0b\u754c \u4e8c\u5206\u6cd5\u63d2\u5165 //\u7531\u4e8e\u6570\u7ec4\u6709\u5e8f\uff0c\u6240\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u65b9\u6cd5\u5b9a\u4f4dk\u7684\u7b2c\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u548c\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e class Solution { public: int GetNumberOfK(vector<int> data ,int k) { int lower = getLower(data,k); int upper = getUpper(data,k); return upper - lower + 1; } //\u83b7\u53d6k\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807 int getLower(vector<int> data,int k){ int start = 0,end = data.size()-1; int mid = (start + end)/2; while(start <= end){ if(data[mid] < k){ start = mid + 1; }else{ end = mid - 1; } mid = (start + end)/2; } return start; } //\u83b7\u53d6k\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807 int getUpper(vector<int> data,int k){ int start = 0,end = data.size()-1; int mid = (start + end)/2; while(start <= end){ if(data[mid] <= k){ start = mid + 1; }else{ end = mid - 1; } mid = (start + end)/2; } return end; } }; //\u56e0\u4e3adata\u4e2d\u90fd\u662f\u6574\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u7a0d\u5fae\u53d8\u4e00\u4e0b\uff0c\u4e0d\u662f\u641c\u7d22k\u7684\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u800c\u662f\u641c\u7d22k-0.5\u548ck+0.5 //\u8fd9\u4e24\u4e2a\u6570\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u76f8\u51cf\u5373\u53ef\u3002 class Solution { public: int GetNumberOfK(vector<int> data ,int k) { return biSearch(data, k+0.5) - biSearch(data, k-0.5) ; } private: int biSearch(const vector<int> & data, double num){ int s = 0, e = data.size()-1; while(s <= e){ int mid = (e - s)/2 + s; if(data[mid] < num) s = mid + 1; else if(data[mid] > num) e = mid - 1; } return s; } }; \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 public class Solution { public int TreeDepth(TreeNode root) { if(root == null){ return 0; } return Math.max(TreeDepth(root.left), TreeDepth(root.right)) + 1; } } \u89e3\u6cd5\u4e8c dfs import java.util.Stack; public class Solution { public int TreeDepth(TreeNode root) { if(root == null){ return 0; } Stack<TreeNode> stack = new Stack<>(); Stack<Integer> depthStack = new Stack<>(); stack.push(root); depthStack.push(1); TreeNode node = null; int depth = 0, ans = 0; while(!stack.empty()){ node = stack.pop(); depth = depthStack.pop(); if(node.left != null){ stack.push(node.left); depthStack.push(depth + 1); } if(node.right != null){ stack.push(node.right); depthStack.push(depth + 1); } ans = Math.max(ans, depth); } return ans; } } \u89e3\u6cd5\u4e09 bfs \u5c42\u6b21\u904d\u5386 /** public class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } */ import java.util.ArrayDeque; public class Solution { public int TreeDepth(TreeNode root) { if(root == null){ return 0; } ArrayDeque<TreeNode> deque = new ArrayDeque<>(); deque.offer(root); int depth = 0, count = 0, nextCount = 1; while(!deque.isEmpty()){ TreeNode top = deque.poll(); count++; if(top.left != null){ deque.add(top.left); } if(top.right != null){ deque.add(top.right); } if(count == nextCount){ nextCount = deque.size(); count = 0; depth++; } } return depth; } } \u5e73\u8861\u4e8c\u53c9\u6811 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u8be5\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 \u81ea\u9876\u5411\u4e0b public class Solution { public boolean IsBalanced_Solution(TreeNode root) { if(root == null){ return true; } int leftH = getHeight(root.left); int rightH = getHeight(root.right); return Math.abs(leftH - rightH) <= 1; } private int getHeight(TreeNode root){ if(root == null){ return 0; } return Math.max(getHeight(root.left), getHeight(root.right)) + 1; } } \u89e3\u6cd5\u4e8c \u9012\u5f52\u4f18\u5316 \u81ea\u5e95\u5411\u4e0a \u8fd9\u79cd\u505a\u6cd5\u6709\u5f88\u660e\u663e\u7684\u95ee\u9898\uff0c\u5728\u5224\u65ad\u4e0a\u5c42\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u4f1a\u591a\u6b21\u91cd\u590d\u904d\u5386\u4e0b\u5c42\u7ed3\u70b9\uff0c\u589e\u52a0\u4e86\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u3002\u5982\u679c\u6539\u4e3a\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386\uff0c\u5982\u679c\u5b50\u6811\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5219\u8fd4\u56de\u5b50\u6811\u7684\u9ad8\u5ea6\uff1b\u5982\u679c\u53d1\u73b0\u5b50\u6811\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5219\u76f4\u63a5\u505c\u6b62\u904d\u5386\uff0c\u8fd9\u6837\u81f3\u591a\u53ea\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u8bbf\u95ee\u4e00\u6b21\u3002 public class Solution { public boolean IsBalanced_Solution(TreeNode root) { if(root == null){ return true; } return getHeight(root) != -1; } private int getHeight(TreeNode root){ if(root == null){ return 0; } int leftH = getHeight(root.left); if(leftH == -1){ return -1; } int rightH = getHeight(root.right); if(rightH == -1){ return -1; } if(Math.abs(leftH - rightH) > 1){ return -1; } return Math.max(leftH, rightH) + 1; } } \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff08\u4e24\u4e2a\u6570\uff09 \u9898\u76ee\u63cf\u8ff0 \u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002\u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 Hash //num1,num2\u5206\u522b\u4e3a\u957f\u5ea6\u4e3a1\u7684\u6570\u7ec4\u3002\u4f20\u51fa\u53c2\u6570 //\u5c06num1[0],num2[0]\u8bbe\u7f6e\u4e3a\u8fd4\u56de\u7ed3\u679c import java.util.HashSet; import java.util.ArrayList; public class Solution { public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) { HashSet<Integer> set = new HashSet<>(); for(int i = 0; i < array.length; i++){ if(set.contains(array[i])){ set.remove(array[i]); }else{ set.add(array[i]); } } ArrayList<Integer> list = new ArrayList<>(set); num1[0] = list.get(0); num2[0] = list.get(1); } } \u89e3\u6cd5\u4e8c \u4f4d\u8fd0\u7b97 lowbit(x) = x & (-x) == x & (~x + 1) \u2014> \u8981\u7684\u662f\u4f60\u4ece\u672b\u5c3e\u5f00\u59cb\u7b2c1\u4e2a 1(\u5176\u4ed6\u4f4d\u7f6e\u90fd\u662f0) \u6240\u4ee3\u8868\u7684\u503c public class Solution { public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) { int diff = 0; for(int i = 0; i < array.length; i++){ diff ^= array[i]; } int bitFlag = diff & (-diff); for(int i = 0; i < array.length; i++){ if((array[i] & bitFlag) == 0){ num1[0] ^= array[i]; }else{ num2[0] ^= array[i]; } } } } \u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 \u9898\u76ee\u63cf\u8ff0 \u5c0f\u660e\u5f88\u559c\u6b22\u6570\u5b66,\u6709\u4e00\u5929\u4ed6\u5728\u505a\u6570\u5b66\u4f5c\u4e1a\u65f6,\u8981\u6c42\u8ba1\u7b97\u51fa9~16\u7684\u548c,\u4ed6\u9a6c\u4e0a\u5c31\u5199\u51fa\u4e86\u6b63\u786e\u7b54\u6848\u662f100\u3002\u4f46\u662f\u4ed6\u5e76\u4e0d\u6ee1\u8db3\u4e8e\u6b64,\u4ed6\u5728\u60f3\u7a76\u7adf\u6709\u591a\u5c11\u79cd\u8fde\u7eed\u7684\u6b63\u6570\u5e8f\u5217\u7684\u548c\u4e3a100(\u81f3\u5c11\u5305\u62ec\u4e24\u4e2a\u6570)\u3002\u6ca1\u591a\u4e45,\u4ed6\u5c31\u5f97\u5230\u53e6\u4e00\u7ec4\u8fde\u7eed\u6b63\u6570\u548c\u4e3a100\u7684\u5e8f\u5217:18,19,20,21,22\u3002\u73b0\u5728\u628a\u95ee\u9898\u4ea4\u7ed9\u4f60,\u4f60\u80fd\u4e0d\u80fd\u4e5f\u5f88\u5feb\u7684\u627e\u51fa\u6240\u6709\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217? Good Luck! \u8f93\u51fa\u63cf\u8ff0: \u8f93\u51fa\u6240\u6709\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u3002\u5e8f\u5217\u5185\u6309\u7167\u4ece\u5c0f\u81f3\u5927\u7684\u987a\u5e8f\uff0c\u5e8f\u5217\u95f4\u6309\u7167\u5f00\u59cb\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u8ba1\u7b97\u5e73\u5747\u503c 1\uff09\u7531\u4e8e\u6211\u4eec\u8981\u627e\u7684\u662f\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5e8f\u5217\u662f\u4e2a\u516c\u5dee\u4e3a1\u7684\u7b49\u5dee\u6570\u5217\uff0c\u800c\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e2d\u95f4\u503c\u4ee3\u8868\u4e86\u5e73\u5747\u503c\u7684\u5927\u5c0f\u3002\u5047\u8bbe\u5e8f\u5217\u957f\u5ea6\u4e3an\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e2d\u95f4\u503c\u53ef\u4ee5\u901a\u8fc7\uff08S / n\uff09\u5f97\u5230\uff0c\u77e5\u9053\u5e8f\u5217\u7684\u4e2d\u95f4\u503c\u548c\u957f\u5ea6\uff0c\u4e5f\u5c31\u4e0d\u96be\u6c42\u51fa\u8fd9\u6bb5\u5e8f\u5217\u4e86\u3002 2\uff09\u6ee1\u8db3\u6761\u4ef6\u7684n\u5206\u4e24\u79cd\u60c5\u51b5\uff1a n\u4e3a\u5947\u6570\u65f6\uff0c\u5e8f\u5217\u4e2d\u95f4\u7684\u6570\u6b63\u597d\u662f\u5e8f\u5217\u7684\u5e73\u5747\u503c\uff0c\u6240\u4ee5\u6761\u4ef6\u4e3a\uff1a(n & 1) == 1 && sum % n == 0\uff1b n\u4e3a\u5076\u6570\u65f6\uff0c\u5e8f\u5217\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u662f\u5e8f\u5217\u7684\u5e73\u5747\u503c\uff0c\u800c\u8fd9\u4e2a\u5e73\u5747\u503c\u7684\u5c0f\u6570\u90e8\u5206\u4e3a0.5\uff0c\u6240\u4ee5\u6761\u4ef6\u4e3a\uff1a(sum % n) * 2 == n. 3\uff09\u7531\u9898\u53ef\u77e5n >= 2\uff0c\u90a3\u4e48n\u7684\u6700\u5927\u503c\u662f\u591a\u5c11\u5462\uff1f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5c06n\u4ece2\u5230S\u5168\u90e8\u904d\u5386\u4e00\u6b21\uff0c\u4f46\u662f\u5927\u90e8\u5206\u904d\u5386\u662f\u4e0d\u5fc5\u8981\u7684\u3002\u4e3a\u4e86\u8ba9n\u5c3d\u53ef\u80fd\u5927\uff0c\u6211\u4eec\u8ba9\u5e8f\u5217\u4ece1\u5f00\u59cb\uff0c \u6839\u636e\u7b49\u5dee\u6570\u5217\u7684\u6c42\u548c\u516c\u5f0f\uff1aS = (1 + n) * n / 2\uff0c\u5f97\u5230 . \u200b \u6700\u540e\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u8f93\u5165sum = 100\uff0c\u6211\u4eec\u53ea\u9700\u904d\u5386n = 13~2\u7684\u60c5\u51b5\uff08\u6309\u9898\u610f\u5e94\u4ece\u5927\u5230\u5c0f\u904d\u5386\uff09\uff0cn = 8\u65f6\uff0c\u5f97\u5230\u5e8f\u5217[9, 10, 11, 12, 13, 14, 15, 16]\uff1bn = 5\u65f6\uff0c\u5f97\u5230\u5e8f\u5217[18, 19, 20, 21, 22]\u3002 \u5b8c\u6574\u4ee3\u7801\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a import java.util.ArrayList; public class Solution { public ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) { ArrayList<ArrayList<Integer>> ans = new ArrayList<>(); // \u8f93\u51fa\u6240\u6709\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u3002\u5e8f\u5217\u5185\u6309\u7167\u4ece\u5c0f\u81f3\u5927\u7684\u987a\u5e8f\uff0c\u5e8f\u5217\u95f4\u6309\u7167\u5f00\u59cb\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f // \u6240\u4ee5\u9006\u5e8f for(int i = (int) Math.sqrt(2 * sum); i >= 2; i--){ // n\u4e3a\u5947\u6570\u65f6\uff0c\u5e8f\u5217\u4e2d\u95f4\u7684\u6570\u6b63\u597d\u662f\u5e8f\u5217\u7684\u5e73\u5747\u503c\uff0c\u6240\u4ee5\u6761\u4ef6\u4e3a\uff1a(n & 1) == 1 && sum % n == 0\uff1b // n\u4e3a\u5076\u6570\u65f6\uff0c\u5e8f\u5217\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u662f\u5e8f\u5217\u7684\u5e73\u5747\u503c\uff0c\u800c\u8fd9\u4e2a\u5e73\u5747\u503c\u7684\u5c0f\u6570\u90e8\u5206\u4e3a0.5\uff0c\u6240\u4ee5\u6761\u4ef6\u4e3a\uff1a(sum % n) * 2 == n. if((sum % i == 0 && (i & 1) == 1) || sum % i * 2 == i){ ArrayList<Integer> list = new ArrayList<>(); for(int j = 0, k = sum / i - (i - 1)/ 2; j < i; j++, k++){ list.add(k); } ans.add(list); } } return ans; } } \u89e3\u6cd5\u4e8c \u53cc\u6307\u9488\u6cd5 O(n) /* \u7528\u4e24\u4e2a\u6570\u5b57begin\u548cend\u5206\u522b\u8868\u793a\u5e8f\u5217\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c \u9996\u5148\u5c06begin\u521d\u59cb\u5316\u4e3a1\uff0cend\u521d\u59cb\u5316\u4e3a2. \u5982\u679c\u4ecebegin\u5230end\u7684\u548c\u5927\u4e8es\uff0c\u6211\u4eec\u5c31\u4ece\u5e8f\u5217\u4e2d\u53bb\u6389\u8f83\u5c0f\u7684\u503c(\u5373\u589e\u5927begin), \u76f8\u53cd\uff0c\u53ea\u9700\u8981\u589e\u5927end\u3002 \u7ec8\u6b62\u6761\u4ef6\u4e3a\uff1a\u4e00\u76f4\u589e\u52a0begin\u5230(1+sum)/2\u5e76\u4e14end\u5c0f\u4e8esum\u4e3a\u6b62 */ import java.util.ArrayList; public class Solution { public ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) { ArrayList<ArrayList<Integer>> ans = new ArrayList<>(); int s = 1, t = 2; while(s < t){ int stSum = (s + t) * (t - s + 1) / 2; if(stSum < sum){ t++; }else if(stSum > sum){ s++; }else{ ArrayList<Integer> list = new ArrayList<>(); for(int i = s; i <= t; i++){ list.add(i); } ans.add(list); s++; } } return ans; } } \u548c\u4e3aS\u7684\u4e24\u4e2a\u6570\u5b57 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57S\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u6b63\u597d\u662fS\uff0c\u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8eS\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u6700\u5c0f\u7684\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 Hash TO(n) SO(n) import java.util.HashMap; import java.util.ArrayList; public class Solution { public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) { ArrayList<Integer> ans = new ArrayList<>(); HashMap<Integer, Integer> map = new HashMap<>(); int mulVal = Integer.MAX_VALUE; int low = -1, high = -1; for(int i = 0; i < array.length - 1; i++){ if(array[i] == array[i+1] && array[i] * 2 == sum){ mulVal = array[i] * array[i+1]; low = array[i]; high = array[i+1]; } } for(int i = 0; i < array.length; i++){ map.put(array[i], i); } for(int i = 0; i < array.length; i++){ if(map.containsKey(sum - array[i]) && map.get(sum - array[i]) != i){ if(array[i] * (sum - array[i]) < mulVal){ low = array[i]; high = sum - array[i]; break; } } } if(low != -1){ ans.add(low); ans.add(high); } return ans; } } \u89e3\u6cd5\u4e8c \u53cc\u6307\u9488 \u5939\u903c TO(n) SO(1) \u4e0d\u8981\u88ab\u9898\u76ee\u8bef\u5bfc\u4e86\uff01\u8bc1\u660e\u5982\u4e0b\uff0c\u6e05\u6670\u660e\u4e86\uff1a //\u8f93\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u6700\u5c0f\u7684\u3002\u8fd9\u53e5\u8bdd\u7684\u7406\u89e3\uff1f \u5047\u8bbe\uff1a \u82e5b>a,\u4e14\u5b58\u5728\uff0c a + b = s; (a - m ) + (b + m) = s \u5219 \uff1a(a - m )(b + m)=ab - (b-a)m - m*m < ab\uff1b \u8bf4\u660e\u5916\u5c42\u7684\u4e58\u79ef\u66f4\u5c0f \u4e5f\u5c31\u662f\u8bf4 \u4f9d\u7136\u662f\u5de6\u53f3\u5939\u903c\u6cd5 \uff01\uff01\uff01\u53ea\u9700\u89812\u4e2a\u6307\u9488 1. left\u5f00\u5934 \uff0c right\u6307\u5411\u7ed3\u5c3e 2.\u5982\u679c\u548c \u5c0f\u4e8esum \uff0c\u8bf4\u660e \u592a\u5c0f\u4e86 \uff0c left\u53f3\u79fb \u5bfb\u627e\u66f4 \u5927 \u7684\u6570 3.\u5982\u679c\u548c\u5927 \u4e8esum \uff0c\u8bf4\u660e \u592a\u5927\u4e86 \uff0c right\u5de6\u79fb \u5bfb\u627e\u66f4 \u5c0f \u7684\u6570 4.\u548c \u76f8\u7b49 \uff0c \u628aleft\u548cright\u7684\u6570\u8fd4\u56de import java.util.ArrayList; public class Solution { public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) { ArrayList<Integer> ans = new ArrayList<>(); int s = 0, t = array.length - 1; while(s < t){ if(array[s] + array[t] == sum){ ans.add(array[s]); ans.add(array[t]); break; }else if(array[s] + array[t] < sum){ s++; }else if(array[s] + array[t] > sum){ t--; } } return ans; } } \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \u9898\u76ee\u63cf\u8ff0 \u6c47\u7f16\u8bed\u8a00\u4e2d\u6709\u4e00\u79cd\u79fb\u4f4d\u6307\u4ee4\u53eb\u505a\u5faa\u73af\u5de6\u79fb\uff08ROL\uff09\uff0c\u73b0\u5728\u6709\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c31\u662f\u7528\u5b57\u7b26\u4e32\u6a21\u62df\u8fd9\u4e2a\u6307\u4ee4\u7684\u8fd0\u7b97\u7ed3\u679c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u5e8f\u5217S\uff0c\u8bf7\u4f60\u628a\u5176\u5faa\u73af\u5de6\u79fbK\u4f4d\u540e\u7684\u5e8f\u5217\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u5e8f\u5217S=\u201dabcXYZdef\u201d,\u8981\u6c42\u8f93\u51fa\u5faa\u73af\u5de6\u79fb3\u4f4d\u540e\u7684\u7ed3\u679c\uff0c\u5373\u201cXYZdefabc\u201d\u3002\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1fOK\uff0c\u641e\u5b9a\u5b83\uff01 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 public class Solution { public String LeftRotateString(String str,int n) { if(str == null || str.length() == 0 || str.length() < n){ return str; } return str.substring(n, str.length()) + str.substring(0, n); } } \u89e3\u6cd5\u4e8c \u8fd9\u9053\u9898\u8003\u7684\u6838\u5fc3\u662f\u5e94\u8058\u8005\u662f\u4e0d\u662f\u53ef\u4ee5\u7075\u6d3b\u5229\u7528\u5b57\u7b26\u4e32\u7ffb\u8f6c\u3002\u5047\u8bbe\u5b57\u7b26\u4e32abcdef\uff0cn=3\uff0c\u8bbeX=abc\uff0cY=def\uff0c\u6240\u4ee5\u5b57\u7b26\u4e32\u53ef\u4ee5\u8868\u793a\u6210XY\uff0c\u5982\u9898\u5e72\uff0c\u95ee\u5982\u4f55\u6c42\u5f97YX\u3002\u5047\u8bbeX\u7684\u7ffb\u8f6c\u4e3aXT\uff0cXT=cba\uff0c\u540c\u7406YT=fed\uff0c\u90a3\u4e48YX=(XTYT)T\uff0c\u4e09\u6b21\u7ffb\u8f6c\u540e\u53ef\u5f97\u7ed3\u679c\u3002 public class Solution { public String LeftRotateString(String str,int n) { char[] chars = str.toCharArray(); if(chars.length < n){ return \"\"; } reverse(chars, 0, n - 1); reverse(chars, n, chars.length - 1); reverse(chars, 0, chars.length - 1); return new String(chars); } private void reverse(char[] chars, int low, int high){ char temp; while(low < high){ temp = chars[low]; chars[low] = chars[high]; chars[high] = temp; low++; high--; } } } \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \u9898\u76ee\u63cf\u8ff0 \u725b\u5ba2\u6700\u8fd1\u6765\u4e86\u4e00\u4e2a\u65b0\u5458\u5de5Fish\uff0c\u6bcf\u5929\u65e9\u6668\u603b\u662f\u4f1a\u62ff\u7740\u4e00\u672c\u82f1\u6587\u6742\u5fd7\uff0c\u5199\u4e9b\u53e5\u5b50\u5728\u672c\u5b50\u4e0a\u3002\u540c\u4e8bCat\u5bf9Fish\u5199\u7684\u5185\u5bb9\u9887\u611f\u5174\u8da3\uff0c\u6709\u4e00\u5929\u4ed6\u5411Fish\u501f\u6765\u7ffb\u770b\uff0c\u4f46\u5374\u8bfb\u4e0d\u61c2\u5b83\u7684\u610f\u601d\u3002\u4f8b\u5982\uff0c\u201cstudent. a am I\u201d\u3002\u540e\u6765\u624d\u610f\u8bc6\u5230\uff0c\u8fd9\u5bb6\u4f19\u539f\u6765\u628a\u53e5\u5b50\u5355\u8bcd\u7684\u987a\u5e8f\u7ffb\u8f6c\u4e86\uff0c\u6b63\u786e\u7684\u53e5\u5b50\u5e94\u8be5\u662f\u201cI am a student.\u201d\u3002Cat\u5bf9\u4e00\u4e00\u7684\u7ffb\u8f6c\u8fd9\u4e9b\u5355\u8bcd\u987a\u5e8f\u53ef\u4e0d\u5728\u884c\uff0c\u4f60\u80fd\u5e2e\u52a9\u4ed6\u4e48\uff1f \u89e3\u6cd5 \u89e3\u6cd5\u4e00 Java String\u7684\u51fd\u6570 public class Solution { public String ReverseSentence(String str) { // \u4f8b\u5982 \" \" if(str.trim().equals(\"\")){ return str; } String[] words = str.split(\" \"); int s = 0, t = words.length - 1; String temp; while(s < t){ temp = words[s]; words[s] = words[t]; words[t] = temp; s++; t--; } return String.join(\" \", words); } } \u89e3\u6cd5\u4e8c \u8fd9\u4e2a\u4e2a\u9898\u76ee\u672c\u610f\u662f\u8fdb\u884c\u6bcf\u4e2a\u5355\u8bcd\u5012\u8f6c\uff0c\u518d\u5012\u8f6c\u6574\u4e2a\u53e5\u5b50 import java.util.Arrays; public class Solution { public String ReverseSentence(String str) { // \u4f8b\u5982 \" \" if(str.trim().equals(\"\")){ return str; } // \u4e3a\u4e86\u4e0b\u9762\u4e2d\u5faa\u73af\u6761\u4ef6\u4fdd\u6301\u4e00\u81f4 char[] chars = (str + \" \").toCharArray(); int low = 0, high = 0; for(high = 0; high < chars.length; high++) if(chars[high] == ' '){ reverse(chars, low, high - 1); low = high + 1; } reverse(chars, 0 , str.length() - 1); return new String(Arrays.copyOfRange(chars, 0, str.length())); } private void reverse(char[] chars, int low, int high){ char temp; while(low < high){ temp = chars[low]; chars[low] = chars[high]; chars[high] = temp; low++; high--; } } } \u6251\u514b\u724c\u987a\u5b50 \u9898\u76ee\u63cf\u8ff0 LL\u4eca\u5929\u5fc3\u60c5\u7279\u522b\u597d,\u56e0\u4e3a\u4ed6\u53bb\u4e70\u4e86\u4e00\u526f\u6251\u514b\u724c,\u53d1\u73b0\u91cc\u9762\u5c45\u7136\u67092\u4e2a\u5927\u738b,2\u4e2a\u5c0f\u738b(\u4e00\u526f\u724c\u539f\u672c\u662f54\u5f20^_^)...\u4ed6\u968f\u673a\u4ece\u4e2d\u62bd\u51fa\u4e865\u5f20\u724c,\u60f3\u6d4b\u6d4b\u81ea\u5df1\u7684\u624b\u6c14,\u770b\u770b\u80fd\u4e0d\u80fd\u62bd\u5230\u987a\u5b50,\u5982\u679c\u62bd\u5230\u7684\u8bdd,\u4ed6\u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968,\u563f\u563f\uff01\uff01\u201c\u7ea2\u5fc3A,\u9ed1\u68433,\u5c0f\u738b,\u5927\u738b,\u65b9\u72475\u201d,\u201cOh My God!\u201d\u4e0d\u662f\u987a\u5b50.....LL\u4e0d\u9ad8\u5174\u4e86,\u4ed6\u60f3\u4e86\u60f3,\u51b3\u5b9a\u5927\\\u5c0f \u738b\u53ef\u4ee5\u770b\u6210\u4efb\u4f55\u6570\u5b57,\u5e76\u4e14A\u770b\u4f5c1,J\u4e3a11,Q\u4e3a12,K\u4e3a13\u3002\u4e0a\u9762\u76845\u5f20\u724c\u5c31\u53ef\u4ee5\u53d8\u6210\u201c1,2,3,4,5\u201d(\u5927\u5c0f\u738b\u5206\u522b\u770b\u4f5c2\u548c4),\u201cSo Lucky!\u201d\u3002LL\u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968\u5566\u3002 \u73b0\u5728,\u8981\u6c42\u4f60\u4f7f\u7528\u8fd9\u5e45\u724c\u6a21\u62df\u4e0a\u9762\u7684\u8fc7\u7a0b,\u7136\u540e\u544a\u8bc9\u6211\u4eecLL\u7684\u8fd0\u6c14\u5982\u4f55\uff0c \u5982\u679c\u724c\u80fd\u7ec4\u6210\u987a\u5b50\u5c31\u8f93\u51fatrue\uff0c\u5426\u5219\u5c31\u8f93\u51fafalse\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1,\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5927\u5c0f\u738b\u662f0\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u6392\u5e8f TO(blogs) import java.util.Arrays; public class Solution { public boolean isContinuous(int [] numbers) { if(numbers == null || numbers.length != 5){ return false; } // \u6392\u5e8f Arrays.sort(numbers); // \u765e\u5b50\u603b\u6570 int changeCnt = 0; for(int i = 0; i < numbers.length - 1; i++){ if(numbers[i] == 0){ changeCnt += 1; // \u82e5\u765e\u5b50\u6709numbers.length-1\u4e2a\uff0c\u8fd4\u56detrue if(changeCnt == numbers.length - 1){ return true; } }else{ // \u6709\u76f8\u7b49\u5143\u7d20\uff0c \u8fd4\u56defalse if(numbers[i + 1] == numbers[i]){ return false; } // \u76f8\u90bb\u5143\u7d20\u95f4\u9694\u7528\u765e\u5b50\u6d88\u6389\uff0c\u5224\u65ad\u765e\u5b50\u4e2a\u6570\uff0c\u82e5\u5c0f\u4e8e0\uff0cfalse changeCnt = changeCnt - (numbers[i + 1] - numbers[i] - 1); if(changeCnt < 0){ return false; } } } return true; } } \u89e3\u6cd5\u4e8c \u5b9a\u89c4\u5219 TO(n) \u63a8\u8350 max \u8bb0\u5f55 \u6700\u5927\u503c min \u8bb0\u5f55 \u6700\u5c0f\u503c min ,max \u90fd\u4e0d\u8bb00 \u6ee1\u8db3\u6761\u4ef6 1 max - min <5 2 \u96640\u5916\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57(\u724c) 3 \u6570\u7ec4\u957f\u5ea6 \u4e3a5 import java.util.HashSet; public class Solution { public boolean isContinuous(int [] numbers) { if(numbers == null || numbers.length != 5){ return false; } HashSet<Integer> set = new HashSet<>(); int min = 14, max = -1; for(int i = 0; i < numbers.length; i++){ if(numbers[i] != 0){ if(set.contains(numbers[i])) return false; set.add(numbers[i]); min = Math.min(numbers[i], min); max = Math.max(numbers[i], max); } } return (max - min) <= 4; } } \u5b69\u5b50\u4eec\u7684\u6e38\u620f\uff08\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\uff09 \u9898\u76ee\u63cf\u8ff0 \u6bcf\u5e74\u516d\u4e00\u513f\u7ae5\u8282,\u725b\u5ba2\u90fd\u4f1a\u51c6\u5907\u4e00\u4e9b\u5c0f\u793c\u7269\u53bb\u770b\u671b\u5b64\u513f\u9662\u7684\u5c0f\u670b\u53cb,\u4eca\u5e74\u4ea6\u662f\u5982\u6b64\u3002HF\u4f5c\u4e3a\u725b\u5ba2\u7684\u8d44\u6df1\u5143\u8001,\u81ea\u7136\u4e5f\u51c6\u5907\u4e86\u4e00\u4e9b\u5c0f\u6e38\u620f\u3002\u5176\u4e2d,\u6709\u4e2a\u6e38\u620f\u662f\u8fd9\u6837\u7684:\u9996\u5148,\u8ba9\u5c0f\u670b\u53cb\u4eec\u56f4\u6210\u4e00\u4e2a\u5927\u5708\u3002\u7136\u540e,\u4ed6\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u6570m,\u8ba9\u7f16\u53f7\u4e3a0\u7684\u5c0f\u670b\u53cb\u5f00\u59cb\u62a5\u6570\u3002\u6bcf\u6b21\u558a\u5230m-1\u7684\u90a3\u4e2a\u5c0f\u670b\u53cb\u8981\u51fa\u5217\u5531\u9996\u6b4c,\u7136\u540e\u53ef\u4ee5\u5728\u793c\u54c1\u7bb1\u4e2d\u4efb\u610f\u7684\u6311\u9009\u793c\u7269,\u5e76\u4e14\u4e0d\u518d\u56de\u5230\u5708\u4e2d,\u4ece\u4ed6\u7684\u4e0b\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb,\u7ee7\u7eed0...m-1\u62a5\u6570....\u8fd9\u6837\u4e0b\u53bb....\u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb,\u53ef\u4ee5\u4e0d\u7528\u8868\u6f14,\u5e76\u4e14\u62ff\u5230\u725b\u5ba2\u540d\u8d35\u7684\u201c\u540d\u4fa6\u63a2\u67ef\u5357\u201d\u5178\u85cf\u7248(\u540d\u989d\u6709\u9650\u54e6!!^_^)\u3002\u8bf7\u4f60\u8bd5\u7740\u60f3\u4e0b,\u54ea\u4e2a\u5c0f\u670b\u53cb\u4f1a\u5f97\u5230\u8fd9\u4efd\u793c\u54c1\u5462\uff1f(\u6ce8\uff1a\u5c0f\u670b\u53cb\u7684\u7f16\u53f7\u662f\u4ece0\u5230n-1)\uff0c \u82e5n == 0 \u8fd4\u56de-1 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u8bad\u7ec3\u94fe\u8868 class CycleLinkedList{ int val; CycleLinkedList next; public CycleLinkedList(int val){ this.val = val; this.next = null; } } public class Solution { public int LastRemaining_Solution(int n, int m) { if(n == 0){ return -1; } // \u5faa\u73af\u94fe\u8868\u7684\u6784\u5efa CycleLinkedList dummy = new CycleLinkedList(-1); CycleLinkedList p = dummy; for(int i = 0; i < n; i++){ p.next = new CycleLinkedList(i); p = p.next; } p.next = dummy.next; p = dummy.next; // \u62a5\u6570 while(p.next != p){ for(int i = 0; i < m - 2; i++){ p = p.next; } p.next = p.next.next; p = p.next; } return p.val; } } import java.util.ArrayList; public class Solution { public int LastRemaining_Solution(int n, int m) { if(n == 0 || m == 0){ return -1; } // \u4e5f\u53ef\u6362\u6210LinkedList ArrayList<Integer> list = new ArrayList<>(); for(int i = 0; i < n; i++){ list.add(i); } int index = 0; while(list.size() > 1){ index = (index + m - 1) % list.size(); list.remove(index); } return list.get(0); } } \u89e3\u6cd5\u4e8c \u627e\u89c4\u5f8b \u9012\u5f52\u89e3\u6cd5 \u95ee\u9898\u63cf\u8ff0\uff1an\u4e2a\u4eba\uff08\u7f16\u53f70~(n-1))\uff0c\u4ece0\u5f00\u59cb\u62a5\u6570\uff0c\u62a5\u5230(m-1)\u7684\u9000\u51fa\uff0c\u5269\u4e0b\u7684\u4eba \u7ee7\u7eed\u4ece0\u5f00\u59cb\u62a5\u6570\u3002\u6c42\u80dc\u5229\u8005\u7684\u7f16\u53f7\u3002 \u200b \u6211\u4eec\u77e5\u9053\u7b2c\u4e00\u4e2a\u4eba(\u7f16\u53f7\u4e00\u5b9a\u662fm%n-1) \u51fa\u5217\u4e4b\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u4eba\u7ec4\u6210\u4e86\u4e00\u4e2a\u65b0 \u7684\u7ea6\u745f\u592b\u73af\uff08\u4ee5\u7f16\u53f7\u4e3ak=m%n\u7684\u4eba\u5f00\u59cb\uff09: \u200b k k+1 k+2 ... n-2, n-1, 0, 1, 2, ... k-2\u5e76\u4e14\u4ecek\u5f00\u59cb\u62a50\u3002 \u200b \u73b0\u5728\u6211\u4eec\u628a\u4ed6\u4eec\u7684\u7f16\u53f7\u505a\u4e00\u4e0b\u8f6c\u6362\uff1a \u200b k --> 0 \u200b k+1 --> 1 \u200b k+2 --> 2 \u200b ... \u200b ... \u200b k-2 --> n-2 \u200b k-1 --> n-1 \u200b \u53d8\u6362\u540e\u5c31\u5b8c\u5b8c\u5168\u5168\u6210\u4e3a\u4e86(n-1)\u4e2a\u4eba\u62a5\u6570\u7684\u5b50\u95ee\u9898\uff0c\u5047\u5982\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\uff1a \u4f8b\u5982x\u662f\u6700\u7ec8\u7684\u80dc\u5229\u8005\uff0c\u90a3\u4e48\u6839\u636e\u4e0a\u9762\u8fd9\u4e2a\u8868\u628a\u8fd9\u4e2ax\u53d8\u56de\u53bb\u4e0d\u521a\u597d\u5c31\u662fn\u4e2a\u4eba\u60c5 \u51b5\u7684\u89e3\u5417\uff1f\uff01\uff01\u53d8\u56de\u53bb\u7684\u516c\u5f0f\u5f88\u7b80\u5355\uff0c\u76f8\u4fe1\u5927\u5bb6\u90fd\u53ef\u4ee5\u63a8\u51fa\u6765\uff1ax'=(x+k)%n\u3002 \u200b \u4ee4f[i]\u8868\u793ai\u4e2a\u4eba\u73a9\u6e38\u620f\u62a5m\u9000\u51fa\u6700\u540e\u80dc\u5229\u8005\u7684\u7f16\u53f7\uff0c\u6700\u540e\u7684\u7ed3\u679c\u81ea\u7136\u662ff[n]\u3002 \u200b \u9012\u63a8\u516c\u5f0f \u200b f[1]=0; \u200b f[i]=(f[i-1]+m)%i; (i>1) \u200b \u6709\u4e86\u8fd9\u4e2a\u516c\u5f0f\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u4ece1-n\u987a\u5e8f\u7b97\u51faf[i]\u7684\u6570\u503c\uff0c\u6700\u540e\u7ed3\u679c\u662ff[n]\u3002 \u56e0\u4e3a\u5b9e\u9645\u751f\u6d3b\u4e2d\u7f16\u53f7\u603b\u662f\u4ece1\u5f00\u59cb\uff0c\u6211\u4eec\u8f93\u51faf[n]+1\u3002 public class Solution { public int LastRemaining_Solution(int n, int m) { if(n == 0){ return -1; }else if(n == 1){ return 0; }else{ return (LastRemaining_Solution(n - 1, m) + m) % n; } } } [\u6536\u85cf]\u6c421+2+\u2026+n \u9898\u76ee\u63cf\u8ff0 \u6c421+2+3+...+n\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case\u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u9012\u5f52 \u9519\u8bef \u4f7f\u7528 if \u8bed\u53e5\u4e86 public class Solution { public int Sum_Solution(int n) { // \u5229\u7528\u77ed\u8def\u53bb\u66ff\u6362 if(n < 1){ return 0; } return n + Sum_Solution(n - 1); } } \u89e3\u6cd5\u4e8c \u9012\u5f52+\u77ed\u8def //\u5176\u5b9e\u53ea\u8981\u5148\u770b\u6211\u4eec\u624b\u91cc\u6709\u4ec0\u4e48\u724c\u5c31\u80fd\u4e00\u6b65\u4e00\u6b65\u60f3\u5230\u5229\u7528\u77ed\u8def\u7279\u6027\u4e86 //\u6211\u4eec\u624b\u91cc\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\uff08\u6309\u4f18\u5148\u7ea7\u9ad8\u4f4e\uff09\u5355\u76ee\u8fd0\u7b97\u7b26\uff1a++\u548c--,\u53cc\u76ee\u8fd0\u7b97\u7b26\uff1a+,-\uff0c\u79fb\u4f4d\u8fd0\u7b97\u7b26<<\u548c>>\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26>,<\u7b49\uff0c\u903b\u8f91\u8fd0\u7b97\u7b26&&\uff0c||,&,|,^\uff0c\u8d4b\u503c= //\u5355\u76ee\u548c\u53cc\u76ee\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\uff0c\u79fb\u4f4d\u663e\u7136\u6ca1\u6709\u89c4\u5f8b\u6027\uff0c\u56e0\u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5e76\u4e0d\u80fd\u533a\u5206\u67d0\u4e2a\u6570\u548c\u5176\u4ed6\u6570\uff0c\u8fd9\u4e5f\u5c31\u6392\u9664\u4e86&,|,^,\u56e0\u4e3a\u4e0d\u9700\u8981\u505a\u4f4d\u8fd0\u7b97\u4e86 //\u5173\u7cfb\u8fd0\u7b97\u7b26\u8981\u548cif\u5339\u914d\uff0c\u4f46\u8fd9\u662f\u4e0d\u884c\u7684\uff0c\u8fd9\u65f6\u770b\u770b\u5269\u4e0b\u7684\u8fd0\u7b97\u7b26\u53ea\u80fd\u9009&&,||\u4e86 //\u5982\u679c\u505a\u8fc7Java\u7b14\u8bd5\u9898\uff0c\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u8fd0\u7b97\u7b26\u975e\u5e38\u654f\u611f\uff0c\u4ed6\u4eec\u6709\u77ed\u8def\u7279\u6027\uff0c\u524d\u9762\u7684\u6761\u4ef6\u5224\u771f\uff08\u6216\u8005\u5047\uff09\u4e86\uff0c\u5c31\u4e0d\u4f1a\u518d\u6267\u884c\u540e\u9762\u7684\u6761\u4ef6\u4e86 //\u8fd9\u65f6\u5c31\u80fd\u8054\u60f3\u5230--n,\u76f4\u5230\u7b49\u4e8e0\u5c31\u80fd\u8fd4\u56de\u503c\u3002 public class Solution { public int Sum_Solution(int n) { int sum = n; boolean flag = (sum>0)&&((sum+=Sum_Solution(--n))>0); return sum; } } [\u6536\u85cf]\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u9898\u76ee\u63cf\u8ff0 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528+\u3001-\u3001*\u3001/\u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u4f4d\u8fd0\u7b97\u6309\u4f4d\u4e8e\u5f97\u5230\u8fdb\u4f4d\u4f4d\uff0c\u6309\u4f4d\u5f02\u6216\u5f97\u5230\u975e\u8fdb\u4f4d\u4f4d\uff0c\u5faa\u73af\u6267\u884c\uff0c\u76f4\u5230\u65e0\u8fdb\u4f4d\u4f4d step1:\u6309\u4f4d\u4e0e\u662f\u67e5\u770b\u4e24\u4e2a\u6570\u54ea\u4e9b\u4e8c\u8fdb\u5236\u4f4d\u90fd\u4e3a1\uff0c\u8fd9\u4e9b\u90fd\u662f\u8fdb\u4f4d\u4f4d\uff0c\u7ed3\u679c\u9700\u5de6\u79fb\u4e00\u4f4d\uff0c\u8868\u793a\u8fdb\u4f4d\u540e\u7684\u7ed3\u679c step2:\u5f02\u6216\u662f\u67e5\u770b\u4e24\u4e2a\u6570\u54ea\u4e9b\u4e8c\u8fdb\u5236\u4f4d\u53ea\u6709\u4e00\u4e2a\u4e3a1\uff0c\u8fd9\u4e9b\u662f\u975e\u8fdb\u4f4d\u4f4d\uff0c\u53ef\u4ee5\u76f4\u63a5\u52a0\u3001\u51cf\uff0c\u7ed3\u679c\u8868\u793a\u975e\u8fdb\u4f4d\u4f4d\u8fdb\u884c\u52a0\u64cd\u4f5c\u540e\u7684\u7ed3\u679c \u9996\u5148\u770b\u5341\u8fdb\u5236\u662f\u5982\u4f55\u505a\u7684\uff1a 5+7=12\uff0c\u4e09\u6b65\u8d70 \u7b2c\u4e00\u6b65\uff1a\u76f8\u52a0\u5404\u4f4d\u7684\u503c\uff0c\u4e0d\u7b97\u8fdb\u4f4d\uff0c\u5f97\u52302\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8ba1\u7b97\u8fdb\u4f4d\u503c\uff0c\u5f97\u523010. \u5982\u679c\u8fd9\u4e00\u6b65\u7684\u8fdb\u4f4d\u503c\u4e3a0\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b65\u5f97\u5230\u7684\u503c\u5c31\u662f\u6700\u7ec8\u7ed3\u679c\u3002 \u7b2c\u4e09\u6b65\uff1a\u91cd\u590d\u4e0a\u8ff0\u4e24\u6b65\uff0c\u53ea\u662f\u76f8\u52a0\u7684\u503c\u53d8\u6210\u4e0a\u8ff0\u4e24\u6b65\u7684\u5f97\u5230\u7684\u7ed3\u679c2\u548c10\uff0c\u5f97\u523012\u3002 \u540c\u6837\u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u6b65\u8d70\u7684\u65b9\u5f0f\u8ba1\u7b97\u4e8c\u8fdb\u5236\u503c\u76f8\u52a0\uff1a 5-101\uff0c7-111 \u7b2c\u4e00\u6b65\uff1a\u76f8\u52a0\u5404\u4f4d\u7684\u503c\uff0c\u4e0d\u7b97\u8fdb\u4f4d\uff0c\u5f97\u5230010\uff0c\u4e8c\u8fdb\u5236\u6bcf\u4f4d\u76f8\u52a0\u5c31\u76f8\u5f53\u4e8e\u5404\u4f4d\u505a\u5f02\u6216\u64cd\u4f5c\uff0c101^111\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8ba1\u7b97\u8fdb\u4f4d\u503c\uff0c\u5f97\u52301010\uff0c\u76f8\u5f53\u4e8e\u5404\u4f4d\u505a\u4e0e\u64cd\u4f5c\u5f97\u5230101\uff0c\u518d\u5411\u5de6\u79fb\u4e00\u4f4d\u5f97\u52301010\uff0c(101&111)<<1\u3002 \u7b2c\u4e09\u6b65\u91cd\u590d\u4e0a\u8ff0\u4e24\u6b65\uff0c \u5404\u4f4d\u76f8\u52a0 010^1010=1000\uff0c\u8fdb\u4f4d\u503c\u4e3a100=(010&1010)<<1\u3002 \u7ee7\u7eed\u91cd\u590d\u4e0a\u8ff0\u4e24\u6b65\uff1a1000^100 = 1100\uff0c\u8fdb\u4f4d\u503c\u4e3a0\uff0c\u8df3\u51fa\u5faa\u73af\uff0c1100\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002 public class Solution { public int Add(int num1,int num2) { while(num2 != 0){ // \u975e\u8fdb\u4f4d\u4f4d int temp = num1 ^ num2; // \u8fdb\u4f4d\u4f4d num2 = (num1 & num2) << 1; num1 = temp; } return num1; } } \u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6574\u6570 \u9898\u76ee\u63cf\u8ff0 \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570(\u5b9e\u73b0Integer.valueOf(string)\u7684\u529f\u80fd\uff0c\u4f46\u662fstring\u4e0d\u7b26\u5408\u6570\u5b57\u8981\u6c42\u65f6\u8fd4\u56de0)\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570\u7684\u5e93\u51fd\u6570\u3002 \u6570\u503c\u4e3a0\u6216\u8005\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u503c\u5219\u8fd4\u56de0\u3002 \u8f93\u5165\u63cf\u8ff0: \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u5305\u62ec\u6570\u5b57\u5b57\u6bcd\u7b26\u53f7,\u53ef\u4ee5\u4e3a\u7a7a \u8f93\u51fa\u63cf\u8ff0: \u5982\u679c\u662f\u5408\u6cd5\u7684\u6570\u503c\u8868\u8fbe\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u8fd4\u56de0 \u793a\u4f8b1 \u8f93\u5165 \u590d\u5236 +2147483647 1a33 \u8f93\u51fa \u590d\u5236 2147483647 0 \u89e3\u6cd5 \u6ce8\u610f: \u6570\u5b57\u4e0a\u4e0b\u754c\u6ea2\u51fa Java \u5982\u679c\u6570\u503c\u8d85\u51faint\u7684\u8303\u56f4\uff0c\u8981\u7279\u6b8a\u5904\u7406\uff1b\u6bd4int\u7684\u6700\u5927\u503c\u8fd8\u8981\u5927\uff0c\u5df2\u7ecf\u4e0a\u6ea2\uff0c\u8fd9\u80af\u5b9a\u4e0d\u80fd\u901a\u8fc7\u6570\u5b57\u7684\u5927\u5c0f\u6bd4\u8f83\uff0c\u6240\u4ee5\u9700\u8981\u5728\u5b57\u7b26\u4e32\u7684\u72b6\u6001\u4e0b\u5224\u65ad\u662f\u5426\u4e0a\u6ea2\u6216\u4e0b\u6ea2\u3002 // int\u578b\u6ea2\u51fa\u95ee\u9898, java\u4e2dint\u578b\u6ca1\u6709\u6bd4Integer.MAX_VALUE\u66f4\u5927\u7684\u503c // System.out.println(Integer.MAX_VALUE);2147483647 // System.out.println(0x7fffffff);2147483647 // System.out.println(Integer.MIN_VALUE);-2147483648 // System.out.println(0x80000000);-2147483648 \u89e3\u6cd5\u4e00 \u5173\u952e\u662f\u6ea2\u51fa import java.lang.Character; public class Solution { public int StrToInt(String str) { if(str == null || \"\".equals(str)){ return 0; } char[] chars = str.toCharArray(); int i = 0, ans = 0; boolean isPos = true; // \u5224\u65ad\u7b2c\u4e00\u4f4d\u662f\u5426\u662f\u7b26\u53f7\u4f4d,\u82e5\u662f, i\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb\u904d\u5386(\u4ee50\u4f4d\u8d77\u70b9) if(chars[0] == '+' || chars[0] == '-'){ i = 1; isPos = chars[0] == '+'; } for(; i < chars.length; i++){ if (chars[i] < '9' && chars[i] > '0'){ // int\u578b\u6ea2\u51fa\u95ee\u9898, java\u4e2dint\u578b\u6ca1\u6709\u6bd4Integer.MAX_VALUE\u66f4\u5927\u7684\u503c // System.out.println(Integer.MAX_VALUE);2147483647 // System.out.println(0x7fffffff);2147483647 // System.out.println(Integer.MIN_VALUE);-2147483648 // System.out.println(0x80000000);-2147483648 if(ans == Integer.MAX_VALUE / 10){ if((isPos && chars[i] > '7') || (!isPos && chars[i] > '8')){ return 0; } }else if(ans > Integer.MAX_VALUE / 10){ return 0; } // Character.getNumbericValue ans = ans * 10 + (chars[i] - '0'); }else{ return 0; } } return ans * (isPos ? 1 : -1); } } \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230n-1\u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 Hash public class Solution { // Parameters: // numbers: an array of integers // length: the length of array numbers // duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation; // Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++ // \u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f~\u8fd4\u56de\u4efb\u610f\u91cd\u590d\u7684\u4e00\u4e2a\uff0c\u8d4b\u503cduplication[0] // Return value: true if the input is valid, and there are some duplications in the array number // otherwise false public boolean duplicate(int numbers[],int length,int [] duplication) { if(numbers == null || length == 0){ return false; } int[] nums = new int[length]; for(int i = 0; i < length; i++){ if(nums[numbers[i]] > 0){ duplication[0] = numbers[i]; return true; } nums[numbers[i]] += 1; } return false; } } \u89e3\u6cd5\u4e8c \u6570\u5b57\u6570\u7ec4+\u7d22\u5f15\u6570\u7ec4\uff08\u4e00\u4e2a\u6570\u7ec4\uff09 \u4e0d\u9700\u8981\u989d\u5916\u7684\u6570\u7ec4\u6216\u8005hash table\u6765\u4fdd\u5b58\uff0c\u9898\u76ee\u91cc\u5199\u4e86\u6570\u7ec4\u91cc\u6570\u5b57\u7684\u8303\u56f4\u4fdd\u8bc1\u57280 ~ n-1 \u4e4b\u95f4\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u73b0\u6709\u6570\u7ec4\u8bbe\u7f6e\u6807\u5fd7\uff0c\u5f53\u4e00\u4e2a\u6570\u5b57\u88ab\u8bbf\u95ee\u8fc7\u540e\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5bf9\u5e94\u4f4d\u4e0a\u7684\u6570 + n\uff0c\u4e4b\u540e\u518d\u9047\u5230\u76f8\u540c\u7684\u6570\u65f6\uff0c\u4f1a\u53d1\u73b0\u5bf9\u5e94\u4f4d\u4e0a\u7684\u6570\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8en\u4e86\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6570\u5373\u53ef\u3002 \u8fd9\u4e2a\u6570\u7ec4\u540c\u65f6\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a\u6570\u5b57\u6570\u7ec4 \u7d22\u5f15\u6570\u7ec4 \u9700\u8981\u8111\u6d77\u4e0d\u65ad\u7684\u8f6c\u6362 public boolean duplicate(int numbers[],int length,int [] duplication) { if(numbers == null || length == 0){ return false; } for(int i = 0; i < length; i++){ // \u9047\u5230\u7684\u6570\u5b57 \u4e0d\u662f\u7d22\u5f15 int index = numbers[i]; // \u78b0\u5230\u4e4b\u524d\u505a\u8fc7\u6807\u8bb0\u7684\u7d22\u5f15\uff0c\u4e34\u65f6\u6539\u53d8index\uff0c\u672a\u6539\u53d8\u8be5\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u503c if(index >= length){ index -= length; } // \u9047\u5230\u8be5\u6807\u8bb0 \u8fd4\u56de if(numbers[index] >= length){ return index; } // \u628a\u6570\u5b57\u53d8\u4e3a\u7d22\u5f15\uff0c\u5176\u4e2d\u8be5\u7d22\u5f15\u4e0a\u7684\u6570\u5b57\u505a\u4e2a\u6807\u8bb0 numbers[index] = numbers[index] + length; } return false; } } [\u6536\u85cf]\u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4A[0,1,...,n-1],\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4B[0,1,...,n-1],\u5176\u4e2dB\u4e2d\u7684\u5143\u7d20B[i]=A[0] A[1] ... A[i-1] A[i+1] ... A[n-1]\u3002\u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u53cc\u5411\u9010\u5143\u7d20\u7d2f\u4e58 import java.util.ArrayList; public class Solution { public int[] multiply(int[] A) { int[] sums = new int[A.length+1], B = new int[A.length]; sums[0] = 1; for(int i = 1; i <= A.length; i++){ sums[i] = sums[i-1] * A[i-1]; } int backSum = 1; for(int i = A.length - 1; i >= 0; i--){ B[i] = sums[i] * backSum; backSum *= A[i]; } return B; } } [todo]\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec'.'\u548c' '\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26'.'\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c' '\u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u542b0\u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\"aaa\"\u4e0e\u6a21\u5f0f\"a.a\"\u548c\"ab ac a\"\u5339\u914d\uff0c\u4f46\u662f\u4e0e\"aa.a\"\u548c\"ab*a\"\u5747\u4e0d\u5339\u914d \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u89e3\u6cd5\u4e8c [todo]\u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\"+100\",\"5e2\",\"-123\",\"3.1416\"\u548c\"-1E-16\"\u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f\"12e\",\"1a3.14\",\"1.2.3\",\"+-5\"\u548c\"12e+4.3\"\u90fd\u4e0d\u662f\u3002 \u89e3\u6cd5 \u89e3\u6cd5\u4e00 \u89e3\u6cd5\u4e8c","title":"\u5251\u6307offer"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#offer","text":"","title":"\u5251\u6307offer"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#java","text":"","title":"Java\u8bed\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#1stringbuffer-setlength-charat-setcharat-replace-tostring","text":"","title":"1.StringBuffer: setLength | charAt | setCharAt | replace | toString"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#2arrayscopyofrange-python","text":"","title":"2.Arrays.copyOfRange \u7c7b\u4f3c\u4e8ePython\u5207\u7247"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#3java-javalangmathpowarg0-arg1","text":"","title":"3.Java\u4e2d ^ \u8868\u793a\u5f02\u6216\uff0c\u800c\u4e0d\u662f\u5e42\uff0c java.lang.Math.pow(arg0, arg1)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#4-1-1-1","text":"","title":"4.-1 &gt;&gt; 1 == -1 \u6b7b\u5faa\u73af"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#5-n1-1","text":"","title":"5.\u5de6\u79fb\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6bd4\u8f83  \u4f7f\u7528\u6280\u5de7 ((n&gt;&gt;1) == 1\uff09"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#6","text":"","title":"6.\u5224\u65ad\u4e24\u6d6e\u70b9\u6570\u662f\u5426\u76f8\u7b49"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#double","text":"\u65b9\u6cd5\u4e00\uff1a \u82e5\u7cbe\u5ea6\u8981\u6c42\u4e0d\u9ad8\uff0c\u6bd4\u5982\u56e0\u4e3a\u4f20\u611f\u5668\u6709\u8bef\u5dee\uff0c\u5c0f\u4e8e0.001\u7684\u6570\u90fd\u53ef\u4ee5\u8ba4\u4e3a\u7b49\u4e8e0\uff0c\u90a3\u4e48\u5c31\u5b9a\u4e49epsilon = 0.001: \u65b9\u6cd5\u4e8c\uff1a \u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u4e4b\u540e\u7528equals\u65b9\u6cd5\u6bd4\u8f83 \u5982\u679c\u8981\u6bd4\u8f83\u7684\u4e24\u4e2adouble\u6570\u636e\u7684\u5b57\u7b26\u4e32\u7cbe\u5ea6\u76f8\u7b49\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u8f6c\u6362\u6210String\u7136\u540e\u501f\u52a9String\u7684equals\u65b9\u6cd5\u6765\u95f4\u63a5\u5b9e\u73b0\u6bd4\u8f83\u4e24\u4e2adouble\u6570\u636e\u662f\u5426\u76f8\u7b49\u3002 Double.toString(double_x).equals(Double.toString(double_y)) \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u6cd5\u53ea\u9002\u7528\u4e8e\u6bd4\u8f83\u7cbe\u5ea6\u76f8\u540c\u7684\u6570\u636e\uff0c\u5e76\u4e14\u662f\u53ea\u7528\u7528\u4e8e\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u7528\u6765\u5224\u65ad\u5927\u5c0f\u3002 \u65b9\u6cd5\u4e09\uff1a \u8f6c\u6362\u6210Long\u4e4b\u540e\u7528==\u65b9\u6cd5\u6bd4\u8f83 \u4f7f\u7528Sun\u63d0\u4f9b\u7684Double.doubleToLongBits()\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5c06double\u8f6c\u6362\u6210long\u578b\u6570\u636e\uff0c\u4ece\u800c\u53ef\u4ee5\u4f7fdouble\u6309\u7167long\u7684\u65b9\u6cd5\uff08<, >, ==\uff09\u5224\u65ad\u662f\u5426\u5927\u5c0f\u548c\u662f\u5426\u76f8\u7b49\u3002 Double.doubleToLongBits(0.01) == Double.doubleToLongBits(0.01) Double.doubleToLongBits(0.02) > Double.doubleToLongBits(0.01) Double.doubleToLongBits(0.02) < Double.doubleToLongBits(0.01) \u65b9\u6cd5\u56db\uff1a \u4f7f\u7528BigDecimal\u7c7b\u578b\u7684equals\u65b9\u6cd5\u6216compareTo\u65b9\u6cd5 \u7c7b\u52a0\u8f7d\uff1a import java.math.BigDecimal; \u4f7f\u7528 \u5b57\u7b26\u4e32\u5f62\u5f0f \u7684float\u578b\u548cdouble\u578b\u6784\u9020BigDecimal\uff1aBigDecimal(String val)\u3002BigDecimal\u7684euquals\u65b9\u6cd5\u662f\u5148\u5224\u65ad\u8981\u6bd4\u8f83\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982\u679c\u5bf9\u8c61\u7c7b\u578b\u4e00\u81f4\u524d\u63d0\u4e0b\u540c\u65f6\u5224\u65ad\u7cbe\u786e\u5ea6(scale)\u548c\u503c\u662f\u5426\u4e00\u81f4\uff1bcompareTo\u65b9\u6cd5\u5219\u4e0d\u4f1a\u6bd4\u8f83\u7cbe\u786e\u5ea6\uff0c\u628a\u7cbe\u786e\u5ea6\u4f4e\u7684\u90a3\u4e2a\u5bf9\u8c61\u8f6c\u6362\u4e3a\u9ad8\u7cbe\u786e\u5ea6\uff0c\u53ea\u6bd4\u8f83\u6570\u503c\u7684\u5927\u5c0f\u3002 System.out.println(new BigDecimal(\"1.2\").equals(new BigDecimal(\"1.20\"))); //\u8f93\u51fafalse System.out.println(new BigDecimal(\"1.2\").compareTo(new BigDecimal(\"1.20\")) == 0); //\u8f93\u51fatrue System.out.println(new BigDecimal(1.2).equals(new BigDecimal(\"1.20\"))); //\u8f93\u51fafalse System.out.println(new BigDecimal(1.2).compareTo(new BigDecimal(\"1.20\")) == 0); //\u8f93\u51fafalse System.out.println(new BigDecimal(1.2).equals(new BigDecimal(1.20))); //\u8f93\u51fatrue","title":"\u6bd4\u8f83double\u6570\u636e\u662f\u5426\u76f8\u7b49\u7684\u65b9\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#7-stackpush-pop-peek-empty","text":"","title":"7.\u6808 Stack\uff1apush pop peek empty"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#8-arraydequestack","text":"isEmpty | offer offerFirst offerLast | poll pollFirst pollLast | peek peekFirst peekLast","title":"8.\u975e\u7ebf\u7a0b\u5b89\u5168\u961f\u5217 ArrayDeque(\u4e5f\u53ef\u505aStack)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#9","text":"","title":"9.&lt;&gt;\u4e2d\u4e0d\u80fd\u6709\u57fa\u672c\u7c7b\u578b\uff0c\u5305\u88c5\u7c7b\u578b"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#10-javautilrandom-randnextintint-bound-boundexclusive","text":"","title":"10.\u968f\u673a java.util.Random \u2014&gt; rand.nextInt(int bound)  [bound(exclusive)]"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#11-javautilpriorityqueue-javautilcomparator","text":"// \u9ed8\u8ba4\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6700\u5c0f\u5806\u3002 Queue<Integer> priorityQueue = new PriorityQueue<>(); // \u5b9e\u73b0\u6700\u5927\u5806 or \u628a\u503c\u53d8\u4e3a\u8d1f\u6570\u4f7f\u7528\u6700\u5c0f\u5806 Queue<ListNode> priorityQueue = new PriorityQueue<ListNode>(lists.size(),new Comparator<ListNode>(){ @Override public int compare(ListNode o1, ListNode o2) { return o1.val-o2.val; } });","title":"11.\u6700\u5c0f\u5806 \u6700\u5927\u5806 java.util.PriorityQueue | java.util.Comparator"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#12hashmap-put","text":"put public V put(K key, V value) Returns: the previous value associated with key , or null if there was no mapping for key . (A null return can also indicate that the map previously associated null with key .) values return Collection Returns a Collection view of the values contained in this map.","title":"12.HashMap put"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#13hashset-add-remove","text":"public boolean add(E e) Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if this set contains no element e2 such that (e==null ? e2==null : e.equals(e2)) . If this set already contains the element, the call leaves the set unchanged and returns false .","title":"13.HashSet add remove"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#14integermax_value-integermin_value","text":"","title":"14.Integer.MAX_VALUE || Integer.MIN_VALUE"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#15javatuplepairjavafxutilpair","text":"Modifier and Type Method and Description boolean equals(Object o) Test this Pair for equality with another Object . K getKey() Gets the key for this pair. V getValue() Gets the value for this pair. int hashCode() Generate a hash code for this Pair . String toString()``String representation of this Pair .","title":"15.Java\u4e2d\u7684tuple\uff1aPair\uff08javafx.util.Pair)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#16string-joincharsequence-delimiter-charsequence-elements","text":"","title":"16.String join(CharSequence delimiter, CharSequence... elements)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#17-linkedlist","text":"void addFirst(E object) void addLast(E object) E get(int location) E getFirst() E getLast() E peek() E peekFirst() E peekLast() E poll() E pollFirst() E pollLast() E pop() void push(E e) E remove() E remove(int location) boolean remove(Object object) E removeFirst() E set(int location, E object) int size() <T> T[] toArray(T[] contents) Object[] toArray()","title":"17.\u53cc\u5411\u94fe\u8868 LinkedList"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#18charactergetnumericvalue-stringvalueof-x-0-int","text":"","title":"18.Character.getNumericValue | String.valueOf |  'x' - '0' \u2014&gt; \u6570\u503c\u578b\u5b57\u7b26\u8f6cint"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#19characterisdigitstringcharatindex","text":"","title":"19.Character.isDigit(string.charAt(index)) \u67d0\u4e00\u5b57\u7b26\u662f\u5426\u662f\u6570\u503c\u578b"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#20","text":"// int\u578b\u6ea2\u51fa\u95ee\u9898, java\u4e2dint\u578b\u6ca1\u6709\u6bd4Integer.MAX_VALUE\u66f4\u5927\u7684\u503c // System.out.println(Integer.MAX_VALUE);2147483647 // System.out.println(0x7fffffff);2147483647 // System.out.println(Integer.MIN_VALUE);-2147483648 // System.out.println(0x80000000);-2147483648","title":"20.\u6570\u503c\u6ea2\u51fa\u95ee\u9898 \u89c1\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6574\u6570"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#21arraylist","text":"for (Iterator iterator = arrayList.iterator(); iterator.hasNext();) { System.out.println(iterator.next()); } for(Character c: arrayList){ }","title":"21.ArrayList \u904d\u5386"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#22list","text":"Arrays.asList(1, 2, 3)","title":"22.\u6570\u7ec4\u8f6cList"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#python","text":"","title":"Python\u77e5\u8bc6\u70b9"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#defaultdict-examples","text":"Using list as the default_factory , it is easy to group a sequence of key-value pairs into a dictionary of lists: >>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)] >>> d = defaultdict(list) >>> for k, v in s: ... d[k].append(v) ... >>> d.items() [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]","title":"defaultdict Examples\u00b6"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_1","text":"","title":"\u601d\u8def\u603b\u7ed3"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#1","text":"","title":"1.\u94fe\u8868\uff0c\u6811\u5584\u7528\u9012\u5f52\u65b9\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#2-238-leetcode209","text":"","title":"2.\u9010\u5143\u7d20\u7d2f\u4e58 \u9010\u5143\u7d20\u7d2f\u52a0 \u89c1[238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef] [leetcode209\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4]"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#3","text":"\u5747\u4ece\u5934\u5f00\u59cb\u904d\u5386 \u6216\u8005\u4ece\u5934\u548c\u5c3e\u5939\u903c\u904d\u5386","title":"3.\u53cc\u6307\u9488\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_2","text":"","title":"\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_3","text":"\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff08\u6bcf\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\u76f8\u540c\uff09\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_4","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#bruce-ton2-so1","text":"public class Solution { public boolean Find(int target, int [][] array) { if(array == null || array.length == 0 ){ return false; } for(int i = 0; i < array.length; i++){ for(int j = 0; j < array[0].length; j++){ if(array[i][j] == target){ return true; } } } return false; } }","title":"\u89e3\u6cd5\u4e00 Bruce TO(n^2) SO(1)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#tonlogn-so1","text":"public class Solution { public boolean Find(int target, int [][] array) { /** * \u8fb9\u754c\u6761\u4ef6: \u7a7a\u6570\u7ec4 * \u4e00\u7ef4\u6570\u7ec4\u4e8c\u5206\u67e5\u627e TO(nlogn) SO(1) */ if(array == null || array.length == 0 || array[0].length == 0){ return false; } for(int i = 0; i < array.length; i++){ // \u4e8c\u5206\u67e5\u627e int left = 0; int right = array.length - 1; while(left <= right){ int mid = (left + right) >> 1; if(array[i][mid] == target){ return true; }else if(array[i][mid] > target){ right = mid - 1; }else{ left = mid + 1; } } } return false; } }","title":"\u89e3\u6cd5\u4e8c \u4e00\u7ef4\u6570\u7ec4\u7684\u4e8c\u5206\u67e5\u627e TO(nlogn) SO(1)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#to-so1","text":"\u4e8c\u5206\u67e5\u627e\u601d\u60f3\u6838\u5fc3\uff1a\u627e\u5230\u4e2d\u5fc3\u70b9\uff0c \u8be5\u77e9\u9635\u7684\u4e2d\u5fc3\u70b9\u5373\u662f\u5de6\u4e0b\u89d2\u7684\u5143\u7d20\uff0c \u5f53target > \u5f85\u6bd4\u8f83\u5143\u7d20\u65f6\uff0c\u5411\u53f3\u67e5\u627e \u5f53target < \u5e26\u6bd4\u8f83\u5143\u7d20\u65f6\uff0c\u5411\u4e0a\u67e5\u627e public class Solution { // 246 public boolean Find(int target, int [][] array) { /** * \u8fb9\u754c\u6761\u4ef6: \u7a7a\u6570\u7ec4 * \u4e8c\u5206\u67e5\u627e * Bruce TO(nlogn) SO(1) */ if(array == null || array.length == 0 || array[0].length == 0){ return false; } int h = array.length - 1; int w = 0; while (h >= 0 && w < array[0].length){ if(array[h][w] == target){ return true; }else if(array[h][w] < target){ w++; }else if(array[h][w] > target){ h--; } } return false; } }","title":"\u89e3\u6cd5\u4e09 \u77e9\u9635\u4e8c\u5206\u67e5\u627e TO() SO(1)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_5","text":"","title":"\u66ff\u6362\u7a7a\u683c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_6","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3aWe Are Happy.\u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3aWe%20Are%20Happy\u3002 \u8fdb\u9636\uff1a\u5728\u539f\u6709\u5b57\u7b26\u4e32\u4e0a\u505a\u66ff\u6362","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_7","text":"\u9898\u76ee\u672c\u8eab\u5f88\u7b80\u5355\uff0c\u4f46\u8981\u60f3\u6709\u8f83\u597d\u7684\u6548\u7387\uff0c \u9700\u8981\u6ce8\u610f\u5230\u66ff\u6362\u540e\u548c\u66ff\u6362\u524d\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4e00\u6837","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_8","text":"\u8fd0\u884c\u65f6\u95f4\uff1a21ms \u5360\u7528\u5185\u5b58\uff1a9340k public class Solution { public String replaceSpace(StringBuffer str) { StringBuffer str2 = new StringBuffer(); for(int i = 0; i < str.length(); i++){ if(str.charAt(i) == ' '){ str2.append(\"%20\"); }else{ str2.append(str.charAt(i)); } } return str2.toString(); } } \u904d\u5386\u4e00\u904d\u8ba1\u7b97\u6709\u51e0\u4e2a\u7a7a\u683c\uff0c\u521d\u59cb\u5316\u4e00\u4e2aorigin_length+2*space_nums\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\u586b\u8865\u4e0a\u53bb","title":"\u89e3\u6cd5\u4e00 \u65b0\u5f00\u8f9f\u5b57\u7b26\u4e32\u505a\u66ff\u6362"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_9","text":"\u8fd0\u884c\u65f6\u95f4\uff1a24ms \u5360\u7528\u5185\u5b58\uff1a9752k \u5728\u5f53\u524d\u5b57\u7b26\u4e32\u66ff\u6362\uff0c\u600e\u4e48\u66ff\u6362\u624d\u66f4\u6709\u6548\u7387\uff08\u4e0d\u8003\u8651java\u91cc\u73b0\u6709\u7684replace\u65b9\u6cd5\uff09\u3002 \u4ece\u524d\u5f80\u540e\u66ff\u6362\uff0c\u540e\u9762\u7684\u5b57\u7b26\u8981\u4e0d\u65ad\u5f80\u540e\u79fb\u52a8\uff0c\u8981\u591a\u6b21\u79fb\u52a8\uff0c\u6240\u4ee5\u6548\u7387\u4f4e\u4e0b \u4ece\u540e\u5f80\u524d\uff0c\u5148\u8ba1\u7b97\u9700\u8981\u591a\u5c11\u7a7a\u95f4\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u79fb\u52a8\uff0c\u5219\u6bcf\u4e2a\u5b57\u7b26\u53ea\u4e3a\u79fb\u52a8\u4e00\u6b21\uff0c\u8fd9\u6837\u6548\u7387\u66f4\u9ad8\u4e00\u70b9\u3002 public class Solution { public static String replaceSpace(StringBuffer str) { int cnt = 0; int oldLength = str.length(); for(int i = 0; i < oldLength; i++){ if(str.charAt(i) == ' '){ cnt += 1; } } int newLength = oldLength + 2 * cnt; str.setLength(newLength); for(int i = oldLength - 1, j = newLength - 1; i >= 0; i--, j--){ if(str.charAt(i) == ' '){ // stringbuffer.replace start:end-str.length() end:\u7ec8\u6b62\u4e8e\u524d\u4e00\u4f4d str.replace(j-2, j+1, \"%20\"); j -= 2; }else{ str.setCharAt(j, str.charAt(i)); } } return str.toString(); } }","title":"\u89e3\u6cd5\u4e8c \u5728\u539f\u5b57\u7b26\u4e32\u4e0a\u8fdb\u884c\u66ff\u6362"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_10","text":"","title":"\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_11","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u6309\u94fe\u8868\u503c\u4ece\u5c3e\u5230\u5934\u7684\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2aArrayList\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_12","text":"\u9006\u8f6c\u94fe\u8868 \u904d\u5386\u6253\u5370 \u904d\u5386\u5b58\u5165list\uff0c\u9006\u8f6clist \u5b58\u5165stack\u4e2d\uff0c\u904d\u5386\u8f93\u51fa","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#list","text":"import java.util.ArrayList; import java.util.Collections; public class Solution { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList list = new ArrayList(); while(listNode != null){ list.add(listNode.val); listNode = listNode.next; } Collections.reverse(list); return list; } } // ------ \u81ea\u5b9a\u4e49reverse ------ import java.util.ArrayList; public class Solution { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList list = new ArrayList(); while(listNode != null){ list.add(listNode.val); listNode = listNode.next; } // Collections.reverse(list); reverse(list); return list; } public void reverse(ArrayList<Integer> list){ int length = list.size(); for(int i = 0; i < length / 2; i++){ int tmp = list.get(i); list.set(i, list.get(length - 1 - i)); list.set(length - 1 - i, tmp); } } }","title":"\u89e3\u6cd5\u4e00 \u9006\u8f6clist"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#stack","text":"import java.util.ArrayList; public class Solution { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { if(listNode == null){ return new ArrayList(); } ArrayList list = printListFromTailToHead(listNode.next); list.add(listNode.val); return list; } }","title":"\u89e3\u6cd5\u4e8c \u9012\u5f52\u6216stack"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_13","text":"","title":"\u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_14","text":"\u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u524d\u5e8f\u904d\u5386\u5e8f\u5217{1,2,4,7,3,5,6,8}\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217{4,7,2,1,5,3,8,6}\uff0c\u5219\u91cd\u5efa\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_15","text":"\u524d\u5e8f\u6392\u5217\uff1a\u6839\u7ed3\u70b9\u5728\u524d \u4e2d\u5de6\u53f3 \u4e2d\u5e8f\u6392\u5217\uff1a\u6839\u7ed3\u70b9\u5728\u4e2d \u5de6\u4e2d\u53f3","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_16","text":"\u5584\u7528\u6570\u7ec4\u7d22\u5f15 public class Solution { public TreeNode reConstructBinaryTree(int [] pre,int [] in) { return reConstructBinaryTree(pre, 0, pre.length - 1, in, 0, in.length - 1); } private TreeNode reConstructBinaryTree(int[] pre, int preStart, int preEnd, int[] in, int inStart, int inEnd) { if (preStart > preEnd || inStart > inEnd){ return null; } int rootVal = pre[preStart]; TreeNode root = new TreeNode(rootVal); for(int i = inStart; i <= inEnd; i++){ if(in[i] == rootVal){ root.left = reConstructBinaryTree(pre, preStart + 1, preStart + (i - inStart), in, inStart, i - 1); root.right = reConstructBinaryTree(pre, preStart + (i - inStart) + 1, preEnd, in, i + 1, inEnd); } } return root; } }","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_17","text":"","title":"\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_18","text":"\u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684Push\u548cPop\u64cd\u4f5c\u3002 \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e3aint\u7c7b\u578b\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_19","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_20","text":"import java.util.Stack; public class Solution { Stack<Integer> stack1 = new Stack<Integer>(); Stack<Integer> stack2 = new Stack<Integer>(); public void push(int node) { while(!stack1.empty()){ stack2.push(stack1.pop()); } stack1.push(node); while(!stack2.empty()){ stack1.push(stack2.pop()); } } public int pop() { if(stack1.empty() && stack2.empty()){ throw new RuntimeException(\"Error pop\"); } return stack1.pop(); } }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_21","text":"","title":"\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57[\u53ef\u91cd\u590d]"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_22","text":"\u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4{3,4,5,1,2}\u4e3a{1,2,3,4,5}\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 NOTE\uff1a\u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de0\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_23","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_24","text":"import java.util.ArrayList; public class Solution { public int minNumberInRotateArray(int [] array) { if(array == null || array.length == 0){ return 0; } if(array[array.length - 1] > array[0]){ return array[0]; } int left = 0; int right = array.length - 1; int mid = 0; while(left <= right){ mid = (left + right) >> 1; if (array[mid] > array[mid+1]){ return array[mid+1]; }else if(array[mid] < array[right]){ right = mid; }else{ left = mid; } } return array[0]; } }","title":"\u89e3\u6cd5\u4e00 \u4e8c\u5206\u67e5\u627e"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_25","text":"","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_26","text":"\u5927\u5bb6\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u73b0\u5728\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u8bf7\u4f60\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879\uff08\u4ece0\u5f00\u59cb\uff0c\u7b2c0\u9879\u4e3a0\uff09\u3002 n<=39","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_27","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_28","text":"\u8fd0\u884c\u65f6\u95f4\uff1a1273ms \u5360\u7528\u5185\u5b58\uff1a9276k public class Solution { public int Fibonacci(int n) { if(n == 0 || n == 1){ return n; } return Fibonacci(n-1) + Fibonacci(n-2); } }","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52 \u6700\u5dee\u7684\u65b9\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#dp-ton-so1","text":"\u8fd0\u884c\u65f6\u95f4\uff1a20ms \u5360\u7528\u5185\u5b58\uff1a9416k public class Solution { public int Fibonacci(int n) { if(n == 0 || n == 1){ return n; } int a = 0, b = 1; for(int i = 2; i <= n; i++){ b = a + b; a = b - a; } return b; } }","title":"\u89e3\u6cd5\u4e8c \u8fed\u4ee3 DP\u601d\u60f3 \u63a8\u8350 TO(n) SO(1)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#tologn","text":"//\u65f6\u95f4\u590d\u6742\u5ea6\u4e3alogN\uff1b //\u53c2\u8003\u7a0b\u5e8f\u733f\u4ee3\u7801\u9762\u8bd5\u6307\u5357\uff1b class Solution { public: int Fibonacci(int n) { if(n<1) return 0; if(n==1||n==2) return 1; vector<vector<int> > base = {{1,1},{1,0}}; vector<vector<int> > res=matrixPower(base, n-2); return res[0][0]+res[1][0]; } //\u77e9\u9635\u76f8\u4e58 vector<vector<int> > matrix_multiply(vector<vector<int> > arrA, vector<vector<int> > arrB) { int rowA=arrA.size(); int colA=arrA[0].size(); int colB=arrA[0].size(); int rowB=arrA.size(); vector<vector<int> > res (rowA,vector<int> (colB,0)); if(colA!=rowB) return res; for(int i=0;i<rowA;i++) { for(int j=0;j<colB;j++) { for(int m=0;m<colA;m++) res[i][j]+=arrA[i][m]*arrB[m][j]; } } return res; } vector<vector<int> > matrixPower(vector<vector<int> > a,int p) { vector<vector<int> > res (a.size(),vector<int> (a[0].size(),0)); for(int i=0;i<res.size();i++) { res[i][i]=1; } vector<vector<int> > tmp(a); for(;p!=0;p>>=1) { if((p&1)!=0) { res=matrix_multiply(res,tmp); } tmp=matrix_multiply(tmp,tmp); } return res; }","title":"\u89e3\u6cd5\u4e09 \u77e9\u9635\u4e58\u65b9+\u7a7a\u95f4\u6362\u65f6\u95f4 TO(logn) \u66f4\u5feb\u4f46\u4e0d\u5b9e\u7528"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_29","text":"","title":"\u8df3\u53f0\u9636"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_30","text":"\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\uff08\u5148\u540e\u6b21\u5e8f\u4e0d\u540c\u7b97\u4e0d\u540c\u7684\u7ed3\u679c\uff09\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_31","text":"\u7c7b\u4f3c\u6590\u6ce2\u90a3\u5951\uff0c\u9664\u521d\u59cb\u6761\u4ef6\u4e0d\u540c\uff08\u4ee51\u5f00\u59cb\uff09","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_32","text":"public class Solution { public int JumpFloor(int target) { if(target == 1 || target == 2){ return target; } int a = 1, b = 2; for(int i = 3; i <= target; i++){ b = a + b; a = b - a; } return b; } }","title":"\u89e3\u6cd5\u4e00 \u8fed\u4ee3"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_33","text":"","title":"\u53d8\u6001\u8df3\u9752\u86d9"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_34","text":"\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_35","text":"\u56e0\u4e3an\u7ea7\u53f0\u9636\uff0c\u7b2c\u4e00\u6b65\u6709n\u79cd\u8df3\u6cd5\uff1a\u8df31\u7ea7\u3001\u8df32\u7ea7\u3001\u5230\u8df3n\u7ea7\u8df31\u7ea7\uff0c\u5269\u4e0bn-1\u7ea7\uff0c\u5219\u5269\u4e0b\u8df3\u6cd5\u662ff(n-1)\u8df32\u7ea7\uff0c\u5269\u4e0bn-2\u7ea7\uff0c\u5219\u5269\u4e0b\u8df3\u6cd5\u662ff(n-2)\u6240\u4ee5f(n)=f(n-1)+f(n-2)+...+f(1)\u56e0\u4e3af(n-1)=f(n-2)+f(n-3)+...+f(1)\u6240\u4ee5f(n)=2*f(n-1) \u6bcf\u4e2a\u53f0\u9636\u90fd\u6709\u8df3\u4e0e\u4e0d\u8df3\u4e24\u79cd\u60c5\u51b5\uff08\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u53f0\u9636\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u53f0\u9636\u5fc5\u987b\u8df3\u3002\u6240\u4ee5\u5171\u75282^(n-1)\u4e2d\u60c5\u51b5","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_36","text":"import java.lang.Math; public class Solution { public int JumpFloorII(int target) { return (int)Math.pow(2, target - 1); } }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#to1","text":"import java.lang.Math; public class Solution { public int JumpFloorII(int target) { return 1 << --target; } }","title":"\u89e3\u6cd5\u4e8c \u5de6\u79fb TO(1)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_37","text":"","title":"\u77e9\u5f62\u8986\u76d6"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_38","text":"\u6211\u4eec\u53ef\u4ee5\u75282 1\u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528n\u4e2a2 1\u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a2*n\u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_39","text":"\u5f53\u7b2c8\u884c\u7684\u5c0f\u77e9\u5f62\u5982\u679c\u7ad6\u7740\u653e\uff0c\u90a3\u4e48f(7) \u5f53\u7b2c8\u884c\u7684\u5c0f\u77e9\u5f62\u5982\u679c\u6a2a\u7740\u653e\uff0c\u90a3\u4e48f(6) f(8) = f(7) + f(6) \u6590\u6ce2\u90a3\u5951","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_40","text":"public class Solution { public int RectCover(int target) { // \u5f53\u7b2c8\u884c\u7684\u5c0f\u77e9\u5f62\u5982\u679c\u7ad6\u7740\u653e\uff0c\u90a3\u4e48f(7) // \u5f53\u7b2c8\u884c\u7684\u5c0f\u77e9\u5f62\u5982\u679c\u6a2a\u7740\u653e\uff0c\u90a3\u4e48f(6) // f(8) = f(7) + f(6) // \u6590\u6ce2\u90a3\u5951 if(target < 3){ return target; } int a = 1, b = 2; for(int i = 3; i <= target; i++){ b = a + b; a = b - a; } return b; } }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#1_1","text":"","title":"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_41","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_42","text":"\u6d4b\u8bd5\u7528\u4f8b\uff1a\u6b63\u6570 \u8d1f\u6570 0","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_43","text":"-1 >> 1 == -1 public class Solution { public int NumberOf1(int n) { // \u8d1f\u6570\u8865\u7801 = \u8d1f\u6570\u53cd\u7801 + 1 // \u6d4b\u8bd5\u7528\u4f8b \u6b63\u6570 \u8d1f\u6570 0 int cnt = 0; while(n > 0){ if((n & 1) == 1){ cnt += 1; } n = n >> 1; } return cnt; } }","title":"\u89e3\u6cd5\u4e00 \u53ea\u80fd\u5904\u7406\u6b63\u6570 \u8d1f\u6570\u6b7b\u5faa\u73af"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_44","text":"\u6784\u9020\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u4f4d\u4e3a1\u7684flag public class Solution { public int NumberOf1(int n) { // \u8d1f\u6570\u8865\u7801 = \u8d1f\u6570\u53cd\u7801 + 1 // \u6d4b\u8bd5\u7528\u4f8b \u6b63\u6570 \u8d1f\u6570 0 int flag = 1; int cnt = 0; while(flag != 0){ if((n & flag) != 0){ cnt += 1; } flag = flag << 1; } return cnt; } }","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_45","text":"\u5206\u6790 n & (n-1)\u7684\u7ed3\u679c \u5982\u679c\u4e00\u4e2a\u6574\u6570\u4e0d\u4e3a0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6574\u6570\u81f3\u5c11\u6709\u4e00\u4f4d\u662f1\u3002\u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e2a\u6574\u6570\u51cf1\uff0c\u90a3\u4e48\u539f\u6765\u5904\u5728\u6574\u6570\u6700\u53f3\u8fb9\u76841\u5c31\u4f1a\u53d8\u4e3a0\uff0c\u539f\u6765\u57281\u540e\u9762\u7684\u6240\u6709\u76840\u90fd\u4f1a\u53d8\u62101(\u5982\u679c\u6700\u53f3\u8fb9\u76841\u540e\u9762\u8fd8\u67090\u7684\u8bdd)\u3002\u5176\u4f59\u6240\u6709\u4f4d\u5c06\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u200b \u4e3e\u4e2a\u4f8b\u5b50\uff1a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u65701100\uff0c\u4ece\u53f3\u8fb9\u6570\u8d77\u7b2c\u4e09\u4f4d\u662f\u5904\u4e8e\u6700\u53f3\u8fb9\u7684\u4e00\u4e2a1\u3002\u51cf\u53bb1\u540e\uff0c\u7b2c\u4e09\u4f4d\u53d8\u62100\uff0c\u5b83\u540e\u9762\u7684\u4e24\u4f4d0\u53d8\u6210\u4e861\uff0c\u800c\u524d\u9762\u76841\u4fdd\u6301\u4e0d\u53d8\uff0c\u56e0\u6b64\u5f97\u5230\u7684\u7ed3\u679c\u662f1011.\u6211\u4eec\u53d1\u73b0\u51cf1\u7684\u7ed3\u679c\u662f\u628a\u6700\u53f3\u8fb9\u7684\u4e00\u4e2a1\u5f00\u59cb\u7684\u6240\u6709\u4f4d\u90fd\u53d6\u53cd\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u6211\u4eec\u518d\u628a\u539f\u6765\u7684\u6574\u6570\u548c\u51cf\u53bb1\u4e4b\u540e\u7684\u7ed3\u679c\u505a\u4e0e\u8fd0\u7b97\uff0c\u4ece\u539f\u6765\u6574\u6570\u6700\u53f3\u8fb9\u4e00\u4e2a1\u90a3\u4e00\u4f4d\u5f00\u59cb\u6240\u6709\u4f4d\u90fd\u4f1a\u53d8\u62100\u3002\u59821100&1011=1000.\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u4e00\u4e2a\u6574\u6570\u51cf\u53bb1\uff0c\u518d\u548c\u539f\u6574\u6570\u505a\u4e0e\u8fd0\u7b97\uff0c\u4f1a\u628a\u8be5\u6574\u6570\u6700\u53f3\u8fb9\u4e00\u4e2a1\u53d8\u62100.\u90a3\u4e48\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u6709\u591a\u5c11\u4e2a1\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u591a\u5c11\u6b21\u8fd9\u6837\u7684\u64cd\u4f5c\u3002 public class Solution { public int NumberOf1(int n) { // \u8d1f\u6570\u8865\u7801 = \u8d1f\u6570\u53cd\u7801 + 1 // \u6d4b\u8bd5\u7528\u4f8b \u6b63\u6570 \u8d1f\u6570 0 int cnt = 0; while (n != 0){ cnt += 1; n = n & (n - 1); } return cnt; } }","title":"\u89e3\u6cd5\u4e09 \u63a8\u8350"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_46","text":"","title":"\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_47","text":"\u7ed9\u5b9a\u4e00\u4e2adouble\u7c7b\u578b\u7684\u6d6e\u70b9\u6570base\u548cint\u7c7b\u578b\u7684\u6574\u6570exponent\u3002\u6c42base\u7684exponent\u6b21\u65b9\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_48","text":"\u6d4b\u8bd5\u7528\u4f8b\uff1a \u5e95\u6570 \u548c \u6307\u6570 \u6b63\u6570 \u8d1f\u6570 0","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_49","text":"public class Solution { public double Power(double base, int exponent) { // \u5e95\u6570\u4e3a0 \u4e0d\u53ef\u505a\u5206\u6bcd if(base == 0){ return 0; } if(exponent == 0){ return 1; } if(exponent < 0){ exponent = -1 * exponent; base = 1 / base; } double ans = 1.0; if ((exponent & 1) == 1){ ans = base * ans; } double half = Power(base, exponent >> 1); return ans * half * half; } }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_50","text":"","title":"\u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_51","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002 \u8fdb\u96361: \u539f\u5730\u8c03\u6574\uff0c\u4e0d\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002 \u8fdb\u96362\uff1a\u5e76\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_52","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#1_2","text":"\u7ef4\u62a4\u4e24\u6307\u9488\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u653e\u5728\u6570\u7ec4\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u4ece\u524d\u5411\u540e\u904d\u5386\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u653e\u5728\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4ece\u540e\u5411\u524d\u904d\u5386\uff0c\u4e24\u6307\u9488\u76f8\u9047\u524d\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5076\u6570\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u5947\u6570\uff0c\u4ea4\u6362\u3002 public class Solution { public void reOrderArray(int [] array) { if (array == null || array.length == 0){ return; } int i = 0, j = array.length - 1; while(i < j){ while(i < j && check(array[i])){ i++; } while(i < j && !check(array[j])){ j--; } if(i < j){ int tmp = array[i]; array[i] = array[j]; array[j] = tmp; } } } private boolean check(int num){ return (num & 1) == 1; } }","title":"\u89e3\u6cd5\u4e00 \u8fdb\u96361 \u4e0d\u7a33\u5b9a"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_53","text":"public class Solution { public void reOrderArray(int [] array) { if (array == null || array.length == 0){ return; } int[] narray = new int[array.length]; int odd_cnt = 0; for(int i = 0; i < array.length; i++){ if((array[i] & 1) == 1){ narray[odd_cnt] = array[i]; odd_cnt++; } } for(int i = 0; i < array.length; i++){ if((array[i] & 1) != 1){ narray[odd_cnt] = array[i]; odd_cnt++; } } // array = narray; \u9519\u8bef \u8be5\u8bed\u53e5\u662f\u8ba9array\u6307\u5411narray\u7684\u5185\u5b58\u533a\u57df\uff0c\u800c\u4e0d\u662f\u4fee\u6539narray\u7684\u5185\u5b58\u533a\u57df for (int i = 0; i< array.length; i++){ array[i] = narray[i]; } } } public class Solution { public void reOrderArray(int [] array) { /** * \u4e0d\u7a33\u5b9a\u6cd5 \u4ece\u4e24\u4fa7\u903c\u8fd1 * \u65b0\u5efa\u6570\u7ec4 * \u63d2\u5165\u6392\u5e8f */ if (array == null || array.length == 0){ return; } int i = -1; for(int j = 0; j < array.length; j++){ int key = array[j]; if ((key & 1) == 1){ int k = j - 1; while (k > i){ array[k + 1] = array[k]; k--; } array[k + 1] = key; i++; } } } }","title":"\u89e3\u6cd5\u4e8c \u8fdb\u9636\u4e8c \u65b0\u5efa\u6570\u7ec4 \u6216\u63d2\u5165\u6392\u5e8f"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#k","text":"","title":"\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_54","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_55","text":"\u53cc\u6307\u9488\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u5148\u8d70\u7b2ck\u4e2a\u7ed3\u70b9\uff0c\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u8d70\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u8d70\u5230\u5c3e\u7ed3\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u5373\u662f\u9700\u8981\u7684\u7ed3\u70b9","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_56","text":"public class Solution { public ListNode FindKthToTail(ListNode head,int k) { if(k <= 0 || head == null){ return null; } // k > lenght ListNode first = head, second = head; for(int i = 0; i < k - 1; i++){ if (first.next == null){ return null; } first = first.next; } while(first.next != null){ first = first.next; second = second.next; } return second; } }","title":"\u89e3\u6cd5\u4e00 \u904d\u5386\u4e00\u904d"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_57","text":"","title":"\u53cd\u8f6c\u94fe\u8868"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_58","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u65b0\u94fe\u8868\u7684\u8868\u5934\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_59","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_60","text":"public class Solution { public ListNode ReverseList(ListNode head) { ListNode nhead = null; while(head != null){ ListNode tmp = head; head = head.next; tmp.next = nhead; nhead = tmp; } return nhead; } }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_61","text":"","title":"\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_62","text":"\u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_63","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_64","text":"public class Solution { public ListNode Merge(ListNode list1,ListNode list2) { if(list1 == null){ return list2; } if(list2 == null){ return list1; } ListNode ans = null, head = null; int val = 0; while(list1 != null && list2 != null){ if(list1.val <= list2.val){ val = list1.val; list1 = list1.next; }else{ val = list2.val; list2 = list2.next; } if(head == null){ head = new ListNode(val); ans = head; }else{ ans.next = new ListNode(val); ans = ans.next; } } if(list1 != null){ ans.next = list1; }else{ ans.next = list2; } return head; } }","title":"\u89e3\u6cd5\u4e00 \u975e\u9012\u5f52"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_65","text":"public class Solution { public ListNode Merge(ListNode list1,ListNode list2) { if(list1 == null){ return list2; } if(list2 == null){ return list1; } ListNode head = null; if(list1.val <= list2.val){ head = new ListNode(list1.val); head.next = Merge(list1.next, list2); }else{ head = new ListNode(list2.val); head.next = Merge(list1, list2.next); } return head; } }","title":"\u89e3\u6cd5\u4e8c \u9012\u5f52\u7248\u672c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_66","text":"","title":"[\u6536\u85cf]\u6811\u7684\u5b50\u7ed3\u6784"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_67","text":"\u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002\uff08ps\uff1a\u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_68","text":"\u7b2c\u4e00\u6b65\uff1a\u5728\u6811A\u4e2d\u627e\u5230\u548c\u6811B\u7684\u6839\u7ed3\u70b9\u7684\u503c\u4e00\u6837\u7684\u7ed3\u70b9R \u7b2c\u4e8c\u6b65\uff1a\u5224\u65ad\u6811A\u4ee5R\u4e3a\u7ed3\u70b9\u7684\u5b50\u6811\u662f\u5426\u5305\u542b\u548c\u6811B\u4e00\u6837\u7684\u7ed3\u6784(\u6811A\u4e2dR\u662f\u548c\u6811B\u4e2d\u6839\u7ed3\u70b9\u5bf9\u5e94\u7684\u7ed3\u70b9)","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_69","text":"public class Solution { public boolean HasSubtree(TreeNode root1,TreeNode root2) { if(root1 == null || root2 == null){ return false; } boolean ans = false; if(root1.val == root2.val){ ans = DoesTree1HasEqualRootTree2(root1, root2); } if(!ans){ ans = HasSubtree(root1.left, root2); } if(!ans){ ans = HasSubtree(root1.right, root2); } return ans; } private boolean DoesTree1HasEqualRootTree2(TreeNode root1, TreeNode root2){ /** * \u540c\u6839\u7684\u68111\u662f\u5426\u5305\u542b\u540c\u6839\u7684\u6811\u4e8c */ if(root2 == null){ return true; } if(root1 == null){ return false; } return root1.val == root2.val && DoesTree1HasEqualRootTree2(root1.left, root2.left) && DoesTree1HasEqualRootTree2(root1.right, root2.right); } }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#1_3","text":"public class Solution { public boolean HasSubtree(TreeNode root1,TreeNode root2) { if(root1 == null || root2 == null){ return false; } return DoesTree1HasEqualRootTree2(root1, root2) || HasSubtree(root1.left, root2) || HasSubtree(root1.right, root2); } private boolean DoesTree1HasEqualRootTree2(TreeNode root1, TreeNode root2){ /** * \u540c\u6839\u7684\u68111\u662f\u5426\u5305\u542b\u540c\u6839\u7684\u6811\u4e8c */ if(root2 == null){ return true; } if(root1 == null){ return false; } return root1.val == root2.val && DoesTree1HasEqualRootTree2(root1.left, root2.left) && DoesTree1HasEqualRootTree2(root1.right, root2.right); } }","title":"\u89e3\u6cd5\u4e8c \u4fee\u65391\u4f7f\u4e4b\u6613\u4e8e\u7406\u89e3"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_70","text":"","title":"\u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_71","text":"\u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_72","text":"\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u5b9a\u4e49\uff1a\u6e90\u4e8c\u53c9\u6811 8 / \\ 6 10 / \\ / \\ 5 7 9 11 \u955c\u50cf\u4e8c\u53c9\u6811 8 / \\ 10 6 / \\ / \\ 11 9 7 5","title":"\u8f93\u5165\u63cf\u8ff0:"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_73","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_74","text":"public class Solution { public void Mirror(TreeNode root) { MirrorHelp(root); } public TreeNode MirrorHelp(TreeNode root){ if(root == null){ return null; } TreeNode left = MirrorHelp(root.right); TreeNode right = MirrorHelp(root.left); root.left = left; root.right = right; return root; } } import java.util.Stack; public class Solution { public void Mirror(TreeNode root) { if(root == null){ return; } TreeNode tmp = root.left; root.left = root.right; root.right = tmp; Mirror(root.left); Mirror(root.right); } }","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#dfs","text":"import java.util.Stack; public class Solution { public void Mirror(TreeNode root) { if(root == null){ return; } Stack<TreeNode> stack = new Stack<>(); stack.push(root); while(!stack.empty()){ TreeNode node = stack.pop(); TreeNode temp = node.left; node.left = node.right; node.right = temp; if(node.left != null){ stack.push(node.left); } if(node.right != null){ stack.push(node.right); } } } }","title":"\u89e3\u6cd5\u4e8c DFS"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_75","text":"","title":"[\u6536\u85cf]\u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_76","text":"\u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u5982\u4e0b4 X 4\u77e9\u9635\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5219\u4f9d\u6b21\u6253\u5370\u51fa\u6570\u5b571,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_77","text":"\u753b\u56fe\uff0c\u53d1\u73b0\u7ed3\u679c\u7531\u4e00\u4e2a\u4e2a\u540c\u5fc3\u5708\u7ec4\u6210 \u6d4b\u8bd5\u6848\u4f8b\uff0c\u591a\u884c\u591a\u5217 \u5355\u884c \u5355\u5217 \u5355\u884c\u5355\u5217 \u601d\u8def\uff1a\u9898\u76ee\u5206\u6210\u4e24\u4e2a\u5c0f\u95ee\u9898\uff1a \u627e\u5230\u6bcf\u4e00\u5708\u7684\u5176\u5b9e\u5750\u6807 i < (Math.min(rows, cols)+1)/2 \u627e\u5230\u5faa\u73af\u7ec8\u6b62\u6761\u4ef6","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_78","text":"import java.util.ArrayList; import java.lang.Math; public class Solution { public ArrayList<Integer> printMatrix(int [][] matrix) { if(matrix == null || matrix.length == 0){ return new ArrayList<Integer>(); } int rows = matrix.length; int cols = matrix[0].length; ArrayList<Integer> printList = new ArrayList<>(rows * cols); // (i, i)\u4ee3\u8868\u6bcf\u4e00\u5708\u7684\u8d77\u59cb\u5143\u7d20 for(int i = 0; i < (Math.min(rows, cols)+1)/2; i++){ printCircle(matrix, rows, cols, i, printList); } return printList; } private void printCircle(int[][] matrix, int rows, int cols, int start, ArrayList<Integer> list){ // \u7ec8\u6b62\u5217\u7d22\u5f15 int endX = cols - 1 - start; // \u7ec8\u6b62\u884c\u7d22\u5f15 int endY = rows - 1 - start; // \u4ece\u5de6\u5230\u53f3\u6253\u5370\u4e00\u884c for(int j = start; j <= endX; j++){ list.add(matrix[start][j]); } // \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e00\u5217 for(int j = start + 1; j <= endY; j++){ list.add(matrix[j][endX]); } // \u4ece\u53f3\u5230\u5de6\u6253\u5370\u4e00\u884c for(int j = endX - 1; (j >= start) && (start < endX && start < endY); j--){ list.add(matrix[endY][j]); } // \u4ece\u4e0b\u5230\u4e0a\u6253\u5370\u4e00\u5217 for(int j = endY - 1; (j > start) && (start < endX && start < endY - 1) ; j--){ list.add(matrix[j][start]); } } } import java.util.ArrayList; import java.lang.Math; public class Solution { public ArrayList<Integer> printMatrix(int [][] matrix) { if(matrix == null || matrix.length == 0){ return new ArrayList<Integer>(); } int rows = matrix.length; int cols = matrix[0].length; ArrayList<Integer> printList = new ArrayList<>(rows * cols); // (i, i)\u4ee3\u8868\u6bcf\u4e00\u5708\u7684\u8d77\u59cb\u5143\u7d20 for(int i = 0; i < (Math.min(rows, cols)+1)/2; i++){ printCircle(matrix, rows, cols, i, printList); } return printList; } private void printCircle(int[][] matrix, int rows, int cols, int start, ArrayList<Integer> list){ int endX = rows - start - 1; int endY = cols - start - 1; for(int i = start;i <= endY; i++){ list.add(matrix[start][i]); } for(int i = start + 1; i <= endX; i++){ list.add(matrix[i][endY]); } if (start != endX){ for(int i = endY - 1; i >= start; i--){ list.add(matrix[endX][i]); } } if (start != endY){ for(int i = endX - 1; i > start; i--){ list.add(matrix[i][start]); } } } }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#min","text":"","title":"\u5305\u542bmin\u51fd\u6570\u7684\u6808"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_79","text":"\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684min\u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO\uff081\uff09\uff09\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_80","text":"\u770b\u5230O(1)\u60f3\u5230\uff0chash\u6216\u8005\u6570\u7ec4\uff0c\u6216\u8005\u4e00\u4e00\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784(\u672c\u9898\u4e3a\u8f85\u52a9\u6808) \u5b9a\u4e49\u4e00\u4e2a\u8f85\u52a9\u6808\uff0c\u6bcf\u6b21\u628a\u4e00\u4e2a\u5143\u7d20\u63a8\u5165\u6808\uff0c\u90fd\u628a\u5f53\u524d\u65f6\u523b\u7684\u6700\u5c0f\u503c\u5b58\u5165\u8f85\u52a9\u6808","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_81","text":"import java.util.Stack; import java.lang.Math; public class Solution { private Stack<Integer> mainStack = new Stack<>(); private Stack<Integer> secondStack = new Stack<>(); public void push(int node) { mainStack.push(node); if(!secondStack.empty()){ secondStack.push(Math.min(node, secondStack.peek())); }else{ secondStack.push(node); } } public void pop() { if(mainStack.empty()){ throw new RuntimeException(\"null\"); } secondStack.pop(); mainStack.pop(); } public int top() { if(mainStack.empty()){ throw new RuntimeException(\"null\"); } return mainStack.peek(); } public int min() { if(mainStack.empty()){ throw new RuntimeException(\"null\"); } return secondStack.peek(); } }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_82","text":"","title":"\u6808\u7684\u538b\u5165\u548c\u5f39\u51fa\u5e8f\u5217"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_83","text":"\u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u52171,2,3,4,5\u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u52174,5,3,2,1\u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f464,3,5,1,2\u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_84","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#arraylist","text":"import java.util.ArrayList; public class Solution { public boolean IsPopOrder(int [] pushA,int [] popA) { ArrayList<Integer> list = new ArrayList<>(pushA.length); int j = 0; for(int i = 0; i < pushA.length; i++){ list.add(pushA[i]); // \u5224\u65ad\u7d22\u5f15\u6821\u9a8c while(j < popA.length && list.get(list.size()-1) == popA[j]){ list.remove(list.size()-1); j++; } } return j == popA.length; } }","title":"\u89e3\u6cd5\u4e00 \u7528ArrayList"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#stack_1","text":"import java.util.Stack; public class Solution { public boolean IsPopOrder(int [] pushA,int [] popA) { Stack<Integer> stack = new Stack<>(); int j = 0; for(int i = 0; i < pushA.length; i++){ stack.push(pushA[i]); // \u5224\u65ad\u7d22\u5f15\u6821\u9a8c while(j < popA.length && stack.peek() == popA[j]){ stack.pop(); j++; } } return stack.empty(); } }","title":"\u89e3\u6cd5\u4e8c \u7528Stack \u63a8\u8350"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_85","text":"","title":"\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_86","text":"\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_87","text":"BFS","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#bfs","text":"import java.util.ArrayList; import java.util.ArrayDeque; /** public class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } */ public class Solution { public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) { // BFS if(root == null){ return new ArrayList<Integer>(); } ArrayList<Integer> list = new ArrayList<>(); ArrayDeque<TreeNode> queue = new ArrayDeque(); queue.offer(root); TreeNode node = null; while(!queue.isEmpty()){ node = queue.poll(); list.add(node.val); if(node.left != null){ queue.offer(node.left); } if(node.right != null){ queue.offer(node.right); } } return list; } }","title":"\u89e3\u6cd5\u4e00 BFS"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_88","text":"","title":"[\u6536\u85cf]\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_89","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51faYes,\u5426\u5219\u8f93\u51faNo\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_90","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_91","text":"\u5df2\u77e5\u6761\u4ef6 \uff1a \u540e\u5e8f\u5e8f\u5217\u6700\u540e\u4e00\u4e2a\u503c\u4e3aroot\uff1b\u4e8c\u53c9\u641c\u7d22\u6811\u5de6\u5b50\u6811\u503c\u90fd\u6bd4root\u5c0f\uff0c\u53f3\u5b50\u6811\u503c\u90fd\u6bd4root\u5927\u3002 1\u3001\u786e\u5b9aroot\uff1b 2\u3001\u904d\u5386\u5e8f\u5217\uff08\u9664\u53bbroot\u7ed3\u70b9\uff09\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8eroot\u7684\u4f4d\u7f6e\uff0c\u5219\u8be5\u4f4d\u7f6e\u5de6\u8fb9\u4e3a\u5de6\u5b50\u6811\uff0c\u53f3\u8fb9\u4e3a\u53f3\u5b50\u6811\uff1b 3\u3001\u904d\u5386\u53f3\u5b50\u6811\uff0c\u82e5\u53d1\u73b0\u6709\u5c0f\u4e8eroot\u7684\u503c\uff0c\u5219\u76f4\u63a5\u8fd4\u56defalse\uff1b 4\u3001\u5206\u522b\u5224\u65ad\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u662f\u5426\u4ecd\u662f\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u5373\u9012\u5f52\u6b65\u9aa41\u30012\u30013\uff09\u3002 import java.util.Arrays; public class Solution { public boolean VerifySquenceOfBST(int [] sequence) { // [] \u4e3a false if(sequence == null || sequence.length == 0){ return false; } return verifyHelper(sequence); } private boolean verifyHelper(int [] sequence){ if(sequence.length == 0){ return true; } int root = sequence[sequence.length-1]; int left = 0; // \u627e\u5230\u6bd4root\u5c0f\u7684\u5143\u7d20 while(left < sequence.length - 1 && sequence[left] < root){ left++; } // \u5224\u65adright\u505a\u9762\u90fd\u5c0f\u4e8eroot\uff0c\u53f3\u9762\u90fd\u5927\u4e8eroot int right = left; while(right < sequence.length - 1){ if(sequence[right] < root){ return false; } right++; } // \u9012\u5f52\u5224\u65ad\u5b50\u6811\u662f\u5426\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386 return verifyHelper(Arrays.copyOfRange(sequence, 0, left)) && verifyHelper(Arrays.copyOfRange(sequence, left, right)); } }","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_92","text":"//\u975e\u9012\u5f52 //\u975e\u9012\u5f52\u4e5f\u662f\u4e00\u4e2a\u57fa\u4e8e\u9012\u5f52\u7684\u601d\u60f3\uff1a //\u5de6\u5b50\u6811\u4e00\u5b9a\u6bd4\u53f3\u5b50\u6811\u5c0f\uff0c\u56e0\u6b64\u53bb\u6389\u6839\u540e\uff0c\u6570\u5b57\u5206\u4e3aleft\uff0cright\u4e24\u90e8\u5206\uff0cright\u90e8\u5206\u7684 //\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u53f3\u5b50\u6811\u7684\u6839\u4ed6\u4e5f\u6bd4\u5de6\u5b50\u6811\u6240\u6709\u503c\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u53ea\u770b\u6709\u5b50\u6811\u662f\u5426\u7b26\u5408\u6761\u4ef6 //\u5373\u53ef\uff0c\u5373\u4f7f\u5230\u8fbe\u4e86\u5de6\u5b50\u6811\u5de6\u5b50\u6811\u4e5f\u53ef\u4ee5\u770b\u51fa\u7531\u5de6\u53f3\u5b50\u6811\u7ec4\u6210\u7684\u6811\u8fd8\u60f3\u53f3\u5b50\u6811\u90a3\u6837\u5904\u7406 //\u5bf9\u4e8e\u5de6\u5b50\u6811\u56de\u5230\u4e86\u539f\u95ee\u9898\uff0c\u5bf9\u4e8e\u53f3\u5b50\u6811\uff0c\u5de6\u5b50\u6811\u7684\u6240\u6709\u503c\u90fd\u6bd4\u53f3\u5b50\u6811\u7684\u6839\u5c0f\u53ef\u4ee5\u6682\u65f6\u628a\u4ed6\u770b\u51fa\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811 //\u53ea\u9700\u770b\u770b\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u662f\u5426\u7b26\u5408\u8981\u6c42\u5373\u53ef class Solution { public: bool VerifySquenceOfBST(vector<int> sequence) { int size = sequence.size(); if(0==size)return false; int i = 0; while(--size) { while(sequence[i++]<sequence[size]); while(sequence[i++]>sequence[size]); if(i<size)return false; i=0; } return true; }","title":"\u89e3\u6cd5\u4e8c \u975e\u9012\u5f52 \u63a8\u8350 \u540e\u5e8f\u904d\u5386\u7684\u89c4\u5f8b"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_93","text":"","title":"\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_94","text":"\u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002(\u6ce8\u610f: \u5728\u8fd4\u56de\u503c\u7684list\u4e2d\uff0c\u6570\u7ec4\u957f\u5ea6\u5927\u7684\u6570\u7ec4\u9760\u524d)","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_95","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_96","text":"public class Solution { public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) { if(root == null){ return new ArrayList<ArrayList<Integer>>(); } ArrayList<ArrayList<Integer>> result = new ArrayList<>(); ArrayList<Integer> item = new ArrayList<>(); dfsHelper(item, result, root, target); return result; } private void dfsHelper(ArrayList<Integer> item, ArrayList<ArrayList<Integer>> result, TreeNode root, int target){ item.add(root.val); if(target == root.val && root.left == null && root.right == null){ result.add(item); return; } if(root.left != null){ dfsHelper(new ArrayList<Integer>(item), result, root.left, target - root.val); } if(root.right != null){ dfsHelper(new ArrayList<Integer>(item), result, root.right, target - root.val); } } } public class Solution { private ArrayList<ArrayList<Integer>> listAll = new ArrayList<ArrayList<Integer>>(); private ArrayList<Integer> list = new ArrayList<Integer>(); public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) { if(root == null) return listAll; list.add(root.val); target -= root.val; if(target == 0 && root.left == null && root.right == null) listAll.add(new ArrayList<Integer>(list)); FindPath(root.left, target); FindPath(root.right, target); list.remove(list.size()-1); return listAll; } }","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_97","text":"//\u975e\u9012\u5f52\u7248\u672c //\u601d\u8def\uff1a 1.\u6309\u5148\u5e8f\u904d\u5386\u628a\u5f53\u524d\u8282\u70b9cur\u7684\u5de6\u5b69\u5b50\u4f9d\u6b21\u5165\u6808\u540c\u65f6\u4fdd\u5b58\u5f53\u524d\u8282\u70b9\uff0c\u6bcf\u6b21\u66f4\u65b0\u5f53\u524d\u8def\u5f84\u7684\u548csum\uff1b 2.\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u662f\u53f6\u5b50\u8282\u70b9\u4ee5\u53casum\u662f\u5426\u7b49\u4e8eexpectNumber\uff0c\u5982\u679c\u662f\uff0c\u628a\u5f53\u524d\u8def\u5f84\u653e\u5165\u7ed3\u679c\u4e2d\u3002 3.\u9047\u5230\u53f6\u5b50\u8282\u70b9cur\u66f4\u65b0\u4e3aNULL\uff0c\u6b64\u65f6\u770b\u6808\u9876\u5143\u7d20\uff0c\u5982\u679c\u6808\u9876\u5143\u7d20\u7684\u628a\u6808\u9876\u5143\u7d20\u4fdd\u5b58\u5728last\u53d8\u91cf\u4e2d\uff0c\u540c\u65f6\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5f53\u671f\u8def\u5f84\u4e2d\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0csum\u51cf\u6389\u6808\u9876\u5143\u7d20\uff0c\u8fd9\u4e00\u6b65\u9aa4\u4e0d\u66f4\u6539cur\u7684\u503c\uff1b 4.\u5982\u679c\u6b65\u9aa43\u4e2d\u7684\u6808\u9876\u5143\u7d20\u7684\u53f3\u5b69\u5b50\u5b58\u5728\u4e14\u53f3\u5b69\u5b50\u4e4b\u524d\u6ca1\u6709\u904d\u5386\u8fc7\uff0c\u5f53\u524d\u8282\u70b9cur\u66f4\u65b0\u4e3a\u6808\u9876\u7684\u53f3\u5b69\u5b50\uff0c\u6b64\u65f6\u6539\u53d8cur=NULL\u7684\u60c5\u51b5\u3002 #include <iostream> #include <vector> using namespace std; struct TreeNode{ int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL){} } vector<vector<int> > FindPath(TreeNode *root, int expectNumber){ vector<vector<int> > res; if (root == NULL) return res; stack<TreeNode *> s; s.push(root); int sum = 0; //\u5f53\u524d\u548c vector<int> curPath; //\u5f53\u524d\u8def\u5f84 TreeNode *cur = root; //\u5f53\u524d\u8282\u70b9 TreeNode *last = NULL; //\u4fdd\u5b58\u4e0a\u4e00\u4e2a\u8282\u70b9 while (!s.empty()){ if (cur == NULL){ TreeNode *temp = s.top(); if (temp->right != NULL && temp->right != last){ cur = temp->right; //\u8f6c\u5411\u672a\u904d\u5386\u8fc7\u7684\u53f3\u5b50\u6811 }else{ last = temp; //\u4fdd\u5b58\u4e0a\u4e00\u4e2a\u5df2\u904d\u5386\u7684\u8282\u70b9 s.pop(); curPath.pop_back(); //\u4ece\u5f53\u524d\u8def\u5f84\u5220\u9664 sum -= temp->val; } } else{ s.push(cur); sum += cur->val; curPath.push_back(cur->val); if (cur->left == NULL && cur->right == NULL && sum == expectNum){ res.push_back(curPath); } cur = cur->left; //\u5148\u5e8f\u904d\u5386\uff0c\u5de6\u5b50\u6811\u5148\u4e8e\u53f3\u5b50\u6811 } } return res; }","title":"\u89e3\u6cd5\u4e8c \u975e\u9012\u5f52\u7248\u672c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_98","text":"","title":"\u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_99","text":"\u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002\uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_100","text":"Hash","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#map","text":"// \u6784\u5efa \u65e7\u7ed3\u70b9 -> \u65e7\u7ed3\u70b9\u7d22\u5f15 map // \u6784\u5efa \u65b0\u7ed3\u70b9\u7d22\u5f15 -> \u65b0\u7ed3\u70b9 map /* public class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } */ import java.util.HashMap; public class Solution { public RandomListNode Clone(RandomListNode pHead) { RandomListNode cur = pHead, newHead = null, newCur = null; HashMap<RandomListNode, Integer> nodeMap = new HashMap<>(); HashMap<Integer, RandomListNode> intMap = new HashMap<>(); // \u6784\u5efa \u65e7\u7ed3\u70b9 -> \u65e7\u7ed3\u70b9\u7d22\u5f15 map // \u6784\u5efa \u65b0\u7ed3\u70b9\u7d22\u5f15 -> \u65b0\u7ed3\u70b9 map int i = 0; while(cur != null){ if(newHead == null){ newCur = new RandomListNode(cur.label); newHead = newCur; }else{ newCur.next = new RandomListNode(cur.label); newCur = newCur.next; } intMap.put(i, newCur); nodeMap.put(cur, i); cur = cur.next; i++; } // \u6784\u5efa\u968f\u673a\u7ed3\u70b9 cur = pHead; newCur = newHead; while(cur != null){ newCur.random = intMap.get(nodeMap.get(cur.random)); cur = cur.next; newCur = newCur.next; } return newHead; } }","title":"\u89e3\u6cd5\u4e00 \u4e24\u4e2aMap"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#map_1","text":"// \u65e7\u7ed3\u70b9 -> \u65b0\u7ed3\u70b9 map /* public class RandomListNode { int label; RandomListNode next = null; RandomListNode random = null; RandomListNode(int label) { this.label = label; } } */ import java.util.HashMap; public class Solution { public RandomListNode Clone(RandomListNode pHead) { RandomListNode cur = pHead, newHead = null, newCur = null; HashMap<RandomListNode, RandomListNode> nodeMap = new HashMap<>(); // \u6784\u5efa \u65e7\u7ed3\u70b9 -> \u65b0\u7ed3\u70b9 map while(cur != null){ if(newHead == null){ newCur = new RandomListNode(cur.label); newHead = newCur; }else{ newCur.next = new RandomListNode(cur.label); newCur = newCur.next; } nodeMap.put(cur, newCur); cur = cur.next; } // \u6784\u5efa\u968f\u673a\u7ed3\u70b9 cur = pHead; newCur = newHead; while(cur != null){ newCur.random = nodeMap.get(cur.random); cur = cur.next; newCur = newCur.next; } return newHead; } } \u89e3\u6cd5\u4e09 \u5251\u6307 offer /* *\u89e3\u9898\u601d\u8def\uff1a *1\u3001\u904d\u5386\u94fe\u8868\uff0c\u590d\u5236\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5982\u590d\u5236\u7ed3\u70b9A\u5f97\u5230A1\uff0c\u5c06\u7ed3\u70b9A1\u63d2\u5230\u7ed3\u70b9A\u540e\u9762\uff1b *2\u3001\u91cd\u65b0\u904d\u5386\u94fe\u8868\uff0c\u590d\u5236\u8001\u7ed3\u70b9\u7684\u968f\u673a\u6307\u9488\u7ed9\u65b0\u7ed3\u70b9\uff0c\u5982A1.random = A.random.next; *3\u3001\u62c6\u5206\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u62c6\u5206\u4e3a\u539f\u94fe\u8868\u548c\u590d\u5236\u540e\u7684\u94fe\u8868 */ public class Solution { public RandomListNode Clone(RandomListNode pHead) { if(pHead == null) { return null; } RandomListNode currentNode = pHead; //1\u3001\u590d\u5236\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5982\u590d\u5236\u7ed3\u70b9A\u5f97\u5230A1\uff0c\u5c06\u7ed3\u70b9A1\u63d2\u5230\u7ed3\u70b9A\u540e\u9762\uff1b while(currentNode != null){ RandomListNode cloneNode = new RandomListNode(currentNode.label); RandomListNode nextNode = currentNode.next; currentNode.next = cloneNode; cloneNode.next = nextNode; currentNode = nextNode; } currentNode = pHead; //2\u3001\u91cd\u65b0\u904d\u5386\u94fe\u8868\uff0c\u590d\u5236\u8001\u7ed3\u70b9\u7684\u968f\u673a\u6307\u9488\u7ed9\u65b0\u7ed3\u70b9\uff0c\u5982A1.random = A.random.next; while(currentNode != null) { currentNode.next.random = currentNode.random==null?null:currentNode.random.next; currentNode = currentNode.next.next; } //3\u3001\u62c6\u5206\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u62c6\u5206\u4e3a\u539f\u94fe\u8868\u548c\u590d\u5236\u540e\u7684\u94fe\u8868 currentNode = pHead; RandomListNode pCloneHead = pHead.next; while(currentNode != null) { RandomListNode cloneNode = currentNode.next; currentNode.next = cloneNode.next; cloneNode.next = cloneNode.next==null?null:cloneNode.next.next; currentNode = currentNode.next; } return pCloneHead; } } class Solution { public: /* 1\u3001\u590d\u5236\u6bcf\u4e2a\u8282\u70b9\uff0c\u5982\uff1a\u590d\u5236\u8282\u70b9A\u5f97\u5230A1\uff0c\u5c06A1\u63d2\u5165\u8282\u70b9A\u540e\u9762 2\u3001\u904d\u5386\u94fe\u8868\uff0cA1->random = A->random->next; 3\u3001\u5c06\u94fe\u8868\u62c6\u5206\u6210\u539f\u94fe\u8868\u548c\u590d\u5236\u540e\u7684\u94fe\u8868 */ RandomListNode* Clone(RandomListNode* pHead) { if(!pHead) return NULL; RandomListNode *currNode = pHead; while(currNode){ RandomListNode *node = new RandomListNode(currNode->label); node->next = currNode->next; currNode->next = node; currNode = node->next; } currNode = pHead; while(currNode){ RandomListNode *node = currNode->next; if(currNode->random){ node->random = currNode->random->next; } currNode = node->next; } //\u62c6\u5206 RandomListNode *pCloneHead = pHead->next; RandomListNode *tmp; currNode = pHead; while(currNode->next){ tmp = currNode->next; currNode->next =tmp->next; currNode = tmp; } return pCloneHead; } };","title":"\u89e3\u6cd5\u4e8c \u4e00\u4e2amap"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_101","text":"","title":"\u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_102","text":"\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_103","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_104","text":"/** public class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } */ import java.util.ArrayList; import java.util.Stack; public class Solution { public TreeNode Convert(TreeNode pRootOfTree) { if(pRootOfTree == null){ return null; } ArrayList<TreeNode> nodes = new ArrayList<>(); Stack<TreeNode> stack = new Stack<>(); // \u4e2d\u5e8f\u904d\u5386 TreeNode node = pRootOfTree, nHead = pRootOfTree; while(node != null || !stack.empty()){ if(node != null){ stack.push(node); node = node.left; }else{ node = stack.pop(); nodes.add(node); node = node.right; } } // \u6b63\u5411\u8fde\u63a5 nHead = null; for(int i = 0; i < nodes.size(); i++){ if(i == 0){ node = nodes.get(i); nHead = node; }else{ node.right = nodes.get(i); node = node.right; } } node.right = null; // \u53cd\u5411\u8fde\u63a5 for(int i = nodes.size() - 1; i >= 0 ; i--){ if(i == (nodes.size() - 1)){ node = nodes.get(i); }else{ node.left = nodes.get(i); node = node.left; } } node.left = null; return nHead; } }","title":"\u89e3\u6cd5\u4e00 \u524d\u5e8f\u904d\u5386 \u975e\u9012\u5f52"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_105","text":"import java.util.Stack; public class Solution { public TreeNode Convert(TreeNode pRootOfTree) { if(pRootOfTree == null){ return null; } Stack<TreeNode> stack = new Stack<>(); // \u4e2d\u5e8f\u904d\u5386 TreeNode node = pRootOfTree, nHead = null, cur = null; while(node != null || !stack.empty()){ if(node != null){ stack.push(node); node = node.left; }else{ node = stack.pop(); // --- \u4fee\u6539\u6307\u9488 -- if(nHead == null){ cur = node; nHead = cur; }else{ cur.right = node; cur.right.left = cur; cur = cur.right; } // --- \u4fee\u6539\u6307\u9488 -- node = node.right; } } return nHead; } }","title":"\u89e3\u6cd5\u4e8c \u524d\u5e8f\u904d\u5386 \u975e\u9012\u5f52 \u63a8\u8350"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_106","text":"\u89e3\u9898\u601d\u8def\uff1a 1.\u5c06\u5de6\u5b50\u6811\u6784\u9020\u6210\u53cc\u94fe\u8868\uff0c\u5e76\u8fd4\u56de\u94fe\u8868\u5934\u8282\u70b9\u3002 2.\u5b9a\u4f4d\u81f3\u5de6\u5b50\u6811\u53cc\u94fe\u8868\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u3002 3.\u5982\u679c\u5de6\u5b50\u6811\u94fe\u8868\u4e0d\u4e3a\u7a7a\u7684\u8bdd\uff0c\u5c06\u5f53\u524droot\u8ffd\u52a0\u5230\u5de6\u5b50\u6811\u94fe\u8868\u3002 4.\u5c06\u53f3\u5b50\u6811\u6784\u9020\u6210\u53cc\u94fe\u8868\uff0c\u5e76\u8fd4\u56de\u94fe\u8868\u5934\u8282\u70b9\u3002 5.\u5982\u679c\u53f3\u5b50\u6811\u94fe\u8868\u4e0d\u4e3a\u7a7a\u7684\u8bdd\uff0c\u5c06\u8be5\u94fe\u8868\u8ffd\u52a0\u5230root\u8282\u70b9\u4e4b\u540e\u3002 6.\u6839\u636e\u5de6\u5b50\u6811\u94fe\u8868\u662f\u5426\u4e3a\u7a7a\u786e\u5b9a\u8fd4\u56de\u7684\u8282\u70b9\u3002 public class Solution { public TreeNode Convert(TreeNode pRootOfTree) { if(pRootOfTree == null){ return null; } if(pRootOfTree.left == null && pRootOfTree.right == null){ return pRootOfTree; } TreeNode leftLink = Convert(pRootOfTree.left); TreeNode rightLink = Convert(pRootOfTree.right); TreeNode nHead = leftLink, cur = leftLink; if(leftLink != null){ while(cur.right != null){ cur = cur.right; } cur.right = pRootOfTree; cur.right.left = cur; }else{ nHead = pRootOfTree; } if(rightLink != null){ pRootOfTree.right = rightLink; pRootOfTree.right.left = pRootOfTree; } return nHead; } }","title":"\u89e3\u6cd5\u4e09 \u9012\u5f52"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_107","text":"class Solution { public: TreeNode* Convert(TreeNode* pRootOfTree) { if(pRootOfTree == nullptr) return nullptr; TreeNode* pre = nullptr; convertHelper(pRootOfTree, pre); TreeNode* res = pRootOfTree; while(res ->left) res = res ->left; return res; } void convertHelper(TreeNode* cur, TreeNode*& pre) { if(cur == nullptr) return; convertHelper(cur ->left, pre); cur ->left = pre; if(pre) pre ->right = cur; pre = cur; convertHelper(cur ->right, pre); } }; //\u9012\u5f52\u8c03\u7528 \u5de6 \u6839 \u53f3 \u904d\u5386 public class Solution { //\u53cc\u5411\u94fe\u8868\u7684\u5de6\u8fb9\u5934\u7ed3\u70b9\u548c\u53f3\u8fb9\u5934\u8282\u70b9 TreeNode leftHead = null; TreeNode rightHead = null; public TreeNode Convert(TreeNode pRootOfTree) { //\u9012\u5f52\u8c03\u7528\u53f6\u5b50\u8282\u70b9\u7684\u5de6\u53f3\u8282\u70b9\u8fd4\u56denull if(pRootOfTree==null) return null; //\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\uff0c\u5b83\u4f1a\u4f7f\u6700\u5de6\u8fb9\u53f6\u5b50\u8282\u70b9\u4e3a\u94fe\u8868\u7b2c\u4e00\u4e2a\u8282\u70b9 Convert(pRootOfTree.left); if(rightHead==null){ leftHead= rightHead = pRootOfTree; }else{ //\u628a\u6839\u8282\u70b9\u63d2\u5165\u5230\u53cc\u5411\u94fe\u8868\u53f3\u8fb9\uff0crightHead\u5411\u540e\u79fb\u52a8 rightHead.right = pRootOfTree; pRootOfTree.left = rightHead; rightHead = pRootOfTree; } //\u628a\u53f3\u53f6\u5b50\u8282\u70b9\u4e5f\u63d2\u5165\u5230\u53cc\u5411\u94fe\u8868\uff08rightHead\u5df2\u786e\u5b9a\uff0c\u76f4\u63a5\u63d2\u5165\uff09 Convert(pRootOfTree.right); //\u8fd4\u56de\u5de6\u8fb9\u5934\u7ed3\u70b9 return leftHead; } }","title":"\u65b9\u6cd5\u56db \u4e2d\u5e8f\u904d\u5386 \u9012\u5f52\u7248"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_108","text":"","title":"\u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_109","text":"\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc,\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a,b,c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc,acb,bac,bca,cab\u548ccba\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_110","text":"\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u957f\u5ea6\u4e0d\u8d85\u8fc79(\u53ef\u80fd\u6709\u5b57\u7b26\u91cd\u590d),\u5b57\u7b26\u53ea\u5305\u62ec\u5927\u5c0f\u5199\u5b57\u6bcd\u3002","title":"\u8f93\u5165\u63cf\u8ff0:"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_111","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_112","text":"\u7b2c\u4e00\u6b65\uff1a\u4ea4\u6362\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u540e\u9762\u6240\u6709\u5b57\u7b26\u4ea4\u6362 \u7b2c\u4e8c\u6b65\uff1a\u56fa\u5b9a\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u9012\u5f52\u5f97\u5230\u540e\u9762\u5143\u7d20\u7684\u6240\u6709\u6392\u5217 import java.util.ArrayList; import java.util.HashSet; import java.util.Arrays; public class Solution { public ArrayList<String> Permutation(String str) { if(str == null || \"\".equals(str)){ return new ArrayList<String>(); } char[] array = str.toCharArray(); // \u5b57\u5178\u5e8f\u8f93\u51fa Arrays.sort(array); return helper(array); } private ArrayList<String> helper(char[] array){ ArrayList<String> result = new ArrayList<String>(); // \u8fd9\u4e2a\u662f\u4e3a\u4ec0\u4e48\u4e0d\u5199\u5728\u4e3b\u51fd\u6570\u7684\u539f\u56e0\uff0c\u5982\u679c\u4e3b\u51fd\u6570\u662f\"\"\uff0c \u90a3\u4e48\u8fd4\u56de\u7684\u4e0d\u662f\"\", \u800c\u662f\u4e0d\u8fd4\u56de if(\"\".equals(new String(array))){ result.add(\"\"); }else{ ArrayList<String> ans = null; HashSet<Character> set = new HashSet(); for(int i = 0; i < array.length; i++){ // \u9632\u6b62\u76f8\u540c\u5143\u7d20\u548c\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362 if(set.contains(array[i])){ continue; } set.add(array[i]); // \u4ea4\u6362\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u540e\u9762\u7684\u5b57\u7b26 char temp = array[0]; array[0] = array[i]; array[i] = temp; ans = helper(Arrays.copyOfRange(array, 1, array.length)); // \u7ed3\u679c\u52a0\u5165 for(String s: ans){ result.add(array[0] + s); } } } return result; } }","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_113","text":"import java.util.List; import java.util.Collections; import java.util.ArrayList; public class Solution { public ArrayList<String> Permutation(String str) { List<String> res = new ArrayList<>(); if (str != null && str.length() > 0) { PermutationHelper(str.toCharArray(), 0, res); // \u5bf9\u7ed3\u679c\u505a\u4e00\u6b21\u6392\u5e8f Collections.sort(res); } return (ArrayList)res; } public void PermutationHelper(char[] cs, int i, List<String> list) { if (i == cs.length - 1) { String val = String.valueOf(cs); // \u9632\u6b62\u5b57\u7b26\u4e32\u6709\u91cd\u590d\u5b57\u7b26\u5bfc\u81f4\u7684\u7ed3\u679c\u6709\u91cd\u5408 if (!list.contains(val)) list.add(val); } else { for (int j = i; j < cs.length; j++) { swap(cs, i, j); PermutationHelper(cs, i+1, list); swap(cs, i, j); } } } public void swap(char[] cs, int i, int j) { char temp = cs[i]; cs[i] = cs[j]; cs[j] = temp; } }","title":"\u89e3\u6cd5\u4e8c \u56de\u6eaf"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_114","text":"","title":"\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_115","text":"\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a9\u7684\u6570\u7ec4{1,2,3,2,2,2,5,4,2}\u3002\u7531\u4e8e\u6570\u5b572\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e865\u6b21\uff0c\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u8f93\u51fa2\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8f93\u51fa0\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_116","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#hash","text":"import java.util.HashMap; public class Solution { public int MoreThanHalfNum_Solution(int [] array) { if(array == null || array.length == 0){ return 0; } if(array.length == 1){ return array[0]; } HashMap<Integer, Integer> map = new HashMap<>(); for(int i = 0; i < array.length; i++){ if(map.containsKey(array[i])){ if(map.get(array[i]) + 1 > array.length / 2){ return array[i]; } map.put(array[i], map.get(array[i]) + 1); }else{ map.put(array[i], 1); } } return 0; } }","title":"\u89e3\u6cd5\u4e00  Hash"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#patition","text":"\u6211\u4eec\u56de\u5230\u9898\u76ee\u672c\u8eab\u5206\u6790\uff0c\u5c31\u4f1a\u53d1\u73b0\u524d\u9762\u7684\u601d\u8def\u5e76\u6ca1\u6709\u8003\u8651\u5230 \u6570\u7ec4\u7684\u7279\u6027 \uff1a\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u4e86\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\u3002\u5982\u679c\u6211\u628a\u8fd9\u4e2a\u6570\u7ec4\u6392\u5e8f\uff0c\u90a3\u4e48\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u6570\u7ec4\u4e2d\u95f4\u7684\u6570\u5b57\u4e00\u5b9a\u5c31\u662f\u90a3\u4e2a\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u4e00\u534a\u7684\u6570\u5b57\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u6570\u5b57\u5c31\u662f\u7edf\u8ba1\u5b66\u4e0a\u7684\u4e2d\u4f4d\u6570\uff0c\u5373\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u4e2d\u7b2cn/2\u7684\u6570\u5b57\u3002 \u6211\u4eec\u6709\u6210\u719f\u7684O(n)\u7684\u7b97\u6cd5\u5f97\u5230\u6570\u7ec4\u4e2d\u4efb\u610f\u7b2cK\u5927\u7684\u6570\u5b57 \u3002 \u200b \u8fd9\u79cd\u7b97\u6cd5\u662f\u53d7\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u7684\u542f\u53d1\u3002\u5728\u968f\u673a\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u73b0\u5728\u6570\u7ec4\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u8c03\u6574\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6bd4\u9009\u4e2d\u7684\u6570\u5b57\u5c0f\u7684\u6570\u5b57\u90fd\u6392\u5728\u5b83\u7684\u5de6\u8fb9\uff0c\u6bd4\u9009\u4e2d\u7684\u6570\u5b57\u5927\u7684\u6570\u5b57\u90fd\u6392\u5728\u5b83\u7684\u53f3\u8fb9\u3002\u5982\u679c\u8fd9\u4e2a\u9009\u4e2d\u7684\u6570\u5b57\u7684\u4e0b\u6807\u521a\u597d\u662fn/2\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u5b57\u5c31\u662f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002\u5982\u679c\u5b83\u7684\u4e0b\u6807\u5927\u4e8en/2\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5e94\u8be5\u4f4d\u4e8e\u5b83\u7684\u5de6\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u7740\u5728\u5b83\u7684\u5de6\u8fb9\u90e8\u5206\u7684\u6570\u7ec4\u4e2d\u67e5\u627e\u3002\u5982\u679c\u5b83\u7684\u4e0b\u6807\u5c0f\u4e8en/2\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5e94\u8be5\u4f4d\u4e8e\u5b83\u7684\u53f3\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u7740\u5728\u5b83\u7684\u53f3\u8fb9\u90e8\u5206\u7684\u6570\u7ec4\u4e2d\u67e5\u627e\u3002\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u9012\u5f52\u8fc7\u7a0b\uff0c\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a import java.util.Random; public class Solution { public int MoreThanHalfNum_Solution(int [] array) { if(array == null || array.length == 0){ return 0; } int mid = array.length >> 1; int start = 0; int end = array.length - 1; int index = random_partition(array, 0, array.length-1); while(index != mid){ if(index >mid){ end = index - 1; index = random_partition(array, start, end); }else{ start = index + 1; index = random_partition(array, start, end); } } int ans = array[mid]; // \u5224\u65ad\u8be5\u5143\u7d20\u6b21\u6570\u662f\u5426\u8d85\u8fc7\u4e00\u534a int cnt = 0; for(int num: array){ if(num == ans){ cnt++; if(cnt > mid){ return num; } } } return 0; } private int random_partition(int[] array, int start, int end){ // random Random rand = new Random(); int index = rand.nextInt(end + 1); exchange(array, index, end); int i = start - 1; for(int j = start; j < end; j++){ if(array[j] < array[end]){ exchange(array, ++i, j); } } exchange(array, ++i, end); return i; } private void exchange(int[] array, int first, int second){ int temp = array[first]; array[first] = array[second]; array[second] = temp; } }","title":"\u89e3\u6cd5\u4e8c Patition"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#boyer-moore-voting-algorithm","text":"\u627e\u51fa\u4e00\u7ec4\u6570\u5b57\u5e8f\u5217\u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u603b\u65701/2\u7684\u6570\u5b57\uff08\u5e76\u4e14\u5047\u8bbe\u8fd9\u4e2a\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\uff09\u3002\u663e\u7136\u8fd9\u4e2a\u6570\u5b57\u53ea\u53ef\u80fd\u6709\u4e00\u4e2a\u3002 \u6469\u5c14\u6295\u7968\u7b97\u6cd5\u662f\u57fa\u4e8e\u8fd9\u4e2a\u4e8b\u5b9e\uff1a\u6bcf\u6b21\u4ece\u5e8f\u5217\u91cc\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u540c\u7684\u6570\u5b57\u5220\u9664\u6389\uff08\u6216\u79f0\u4e3a\u201c\u62b5\u6d88\u201d\uff09\uff0c\u6700\u540e\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\u6216\u51e0\u4e2a\u76f8\u540c\u7684\u6570\u5b57\uff0c\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u603b\u6570\u4e00\u534a\u7684\u90a3\u4e2a \u3002\u8bf7\u9996\u5148\u8ba4\u540c\u8fd9\u4e2a\u4e8b\u5b9e\uff0c\u8fd9\u91cc\u4e0d\u8bc1\u660e\u4e86~ import java.util.Random; public class Solution { public int MoreThanHalfNum_Solution(int [] array) { if(array == null || array.length == 0){ return 0; } int temp = array[0]; int count = 0; for(int num: array){ if(count == 0){ temp = num; count = 1; }else if(num == temp){ count++; }else{ count--; } } // \u5224\u65ad\u8be5\u5143\u7d20\u6b21\u6570\u662f\u5426\u8d85\u8fc7\u4e00\u534a count = 0; for(int num: array){ if(num == temp){ count++; if(count > array.length/2){ return num; } } } return 0; } }","title":"\u89e3\u6cd5\u4e09 Boyer-Moore Voting Algorithm(\u6469\u5c14\u6295\u7968\u6cd5) + \u6821\u9a8c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#k_1","text":"","title":"\u6700\u5c0f\u7684K\u4e2a\u6570"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_117","text":"\u8f93\u5165n\u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684K\u4e2a\u6570\u3002\u4f8b\u5982\u8f93\u51654,5,1,6,2,7,3,8\u8fd98\u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u76844\u4e2a\u6570\u5b57\u662f1,2,3,4,\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_118","text":"Bruce O(n**2)","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#partition-on","text":"\u9650\u5236\uff1a\u4fee\u6539\u539f\u6570\u7ec4 import java.util.Random; import java.util.ArrayList; public class Solution { public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) { if(input == null || input.length == 0 || k > input.length){ return new ArrayList<Integer>(); } // \u627e\u5230\u7b2ck\u4e2a\u503c\uff0c\u4e14\u4f7f\u524dk\u4e2a\u503c\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u7b2ck\u4e2a\u503c int start = 0, end = input.length - 1; int index = random_partition(input, start, end); while(index != k - 1){ if(index > k - 1){ end = index - 1; index = random_partition(input, start, end); }else{ start = index + 1; index = random_partition(input, start, end); } } // \u8f93\u51fa\u524dk\u4e2a\u503c ArrayList<Integer> result = new ArrayList<>(); for (int i = 0; i < k; i++) { result.add(input[i]); } return result; } private int random_partition(int[] array, int start, int end){ // random Random rand = new Random(); int index = rand.nextInt(end + 1); exchange(array, index, end); int i = start - 1; for(int j = start; j < end; j++){ if(array[j] < array[end]){ exchange(array, ++i, j); } } exchange(array, ++i, end); return i; } private void exchange(int[] array, int first, int second){ int temp = array[first]; array[first] = array[second]; array[second] = temp; } }","title":"\u89e3\u6cd5\u4e00 partition O(n)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#onlogk","text":"import java.util.ArrayList; import java.util.PriorityQueue; public class Solution { public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) { if(input == null || input.length == 0 || k > input.length || k == 0){ return new ArrayList<>(); } // \u9ed8\u8ba4\u5c0f\u9876\u5806\uff0c \u60f3\u8981\u5927\u9876\u5806\u628a\u503c\u53d8\u8d1f\u6570 PriorityQueue<Integer> heap = new PriorityQueue<>(k); int [] negInput = new int[input.length]; for(int i = 0; i < input.length; i++){ negInput[i] = input[i] * -1; if(heap.size() == k){ if(negInput[i] > heap.peek()){ heap.poll(); heap.add(negInput[i]); } }else { heap.add(negInput[i]); } } ArrayList<Integer> result = new ArrayList<>(); for (int i = 0; i < k; i++) { result.add(heap.poll() * -1); } return result; } } import java.util.ArrayList; import java.util.PriorityQueue; import java.util.Comparator; public class Solution { public ArrayList<Integer> GetLeastNumbers_Solution(int[] input, int k) { ArrayList<Integer> result = new ArrayList<Integer>(); int length = input.length; if(k > length || k == 0){ return result; } PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(k, new Comparator<Integer>() { @Override public int compare(Integer o1, Integer o2) { return o2.compareTo(o1); } }); for (int i = 0; i < length; i++) { if (maxHeap.size() != k) { maxHeap.offer(input[i]); } else if (maxHeap.peek() > input[i]) { Integer temp = maxHeap.poll(); temp = null; maxHeap.offer(input[i]); } } for (Integer integer : maxHeap) { result.add(integer); } return result; } }","title":"\u89e3\u6cd5\u4e8c \u5806 O(nlogk)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_119","text":"","title":"\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_120","text":"HZ\u5076\u5c14\u4f1a\u62ff\u4e9b\u4e13\u4e1a\u95ee\u9898\u6765\u5ffd\u60a0\u90a3\u4e9b\u975e\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u540c\u5b66\u3002\u4eca\u5929\u6d4b\u8bd5\u7ec4\u5f00\u5b8c\u4f1a\u540e,\u4ed6\u53c8\u53d1\u8bdd\u4e86:\u5728\u53e4\u8001\u7684\u4e00\u7ef4\u6a21\u5f0f\u8bc6\u522b\u4e2d,\u5e38\u5e38\u9700\u8981\u8ba1\u7b97\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c,\u5f53\u5411\u91cf\u5168\u4e3a\u6b63\u6570\u7684\u65f6\u5019,\u95ee\u9898\u5f88\u597d\u89e3\u51b3\u3002\u4f46\u662f,\u5982\u679c\u5411\u91cf\u4e2d\u5305\u542b\u8d1f\u6570,\u662f\u5426\u5e94\u8be5\u5305\u542b\u67d0\u4e2a\u8d1f\u6570,\u5e76\u671f\u671b\u65c1\u8fb9\u7684\u6b63\u6570\u4f1a\u5f25\u8865\u5b83\u5462\uff1f\u4f8b\u5982:{6,-3,-2,7,-15,1,2,2},\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c\u4e3a8(\u4ece\u7b2c0\u4e2a\u5f00\u59cb,\u5230\u7b2c3\u4e2a\u4e3a\u6b62)\u3002\u7ed9\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u7684\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u7684\u548c\uff0c\u4f60\u4f1a\u4e0d\u4f1a\u88ab\u4ed6\u5ffd\u60a0\u4f4f\uff1f(\u5b50\u5411\u91cf\u7684\u957f\u5ea6\u81f3\u5c11\u662f1)","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_121","text":"\u6d4b\u8bd5\u7528\u4f8b \u8d1f\u6570 \u6700\u5927\u4e5f\u662f\u8d1f\u6570","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_122","text":"import java.lang.Math; import java.util.Arrays; public static int FindGreatestSumOfSubArray(int[] array) { if(array.length == 0){ return 0; } if (array.length == 1) { return array[0]; } int mid = (array.length - 1) / 2; int leftmax = array[mid], left = array[mid], rightmax = array[mid+1], right = array[mid+1], ans = 0; for (int i = mid - 1; i >= 0; i--) { left += array[i]; if (leftmax < left) { leftmax = left; } } for (int i = mid + 2; i < array.length; i++) { right += array[i]; if (rightmax < right) { rightmax = right; } } left = FindGreatestSumOfSubArray(Arrays.copyOfRange(array, 0, mid + 1)); right = FindGreatestSumOfSubArray(Arrays.copyOfRange(array, mid + 1, array.length)); ans = Math.max(left, right); ans = Math.max(ans, rightmax + leftmax); return ans; }","title":"\u89e3\u6cd5\u4e00 \u5206\u800c\u6cbb\u4e4b"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_123","text":"import java.lang.Math; import java.util.Arrays; public class Solution { public static int FindGreatestSumOfSubArray(int[] array) { if(array.length == 0){ return 0; } int totalMax = array[0], curMax = array[0]; for(int i = 1; i < array.length; i++){ if(curMax <= 0){ curMax = array[i]; }else{ curMax += array[i]; } totalMax = Math.max(totalMax, curMax); } return totalMax; } }","title":"\u89e3\u6cd5\u4e8c \u65f6\u95f4\u7a97\u53e3"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#dp","text":"import java.lang.Math; import java.util.Arrays; public class Solution { public int FindGreatestSumOfSubArray(int[] array) { if(array.length == 0){ return 0; } // \u4ee5\u7b2ci\u4e2a\u5143\u7d20\u4e3a\u7ed3\u5c3e\u7684\u6700\u5927\u548c int[] dp = new int[array.length]; dp[0] = array[0]; for(int i = 1; i < array.length; i++){ if(dp[i-1] > 0){ dp[i] = dp[i-1] + array[i]; }else{ dp[i] = array[i]; } } return max(dp); } private int max(int[] array){ if(array.length == 0){ return 0; } int ans = array[0]; for(int i = 1; i < array.length; i++){ if(ans < array[i]){ ans = array[i]; } } return ans; } }","title":"\u89e3\u6cd5\u4e09 dp"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#todo1","text":"","title":"[todo]\u6b63\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_124","text":"\u6c42\u51fa1~13\u7684\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570,\u5e76\u7b97\u51fa100~1300\u7684\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff1f\u4e3a\u6b64\u4ed6\u7279\u522b\u6570\u4e86\u4e00\u4e0b1~13\u4e2d\u5305\u542b1\u7684\u6570\u5b57\u67091\u300110\u300111\u300112\u300113\u56e0\u6b64\u5171\u51fa\u73b06\u6b21,\u4f46\u662f\u5bf9\u4e8e\u540e\u9762\u95ee\u9898\u4ed6\u5c31\u6ca1\u8f99\u4e86\u3002ACMer\u5e0c\u671b\u4f60\u4eec\u5e2e\u5e2e\u4ed6,\u5e76\u628a\u95ee\u9898\u66f4\u52a0\u666e\u904d\u5316,\u53ef\u4ee5\u5f88\u5feb\u7684\u6c42\u51fa\u4efb\u610f\u975e\u8d1f\u6574\u6570\u533a\u95f4\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece1 \u5230 n \u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff09\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_125","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_126","text":"","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_127","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#todo","text":"","title":"[todo]\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_128","text":"\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\u8f93\u5165\u6570\u7ec4{3\uff0c32\uff0c321}\uff0c\u5219\u6253\u5370\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57\u4e3a321323\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_129","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_130","text":"","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_131","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_132","text":"","title":"\u4e11\u6570"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_133","text":"\u628a\u53ea\u5305\u542b\u8d28\u56e0\u5b502\u30013\u548c5\u7684\u6570\u79f0\u4f5c\u4e11\u6570\uff08Ugly Number\uff09\u3002\u4f8b\u59826\u30018\u90fd\u662f\u4e11\u6570\uff0c\u4f4614\u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u8d28\u56e0\u5b507\u3002 \u4e60\u60ef\u4e0a\u6211\u4eec\u628a1\u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002\u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2cN\u4e2a\u4e11\u6570\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_134","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_135","text":"","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_136","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_137","text":"","title":"\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_138","text":"\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32(0<=\u5b57\u7b26\u4e32\u957f\u5ea6<=10000\uff0c\u5168\u90e8\u7531\u5b57\u6bcd\u7ec4\u6210)\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26,\u5e76\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e, \u5982\u679c\u6ca1\u6709\u5219\u8fd4\u56de -1\uff08\u9700\u8981\u533a\u5206\u5927\u5c0f\u5199\uff09.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_139","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#ton-son","text":"import java.util.HashMap; public class Solution { public int FirstNotRepeatingChar(String str) { if(str == null || \"\".equals(str)){ return -1; } HashMap<Character, Integer> map = new HashMap<>(); for(int i = 0; i < str.length(); i++){ if(map.containsKey(str.charAt(i))){ map.put(str.charAt(i), map.get(str.charAt(i)) + 1); }else{ map.put(str.charAt(i), 1); } } for(int i = 0; i < str.length(); i++){ if(map.get(str.charAt(i)) == 1){ return i; } } return -1; } }s","title":"\u89e3\u6cd5\u4e00 TO(n) SO(n)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_140","text":"","title":"[\u6536\u85cf]\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_141","text":"\u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4,\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570P\u3002\u5e76\u5c06P\u5bf91000000007\u53d6\u6a21\u7684\u7ed3\u679c\u8f93\u51fa\u3002 \u5373\u8f93\u51faP%1000000007","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_142","text":"\u9898\u76ee\u4fdd\u8bc1\u8f93\u5165\u7684\u6570\u7ec4\u4e2d\u6ca1\u6709\u7684\u76f8\u540c\u7684\u6570\u5b57\u6570\u636e\u8303\u56f4\uff1a \u5bf9\u4e8e%50\u7684\u6570\u636e,size<=10^4 \u5bf9\u4e8e%75\u7684\u6570\u636e,size<=10^5 \u5bf9\u4e8e%100\u7684\u6570\u636e,size<=2*10^5 \u793a\u4f8b1","title":"\u8f93\u5165\u63cf\u8ff0:"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_143","text":"\u590d\u5236 1,2,3,4,5,6,7,0","title":"\u8f93\u5165"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_144","text":"\u590d\u5236 7","title":"\u8f93\u51fa"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_145","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#divide-and-conquer","text":"","title":"\u89e3\u6cd5\u4e00 Divide and Conquer"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_146","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_147","text":"","title":"\u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_148","text":"\u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_149","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#hashset","text":"import java.util.HashSet; public class Solution { public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) { HashSet<ListNode> nodeSet = new HashSet<>(); ListNode p = pHead1; while(p != null){ nodeSet.add(p); p = p.next; } p = pHead2; while(p != null){ if(nodeSet.contains(p)){ return p; } p = p.next; } return p; } }","title":"\u89e3\u6cd5\u4e00 HashSet"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#o1","text":"\u627e\u51fa2\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u7136\u540e\u8ba9\u957f\u7684\u5148\u8d70\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\u5dee\uff0c\u7136\u540e\u518d\u4e00\u8d77\u8d70 \uff08\u56e0\u4e3a2\u4e2a\u94fe\u8868\u7528\u516c\u5171\u7684\u5c3e\u90e8\uff09 import java.util.HashSet; import java.lang.Math; public class Solution { public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) { int len1 = 0, len2 = 0; ListNode p = pHead1; while(p != null){ len1++; p = p.next; } p = pHead2; while(p != null){ len2++; p = p.next; } int diff = len1 - len2; for(int i = 0; i < Math.abs(diff); i++){ if(diff > 0){ pHead1 = pHead1.next; }else{ pHead2 = pHead2.next; } } while(pHead1 != null){ if(pHead1 == pHead2){ return pHead2; } pHead1 = pHead1.next; pHead2 = pHead2.next; } return null; } }","title":"\u89e3\u6cd5\u4e8c \u7a7a\u95f4\u590d\u6742\u5ea6O(1) \u957f\u5ea6\u5dee\u503c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_150","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u6b21\u8fed\u4ee3\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u5230\u8fbe\u5c3e\u8282\u70b9\u4e4b\u540e\u5c06\u4e00\u4e2a\u94fe\u8868\u7684\u6307\u9488\u91cd\u7f6e\u5230\u53e6\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u3002 \u5728\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u76f4\u5230\u5b83\u4eec\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\u3002\u6211\u4eec\u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\u7684\u64cd\u4f5c\u5c06\u5e2e\u52a9\u6211\u4eec\u62b5\u6d88\u5dee\u5f02\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u76f8\u4ea4\uff0c\u5219\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\u7684\u4f1a\u5408\u70b9\u5fc5\u987b\u662f\u4ea4\u70b9\u3002 \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u4e2d\u7684\u4f1a\u8bae\u6307\u9488\u5fc5\u987b\u662f\u4e24\u4e2a\u5217\u7684\u5c3e\u8282\u70b9\uff0c\u5373null public class Solution { public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) { int len1 = 0, len2 = 0; ListNode p1 = pHead1, p2 = pHead2; while(p1 != p2){ if(p1 != null){ p1 = p1.next; }else{ p1 = pHead2; } if(p2 != null){ p2 = p2.next; }else{ p2 = pHead1; } } return p1; } }","title":"\u89e3\u6cd5\u4e09 \u53cc\u6307\u9488"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_151","text":"","title":"\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u5e94\u7528"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_152","text":"\u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_153","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_154","text":"public class Solution { public int GetNumberOfK(int [] array , int k) { if(array == null || array.length == 0){ return 0; } int left = 0, right = array.length-1; int mid = 0; int index = -1, ans = 0; while(left <= right){ mid = (left + right) >> 1; if(array[mid] == k){ index = mid; ans++; break; }else if(array[mid] < k){ left = mid + 1; }else{ right = mid - 1; } } for(int i = index - 1; i >= 0; i--){ if(array[i] == k){ ans++; }else{ break; } } for(int i = index + 1; i < array.length; i++){ if(array[i] == k){ ans++; }else{ break; } } return ans; } }","title":"\u89e3\u6cd5\u4e00 \u4e8c\u5206\u6cd5+\u6269\u6563"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_155","text":"\u4e8c\u5206\u6cd5\u63d2\u5165 //\u7531\u4e8e\u6570\u7ec4\u6709\u5e8f\uff0c\u6240\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u65b9\u6cd5\u5b9a\u4f4dk\u7684\u7b2c\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u548c\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e class Solution { public: int GetNumberOfK(vector<int> data ,int k) { int lower = getLower(data,k); int upper = getUpper(data,k); return upper - lower + 1; } //\u83b7\u53d6k\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807 int getLower(vector<int> data,int k){ int start = 0,end = data.size()-1; int mid = (start + end)/2; while(start <= end){ if(data[mid] < k){ start = mid + 1; }else{ end = mid - 1; } mid = (start + end)/2; } return start; } //\u83b7\u53d6k\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807 int getUpper(vector<int> data,int k){ int start = 0,end = data.size()-1; int mid = (start + end)/2; while(start <= end){ if(data[mid] <= k){ start = mid + 1; }else{ end = mid - 1; } mid = (start + end)/2; } return end; } }; //\u56e0\u4e3adata\u4e2d\u90fd\u662f\u6574\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u7a0d\u5fae\u53d8\u4e00\u4e0b\uff0c\u4e0d\u662f\u641c\u7d22k\u7684\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u800c\u662f\u641c\u7d22k-0.5\u548ck+0.5 //\u8fd9\u4e24\u4e2a\u6570\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u76f8\u51cf\u5373\u53ef\u3002 class Solution { public: int GetNumberOfK(vector<int> data ,int k) { return biSearch(data, k+0.5) - biSearch(data, k-0.5) ; } private: int biSearch(const vector<int> & data, double num){ int s = 0, e = data.size()-1; while(s <= e){ int mid = (e - s)/2 + s; if(data[mid] < num) s = mid + 1; else if(data[mid] > num) e = mid - 1; } return s; } };","title":"\u89e3\u6cd5\u4e8c \u76f8\u540c\u6570\u5b57\u7684\u7d22\u5f15\u4e0a\u4e0b\u754c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_156","text":"","title":"\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_157","text":"\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_158","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_159","text":"public class Solution { public int TreeDepth(TreeNode root) { if(root == null){ return 0; } return Math.max(TreeDepth(root.left), TreeDepth(root.right)) + 1; } }","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#dfs_1","text":"import java.util.Stack; public class Solution { public int TreeDepth(TreeNode root) { if(root == null){ return 0; } Stack<TreeNode> stack = new Stack<>(); Stack<Integer> depthStack = new Stack<>(); stack.push(root); depthStack.push(1); TreeNode node = null; int depth = 0, ans = 0; while(!stack.empty()){ node = stack.pop(); depth = depthStack.pop(); if(node.left != null){ stack.push(node.left); depthStack.push(depth + 1); } if(node.right != null){ stack.push(node.right); depthStack.push(depth + 1); } ans = Math.max(ans, depth); } return ans; } }","title":"\u89e3\u6cd5\u4e8c dfs"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#bfs_1","text":"/** public class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } */ import java.util.ArrayDeque; public class Solution { public int TreeDepth(TreeNode root) { if(root == null){ return 0; } ArrayDeque<TreeNode> deque = new ArrayDeque<>(); deque.offer(root); int depth = 0, count = 0, nextCount = 1; while(!deque.isEmpty()){ TreeNode top = deque.poll(); count++; if(top.left != null){ deque.add(top.left); } if(top.right != null){ deque.add(top.right); } if(count == nextCount){ nextCount = deque.size(); count = 0; depth++; } } return depth; } }","title":"\u89e3\u6cd5\u4e09 bfs \u5c42\u6b21\u904d\u5386"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_160","text":"","title":"\u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_161","text":"\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u8be5\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_162","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_163","text":"public class Solution { public boolean IsBalanced_Solution(TreeNode root) { if(root == null){ return true; } int leftH = getHeight(root.left); int rightH = getHeight(root.right); return Math.abs(leftH - rightH) <= 1; } private int getHeight(TreeNode root){ if(root == null){ return 0; } return Math.max(getHeight(root.left), getHeight(root.right)) + 1; } }","title":"\u89e3\u6cd5\u4e00  \u9012\u5f52 \u81ea\u9876\u5411\u4e0b"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_164","text":"\u8fd9\u79cd\u505a\u6cd5\u6709\u5f88\u660e\u663e\u7684\u95ee\u9898\uff0c\u5728\u5224\u65ad\u4e0a\u5c42\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u4f1a\u591a\u6b21\u91cd\u590d\u904d\u5386\u4e0b\u5c42\u7ed3\u70b9\uff0c\u589e\u52a0\u4e86\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u3002\u5982\u679c\u6539\u4e3a\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386\uff0c\u5982\u679c\u5b50\u6811\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5219\u8fd4\u56de\u5b50\u6811\u7684\u9ad8\u5ea6\uff1b\u5982\u679c\u53d1\u73b0\u5b50\u6811\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5219\u76f4\u63a5\u505c\u6b62\u904d\u5386\uff0c\u8fd9\u6837\u81f3\u591a\u53ea\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u8bbf\u95ee\u4e00\u6b21\u3002 public class Solution { public boolean IsBalanced_Solution(TreeNode root) { if(root == null){ return true; } return getHeight(root) != -1; } private int getHeight(TreeNode root){ if(root == null){ return 0; } int leftH = getHeight(root.left); if(leftH == -1){ return -1; } int rightH = getHeight(root.right); if(rightH == -1){ return -1; } if(Math.abs(leftH - rightH) > 1){ return -1; } return Math.max(leftH, rightH) + 1; } }","title":"\u89e3\u6cd5\u4e8c \u9012\u5f52\u4f18\u5316 \u81ea\u5e95\u5411\u4e0a"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_165","text":"","title":"\u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff08\u4e24\u4e2a\u6570\uff09"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_166","text":"\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002\u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_167","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#hash_1","text":"//num1,num2\u5206\u522b\u4e3a\u957f\u5ea6\u4e3a1\u7684\u6570\u7ec4\u3002\u4f20\u51fa\u53c2\u6570 //\u5c06num1[0],num2[0]\u8bbe\u7f6e\u4e3a\u8fd4\u56de\u7ed3\u679c import java.util.HashSet; import java.util.ArrayList; public class Solution { public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) { HashSet<Integer> set = new HashSet<>(); for(int i = 0; i < array.length; i++){ if(set.contains(array[i])){ set.remove(array[i]); }else{ set.add(array[i]); } } ArrayList<Integer> list = new ArrayList<>(set); num1[0] = list.get(0); num2[0] = list.get(1); } }","title":"\u89e3\u6cd5\u4e00 Hash"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#lowbitx-x-x-x-x-1-1-10","text":"public class Solution { public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) { int diff = 0; for(int i = 0; i < array.length; i++){ diff ^= array[i]; } int bitFlag = diff & (-diff); for(int i = 0; i < array.length; i++){ if((array[i] & bitFlag) == 0){ num1[0] ^= array[i]; }else{ num2[0] ^= array[i]; } } } }","title":"\u89e3\u6cd5\u4e8c \u4f4d\u8fd0\u7b97 lowbit(x) = x &amp; (-x) == x &amp; (~x + 1) \u2014&gt; \u8981\u7684\u662f\u4f60\u4ece\u672b\u5c3e\u5f00\u59cb\u7b2c1\u4e2a 1(\u5176\u4ed6\u4f4d\u7f6e\u90fd\u662f0) \u6240\u4ee3\u8868\u7684\u503c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#s","text":"","title":"\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_168","text":"\u5c0f\u660e\u5f88\u559c\u6b22\u6570\u5b66,\u6709\u4e00\u5929\u4ed6\u5728\u505a\u6570\u5b66\u4f5c\u4e1a\u65f6,\u8981\u6c42\u8ba1\u7b97\u51fa9~16\u7684\u548c,\u4ed6\u9a6c\u4e0a\u5c31\u5199\u51fa\u4e86\u6b63\u786e\u7b54\u6848\u662f100\u3002\u4f46\u662f\u4ed6\u5e76\u4e0d\u6ee1\u8db3\u4e8e\u6b64,\u4ed6\u5728\u60f3\u7a76\u7adf\u6709\u591a\u5c11\u79cd\u8fde\u7eed\u7684\u6b63\u6570\u5e8f\u5217\u7684\u548c\u4e3a100(\u81f3\u5c11\u5305\u62ec\u4e24\u4e2a\u6570)\u3002\u6ca1\u591a\u4e45,\u4ed6\u5c31\u5f97\u5230\u53e6\u4e00\u7ec4\u8fde\u7eed\u6b63\u6570\u548c\u4e3a100\u7684\u5e8f\u5217:18,19,20,21,22\u3002\u73b0\u5728\u628a\u95ee\u9898\u4ea4\u7ed9\u4f60,\u4f60\u80fd\u4e0d\u80fd\u4e5f\u5f88\u5feb\u7684\u627e\u51fa\u6240\u6709\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217? Good Luck!","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_169","text":"\u8f93\u51fa\u6240\u6709\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u3002\u5e8f\u5217\u5185\u6309\u7167\u4ece\u5c0f\u81f3\u5927\u7684\u987a\u5e8f\uff0c\u5e8f\u5217\u95f4\u6309\u7167\u5f00\u59cb\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f","title":"\u8f93\u51fa\u63cf\u8ff0:"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_170","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_171","text":"1\uff09\u7531\u4e8e\u6211\u4eec\u8981\u627e\u7684\u662f\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5e8f\u5217\u662f\u4e2a\u516c\u5dee\u4e3a1\u7684\u7b49\u5dee\u6570\u5217\uff0c\u800c\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e2d\u95f4\u503c\u4ee3\u8868\u4e86\u5e73\u5747\u503c\u7684\u5927\u5c0f\u3002\u5047\u8bbe\u5e8f\u5217\u957f\u5ea6\u4e3an\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e2d\u95f4\u503c\u53ef\u4ee5\u901a\u8fc7\uff08S / n\uff09\u5f97\u5230\uff0c\u77e5\u9053\u5e8f\u5217\u7684\u4e2d\u95f4\u503c\u548c\u957f\u5ea6\uff0c\u4e5f\u5c31\u4e0d\u96be\u6c42\u51fa\u8fd9\u6bb5\u5e8f\u5217\u4e86\u3002 2\uff09\u6ee1\u8db3\u6761\u4ef6\u7684n\u5206\u4e24\u79cd\u60c5\u51b5\uff1a n\u4e3a\u5947\u6570\u65f6\uff0c\u5e8f\u5217\u4e2d\u95f4\u7684\u6570\u6b63\u597d\u662f\u5e8f\u5217\u7684\u5e73\u5747\u503c\uff0c\u6240\u4ee5\u6761\u4ef6\u4e3a\uff1a(n & 1) == 1 && sum % n == 0\uff1b n\u4e3a\u5076\u6570\u65f6\uff0c\u5e8f\u5217\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u662f\u5e8f\u5217\u7684\u5e73\u5747\u503c\uff0c\u800c\u8fd9\u4e2a\u5e73\u5747\u503c\u7684\u5c0f\u6570\u90e8\u5206\u4e3a0.5\uff0c\u6240\u4ee5\u6761\u4ef6\u4e3a\uff1a(sum % n) * 2 == n. 3\uff09\u7531\u9898\u53ef\u77e5n >= 2\uff0c\u90a3\u4e48n\u7684\u6700\u5927\u503c\u662f\u591a\u5c11\u5462\uff1f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5c06n\u4ece2\u5230S\u5168\u90e8\u904d\u5386\u4e00\u6b21\uff0c\u4f46\u662f\u5927\u90e8\u5206\u904d\u5386\u662f\u4e0d\u5fc5\u8981\u7684\u3002\u4e3a\u4e86\u8ba9n\u5c3d\u53ef\u80fd\u5927\uff0c\u6211\u4eec\u8ba9\u5e8f\u5217\u4ece1\u5f00\u59cb\uff0c \u6839\u636e\u7b49\u5dee\u6570\u5217\u7684\u6c42\u548c\u516c\u5f0f\uff1aS = (1 + n) * n / 2\uff0c\u5f97\u5230 . \u200b \u6700\u540e\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u8f93\u5165sum = 100\uff0c\u6211\u4eec\u53ea\u9700\u904d\u5386n = 13~2\u7684\u60c5\u51b5\uff08\u6309\u9898\u610f\u5e94\u4ece\u5927\u5230\u5c0f\u904d\u5386\uff09\uff0cn = 8\u65f6\uff0c\u5f97\u5230\u5e8f\u5217[9, 10, 11, 12, 13, 14, 15, 16]\uff1bn = 5\u65f6\uff0c\u5f97\u5230\u5e8f\u5217[18, 19, 20, 21, 22]\u3002 \u5b8c\u6574\u4ee3\u7801\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a import java.util.ArrayList; public class Solution { public ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) { ArrayList<ArrayList<Integer>> ans = new ArrayList<>(); // \u8f93\u51fa\u6240\u6709\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u3002\u5e8f\u5217\u5185\u6309\u7167\u4ece\u5c0f\u81f3\u5927\u7684\u987a\u5e8f\uff0c\u5e8f\u5217\u95f4\u6309\u7167\u5f00\u59cb\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f // \u6240\u4ee5\u9006\u5e8f for(int i = (int) Math.sqrt(2 * sum); i >= 2; i--){ // n\u4e3a\u5947\u6570\u65f6\uff0c\u5e8f\u5217\u4e2d\u95f4\u7684\u6570\u6b63\u597d\u662f\u5e8f\u5217\u7684\u5e73\u5747\u503c\uff0c\u6240\u4ee5\u6761\u4ef6\u4e3a\uff1a(n & 1) == 1 && sum % n == 0\uff1b // n\u4e3a\u5076\u6570\u65f6\uff0c\u5e8f\u5217\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u662f\u5e8f\u5217\u7684\u5e73\u5747\u503c\uff0c\u800c\u8fd9\u4e2a\u5e73\u5747\u503c\u7684\u5c0f\u6570\u90e8\u5206\u4e3a0.5\uff0c\u6240\u4ee5\u6761\u4ef6\u4e3a\uff1a(sum % n) * 2 == n. if((sum % i == 0 && (i & 1) == 1) || sum % i * 2 == i){ ArrayList<Integer> list = new ArrayList<>(); for(int j = 0, k = sum / i - (i - 1)/ 2; j < i; j++, k++){ list.add(k); } ans.add(list); } } return ans; } }","title":"\u89e3\u6cd5\u4e00 \u8ba1\u7b97\u5e73\u5747\u503c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#on","text":"/* \u7528\u4e24\u4e2a\u6570\u5b57begin\u548cend\u5206\u522b\u8868\u793a\u5e8f\u5217\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c \u9996\u5148\u5c06begin\u521d\u59cb\u5316\u4e3a1\uff0cend\u521d\u59cb\u5316\u4e3a2. \u5982\u679c\u4ecebegin\u5230end\u7684\u548c\u5927\u4e8es\uff0c\u6211\u4eec\u5c31\u4ece\u5e8f\u5217\u4e2d\u53bb\u6389\u8f83\u5c0f\u7684\u503c(\u5373\u589e\u5927begin), \u76f8\u53cd\uff0c\u53ea\u9700\u8981\u589e\u5927end\u3002 \u7ec8\u6b62\u6761\u4ef6\u4e3a\uff1a\u4e00\u76f4\u589e\u52a0begin\u5230(1+sum)/2\u5e76\u4e14end\u5c0f\u4e8esum\u4e3a\u6b62 */ import java.util.ArrayList; public class Solution { public ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) { ArrayList<ArrayList<Integer>> ans = new ArrayList<>(); int s = 1, t = 2; while(s < t){ int stSum = (s + t) * (t - s + 1) / 2; if(stSum < sum){ t++; }else if(stSum > sum){ s++; }else{ ArrayList<Integer> list = new ArrayList<>(); for(int i = s; i <= t; i++){ list.add(i); } ans.add(list); s++; } } return ans; } }","title":"\u89e3\u6cd5\u4e8c \u53cc\u6307\u9488\u6cd5 O(n)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#s_1","text":"","title":"\u548c\u4e3aS\u7684\u4e24\u4e2a\u6570\u5b57"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_172","text":"\u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57S\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u6b63\u597d\u662fS\uff0c\u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8eS\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u6700\u5c0f\u7684\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_173","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#hash-ton-son","text":"import java.util.HashMap; import java.util.ArrayList; public class Solution { public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) { ArrayList<Integer> ans = new ArrayList<>(); HashMap<Integer, Integer> map = new HashMap<>(); int mulVal = Integer.MAX_VALUE; int low = -1, high = -1; for(int i = 0; i < array.length - 1; i++){ if(array[i] == array[i+1] && array[i] * 2 == sum){ mulVal = array[i] * array[i+1]; low = array[i]; high = array[i+1]; } } for(int i = 0; i < array.length; i++){ map.put(array[i], i); } for(int i = 0; i < array.length; i++){ if(map.containsKey(sum - array[i]) && map.get(sum - array[i]) != i){ if(array[i] * (sum - array[i]) < mulVal){ low = array[i]; high = sum - array[i]; break; } } } if(low != -1){ ans.add(low); ans.add(high); } return ans; } }","title":"\u89e3\u6cd5\u4e00 Hash TO(n) SO(n)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#ton-so1","text":"\u4e0d\u8981\u88ab\u9898\u76ee\u8bef\u5bfc\u4e86\uff01\u8bc1\u660e\u5982\u4e0b\uff0c\u6e05\u6670\u660e\u4e86\uff1a //\u8f93\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u6700\u5c0f\u7684\u3002\u8fd9\u53e5\u8bdd\u7684\u7406\u89e3\uff1f \u5047\u8bbe\uff1a \u82e5b>a,\u4e14\u5b58\u5728\uff0c a + b = s; (a - m ) + (b + m) = s \u5219 \uff1a(a - m )(b + m)=ab - (b-a)m - m*m < ab\uff1b \u8bf4\u660e\u5916\u5c42\u7684\u4e58\u79ef\u66f4\u5c0f \u4e5f\u5c31\u662f\u8bf4 \u4f9d\u7136\u662f\u5de6\u53f3\u5939\u903c\u6cd5 \uff01\uff01\uff01\u53ea\u9700\u89812\u4e2a\u6307\u9488 1. left\u5f00\u5934 \uff0c right\u6307\u5411\u7ed3\u5c3e 2.\u5982\u679c\u548c \u5c0f\u4e8esum \uff0c\u8bf4\u660e \u592a\u5c0f\u4e86 \uff0c left\u53f3\u79fb \u5bfb\u627e\u66f4 \u5927 \u7684\u6570 3.\u5982\u679c\u548c\u5927 \u4e8esum \uff0c\u8bf4\u660e \u592a\u5927\u4e86 \uff0c right\u5de6\u79fb \u5bfb\u627e\u66f4 \u5c0f \u7684\u6570 4.\u548c \u76f8\u7b49 \uff0c \u628aleft\u548cright\u7684\u6570\u8fd4\u56de import java.util.ArrayList; public class Solution { public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) { ArrayList<Integer> ans = new ArrayList<>(); int s = 0, t = array.length - 1; while(s < t){ if(array[s] + array[t] == sum){ ans.add(array[s]); ans.add(array[t]); break; }else if(array[s] + array[t] < sum){ s++; }else if(array[s] + array[t] > sum){ t--; } } return ans; } }","title":"\u89e3\u6cd5\u4e8c \u53cc\u6307\u9488 \u5939\u903c TO(n) SO(1)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_174","text":"","title":"\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_175","text":"\u6c47\u7f16\u8bed\u8a00\u4e2d\u6709\u4e00\u79cd\u79fb\u4f4d\u6307\u4ee4\u53eb\u505a\u5faa\u73af\u5de6\u79fb\uff08ROL\uff09\uff0c\u73b0\u5728\u6709\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c31\u662f\u7528\u5b57\u7b26\u4e32\u6a21\u62df\u8fd9\u4e2a\u6307\u4ee4\u7684\u8fd0\u7b97\u7ed3\u679c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u5e8f\u5217S\uff0c\u8bf7\u4f60\u628a\u5176\u5faa\u73af\u5de6\u79fbK\u4f4d\u540e\u7684\u5e8f\u5217\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u5e8f\u5217S=\u201dabcXYZdef\u201d,\u8981\u6c42\u8f93\u51fa\u5faa\u73af\u5de6\u79fb3\u4f4d\u540e\u7684\u7ed3\u679c\uff0c\u5373\u201cXYZdefabc\u201d\u3002\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1fOK\uff0c\u641e\u5b9a\u5b83\uff01","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_176","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_177","text":"public class Solution { public String LeftRotateString(String str,int n) { if(str == null || str.length() == 0 || str.length() < n){ return str; } return str.substring(n, str.length()) + str.substring(0, n); } }","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_178","text":"\u8fd9\u9053\u9898\u8003\u7684\u6838\u5fc3\u662f\u5e94\u8058\u8005\u662f\u4e0d\u662f\u53ef\u4ee5\u7075\u6d3b\u5229\u7528\u5b57\u7b26\u4e32\u7ffb\u8f6c\u3002\u5047\u8bbe\u5b57\u7b26\u4e32abcdef\uff0cn=3\uff0c\u8bbeX=abc\uff0cY=def\uff0c\u6240\u4ee5\u5b57\u7b26\u4e32\u53ef\u4ee5\u8868\u793a\u6210XY\uff0c\u5982\u9898\u5e72\uff0c\u95ee\u5982\u4f55\u6c42\u5f97YX\u3002\u5047\u8bbeX\u7684\u7ffb\u8f6c\u4e3aXT\uff0cXT=cba\uff0c\u540c\u7406YT=fed\uff0c\u90a3\u4e48YX=(XTYT)T\uff0c\u4e09\u6b21\u7ffb\u8f6c\u540e\u53ef\u5f97\u7ed3\u679c\u3002 public class Solution { public String LeftRotateString(String str,int n) { char[] chars = str.toCharArray(); if(chars.length < n){ return \"\"; } reverse(chars, 0, n - 1); reverse(chars, n, chars.length - 1); reverse(chars, 0, chars.length - 1); return new String(chars); } private void reverse(char[] chars, int low, int high){ char temp; while(low < high){ temp = chars[low]; chars[low] = chars[high]; chars[high] = temp; low++; high--; } } }","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_179","text":"","title":"\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_180","text":"\u725b\u5ba2\u6700\u8fd1\u6765\u4e86\u4e00\u4e2a\u65b0\u5458\u5de5Fish\uff0c\u6bcf\u5929\u65e9\u6668\u603b\u662f\u4f1a\u62ff\u7740\u4e00\u672c\u82f1\u6587\u6742\u5fd7\uff0c\u5199\u4e9b\u53e5\u5b50\u5728\u672c\u5b50\u4e0a\u3002\u540c\u4e8bCat\u5bf9Fish\u5199\u7684\u5185\u5bb9\u9887\u611f\u5174\u8da3\uff0c\u6709\u4e00\u5929\u4ed6\u5411Fish\u501f\u6765\u7ffb\u770b\uff0c\u4f46\u5374\u8bfb\u4e0d\u61c2\u5b83\u7684\u610f\u601d\u3002\u4f8b\u5982\uff0c\u201cstudent. a am I\u201d\u3002\u540e\u6765\u624d\u610f\u8bc6\u5230\uff0c\u8fd9\u5bb6\u4f19\u539f\u6765\u628a\u53e5\u5b50\u5355\u8bcd\u7684\u987a\u5e8f\u7ffb\u8f6c\u4e86\uff0c\u6b63\u786e\u7684\u53e5\u5b50\u5e94\u8be5\u662f\u201cI am a student.\u201d\u3002Cat\u5bf9\u4e00\u4e00\u7684\u7ffb\u8f6c\u8fd9\u4e9b\u5355\u8bcd\u987a\u5e8f\u53ef\u4e0d\u5728\u884c\uff0c\u4f60\u80fd\u5e2e\u52a9\u4ed6\u4e48\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_181","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#java-string","text":"public class Solution { public String ReverseSentence(String str) { // \u4f8b\u5982 \" \" if(str.trim().equals(\"\")){ return str; } String[] words = str.split(\" \"); int s = 0, t = words.length - 1; String temp; while(s < t){ temp = words[s]; words[s] = words[t]; words[t] = temp; s++; t--; } return String.join(\" \", words); } }","title":"\u89e3\u6cd5\u4e00 Java String\u7684\u51fd\u6570"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_182","text":"\u8fd9\u4e2a\u4e2a\u9898\u76ee\u672c\u610f\u662f\u8fdb\u884c\u6bcf\u4e2a\u5355\u8bcd\u5012\u8f6c\uff0c\u518d\u5012\u8f6c\u6574\u4e2a\u53e5\u5b50 import java.util.Arrays; public class Solution { public String ReverseSentence(String str) { // \u4f8b\u5982 \" \" if(str.trim().equals(\"\")){ return str; } // \u4e3a\u4e86\u4e0b\u9762\u4e2d\u5faa\u73af\u6761\u4ef6\u4fdd\u6301\u4e00\u81f4 char[] chars = (str + \" \").toCharArray(); int low = 0, high = 0; for(high = 0; high < chars.length; high++) if(chars[high] == ' '){ reverse(chars, low, high - 1); low = high + 1; } reverse(chars, 0 , str.length() - 1); return new String(Arrays.copyOfRange(chars, 0, str.length())); } private void reverse(char[] chars, int low, int high){ char temp; while(low < high){ temp = chars[low]; chars[low] = chars[high]; chars[high] = temp; low++; high--; } } }","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_183","text":"","title":"\u6251\u514b\u724c\u987a\u5b50"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_184","text":"LL\u4eca\u5929\u5fc3\u60c5\u7279\u522b\u597d,\u56e0\u4e3a\u4ed6\u53bb\u4e70\u4e86\u4e00\u526f\u6251\u514b\u724c,\u53d1\u73b0\u91cc\u9762\u5c45\u7136\u67092\u4e2a\u5927\u738b,2\u4e2a\u5c0f\u738b(\u4e00\u526f\u724c\u539f\u672c\u662f54\u5f20^_^)...\u4ed6\u968f\u673a\u4ece\u4e2d\u62bd\u51fa\u4e865\u5f20\u724c,\u60f3\u6d4b\u6d4b\u81ea\u5df1\u7684\u624b\u6c14,\u770b\u770b\u80fd\u4e0d\u80fd\u62bd\u5230\u987a\u5b50,\u5982\u679c\u62bd\u5230\u7684\u8bdd,\u4ed6\u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968,\u563f\u563f\uff01\uff01\u201c\u7ea2\u5fc3A,\u9ed1\u68433,\u5c0f\u738b,\u5927\u738b,\u65b9\u72475\u201d,\u201cOh My God!\u201d\u4e0d\u662f\u987a\u5b50.....LL\u4e0d\u9ad8\u5174\u4e86,\u4ed6\u60f3\u4e86\u60f3,\u51b3\u5b9a\u5927\\\u5c0f \u738b\u53ef\u4ee5\u770b\u6210\u4efb\u4f55\u6570\u5b57,\u5e76\u4e14A\u770b\u4f5c1,J\u4e3a11,Q\u4e3a12,K\u4e3a13\u3002\u4e0a\u9762\u76845\u5f20\u724c\u5c31\u53ef\u4ee5\u53d8\u6210\u201c1,2,3,4,5\u201d(\u5927\u5c0f\u738b\u5206\u522b\u770b\u4f5c2\u548c4),\u201cSo Lucky!\u201d\u3002LL\u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968\u5566\u3002 \u73b0\u5728,\u8981\u6c42\u4f60\u4f7f\u7528\u8fd9\u5e45\u724c\u6a21\u62df\u4e0a\u9762\u7684\u8fc7\u7a0b,\u7136\u540e\u544a\u8bc9\u6211\u4eecLL\u7684\u8fd0\u6c14\u5982\u4f55\uff0c \u5982\u679c\u724c\u80fd\u7ec4\u6210\u987a\u5b50\u5c31\u8f93\u51fatrue\uff0c\u5426\u5219\u5c31\u8f93\u51fafalse\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1,\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5927\u5c0f\u738b\u662f0\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_185","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#toblogs","text":"import java.util.Arrays; public class Solution { public boolean isContinuous(int [] numbers) { if(numbers == null || numbers.length != 5){ return false; } // \u6392\u5e8f Arrays.sort(numbers); // \u765e\u5b50\u603b\u6570 int changeCnt = 0; for(int i = 0; i < numbers.length - 1; i++){ if(numbers[i] == 0){ changeCnt += 1; // \u82e5\u765e\u5b50\u6709numbers.length-1\u4e2a\uff0c\u8fd4\u56detrue if(changeCnt == numbers.length - 1){ return true; } }else{ // \u6709\u76f8\u7b49\u5143\u7d20\uff0c \u8fd4\u56defalse if(numbers[i + 1] == numbers[i]){ return false; } // \u76f8\u90bb\u5143\u7d20\u95f4\u9694\u7528\u765e\u5b50\u6d88\u6389\uff0c\u5224\u65ad\u765e\u5b50\u4e2a\u6570\uff0c\u82e5\u5c0f\u4e8e0\uff0cfalse changeCnt = changeCnt - (numbers[i + 1] - numbers[i] - 1); if(changeCnt < 0){ return false; } } } return true; } }","title":"\u89e3\u6cd5\u4e00 \u6392\u5e8f TO(blogs)"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#ton","text":"max \u8bb0\u5f55 \u6700\u5927\u503c min \u8bb0\u5f55 \u6700\u5c0f\u503c min ,max \u90fd\u4e0d\u8bb00 \u6ee1\u8db3\u6761\u4ef6 1 max - min <5 2 \u96640\u5916\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57(\u724c) 3 \u6570\u7ec4\u957f\u5ea6 \u4e3a5 import java.util.HashSet; public class Solution { public boolean isContinuous(int [] numbers) { if(numbers == null || numbers.length != 5){ return false; } HashSet<Integer> set = new HashSet<>(); int min = 14, max = -1; for(int i = 0; i < numbers.length; i++){ if(numbers[i] != 0){ if(set.contains(numbers[i])) return false; set.add(numbers[i]); min = Math.min(numbers[i], min); max = Math.max(numbers[i], max); } } return (max - min) <= 4; } }","title":"\u89e3\u6cd5\u4e8c \u5b9a\u89c4\u5219 TO(n) \u63a8\u8350"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_186","text":"","title":"\u5b69\u5b50\u4eec\u7684\u6e38\u620f\uff08\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\uff09"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_187","text":"\u6bcf\u5e74\u516d\u4e00\u513f\u7ae5\u8282,\u725b\u5ba2\u90fd\u4f1a\u51c6\u5907\u4e00\u4e9b\u5c0f\u793c\u7269\u53bb\u770b\u671b\u5b64\u513f\u9662\u7684\u5c0f\u670b\u53cb,\u4eca\u5e74\u4ea6\u662f\u5982\u6b64\u3002HF\u4f5c\u4e3a\u725b\u5ba2\u7684\u8d44\u6df1\u5143\u8001,\u81ea\u7136\u4e5f\u51c6\u5907\u4e86\u4e00\u4e9b\u5c0f\u6e38\u620f\u3002\u5176\u4e2d,\u6709\u4e2a\u6e38\u620f\u662f\u8fd9\u6837\u7684:\u9996\u5148,\u8ba9\u5c0f\u670b\u53cb\u4eec\u56f4\u6210\u4e00\u4e2a\u5927\u5708\u3002\u7136\u540e,\u4ed6\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u6570m,\u8ba9\u7f16\u53f7\u4e3a0\u7684\u5c0f\u670b\u53cb\u5f00\u59cb\u62a5\u6570\u3002\u6bcf\u6b21\u558a\u5230m-1\u7684\u90a3\u4e2a\u5c0f\u670b\u53cb\u8981\u51fa\u5217\u5531\u9996\u6b4c,\u7136\u540e\u53ef\u4ee5\u5728\u793c\u54c1\u7bb1\u4e2d\u4efb\u610f\u7684\u6311\u9009\u793c\u7269,\u5e76\u4e14\u4e0d\u518d\u56de\u5230\u5708\u4e2d,\u4ece\u4ed6\u7684\u4e0b\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb,\u7ee7\u7eed0...m-1\u62a5\u6570....\u8fd9\u6837\u4e0b\u53bb....\u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb,\u53ef\u4ee5\u4e0d\u7528\u8868\u6f14,\u5e76\u4e14\u62ff\u5230\u725b\u5ba2\u540d\u8d35\u7684\u201c\u540d\u4fa6\u63a2\u67ef\u5357\u201d\u5178\u85cf\u7248(\u540d\u989d\u6709\u9650\u54e6!!^_^)\u3002\u8bf7\u4f60\u8bd5\u7740\u60f3\u4e0b,\u54ea\u4e2a\u5c0f\u670b\u53cb\u4f1a\u5f97\u5230\u8fd9\u4efd\u793c\u54c1\u5462\uff1f(\u6ce8\uff1a\u5c0f\u670b\u53cb\u7684\u7f16\u53f7\u662f\u4ece0\u5230n-1)\uff0c \u82e5n == 0 \u8fd4\u56de-1","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_188","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_189","text":"class CycleLinkedList{ int val; CycleLinkedList next; public CycleLinkedList(int val){ this.val = val; this.next = null; } } public class Solution { public int LastRemaining_Solution(int n, int m) { if(n == 0){ return -1; } // \u5faa\u73af\u94fe\u8868\u7684\u6784\u5efa CycleLinkedList dummy = new CycleLinkedList(-1); CycleLinkedList p = dummy; for(int i = 0; i < n; i++){ p.next = new CycleLinkedList(i); p = p.next; } p.next = dummy.next; p = dummy.next; // \u62a5\u6570 while(p.next != p){ for(int i = 0; i < m - 2; i++){ p = p.next; } p.next = p.next.next; p = p.next; } return p.val; } } import java.util.ArrayList; public class Solution { public int LastRemaining_Solution(int n, int m) { if(n == 0 || m == 0){ return -1; } // \u4e5f\u53ef\u6362\u6210LinkedList ArrayList<Integer> list = new ArrayList<>(); for(int i = 0; i < n; i++){ list.add(i); } int index = 0; while(list.size() > 1){ index = (index + m - 1) % list.size(); list.remove(index); } return list.get(0); } }","title":"\u89e3\u6cd5\u4e00 \u8bad\u7ec3\u94fe\u8868"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_190","text":"\u95ee\u9898\u63cf\u8ff0\uff1an\u4e2a\u4eba\uff08\u7f16\u53f70~(n-1))\uff0c\u4ece0\u5f00\u59cb\u62a5\u6570\uff0c\u62a5\u5230(m-1)\u7684\u9000\u51fa\uff0c\u5269\u4e0b\u7684\u4eba \u7ee7\u7eed\u4ece0\u5f00\u59cb\u62a5\u6570\u3002\u6c42\u80dc\u5229\u8005\u7684\u7f16\u53f7\u3002 \u200b \u6211\u4eec\u77e5\u9053\u7b2c\u4e00\u4e2a\u4eba(\u7f16\u53f7\u4e00\u5b9a\u662fm%n-1) \u51fa\u5217\u4e4b\u540e\uff0c\u5269\u4e0b\u7684n-1\u4e2a\u4eba\u7ec4\u6210\u4e86\u4e00\u4e2a\u65b0 \u7684\u7ea6\u745f\u592b\u73af\uff08\u4ee5\u7f16\u53f7\u4e3ak=m%n\u7684\u4eba\u5f00\u59cb\uff09: \u200b k k+1 k+2 ... n-2, n-1, 0, 1, 2, ... k-2\u5e76\u4e14\u4ecek\u5f00\u59cb\u62a50\u3002 \u200b \u73b0\u5728\u6211\u4eec\u628a\u4ed6\u4eec\u7684\u7f16\u53f7\u505a\u4e00\u4e0b\u8f6c\u6362\uff1a \u200b k --> 0 \u200b k+1 --> 1 \u200b k+2 --> 2 \u200b ... \u200b ... \u200b k-2 --> n-2 \u200b k-1 --> n-1 \u200b \u53d8\u6362\u540e\u5c31\u5b8c\u5b8c\u5168\u5168\u6210\u4e3a\u4e86(n-1)\u4e2a\u4eba\u62a5\u6570\u7684\u5b50\u95ee\u9898\uff0c\u5047\u5982\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\uff1a \u4f8b\u5982x\u662f\u6700\u7ec8\u7684\u80dc\u5229\u8005\uff0c\u90a3\u4e48\u6839\u636e\u4e0a\u9762\u8fd9\u4e2a\u8868\u628a\u8fd9\u4e2ax\u53d8\u56de\u53bb\u4e0d\u521a\u597d\u5c31\u662fn\u4e2a\u4eba\u60c5 \u51b5\u7684\u89e3\u5417\uff1f\uff01\uff01\u53d8\u56de\u53bb\u7684\u516c\u5f0f\u5f88\u7b80\u5355\uff0c\u76f8\u4fe1\u5927\u5bb6\u90fd\u53ef\u4ee5\u63a8\u51fa\u6765\uff1ax'=(x+k)%n\u3002 \u200b \u4ee4f[i]\u8868\u793ai\u4e2a\u4eba\u73a9\u6e38\u620f\u62a5m\u9000\u51fa\u6700\u540e\u80dc\u5229\u8005\u7684\u7f16\u53f7\uff0c\u6700\u540e\u7684\u7ed3\u679c\u81ea\u7136\u662ff[n]\u3002 \u200b \u9012\u63a8\u516c\u5f0f \u200b f[1]=0; \u200b f[i]=(f[i-1]+m)%i; (i>1) \u200b \u6709\u4e86\u8fd9\u4e2a\u516c\u5f0f\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u4ece1-n\u987a\u5e8f\u7b97\u51faf[i]\u7684\u6570\u503c\uff0c\u6700\u540e\u7ed3\u679c\u662ff[n]\u3002 \u56e0\u4e3a\u5b9e\u9645\u751f\u6d3b\u4e2d\u7f16\u53f7\u603b\u662f\u4ece1\u5f00\u59cb\uff0c\u6211\u4eec\u8f93\u51faf[n]+1\u3002 public class Solution { public int LastRemaining_Solution(int n, int m) { if(n == 0){ return -1; }else if(n == 1){ return 0; }else{ return (LastRemaining_Solution(n - 1, m) + m) % n; } } }","title":"\u89e3\u6cd5\u4e8c \u627e\u89c4\u5f8b \u9012\u5f52\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#12n","text":"","title":"[\u6536\u85cf]\u6c421+2+\u2026+n"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_191","text":"\u6c421+2+3+...+n\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case\u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_192","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#if","text":"public class Solution { public int Sum_Solution(int n) { // \u5229\u7528\u77ed\u8def\u53bb\u66ff\u6362 if(n < 1){ return 0; } return n + Sum_Solution(n - 1); } }","title":"\u89e3\u6cd5\u4e00 \u9012\u5f52 \u9519\u8bef \u4f7f\u7528 if \u8bed\u53e5\u4e86"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_193","text":"//\u5176\u5b9e\u53ea\u8981\u5148\u770b\u6211\u4eec\u624b\u91cc\u6709\u4ec0\u4e48\u724c\u5c31\u80fd\u4e00\u6b65\u4e00\u6b65\u60f3\u5230\u5229\u7528\u77ed\u8def\u7279\u6027\u4e86 //\u6211\u4eec\u624b\u91cc\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\uff08\u6309\u4f18\u5148\u7ea7\u9ad8\u4f4e\uff09\u5355\u76ee\u8fd0\u7b97\u7b26\uff1a++\u548c--,\u53cc\u76ee\u8fd0\u7b97\u7b26\uff1a+,-\uff0c\u79fb\u4f4d\u8fd0\u7b97\u7b26<<\u548c>>\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26>,<\u7b49\uff0c\u903b\u8f91\u8fd0\u7b97\u7b26&&\uff0c||,&,|,^\uff0c\u8d4b\u503c= //\u5355\u76ee\u548c\u53cc\u76ee\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\uff0c\u79fb\u4f4d\u663e\u7136\u6ca1\u6709\u89c4\u5f8b\u6027\uff0c\u56e0\u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5e76\u4e0d\u80fd\u533a\u5206\u67d0\u4e2a\u6570\u548c\u5176\u4ed6\u6570\uff0c\u8fd9\u4e5f\u5c31\u6392\u9664\u4e86&,|,^,\u56e0\u4e3a\u4e0d\u9700\u8981\u505a\u4f4d\u8fd0\u7b97\u4e86 //\u5173\u7cfb\u8fd0\u7b97\u7b26\u8981\u548cif\u5339\u914d\uff0c\u4f46\u8fd9\u662f\u4e0d\u884c\u7684\uff0c\u8fd9\u65f6\u770b\u770b\u5269\u4e0b\u7684\u8fd0\u7b97\u7b26\u53ea\u80fd\u9009&&,||\u4e86 //\u5982\u679c\u505a\u8fc7Java\u7b14\u8bd5\u9898\uff0c\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u8fd0\u7b97\u7b26\u975e\u5e38\u654f\u611f\uff0c\u4ed6\u4eec\u6709\u77ed\u8def\u7279\u6027\uff0c\u524d\u9762\u7684\u6761\u4ef6\u5224\u771f\uff08\u6216\u8005\u5047\uff09\u4e86\uff0c\u5c31\u4e0d\u4f1a\u518d\u6267\u884c\u540e\u9762\u7684\u6761\u4ef6\u4e86 //\u8fd9\u65f6\u5c31\u80fd\u8054\u60f3\u5230--n,\u76f4\u5230\u7b49\u4e8e0\u5c31\u80fd\u8fd4\u56de\u503c\u3002 public class Solution { public int Sum_Solution(int n) { int sum = n; boolean flag = (sum>0)&&((sum+=Sum_Solution(--n))>0); return sum; } }","title":"\u89e3\u6cd5\u4e8c \u9012\u5f52+\u77ed\u8def"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_194","text":"","title":"[\u6536\u85cf]\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_195","text":"\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528+\u3001-\u3001*\u3001/\u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_196","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_197","text":"step1:\u6309\u4f4d\u4e0e\u662f\u67e5\u770b\u4e24\u4e2a\u6570\u54ea\u4e9b\u4e8c\u8fdb\u5236\u4f4d\u90fd\u4e3a1\uff0c\u8fd9\u4e9b\u90fd\u662f\u8fdb\u4f4d\u4f4d\uff0c\u7ed3\u679c\u9700\u5de6\u79fb\u4e00\u4f4d\uff0c\u8868\u793a\u8fdb\u4f4d\u540e\u7684\u7ed3\u679c step2:\u5f02\u6216\u662f\u67e5\u770b\u4e24\u4e2a\u6570\u54ea\u4e9b\u4e8c\u8fdb\u5236\u4f4d\u53ea\u6709\u4e00\u4e2a\u4e3a1\uff0c\u8fd9\u4e9b\u662f\u975e\u8fdb\u4f4d\u4f4d\uff0c\u53ef\u4ee5\u76f4\u63a5\u52a0\u3001\u51cf\uff0c\u7ed3\u679c\u8868\u793a\u975e\u8fdb\u4f4d\u4f4d\u8fdb\u884c\u52a0\u64cd\u4f5c\u540e\u7684\u7ed3\u679c \u9996\u5148\u770b\u5341\u8fdb\u5236\u662f\u5982\u4f55\u505a\u7684\uff1a 5+7=12\uff0c\u4e09\u6b65\u8d70 \u7b2c\u4e00\u6b65\uff1a\u76f8\u52a0\u5404\u4f4d\u7684\u503c\uff0c\u4e0d\u7b97\u8fdb\u4f4d\uff0c\u5f97\u52302\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8ba1\u7b97\u8fdb\u4f4d\u503c\uff0c\u5f97\u523010. \u5982\u679c\u8fd9\u4e00\u6b65\u7684\u8fdb\u4f4d\u503c\u4e3a0\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b65\u5f97\u5230\u7684\u503c\u5c31\u662f\u6700\u7ec8\u7ed3\u679c\u3002 \u7b2c\u4e09\u6b65\uff1a\u91cd\u590d\u4e0a\u8ff0\u4e24\u6b65\uff0c\u53ea\u662f\u76f8\u52a0\u7684\u503c\u53d8\u6210\u4e0a\u8ff0\u4e24\u6b65\u7684\u5f97\u5230\u7684\u7ed3\u679c2\u548c10\uff0c\u5f97\u523012\u3002 \u540c\u6837\u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u6b65\u8d70\u7684\u65b9\u5f0f\u8ba1\u7b97\u4e8c\u8fdb\u5236\u503c\u76f8\u52a0\uff1a 5-101\uff0c7-111 \u7b2c\u4e00\u6b65\uff1a\u76f8\u52a0\u5404\u4f4d\u7684\u503c\uff0c\u4e0d\u7b97\u8fdb\u4f4d\uff0c\u5f97\u5230010\uff0c\u4e8c\u8fdb\u5236\u6bcf\u4f4d\u76f8\u52a0\u5c31\u76f8\u5f53\u4e8e\u5404\u4f4d\u505a\u5f02\u6216\u64cd\u4f5c\uff0c101^111\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8ba1\u7b97\u8fdb\u4f4d\u503c\uff0c\u5f97\u52301010\uff0c\u76f8\u5f53\u4e8e\u5404\u4f4d\u505a\u4e0e\u64cd\u4f5c\u5f97\u5230101\uff0c\u518d\u5411\u5de6\u79fb\u4e00\u4f4d\u5f97\u52301010\uff0c(101&111)<<1\u3002 \u7b2c\u4e09\u6b65\u91cd\u590d\u4e0a\u8ff0\u4e24\u6b65\uff0c \u5404\u4f4d\u76f8\u52a0 010^1010=1000\uff0c\u8fdb\u4f4d\u503c\u4e3a100=(010&1010)<<1\u3002 \u7ee7\u7eed\u91cd\u590d\u4e0a\u8ff0\u4e24\u6b65\uff1a1000^100 = 1100\uff0c\u8fdb\u4f4d\u503c\u4e3a0\uff0c\u8df3\u51fa\u5faa\u73af\uff0c1100\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002 public class Solution { public int Add(int num1,int num2) { while(num2 != 0){ // \u975e\u8fdb\u4f4d\u4f4d int temp = num1 ^ num2; // \u8fdb\u4f4d\u4f4d num2 = (num1 & num2) << 1; num1 = temp; } return num1; } }","title":"\u89e3\u6cd5\u4e00 \u4f4d\u8fd0\u7b97\u6309\u4f4d\u4e8e\u5f97\u5230\u8fdb\u4f4d\u4f4d\uff0c\u6309\u4f4d\u5f02\u6216\u5f97\u5230\u975e\u8fdb\u4f4d\u4f4d\uff0c\u5faa\u73af\u6267\u884c\uff0c\u76f4\u5230\u65e0\u8fdb\u4f4d\u4f4d"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_198","text":"","title":"\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6574\u6570"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_199","text":"\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570(\u5b9e\u73b0Integer.valueOf(string)\u7684\u529f\u80fd\uff0c\u4f46\u662fstring\u4e0d\u7b26\u5408\u6570\u5b57\u8981\u6c42\u65f6\u8fd4\u56de0)\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570\u7684\u5e93\u51fd\u6570\u3002 \u6570\u503c\u4e3a0\u6216\u8005\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u503c\u5219\u8fd4\u56de0\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_200","text":"\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u5305\u62ec\u6570\u5b57\u5b57\u6bcd\u7b26\u53f7,\u53ef\u4ee5\u4e3a\u7a7a","title":"\u8f93\u5165\u63cf\u8ff0:"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_201","text":"\u5982\u679c\u662f\u5408\u6cd5\u7684\u6570\u503c\u8868\u8fbe\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u8fd4\u56de0","title":"\u8f93\u51fa\u63cf\u8ff0:"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#1_4","text":"","title":"\u793a\u4f8b1"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_202","text":"\u590d\u5236 +2147483647 1a33","title":"\u8f93\u5165"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_203","text":"\u590d\u5236 2147483647 0","title":"\u8f93\u51fa"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_204","text":"\u6ce8\u610f: \u6570\u5b57\u4e0a\u4e0b\u754c\u6ea2\u51fa Java \u5982\u679c\u6570\u503c\u8d85\u51faint\u7684\u8303\u56f4\uff0c\u8981\u7279\u6b8a\u5904\u7406\uff1b\u6bd4int\u7684\u6700\u5927\u503c\u8fd8\u8981\u5927\uff0c\u5df2\u7ecf\u4e0a\u6ea2\uff0c\u8fd9\u80af\u5b9a\u4e0d\u80fd\u901a\u8fc7\u6570\u5b57\u7684\u5927\u5c0f\u6bd4\u8f83\uff0c\u6240\u4ee5\u9700\u8981\u5728\u5b57\u7b26\u4e32\u7684\u72b6\u6001\u4e0b\u5224\u65ad\u662f\u5426\u4e0a\u6ea2\u6216\u4e0b\u6ea2\u3002 // int\u578b\u6ea2\u51fa\u95ee\u9898, java\u4e2dint\u578b\u6ca1\u6709\u6bd4Integer.MAX_VALUE\u66f4\u5927\u7684\u503c // System.out.println(Integer.MAX_VALUE);2147483647 // System.out.println(0x7fffffff);2147483647 // System.out.println(Integer.MIN_VALUE);-2147483648 // System.out.println(0x80000000);-2147483648","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_205","text":"import java.lang.Character; public class Solution { public int StrToInt(String str) { if(str == null || \"\".equals(str)){ return 0; } char[] chars = str.toCharArray(); int i = 0, ans = 0; boolean isPos = true; // \u5224\u65ad\u7b2c\u4e00\u4f4d\u662f\u5426\u662f\u7b26\u53f7\u4f4d,\u82e5\u662f, i\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb\u904d\u5386(\u4ee50\u4f4d\u8d77\u70b9) if(chars[0] == '+' || chars[0] == '-'){ i = 1; isPos = chars[0] == '+'; } for(; i < chars.length; i++){ if (chars[i] < '9' && chars[i] > '0'){ // int\u578b\u6ea2\u51fa\u95ee\u9898, java\u4e2dint\u578b\u6ca1\u6709\u6bd4Integer.MAX_VALUE\u66f4\u5927\u7684\u503c // System.out.println(Integer.MAX_VALUE);2147483647 // System.out.println(0x7fffffff);2147483647 // System.out.println(Integer.MIN_VALUE);-2147483648 // System.out.println(0x80000000);-2147483648 if(ans == Integer.MAX_VALUE / 10){ if((isPos && chars[i] > '7') || (!isPos && chars[i] > '8')){ return 0; } }else if(ans > Integer.MAX_VALUE / 10){ return 0; } // Character.getNumbericValue ans = ans * 10 + (chars[i] - '0'); }else{ return 0; } } return ans * (isPos ? 1 : -1); } }","title":"\u89e3\u6cd5\u4e00 \u5173\u952e\u662f\u6ea2\u51fa"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_206","text":"","title":"\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_207","text":"\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230n-1\u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_208","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#hash_2","text":"public class Solution { // Parameters: // numbers: an array of integers // length: the length of array numbers // duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation; // Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++ // \u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f~\u8fd4\u56de\u4efb\u610f\u91cd\u590d\u7684\u4e00\u4e2a\uff0c\u8d4b\u503cduplication[0] // Return value: true if the input is valid, and there are some duplications in the array number // otherwise false public boolean duplicate(int numbers[],int length,int [] duplication) { if(numbers == null || length == 0){ return false; } int[] nums = new int[length]; for(int i = 0; i < length; i++){ if(nums[numbers[i]] > 0){ duplication[0] = numbers[i]; return true; } nums[numbers[i]] += 1; } return false; } }","title":"\u89e3\u6cd5\u4e00 Hash"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_209","text":"\u4e0d\u9700\u8981\u989d\u5916\u7684\u6570\u7ec4\u6216\u8005hash table\u6765\u4fdd\u5b58\uff0c\u9898\u76ee\u91cc\u5199\u4e86\u6570\u7ec4\u91cc\u6570\u5b57\u7684\u8303\u56f4\u4fdd\u8bc1\u57280 ~ n-1 \u4e4b\u95f4\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u73b0\u6709\u6570\u7ec4\u8bbe\u7f6e\u6807\u5fd7\uff0c\u5f53\u4e00\u4e2a\u6570\u5b57\u88ab\u8bbf\u95ee\u8fc7\u540e\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5bf9\u5e94\u4f4d\u4e0a\u7684\u6570 + n\uff0c\u4e4b\u540e\u518d\u9047\u5230\u76f8\u540c\u7684\u6570\u65f6\uff0c\u4f1a\u53d1\u73b0\u5bf9\u5e94\u4f4d\u4e0a\u7684\u6570\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8en\u4e86\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u6570\u5373\u53ef\u3002 \u8fd9\u4e2a\u6570\u7ec4\u540c\u65f6\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a\u6570\u5b57\u6570\u7ec4 \u7d22\u5f15\u6570\u7ec4 \u9700\u8981\u8111\u6d77\u4e0d\u65ad\u7684\u8f6c\u6362 public boolean duplicate(int numbers[],int length,int [] duplication) { if(numbers == null || length == 0){ return false; } for(int i = 0; i < length; i++){ // \u9047\u5230\u7684\u6570\u5b57 \u4e0d\u662f\u7d22\u5f15 int index = numbers[i]; // \u78b0\u5230\u4e4b\u524d\u505a\u8fc7\u6807\u8bb0\u7684\u7d22\u5f15\uff0c\u4e34\u65f6\u6539\u53d8index\uff0c\u672a\u6539\u53d8\u8be5\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u503c if(index >= length){ index -= length; } // \u9047\u5230\u8be5\u6807\u8bb0 \u8fd4\u56de if(numbers[index] >= length){ return index; } // \u628a\u6570\u5b57\u53d8\u4e3a\u7d22\u5f15\uff0c\u5176\u4e2d\u8be5\u7d22\u5f15\u4e0a\u7684\u6570\u5b57\u505a\u4e2a\u6807\u8bb0 numbers[index] = numbers[index] + length; } return false; } }","title":"\u89e3\u6cd5\u4e8c \u6570\u5b57\u6570\u7ec4+\u7d22\u5f15\u6570\u7ec4\uff08\u4e00\u4e2a\u6570\u7ec4\uff09"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_210","text":"","title":"[\u6536\u85cf]\u6784\u5efa\u4e58\u79ef\u6570\u7ec4"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_211","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4A[0,1,...,n-1],\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4B[0,1,...,n-1],\u5176\u4e2dB\u4e2d\u7684\u5143\u7d20B[i]=A[0] A[1] ... A[i-1] A[i+1] ... A[n-1]\u3002\u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_212","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_213","text":"import java.util.ArrayList; public class Solution { public int[] multiply(int[] A) { int[] sums = new int[A.length+1], B = new int[A.length]; sums[0] = 1; for(int i = 1; i <= A.length; i++){ sums[i] = sums[i-1] * A[i-1]; } int backSum = 1; for(int i = A.length - 1; i >= 0; i--){ B[i] = sums[i] * backSum; backSum *= A[i]; } return B; } }","title":"\u89e3\u6cd5\u4e00 \u53cc\u5411\u9010\u5143\u7d20\u7d2f\u4e58"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#todo_1","text":"","title":"[todo]\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_214","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec'.'\u548c' '\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26'.'\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c' '\u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u542b0\u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\"aaa\"\u4e0e\u6a21\u5f0f\"a.a\"\u548c\"ab ac a\"\u5339\u914d\uff0c\u4f46\u662f\u4e0e\"aa.a\"\u548c\"ab*a\"\u5747\u4e0d\u5339\u914d","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_215","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_216","text":"","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_217","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#todo_2","text":"","title":"[todo]\u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_218","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\"+100\",\"5e2\",\"-123\",\"3.1416\"\u548c\"-1E-16\"\u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f\"12e\",\"1a3.14\",\"1.2.3\",\"+-5\"\u548c\"12e+4.3\"\u90fd\u4e0d\u662f\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_219","text":"","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_220","text":"","title":"\u89e3\u6cd5\u4e00"},{"location":"\u7b97\u6cd5/\u5251\u6307offer.html#_221","text":"","title":"\u89e3\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html","text":"\u9762\u8bd5\u9898\u603b\u7ed3 todo \u80cc\u5305\u4e5d\u8bb2 \u6280\u5de7 \u4e0a\u53d6\u6574\u53d8\u4e0b\u53d6\u8bc1 \u7ec4\u5408\u6570\u6c42\u6a21 C(n,m) mod p 1.\u6768\u8f89\u4e09\u89d2\u6cd5\uff08n, m\u8f83\u5c0f\u65f6\uff09O(n^2) C(n,m)=C(n-1,m)+C(n-1,m-1)\uff1b \u7531\u4e8e\u7ec4\u5408\u6570\u6ee1\u8db3\u4ee5\u4e0a\u6027\u8d28\uff0c\u53ef\u4ee5\u9884\u5148\u751f\u6210\u6240\u6709\u7528\u5230\u7684\u7ec4\u5408\u6570\uff0c\u4f7f\u7528\u65f6\uff0c\u76f4\u63a5\u67e5\u627e\u5373\u53ef\u3002\u751f\u6210\u7684\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u67e5\u8be2\u590d\u6742\u5ea6\u4e3aO(1)\u3002\u8f83\u65b9\u6848\u4e00\u800c\u8a00\uff0c\u652f\u6301\u7684\u6570\u91cf\u7ea7\u5927\u6709\u63d0\u5347\uff0c\u57281\u79d2\u5185\uff0c\u57fa\u672c\u80fd\u5904\u740610000\u4ee5\u5185\u7684\u7ec4\u5408\u6570\u3002\u7b97\u6cd5\u7684\u9884\u5904\u7406\u65f6\u95f4\u8f83\u957f\uff0c\u53e6\u5916\u7a7a\u95f4\u82b1\u8d39\u8f83\u5927\uff0c\u90fd\u662f\u5e73\u65b9\u7ea7\u7684\uff0c\u4f18\u70b9\u662f\u5b9e\u73b0\u7b80\u5355\uff0c\u67e5\u8be2\u65f6\u95f4\u5feb\u3002 const int M = 10007; const int MAXN = 1000; int C[MAXN+1][MAXN+1]; // \u521d\u59cb\u5316 O(n ** 2) void Initial(){ int i, j; for(i = 0; i <= MAXN; i++){ C[0][i] = 0; C[i][0] = 1; } for(i = 1; i <= MAXN; i++){ for(j = 1; j <= MAXN; j++){ C[i][j] = (C[i-1][j] + C[i-1][j-1]) % M; } } } int Combination(int n, int m) { return C[n][m]; } 2.[todo]\u5229\u7528\u4e58\u6cd5\u9006\u5143 O(nlogn) \u6a21\u9006\u5143+\u6574\u6570\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 3. \u817e\u8baf\u6691\u671f\u63d0\u524d\u6279 \u786c\u5e01 \u725b\u5bb6\u6751\u7684\u8d27\u5e01\u662f\u4e00\u79cd\u5f88\u795e\u5947\u7684\u8fde\u7eed\u8d27\u5e01\u3002 \u4ed6\u4eec\u8d27\u5e01\u7684\u6700\u5927\u9762\u989d\u662fn\uff0c\u5e76\u4e14\u4e00\u5171\u6709\u9762\u989d\u4e3a1\uff0c\u9762\u989d\u4e3a2.....\u9762\u989d\u4e3an\uff0cn\u79cd\u9762\u989d\u7684\u8d27\u5e01\u3002 \u725b\u725b\u6bcf\u6b21\u8d2d\u4e70\u5546\u54c1\u90fd\u4f1a\u5e26\u4e0a\u6240\u6709\u9762\u989d\u7684\u8d27\u5e01\uff0c\u652f\u4ed8\u65f6\u4f1a\u9009\u62e9\u7ed9\u51fa\u786c\u5e01\u6570\u91cf\u6700\u5c0f\u7684\u65b9\u6848\u3002 \u73b0\u5728\u544a\u8bc9\u4f60\u725b\u725b\u5c06\u8981\u8d2d\u4e70\u7684\u5546\u54c1\u7684\u4ef7\u683c\uff0c\u4f60\u80fd\u7b97\u51fa\u725b\u725b\u652f\u4ed8\u7684\u786c\u5e01\u6570\u91cf\u5417\uff1f (\u5047\u8bbe\u725b\u725b\u6bcf\u79cd\u9762\u989d\u7684\u8d27\u5e01\u90fd\u62e5\u6709\u65e0\u9650\u4e2a\u3002) \u8f93\u5165\u683c\u5f0f \u5171\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570n\u548cm\uff0c\u5206\u522b\u8868\u793a\u8d27\u5e01\u7684\u6700\u5927\u9762\u989d\u4ee5\u53ca\u5546\u54c1\u7684\u4ef7\u683c\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6574\u6570\u8868\u793a\u725b\u725b\u652f\u4ed8\u7684\u786c\u5e01\u6570\u91cf\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264105, 1\u2264m\u2264109 \u8f93\u5165\u6837\u4f8b1\uff1a 6 7 \u8f93\u51fa\u6837\u4f8b1\uff1a 2 \u8f93\u5165\u6837\u4f8b2\uff1a 4 10 \u8f93\u51fa\u6837\u4f8b2\uff1a 3 \u89e3\u6cd5 #include <iostream> #include <algorithm> using namespace std; int main(){ int n, m; cin >> n >> m; // (m + n - 1) / n cout << m / n + (int)(m % n > 0) << endl; return 0; } \u5947\u5999\u7684\u6570\u5217 \u599e\u599e\u6700\u8fd1\u8ff7\u4e0a\u4e86\u738b\u8005\u8363\u8000\u3002 \u5c0fQ\u5f97\u5230\u4e86\u4e00\u4e2a\u5947\u5999\u7684\u6570\u5217\uff0c\u8fd9\u4e2a\u6570\u5217\u6709\u65e0\u9650\u591a\u9879\uff0c\u6570\u5217\u4e2d\u7684\u7b2c i \u4e2a\u6570\u5b57\u4e3ai\u2217(\u22121)i\uff0c\u6bd4\u5982\u6570\u5217\u7684\u524d\u51e0\u9879\u4e3a-1\uff0c2\uff0c-3\uff0c4\uff0c-5\u2026 \u5c0fQ\u5174\u594b\u628a\u8fd9\u4e2a\u6570\u5217\u62ff\u53bb\u7ed9\u599e\u599e\u770b\uff0c\u5e76\u5e0c\u671b\u501f\u6b64\u9080\u8bf7\u599e\u599e\u5403\u996d\u3002 \u599e\u599e\u60f3\u4e86\u60f3\uff0c\u5bf9\u5c0fQ\u8bf4\uff1a\u201c\u5bf9\u4e8e\u8fd9\u4e2a\u6570\u5217\uff0c\u6211\u6bcf\u6b21\u8be2\u95ee\u4f60\u4e00\u4e2a\u533a\u95f4\uff0c\u4f60\u57281\u79d2\u5185\u628a\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u5b57\u7684\u548c\u544a\u8bc9\u6211\uff0c\u5982\u679c\u4f60\u7b54\u5f97\u4e0a\u6765\u6211\u5c31\u8ddf\u4f60\u4e00\u8d77\u53bb\u5403\u996d\u3002\u201d \u7531\u4e8e\u599e\u599e\u6700\u8fd1\u6c89\u8ff7\u738b\u8005\u8363\u8000\uff0c\u5df2\u7ecf\u5f88\u4e45\u90fd\u6ca1\u7406\u8fc7\u5c0fQ\u4e86\uff0c\u6240\u4ee5\u5c0fQ\u4e0d\u60f3\u5931\u53bb\u8fd9\u6b21\u73cd\u8d35\u7684\u673a\u4f1a\uff0c\u4f60\u80fd\u5e2e\u5e2e\u4ed6\u5417\uff1f \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 q\uff0c\u8868\u793a\u599e\u599e\u7684\u8be2\u95ee\u6b21\u6570\u3002 \u63a5\u4e0b\u6765 q \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 l \u548c r\uff0c\u8868\u793a\u599e\u599e\u8be2\u95ee\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u3002 \u8f93\u51fa\u683c\u5f0f \u5171 q \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u599e\u599e\u8be2\u95ee\u7684\u533a\u95f4\u548c\u3002 \u6570\u636e\u8303\u56f4 1\u2264q\u2264105, 1\u2264l\u2264r\u2264109 \u8f93\u5165\u6837\u4f8b1\uff1a 4 2 4 2 2 3 3 1 5 \u8f93\u51fa\u6837\u4f8b1\uff1a 3 2 -3 -3 \u8f93\u5165\u6837\u4f8b2\uff1a 1 1 1000000000 \u8f93\u51fa\u6837\u4f8b2\uff1a 500000000 \u89e3\u6cd5 #include <iostream> #include <algorithm> using namespace std; int main(){ int q, l, r; cin >> q; for(int i = 1; i <= q; i++){ cin >> l >> r; int ans; if((l & 1) == 0){ if((r & 1) == 1){ // \u5de6\u5076\u53f3\u5947 ans = -1 * (r - l + 1) / 2; }else{ // \u5de6\u5076\u53f3\u5076 ans = r - (r - l) / 2; } }else{ if((r & 1) == 1){ // \u5de6\u5947\u53f3\u5947 ans = (r - l) / 2 - r; }else{ ans = (r - l + 1) / 2; } } cout << ans << endl; } return 0; } \u731c\u62f3\u6e38\u620f \u5c0fQ\u548c\u725b\u59b9\u53c2\u52a0\u4e00\u4e2a\u526a\u5200\u77f3\u5934\u5e03\u7684\u6e38\u620f\uff0c\u6e38\u620f\u7528\u5361\u7247\u6765\u73a9\uff0c\u6bcf\u5f20\u5361\u7247\u662f\u526a\u5200\uff0c\u77f3\u5934\uff0c\u5e03\u4e2d\u7684\u4e00\u79cd\uff0c\u6bcf\u79cd\u7c7b\u578b\u7684\u5361\u7247\u6709\u65e0\u9650\u4e2a\u3002 \u725b\u59b9\u4ece\u4e2d\u9009\u4e86n\u5f20\u5361\u7247\u6392\u6210\u4e00\u6392\uff0c\u6b63\u9762\u671d\u4e0b\uff0c\u5c0fQ\u4e5f\u4f1a\u9009\u62e9n\u5f20\u5361\u7247\u6392\u6210\u4e00\u6392\uff0c\u7136\u540e\u5c0fQ\u548c\u725b\u59b9\u7684\u5361\u7247\u4f1a\u4f9d\u6b21\u8fdb\u884c\u6bd4\u5bf9\uff0c\u7b2c\u4e00\u5f20\u5bf9\u7b2c\u4e00\u5f20\uff0c\u7b2c\u4e8c\u5f20\u5bf9\u7b2c\u4e8c\u5f20\u2026 \u5982\u679c\u5c0fQ\u8d62\uff0c\u5c0fQ\u4f1a\u5f97\u5230\u4e00\u5206\uff0c\u73b0\u5728\u5df2\u77e5\u725b\u59b9\u7684\u6bcf\u4e00\u5f20\u724c\u4ee5\u53ca\u5c0fQ\u6700\u7ec8\u7684\u5f97\u5206 s\uff0c\u8bf7\u95ee\u5c0fQ\u6709\u591a\u5c11\u79cd\u9009\u62e9\u5361\u7247\u7684\u65b9\u6848(\u591a\u5c11\u4e0d\u540c\u7684\u6392\u5217) \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \u548c s\u3002 \u7b2c\u4e8c\u884c\u5305\u542b n \u4e2a\u6574\u6570\uff0c\u8868\u793a\u725b\u59b9\u7684\u6bcf\u5f20\u5361\u7247\uff0c\u6bcf\u4e2a\u6570\u5728[0,2]\u4e4b\u95f4\uff0c0\u4ee3\u8868\u77f3\u5934\uff0c1\u4ee3\u8868\u5e03\uff0c2\u4ee3\u8868\u526a\u5200\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u603b\u65b9\u6848\u6570\u5bf9109+7\u53d6\u6a21\u540e\u7684\u503c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u22642000, 0\u2264s\u22642000 \u8f93\u5165\u6837\u4f8b\uff1a 3 2 0 1 2 \u8f93\u51fa\u6837\u4f8b\uff1a 6 \u89e3\u6cd5 #include <iostream> #include <math.h> using namespace std; typedef long long ll; int main(){ int n, s; cin >> n >> s; ll ans = 1; for(int i = n; i > n - s; i--){ ans *= i; } for(int i = s; i > 0; i--){ ans /= i; } cout << ans * pow(2, (n - s)) << endl; return 0; } \u5934\u6761\u7b14\u8bd5\u9898 855. \u7acb\u65b9\u4f53\u5854 \u5c0f\u65b9\u6709w\u4e2a\u767d\u8272\u7acb\u65b9\u4f53\u548cb\u4e2a\u9ed1\u8272\u7acb\u65b9\u4f53\uff0c\u73b0\u5728\u5c0f\u65b9\u60f3\u628a\u5b83\u4eec\u5806\u6210\u4e00\u4e2a\u7acb\u65b9\u4f53\u5854\u3002 \u4e00\u5ea7\u9ad8\u5ea6\u4e3ah\u7684\u7acb\u65b9\u4f53\u5854\uff0c\u6700\u5e95\u5c42\u6709h\u4e2a\u7acb\u65b9\u4f53\uff0c\u6bcf\u5f80\u4e0a\u4e00\u5c42\uff0c\u6240\u9700\u7acb\u65b9\u4f53\u51cf\u4e00\uff0c\u76f4\u5230\u6700\u9ad8\u5c42\u53ea\u9700\u8981\u4e00\u4e2a\u7acb\u65b9\u4f53\u3002 \u4e3a\u4e86\u8ba9\u8fd9\u5ea7\u5854\u770b\u8d77\u6765\u7f8e\u89c2\uff0c\u5c0f\u65b9\u5e0c\u671b\uff0c\u6bcf\u4e00\u5c42\u90fd\u53ea\u80fd\u7528\u4e00\u79cd\u989c\u8272\u7684\u7acb\u65b9\u4f53\u3002 \u5c0f\u65b9\u5e0c\u671b\u628a\u8fd9\u5ea7\u5854\u53e0\u7684\u5c3d\u53ef\u80fd\u9ad8\uff0c\u56e0\u6b64\u4ed6\u60f3\u77e5\u9053\u5854\u7684\u6700\u5927\u9ad8\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u9ad8\u5ea6\u7684\u7acb\u65b9\u4f53\u5854\u80fd\u6709\u51e0\u79cd\u3002 \u4e24\u79cd\u7acb\u65b9\u4f53\u5854\uff0c\u5f53\u4e14\u4ec5\u5f53\u81f3\u5c11\u6709\u4e00\u5c42\u7684\u989c\u8272\u662f\u4e0d\u540c\u7684\uff0c\u5219\u88ab\u8ba4\u4e3a\u662f\u4e0d\u540c\u7684\u3002 \u8f93\u5165\u683c\u5f0f \u5171\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570w\u548cb\u3002 \u8f93\u51fa\u683c\u5f0f \u5171\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570h\u548cc\uff0c\u5206\u522b\u8868\u793a\u6700\u9ad8\u5854\u7684\u9ad8\u5ea6\u4ee5\u53ca\u6b64\u9ad8\u5ea6\u5854\u7684\u79cd\u7c7b\u6570\u3002 \u56e0\u4e3a\u79cd\u7c7b\u6570\u53ef\u80fd\u8f83\u591a\uff0c\u8bf7\u5c06c\u5bf9109+7\u53d6\u6a21\u540e\u7684\u503c\u8f93\u51fa\u3002 \u6570\u636e\u8303\u56f4 0\u2264w,b\u2264105 \u8f93\u5165\u6837\u4f8b\uff1a 1 1 \u8f93\u51fa\u6837\u4f8b\uff1a 1 2 \u601d\u8def 1.\u5047\u8bbe\u4e0d\u8003\u8651\u989c\u8272\uff0ch\u7684\u7406\u8bba\u4e0a\u9650\u7531 w + b \u51b3\u5b9a h * (h + 1) / 2 <= w + b 2.\u5047\u8bbe\u5b9e\u9645\u9009\u53d6 a\u767d\u5757 b\u9ed1\u5757 a + b = h * (h + 1) / 2\uff0c\u7531\u6570\u5b66\u5f52\u7eb3\u6cd5\u5f97\u51fa\u4efb\u4f55\u4e00\u4e2aa\u53ef\u7531 0...h\u7684\u67d0\u51e0\u4e2a\u51d1\u51fa \u3010\u5982n = h - 1\u53ef\u51d1\u51fa 0 \uff5e 1 + ... (h - 1), \u53ef\u8bc1 n = h\u65f6 \u53ef\u51d1\u51fa 0 \uff5e 1 + ... + h\u3011(\u4e58\u6cd5\u539f\u7406) 3.\u5047\u8bbea\u786e\u5b9a\u65f6\uff0c\u7531\u591a\u5c11\u79cd\u7ec4\u5408\u53ef\u4ee5\u51d1\u6210a (\u4e58\u6cd5\u539f\u7406 01\u80cc\u5305) 4.a\u6709\u591a\u5c11\u79cd\u9009\u53d6\u60c5\u51b5(\u52a0\u6cd5\u539f\u7406) 5.\u7b2c3\u70b9\u53ef\u752801\u80cc\u5305\u89e3\u51b3 dp[i, j] \u6240\u6709\u53ea\u8003\u8651\u524di\u4e2a\u7269\u54c1\u65f6\u603b\u4f53\u79ef\u4e3aj\u7684\u65b9\u6848\u6570 dp[i, j] = dp[i - 1, j - v[i]] + dp[i - 1, j] \uff08\u5305\u542b\u7b2ci\u4e2a\u7269\u54c1\u548c\u4e0d\u5305\u542b\u7b2ci\u4e2a\u7269\u54c1\u7684\u65b9\u6848\u6570\uff09 i\u7531i-1\u9012\u63a8\uff0c \u53ef\u4ee5\u7528for\u4ece\u5c0f\u5230\u5927\u8fed\u4ee3\uff0c\u4e14v[i]\u5728\u672c\u9898\u5c31\u662fi\uff0c\u53ef\u7b80\u5316\u6210\u4e00\u7ef4\u8868\u793a dp[j] = dp[j - i] + dp[j] #include <iostream> #include <algorithm> using namespace std; const int N = 100010, mod = 1e9 + 7; int f[N]; int main() { int n, m; scanf(\"%d%d\", &n, &m); int h = 1; while (h * (h + 1) / 2 <= n + m) h ++ ; h -- ; f[0] = 1; for (int i = 1; i <= h; i ++ ) for (int j = n; j >= i; j -- ) f[j] = (f[j] + f[j - i]) % mod; int res = 0; for (int i = 0; i <= n; i ++ ) if (h * (h + 1) / 2 - i <= m) res = (res + f[i]) % mod; printf(\"%d %d\\n\", h, res); return 0; } 856. \u53d8\u91cf\u540d\u62c6\u5206 \u6709\u4e00\u5929\uff0c\u5c0f\u8d75\u6b63\u5728\u6109\u5feb\u7684\u6572\u4ee3\u7801\uff0c\u5c0f\u94b1\u8bf4\uff1a\u201c\u5c0f\u8d75\uff0c\u4f60\u8fd9\u4e2a\u53d8\u91cf\u7684\u540d\u5b57\u53d6\u7684\u53ef\u8bfb\u6027\u4e0d\u884c\u554a\uff0c\u6211\u90fd\u4e0d\u77e5\u9053\u54ea\u91cc\u5230\u54ea\u91cc\u4ee3\u8868\u4ec0\u4e48\u610f\u601d\u3002\u201d \u5c0f\u8d75\u4e0d\u670d\u6c14\u7684\u8bf4\uff1a\u201c\u90a3\u4f60\u7ed9\u6211\u4e00\u7ec4\u53d8\u91cf\u540d\uff0c\u6211\u4fdd\u8bc1\u6211\u7684\u53d8\u91cf\u540d\u53ef\u4ee5\u62c6\u5f00\uff0c\u5e76\u4e14\u62c6\u5f00\u7684\u6bcf\u4e00\u4e2a\u53d8\u91cf\u540d\u90fd\u5728\u4f60\u8fd9\u7ec4\u53d8\u91cf\u540d\u4e2d\u51fa\u73b0\u201d\u3002 \u73b0\u5728\u5c0f\u94b1\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e0d\u542b\u91cd\u590d\u53d8\u91cf\u540d\u7684\u5217\u8868\uff0c\u4f60\u80fd\u5224\u65ad\u5c0f\u8d75\u7684\u53d8\u91cf\u540d\u662f\u5426\u80fd\u591f\u62c6\u5206\u4e3a\u591a\u4e2a\u5c0f\u94b1\u63d0\u4f9b\u7684\u53d8\u91cf\u540d\u5417\uff0c\u80fd\u5219\u8f93\u51faTrue\uff0c\u4e0d\u80fd\u5219\u8f93\u51faFalse\u3002 \u8bf4\u660e\uff1a\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5c0f\u94b1\u63d0\u4f9b\u7684\u53d8\u91cf\u540d\uff0c\u8f93\u5165\u53d8\u91cf\u540d\u957f\u5ea6\u5747\u4e0d\u8d85\u8fc710000\uff0c\u53d8\u91cf\u540d\u4e2a\u6570\u4e0d\u8d85\u8fc710000\uff0c\u6240\u6709\u53d8\u91cf\u540d\u603b\u5b57\u7b26\u957f\u5ea6\u4e0d\u8d85\u8fc7106\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u5f85\u62c6\u5206\u7684\u53d8\u91cf\u540d\uff0c\u7b2c\u4e8c\u884c\u8f93\u5165\u591a\u4e2a\u53d8\u91cf\u540d\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u6839\u636e\u80fd\u4e0d\u80fd\u62c6\u5206\u8f93\u51faTrue\u6216False\u3002 \u8f93\u5165\u6837\u4f8b\uff1a thisisadog this thisis is a dog \u8f93\u51fa\u6837\u4f8b\uff1a True \u601d\u8def DP\u6a21\u578b + \u9884\u5904\u7406\u5b57\u7b26\u4e32Hash\u5316O(1) \u4e00\u822c\u7684string set\u662fO(n)\u7684\u4e00\u5b9a\u8981\u904d\u5386\u4e00\u904d\u5b57\u7b26\u4e32\u7684 \u72b6\u6001\u8868\u793a f(i) \u8868\u793a\u524di\u4e2a\u5b57\u6bcd\u80fd\u5426\u6210\u529f\u62c6\u5206 10000\u4e2a\u53d8\u91cf\u540d\u957f\u5ea6 \u4ecei\u5f80\u56de\u679a\u4e3e 1 + \u2026 + 10000 = 50000000 c++\u6700\u9ad81s 1e7 - 1e8 \u6240\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u662f\u5355\u8bcd O(1) \u5b57\u7b26\u4e32Hash\u6cd5 \u2014\u300b 0 - Q-1 \u7ecf\u9a8c\u53d6\u503c p: 131 13331 Q: 2**64 unsigned long long \u6ea2\u51fa\u76f8\u5f53\u4e8e\u6a21\u4e0a 2**64 3 \u4e00\u4e2a\u968f\u673a\u7684\u4e8c\u53c9\u67e5\u627e\u7684\u671f\u671b\u9ad8\u5ea6 logn \u5934\u6761\u7b14\u8bd5\u9898 864. \u4e8c\u7ef4\u6570\u7ec4\u533a\u5757\u8ba1\u6570 \u8f93\u5165\u4e00\u4e2a\u53ea\u5305\u542b0\u548c1\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u4e0a\u4e0b\u5de6\u53f3\u548c\u5bf9\u89d2\u76f8\u90bb\u76841\u7ec4\u6210\u4e00\u4e2a\u533a\u5757\uff0c0\u4e0d\u5f62\u6210\u533a\u5757\uff0c\u6c42\u6570\u7ec4\u4e2d\u7684\u533a\u5757\u4e2a\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570N\u548cM\uff0cN\u8868\u793a\u6570\u7ec4\u884c\u6570\uff0cM\u8868\u793a\u6570\u7ec4\u5217\u6570\u3002 \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u8868\u793a\u6570\u7ec4\u5bf9\u5e94\u7684\u4e00\u884c\uff0c\u6bcf\u884c\u5305\u542bM\u4e2a\u6574\u6570\uff0c\u6574\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6570\u7ec4\u4e2d\u533a\u5757\u7684\u4e2a\u6570\u3002 \u6570\u636e\u8303\u56f4 0\u2264N,M,N\u2217M\u2264106 \u8f93\u5165\u6837\u4f8b\uff1a 3 3 0 1 0 1 0 0 1 0 1 \u8f93\u51fa\u6837\u4f8b\uff1a 2 \u6837\u4f8b\u89e3\u91ca \u6570\u7ec4\u53f3\u4e0b\u89d2\u76841\u5355\u72ec\u6784\u6210\u4e00\u4e2a\u533a\u5757\uff0c\u5176\u4ed6\u76843\u4e2a1\u5bf9\u89d2\u6216\u4e0a\u4e0b\u76f8\u90bb\uff0c\u6784\u6210\u53e6\u4e00\u4e2a\u533a\u5757\u3002 \u7531\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u8981\u786e\u5b9a\u7684\u6570\u7ec4\u5927\u5c0f\uff0c\u96be\u4ee5\u786e\u5b9a\uff0c\u53ef\u7528\u4e00\u7ef4\u6570\u7ec4\u66ff\u6362 a[i][j] == a[i *m + j] \u601d\u8def1:\u904d\u5386 \u627e\u5230\u4e00\u4e2a1\uff0c \u628a\u6240\u6709\u76f8\u8fde\u76841\u53d8\u4e3a0 \u4f7f\u7528bfs \uff08dfs\u5bb9\u6613\u7206\u6808 c++\u68081M\u5de6\u53f3 java\u4e0epython\u6ca1\u5173\u7cfb\uff09 \u601d\u8def2:\u904d\u5386 \u9047\u5230\u4e00\u4e2a \u5224\u65ad \u5de6\u4e0a \u4e0a \u53f3\u4e0a \u5de6 865. \u5b57\u7b26\u4e32\u5c55\u5f00 \u5c0f\u8d75\u548c\u5c0f\u94b1\u5728\u7ec3\u5b57\uff0c\u5c0f\u94b1\u5bf9\u5c0f\u8d75\u8bf4\uff1a\u4f60\u77e5\u9053\u5417\uff0c\u6211\u7ec3\u4e60\u7684\u5b57\u662f\u6709\u8574\u542b\u7684\u3002 \u5c0f\u8d75\u4e0d\u670d\u6c14\u4e86\uff0c\u51ed\u4ec0\u4e48\u4f60\u7684\u5c31\u6709\u8574\u542b\u5462\uff1f \u5c0f\u94b1\u8bf4\uff0c\u4f60\u6240\u770b\u5230\u7684\u5e76\u4e0d\u662f\u6211\u771f\u6b63\u7ec3\u4e60\u7684\u5b57\uff0c\u4f60\u9700\u8981\u5c06\u6211\u73b0\u5728\u5199\u4e0b\u7684\u5b57\u7b26\u4e32\u91cc\u9762\u201c%\u201d\u548c\u201c#\u201d\u4e4b\u95f4\u7684\u5b57\u91cd\u590d\u7b26\u53f7\u524d\u7684\u90a3\u4e48\u591a\u500d\uff0c\u624d\u80fd\u770b\u5230\u6211\u771f\u6b63\u5199\u7684\u662f\u4ec0\u4e48\u3002 \u4f60\u80fd\u5e2e\u5e2e\u5c0f\u8d75\u5417\uff1f \u8bf4\u660e\uff1a\u53ef\u80fd\u5b58\u5728\u5d4c\u5957\u7684\u60c5\u51b5\uff0c\u5982\u201c3%g2%n##\u201d\uff0c\u8fd4\u56de\u201cgnngnngnn\u201d\uff0c\u8f93\u5165\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc710000\u3002 \u8f93\u5165\u5b57\u7b26\u4e32\u4fdd\u8bc1\u5408\u6cd5\uff0c\u4e14\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002 \u8f93\u5165\u683c\u5f0f \u4e00\u884c\u5e26\u6570\u5b57\u548c\u5d4c\u5957\u62ec\u53f7\u7684\u5b57\u7b26\u4e32\u3002 \u8f93\u51fa\u683c\u5f0f \u5c55\u5f00\u7684\u5b57\u7b26\u4e32\u3002 \u8f93\u5165\u6837\u4f8b\uff1a 3%acm#2%acm# \u8f93\u51fa\u6837\u4f8b\uff1a acmacmacmacmacm \u601d\u60f31: \u9012\u5f52 \u601d\u60f32: \u4ece\u540e\u5411\u524d\u904d\u5386 \u6ef4\u6ef419\u7b14\u8bd5\u9898 \u6cd5\u4e00 \u63d2\u5165\u6392\u5e8f + eval n = int(input()) s = list(input().split(\" \")) for i in range(len(s)): if s[i] in ['+','-','*','/']: new_s = s[:] for j in range(i, 0, -2): if int(new_s[j + 1]) > int(new_s[j - 1]): break t=new_s[j+1] new_s[j+1]=new_s[j-1] new_s[j-1]=t if eval(\"\".join(new_s)) == eval(\"\".join(s)): s = new_s[:] else: break print(\" \".join(s)) \u6cd5\u4e8c \u627e\u51fa\u5f85\u6392\u5e8f\u7684\u52a0\u6cd5 \u51cf\u6cd5 \u4e58\u6cd5 \u9664\u6cd5 \u51cf\u6cd5 \u9664\u6cd5 \u88ab\u9664\u6570\u53ef\u4ee5\u4ea4\u6362 \u817e\u8baf\u7b14\u8bd5\u9898 \u5fae\u8f6f\u7b2c\u4e09\u9898 Problem Check if a positive integer \ud835\udc5bn can be written as sum of a positive integer and reverse of that integer. Here, reverse of a positive integer is defined as the integer obtained by reversing the decimal representation of that integer. For example, 121 = 92 + 29. Analysis \u82e5 \ud835\udc65=\ud835\udc66+\ud835\udc5f(\ud835\udc66)x=y+r(y)\uff0c\u5176\u4e2d \ud835\udc5f(\ud835\udc66):=reverse of \ud835\udc66r(y):=reverse of y\uff0c\u5219\u53ef\u4ee5\u786e\u5b9a \ud835\udc66y \u662f\u51e0\u4f4d\u6570\u3002 \u82e5 \ud835\udc65x \u7684\u6700\u9ad8\u4f4d\u4e0a\u7684\u6570\u5b57\u5927\u4e8e 11\uff0c\u5219 \ud835\udc66y \u4e0e \ud835\udc65x \u4f4d\u6570\u76f8\u540c\u3002 \u82e5 \ud835\udc65x \u7684\u6700\u9ad8\u4f4d\u4e0a\u7684\u6570\u5b57\u7b49\u4e8e 11\uff0c\u5219 \ud835\udc65x \u7684\u6700\u9ad8\u4f4d\u53ef\u80fd\u662f \ud835\udc66+\ud835\udc5f(\ud835\udc66)y+r(y) \u8fdb\u4f4d\u5bfc\u81f4\u7684\uff0c\u4e8e\u662f\u6709\u4e24\u79cd\u53ef\u80fd \ud835\udc66y \u4e0e \ud835\udc65x \u4f4d\u6570\u76f8\u540c \ud835\udc66y \u6bd4 \ud835\udc65x \u5c11\u4e00\u4f4d \u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u8ba8\u8bba\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002\u786e\u5b9a\u4e86 \ud835\udc66y \u7684\u4f4d\u6570\uff0c\u8fdb\u4e00\u6b65\u53ef\u4ee5\u786e\u5b9a\u7b26\u5408\u6761\u4ef6\u7684 \ud835\udc66y \u662f\u5426\u5b58\u5728\u3002\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\uff0c\u5728 \u4e0d\u8fdb\u4f4d \u7684\u60c5\u51b5\u4e0b\uff0c\ud835\udc65x \u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u7279\u522b\u7684\uff0c\u5f53 \ud835\udc66y \u7684\u957f\u5ea6\u662f\u5947\u6570\u65f6\uff0c\u4e2d\u95f4\u7684\u90a3\u4e00\u4f4d\u4e0a\u5fc5\u987b\u662f\u5076\u6570\u3002 // x = y + reverse(y) // y \u6709 d.size() \u4f4d bool check(vector<int> d) { for (int i = 0, j = (int)d.size() - 1; i < j; ++i, --j) { // case 1: d[i] == d[j] // case 2: d[i] == d[j] + 10 // case 2: d[i] - 1 == d[j] // case 3: d[i] - 1 == d[j] + 10 if (d[i] == d[j]) continue; if (d[i] == d[j] + 10) d[j - 1] -= 1; else if (d[i] - 1 == d[j]) { d[i + 1] += 10; } else if (d[i] - 1 == d[j] + 10) { d[i + 1] += 10; d[j - 1] -= 1; } else { return false; } } if (d.size() & 1) { int t = d[d.size() / 2]; return t % 2 == 0 && t >= 0 && t <= 18; } return true; } bool solve(const char* s) { vector<int> d; for (int i = 0; s[i]; ++i) { d.push_back(s[i] - '0'); } bool res = check(d); if (d.front() == 1 && d.size() > 1) { d[1] += 10; d.erase(d.begin()); res |= check(d); } return res; } \u641c\u72d7 11\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u627e\u5176\u4e2d\u6700\u5c0f\u7684300\u4e2a\u6570\u3002 \u6700\u4f18\u89e3\u662flg(11)*300\u3002\u4f60\u7528\u4e00\u4e2a\u5e26\u5750\u6807\u7684\u6700\u5c0f\u5806\uff0c\u53ef\u4ee5\u5728lg(11)\u4e2d\u5f97\u5230\u6700\u5c0f\u503c\u7684\u5750\u6807\u3002\u7136\u540e\u66f4\u65b0\u5750\u6807\uff0c\u5e76\u653e\u65b0\u503c\u5165\u5806\u3002 def sort(lists, k=300): n = len(lists) ans = [] heap = [(lists[i][0], i) for i in range(n)] idx = {i: 1 for i in range(n)} heapq.heapify(heap) for _ in range(k): val, i = heapq.heappop(heap) ans.append(val) heapq.heappush(heap, (lists[i][idx[i]], i)) idx[i] += 1 return ans","title":"\u9762\u8bd5\u9898\u603b\u7ed3"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_1","text":"","title":"\u9762\u8bd5\u9898\u603b\u7ed3"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#todo","text":"","title":"todo \u80cc\u5305\u4e5d\u8bb2"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_2","text":"","title":"\u6280\u5de7"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_3","text":"","title":"\u4e0a\u53d6\u6574\u53d8\u4e0b\u53d6\u8bc1"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#cnm-mod-p","text":"","title":"\u7ec4\u5408\u6570\u6c42\u6a21 C(n,m) mod p"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#1n-mon2","text":"C(n,m)=C(n-1,m)+C(n-1,m-1)\uff1b \u7531\u4e8e\u7ec4\u5408\u6570\u6ee1\u8db3\u4ee5\u4e0a\u6027\u8d28\uff0c\u53ef\u4ee5\u9884\u5148\u751f\u6210\u6240\u6709\u7528\u5230\u7684\u7ec4\u5408\u6570\uff0c\u4f7f\u7528\u65f6\uff0c\u76f4\u63a5\u67e5\u627e\u5373\u53ef\u3002\u751f\u6210\u7684\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u67e5\u8be2\u590d\u6742\u5ea6\u4e3aO(1)\u3002\u8f83\u65b9\u6848\u4e00\u800c\u8a00\uff0c\u652f\u6301\u7684\u6570\u91cf\u7ea7\u5927\u6709\u63d0\u5347\uff0c\u57281\u79d2\u5185\uff0c\u57fa\u672c\u80fd\u5904\u740610000\u4ee5\u5185\u7684\u7ec4\u5408\u6570\u3002\u7b97\u6cd5\u7684\u9884\u5904\u7406\u65f6\u95f4\u8f83\u957f\uff0c\u53e6\u5916\u7a7a\u95f4\u82b1\u8d39\u8f83\u5927\uff0c\u90fd\u662f\u5e73\u65b9\u7ea7\u7684\uff0c\u4f18\u70b9\u662f\u5b9e\u73b0\u7b80\u5355\uff0c\u67e5\u8be2\u65f6\u95f4\u5feb\u3002 const int M = 10007; const int MAXN = 1000; int C[MAXN+1][MAXN+1]; // \u521d\u59cb\u5316 O(n ** 2) void Initial(){ int i, j; for(i = 0; i <= MAXN; i++){ C[0][i] = 0; C[i][0] = 1; } for(i = 1; i <= MAXN; i++){ for(j = 1; j <= MAXN; j++){ C[i][j] = (C[i-1][j] + C[i-1][j-1]) % M; } } } int Combination(int n, int m) { return C[n][m]; }","title":"1.\u6768\u8f89\u4e09\u89d2\u6cd5\uff08n, m\u8f83\u5c0f\u65f6\uff09O(n^2)"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#2todo-onlogn","text":"\u6a21\u9006\u5143+\u6574\u6570\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 3.","title":"2.[todo]\u5229\u7528\u4e58\u6cd5\u9006\u5143 O(nlogn)"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_4","text":"","title":"\u817e\u8baf\u6691\u671f\u63d0\u524d\u6279"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_5","text":"\u725b\u5bb6\u6751\u7684\u8d27\u5e01\u662f\u4e00\u79cd\u5f88\u795e\u5947\u7684\u8fde\u7eed\u8d27\u5e01\u3002 \u4ed6\u4eec\u8d27\u5e01\u7684\u6700\u5927\u9762\u989d\u662fn\uff0c\u5e76\u4e14\u4e00\u5171\u6709\u9762\u989d\u4e3a1\uff0c\u9762\u989d\u4e3a2.....\u9762\u989d\u4e3an\uff0cn\u79cd\u9762\u989d\u7684\u8d27\u5e01\u3002 \u725b\u725b\u6bcf\u6b21\u8d2d\u4e70\u5546\u54c1\u90fd\u4f1a\u5e26\u4e0a\u6240\u6709\u9762\u989d\u7684\u8d27\u5e01\uff0c\u652f\u4ed8\u65f6\u4f1a\u9009\u62e9\u7ed9\u51fa\u786c\u5e01\u6570\u91cf\u6700\u5c0f\u7684\u65b9\u6848\u3002 \u73b0\u5728\u544a\u8bc9\u4f60\u725b\u725b\u5c06\u8981\u8d2d\u4e70\u7684\u5546\u54c1\u7684\u4ef7\u683c\uff0c\u4f60\u80fd\u7b97\u51fa\u725b\u725b\u652f\u4ed8\u7684\u786c\u5e01\u6570\u91cf\u5417\uff1f (\u5047\u8bbe\u725b\u725b\u6bcf\u79cd\u9762\u989d\u7684\u8d27\u5e01\u90fd\u62e5\u6709\u65e0\u9650\u4e2a\u3002) \u8f93\u5165\u683c\u5f0f \u5171\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570n\u548cm\uff0c\u5206\u522b\u8868\u793a\u8d27\u5e01\u7684\u6700\u5927\u9762\u989d\u4ee5\u53ca\u5546\u54c1\u7684\u4ef7\u683c\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6574\u6570\u8868\u793a\u725b\u725b\u652f\u4ed8\u7684\u786c\u5e01\u6570\u91cf\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264105, 1\u2264m\u2264109 \u8f93\u5165\u6837\u4f8b1\uff1a 6 7 \u8f93\u51fa\u6837\u4f8b1\uff1a 2 \u8f93\u5165\u6837\u4f8b2\uff1a 4 10 \u8f93\u51fa\u6837\u4f8b2\uff1a 3","title":"\u786c\u5e01"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_6","text":"#include <iostream> #include <algorithm> using namespace std; int main(){ int n, m; cin >> n >> m; // (m + n - 1) / n cout << m / n + (int)(m % n > 0) << endl; return 0; }","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_7","text":"\u599e\u599e\u6700\u8fd1\u8ff7\u4e0a\u4e86\u738b\u8005\u8363\u8000\u3002 \u5c0fQ\u5f97\u5230\u4e86\u4e00\u4e2a\u5947\u5999\u7684\u6570\u5217\uff0c\u8fd9\u4e2a\u6570\u5217\u6709\u65e0\u9650\u591a\u9879\uff0c\u6570\u5217\u4e2d\u7684\u7b2c i \u4e2a\u6570\u5b57\u4e3ai\u2217(\u22121)i\uff0c\u6bd4\u5982\u6570\u5217\u7684\u524d\u51e0\u9879\u4e3a-1\uff0c2\uff0c-3\uff0c4\uff0c-5\u2026 \u5c0fQ\u5174\u594b\u628a\u8fd9\u4e2a\u6570\u5217\u62ff\u53bb\u7ed9\u599e\u599e\u770b\uff0c\u5e76\u5e0c\u671b\u501f\u6b64\u9080\u8bf7\u599e\u599e\u5403\u996d\u3002 \u599e\u599e\u60f3\u4e86\u60f3\uff0c\u5bf9\u5c0fQ\u8bf4\uff1a\u201c\u5bf9\u4e8e\u8fd9\u4e2a\u6570\u5217\uff0c\u6211\u6bcf\u6b21\u8be2\u95ee\u4f60\u4e00\u4e2a\u533a\u95f4\uff0c\u4f60\u57281\u79d2\u5185\u628a\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u5b57\u7684\u548c\u544a\u8bc9\u6211\uff0c\u5982\u679c\u4f60\u7b54\u5f97\u4e0a\u6765\u6211\u5c31\u8ddf\u4f60\u4e00\u8d77\u53bb\u5403\u996d\u3002\u201d \u7531\u4e8e\u599e\u599e\u6700\u8fd1\u6c89\u8ff7\u738b\u8005\u8363\u8000\uff0c\u5df2\u7ecf\u5f88\u4e45\u90fd\u6ca1\u7406\u8fc7\u5c0fQ\u4e86\uff0c\u6240\u4ee5\u5c0fQ\u4e0d\u60f3\u5931\u53bb\u8fd9\u6b21\u73cd\u8d35\u7684\u673a\u4f1a\uff0c\u4f60\u80fd\u5e2e\u5e2e\u4ed6\u5417\uff1f \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 q\uff0c\u8868\u793a\u599e\u599e\u7684\u8be2\u95ee\u6b21\u6570\u3002 \u63a5\u4e0b\u6765 q \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 l \u548c r\uff0c\u8868\u793a\u599e\u599e\u8be2\u95ee\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u3002 \u8f93\u51fa\u683c\u5f0f \u5171 q \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u599e\u599e\u8be2\u95ee\u7684\u533a\u95f4\u548c\u3002 \u6570\u636e\u8303\u56f4 1\u2264q\u2264105, 1\u2264l\u2264r\u2264109 \u8f93\u5165\u6837\u4f8b1\uff1a 4 2 4 2 2 3 3 1 5 \u8f93\u51fa\u6837\u4f8b1\uff1a 3 2 -3 -3 \u8f93\u5165\u6837\u4f8b2\uff1a 1 1 1000000000 \u8f93\u51fa\u6837\u4f8b2\uff1a 500000000","title":"\u5947\u5999\u7684\u6570\u5217"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_8","text":"#include <iostream> #include <algorithm> using namespace std; int main(){ int q, l, r; cin >> q; for(int i = 1; i <= q; i++){ cin >> l >> r; int ans; if((l & 1) == 0){ if((r & 1) == 1){ // \u5de6\u5076\u53f3\u5947 ans = -1 * (r - l + 1) / 2; }else{ // \u5de6\u5076\u53f3\u5076 ans = r - (r - l) / 2; } }else{ if((r & 1) == 1){ // \u5de6\u5947\u53f3\u5947 ans = (r - l) / 2 - r; }else{ ans = (r - l + 1) / 2; } } cout << ans << endl; } return 0; }","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_9","text":"\u5c0fQ\u548c\u725b\u59b9\u53c2\u52a0\u4e00\u4e2a\u526a\u5200\u77f3\u5934\u5e03\u7684\u6e38\u620f\uff0c\u6e38\u620f\u7528\u5361\u7247\u6765\u73a9\uff0c\u6bcf\u5f20\u5361\u7247\u662f\u526a\u5200\uff0c\u77f3\u5934\uff0c\u5e03\u4e2d\u7684\u4e00\u79cd\uff0c\u6bcf\u79cd\u7c7b\u578b\u7684\u5361\u7247\u6709\u65e0\u9650\u4e2a\u3002 \u725b\u59b9\u4ece\u4e2d\u9009\u4e86n\u5f20\u5361\u7247\u6392\u6210\u4e00\u6392\uff0c\u6b63\u9762\u671d\u4e0b\uff0c\u5c0fQ\u4e5f\u4f1a\u9009\u62e9n\u5f20\u5361\u7247\u6392\u6210\u4e00\u6392\uff0c\u7136\u540e\u5c0fQ\u548c\u725b\u59b9\u7684\u5361\u7247\u4f1a\u4f9d\u6b21\u8fdb\u884c\u6bd4\u5bf9\uff0c\u7b2c\u4e00\u5f20\u5bf9\u7b2c\u4e00\u5f20\uff0c\u7b2c\u4e8c\u5f20\u5bf9\u7b2c\u4e8c\u5f20\u2026 \u5982\u679c\u5c0fQ\u8d62\uff0c\u5c0fQ\u4f1a\u5f97\u5230\u4e00\u5206\uff0c\u73b0\u5728\u5df2\u77e5\u725b\u59b9\u7684\u6bcf\u4e00\u5f20\u724c\u4ee5\u53ca\u5c0fQ\u6700\u7ec8\u7684\u5f97\u5206 s\uff0c\u8bf7\u95ee\u5c0fQ\u6709\u591a\u5c11\u79cd\u9009\u62e9\u5361\u7247\u7684\u65b9\u6848(\u591a\u5c11\u4e0d\u540c\u7684\u6392\u5217) \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \u548c s\u3002 \u7b2c\u4e8c\u884c\u5305\u542b n \u4e2a\u6574\u6570\uff0c\u8868\u793a\u725b\u59b9\u7684\u6bcf\u5f20\u5361\u7247\uff0c\u6bcf\u4e2a\u6570\u5728[0,2]\u4e4b\u95f4\uff0c0\u4ee3\u8868\u77f3\u5934\uff0c1\u4ee3\u8868\u5e03\uff0c2\u4ee3\u8868\u526a\u5200\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u603b\u65b9\u6848\u6570\u5bf9109+7\u53d6\u6a21\u540e\u7684\u503c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u22642000, 0\u2264s\u22642000 \u8f93\u5165\u6837\u4f8b\uff1a 3 2 0 1 2 \u8f93\u51fa\u6837\u4f8b\uff1a 6","title":"\u731c\u62f3\u6e38\u620f"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_10","text":"#include <iostream> #include <math.h> using namespace std; typedef long long ll; int main(){ int n, s; cin >> n >> s; ll ans = 1; for(int i = n; i > n - s; i--){ ans *= i; } for(int i = s; i > 0; i--){ ans /= i; } cout << ans * pow(2, (n - s)) << endl; return 0; }","title":"\u89e3\u6cd5"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_11","text":"","title":"\u5934\u6761\u7b14\u8bd5\u9898"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#855","text":"\u5c0f\u65b9\u6709w\u4e2a\u767d\u8272\u7acb\u65b9\u4f53\u548cb\u4e2a\u9ed1\u8272\u7acb\u65b9\u4f53\uff0c\u73b0\u5728\u5c0f\u65b9\u60f3\u628a\u5b83\u4eec\u5806\u6210\u4e00\u4e2a\u7acb\u65b9\u4f53\u5854\u3002 \u4e00\u5ea7\u9ad8\u5ea6\u4e3ah\u7684\u7acb\u65b9\u4f53\u5854\uff0c\u6700\u5e95\u5c42\u6709h\u4e2a\u7acb\u65b9\u4f53\uff0c\u6bcf\u5f80\u4e0a\u4e00\u5c42\uff0c\u6240\u9700\u7acb\u65b9\u4f53\u51cf\u4e00\uff0c\u76f4\u5230\u6700\u9ad8\u5c42\u53ea\u9700\u8981\u4e00\u4e2a\u7acb\u65b9\u4f53\u3002 \u4e3a\u4e86\u8ba9\u8fd9\u5ea7\u5854\u770b\u8d77\u6765\u7f8e\u89c2\uff0c\u5c0f\u65b9\u5e0c\u671b\uff0c\u6bcf\u4e00\u5c42\u90fd\u53ea\u80fd\u7528\u4e00\u79cd\u989c\u8272\u7684\u7acb\u65b9\u4f53\u3002 \u5c0f\u65b9\u5e0c\u671b\u628a\u8fd9\u5ea7\u5854\u53e0\u7684\u5c3d\u53ef\u80fd\u9ad8\uff0c\u56e0\u6b64\u4ed6\u60f3\u77e5\u9053\u5854\u7684\u6700\u5927\u9ad8\u5ea6\u662f\u591a\u5c11\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u9ad8\u5ea6\u7684\u7acb\u65b9\u4f53\u5854\u80fd\u6709\u51e0\u79cd\u3002 \u4e24\u79cd\u7acb\u65b9\u4f53\u5854\uff0c\u5f53\u4e14\u4ec5\u5f53\u81f3\u5c11\u6709\u4e00\u5c42\u7684\u989c\u8272\u662f\u4e0d\u540c\u7684\uff0c\u5219\u88ab\u8ba4\u4e3a\u662f\u4e0d\u540c\u7684\u3002 \u8f93\u5165\u683c\u5f0f \u5171\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570w\u548cb\u3002 \u8f93\u51fa\u683c\u5f0f \u5171\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570h\u548cc\uff0c\u5206\u522b\u8868\u793a\u6700\u9ad8\u5854\u7684\u9ad8\u5ea6\u4ee5\u53ca\u6b64\u9ad8\u5ea6\u5854\u7684\u79cd\u7c7b\u6570\u3002 \u56e0\u4e3a\u79cd\u7c7b\u6570\u53ef\u80fd\u8f83\u591a\uff0c\u8bf7\u5c06c\u5bf9109+7\u53d6\u6a21\u540e\u7684\u503c\u8f93\u51fa\u3002 \u6570\u636e\u8303\u56f4 0\u2264w,b\u2264105 \u8f93\u5165\u6837\u4f8b\uff1a 1 1 \u8f93\u51fa\u6837\u4f8b\uff1a 1 2","title":"855. \u7acb\u65b9\u4f53\u5854"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_12","text":"1.\u5047\u8bbe\u4e0d\u8003\u8651\u989c\u8272\uff0ch\u7684\u7406\u8bba\u4e0a\u9650\u7531 w + b \u51b3\u5b9a h * (h + 1) / 2 <= w + b 2.\u5047\u8bbe\u5b9e\u9645\u9009\u53d6 a\u767d\u5757 b\u9ed1\u5757 a + b = h * (h + 1) / 2\uff0c\u7531\u6570\u5b66\u5f52\u7eb3\u6cd5\u5f97\u51fa\u4efb\u4f55\u4e00\u4e2aa\u53ef\u7531 0...h\u7684\u67d0\u51e0\u4e2a\u51d1\u51fa \u3010\u5982n = h - 1\u53ef\u51d1\u51fa 0 \uff5e 1 + ... (h - 1), \u53ef\u8bc1 n = h\u65f6 \u53ef\u51d1\u51fa 0 \uff5e 1 + ... + h\u3011(\u4e58\u6cd5\u539f\u7406) 3.\u5047\u8bbea\u786e\u5b9a\u65f6\uff0c\u7531\u591a\u5c11\u79cd\u7ec4\u5408\u53ef\u4ee5\u51d1\u6210a (\u4e58\u6cd5\u539f\u7406 01\u80cc\u5305) 4.a\u6709\u591a\u5c11\u79cd\u9009\u53d6\u60c5\u51b5(\u52a0\u6cd5\u539f\u7406) 5.\u7b2c3\u70b9\u53ef\u752801\u80cc\u5305\u89e3\u51b3 dp[i, j] \u6240\u6709\u53ea\u8003\u8651\u524di\u4e2a\u7269\u54c1\u65f6\u603b\u4f53\u79ef\u4e3aj\u7684\u65b9\u6848\u6570 dp[i, j] = dp[i - 1, j - v[i]] + dp[i - 1, j] \uff08\u5305\u542b\u7b2ci\u4e2a\u7269\u54c1\u548c\u4e0d\u5305\u542b\u7b2ci\u4e2a\u7269\u54c1\u7684\u65b9\u6848\u6570\uff09 i\u7531i-1\u9012\u63a8\uff0c \u53ef\u4ee5\u7528for\u4ece\u5c0f\u5230\u5927\u8fed\u4ee3\uff0c\u4e14v[i]\u5728\u672c\u9898\u5c31\u662fi\uff0c\u53ef\u7b80\u5316\u6210\u4e00\u7ef4\u8868\u793a dp[j] = dp[j - i] + dp[j] #include <iostream> #include <algorithm> using namespace std; const int N = 100010, mod = 1e9 + 7; int f[N]; int main() { int n, m; scanf(\"%d%d\", &n, &m); int h = 1; while (h * (h + 1) / 2 <= n + m) h ++ ; h -- ; f[0] = 1; for (int i = 1; i <= h; i ++ ) for (int j = n; j >= i; j -- ) f[j] = (f[j] + f[j - i]) % mod; int res = 0; for (int i = 0; i <= n; i ++ ) if (h * (h + 1) / 2 - i <= m) res = (res + f[i]) % mod; printf(\"%d %d\\n\", h, res); return 0; }","title":"\u601d\u8def"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#856","text":"\u6709\u4e00\u5929\uff0c\u5c0f\u8d75\u6b63\u5728\u6109\u5feb\u7684\u6572\u4ee3\u7801\uff0c\u5c0f\u94b1\u8bf4\uff1a\u201c\u5c0f\u8d75\uff0c\u4f60\u8fd9\u4e2a\u53d8\u91cf\u7684\u540d\u5b57\u53d6\u7684\u53ef\u8bfb\u6027\u4e0d\u884c\u554a\uff0c\u6211\u90fd\u4e0d\u77e5\u9053\u54ea\u91cc\u5230\u54ea\u91cc\u4ee3\u8868\u4ec0\u4e48\u610f\u601d\u3002\u201d \u5c0f\u8d75\u4e0d\u670d\u6c14\u7684\u8bf4\uff1a\u201c\u90a3\u4f60\u7ed9\u6211\u4e00\u7ec4\u53d8\u91cf\u540d\uff0c\u6211\u4fdd\u8bc1\u6211\u7684\u53d8\u91cf\u540d\u53ef\u4ee5\u62c6\u5f00\uff0c\u5e76\u4e14\u62c6\u5f00\u7684\u6bcf\u4e00\u4e2a\u53d8\u91cf\u540d\u90fd\u5728\u4f60\u8fd9\u7ec4\u53d8\u91cf\u540d\u4e2d\u51fa\u73b0\u201d\u3002 \u73b0\u5728\u5c0f\u94b1\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e0d\u542b\u91cd\u590d\u53d8\u91cf\u540d\u7684\u5217\u8868\uff0c\u4f60\u80fd\u5224\u65ad\u5c0f\u8d75\u7684\u53d8\u91cf\u540d\u662f\u5426\u80fd\u591f\u62c6\u5206\u4e3a\u591a\u4e2a\u5c0f\u94b1\u63d0\u4f9b\u7684\u53d8\u91cf\u540d\u5417\uff0c\u80fd\u5219\u8f93\u51faTrue\uff0c\u4e0d\u80fd\u5219\u8f93\u51faFalse\u3002 \u8bf4\u660e\uff1a\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5c0f\u94b1\u63d0\u4f9b\u7684\u53d8\u91cf\u540d\uff0c\u8f93\u5165\u53d8\u91cf\u540d\u957f\u5ea6\u5747\u4e0d\u8d85\u8fc710000\uff0c\u53d8\u91cf\u540d\u4e2a\u6570\u4e0d\u8d85\u8fc710000\uff0c\u6240\u6709\u53d8\u91cf\u540d\u603b\u5b57\u7b26\u957f\u5ea6\u4e0d\u8d85\u8fc7106\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u5f85\u62c6\u5206\u7684\u53d8\u91cf\u540d\uff0c\u7b2c\u4e8c\u884c\u8f93\u5165\u591a\u4e2a\u53d8\u91cf\u540d\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u6839\u636e\u80fd\u4e0d\u80fd\u62c6\u5206\u8f93\u51faTrue\u6216False\u3002 \u8f93\u5165\u6837\u4f8b\uff1a thisisadog this thisis is a dog \u8f93\u51fa\u6837\u4f8b\uff1a True","title":"856. \u53d8\u91cf\u540d\u62c6\u5206"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_13","text":"DP\u6a21\u578b + \u9884\u5904\u7406\u5b57\u7b26\u4e32Hash\u5316O(1) \u4e00\u822c\u7684string set\u662fO(n)\u7684\u4e00\u5b9a\u8981\u904d\u5386\u4e00\u904d\u5b57\u7b26\u4e32\u7684 \u72b6\u6001\u8868\u793a f(i) \u8868\u793a\u524di\u4e2a\u5b57\u6bcd\u80fd\u5426\u6210\u529f\u62c6\u5206 10000\u4e2a\u53d8\u91cf\u540d\u957f\u5ea6 \u4ecei\u5f80\u56de\u679a\u4e3e 1 + \u2026 + 10000 = 50000000 c++\u6700\u9ad81s 1e7 - 1e8 \u6240\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u662f\u5355\u8bcd O(1) \u5b57\u7b26\u4e32Hash\u6cd5 \u2014\u300b 0 - Q-1 \u7ecf\u9a8c\u53d6\u503c p: 131 13331 Q: 2**64 unsigned long long \u6ea2\u51fa\u76f8\u5f53\u4e8e\u6a21\u4e0a 2**64","title":"\u601d\u8def"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#3","text":"\u4e00\u4e2a\u968f\u673a\u7684\u4e8c\u53c9\u67e5\u627e\u7684\u671f\u671b\u9ad8\u5ea6 logn","title":"3"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_14","text":"","title":"\u5934\u6761\u7b14\u8bd5\u9898"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#864","text":"\u8f93\u5165\u4e00\u4e2a\u53ea\u5305\u542b0\u548c1\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u4e0a\u4e0b\u5de6\u53f3\u548c\u5bf9\u89d2\u76f8\u90bb\u76841\u7ec4\u6210\u4e00\u4e2a\u533a\u5757\uff0c0\u4e0d\u5f62\u6210\u533a\u5757\uff0c\u6c42\u6570\u7ec4\u4e2d\u7684\u533a\u5757\u4e2a\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570N\u548cM\uff0cN\u8868\u793a\u6570\u7ec4\u884c\u6570\uff0cM\u8868\u793a\u6570\u7ec4\u5217\u6570\u3002 \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u8868\u793a\u6570\u7ec4\u5bf9\u5e94\u7684\u4e00\u884c\uff0c\u6bcf\u884c\u5305\u542bM\u4e2a\u6574\u6570\uff0c\u6574\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6570\u7ec4\u4e2d\u533a\u5757\u7684\u4e2a\u6570\u3002 \u6570\u636e\u8303\u56f4 0\u2264N,M,N\u2217M\u2264106 \u8f93\u5165\u6837\u4f8b\uff1a 3 3 0 1 0 1 0 0 1 0 1 \u8f93\u51fa\u6837\u4f8b\uff1a 2 \u6837\u4f8b\u89e3\u91ca \u6570\u7ec4\u53f3\u4e0b\u89d2\u76841\u5355\u72ec\u6784\u6210\u4e00\u4e2a\u533a\u5757\uff0c\u5176\u4ed6\u76843\u4e2a1\u5bf9\u89d2\u6216\u4e0a\u4e0b\u76f8\u90bb\uff0c\u6784\u6210\u53e6\u4e00\u4e2a\u533a\u5757\u3002 \u7531\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u8981\u786e\u5b9a\u7684\u6570\u7ec4\u5927\u5c0f\uff0c\u96be\u4ee5\u786e\u5b9a\uff0c\u53ef\u7528\u4e00\u7ef4\u6570\u7ec4\u66ff\u6362 a[i][j] == a[i *m + j] \u601d\u8def1:\u904d\u5386 \u627e\u5230\u4e00\u4e2a1\uff0c \u628a\u6240\u6709\u76f8\u8fde\u76841\u53d8\u4e3a0 \u4f7f\u7528bfs \uff08dfs\u5bb9\u6613\u7206\u6808 c++\u68081M\u5de6\u53f3 java\u4e0epython\u6ca1\u5173\u7cfb\uff09 \u601d\u8def2:\u904d\u5386 \u9047\u5230\u4e00\u4e2a \u5224\u65ad \u5de6\u4e0a \u4e0a \u53f3\u4e0a \u5de6","title":"864. \u4e8c\u7ef4\u6570\u7ec4\u533a\u5757\u8ba1\u6570"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#865","text":"\u5c0f\u8d75\u548c\u5c0f\u94b1\u5728\u7ec3\u5b57\uff0c\u5c0f\u94b1\u5bf9\u5c0f\u8d75\u8bf4\uff1a\u4f60\u77e5\u9053\u5417\uff0c\u6211\u7ec3\u4e60\u7684\u5b57\u662f\u6709\u8574\u542b\u7684\u3002 \u5c0f\u8d75\u4e0d\u670d\u6c14\u4e86\uff0c\u51ed\u4ec0\u4e48\u4f60\u7684\u5c31\u6709\u8574\u542b\u5462\uff1f \u5c0f\u94b1\u8bf4\uff0c\u4f60\u6240\u770b\u5230\u7684\u5e76\u4e0d\u662f\u6211\u771f\u6b63\u7ec3\u4e60\u7684\u5b57\uff0c\u4f60\u9700\u8981\u5c06\u6211\u73b0\u5728\u5199\u4e0b\u7684\u5b57\u7b26\u4e32\u91cc\u9762\u201c%\u201d\u548c\u201c#\u201d\u4e4b\u95f4\u7684\u5b57\u91cd\u590d\u7b26\u53f7\u524d\u7684\u90a3\u4e48\u591a\u500d\uff0c\u624d\u80fd\u770b\u5230\u6211\u771f\u6b63\u5199\u7684\u662f\u4ec0\u4e48\u3002 \u4f60\u80fd\u5e2e\u5e2e\u5c0f\u8d75\u5417\uff1f \u8bf4\u660e\uff1a\u53ef\u80fd\u5b58\u5728\u5d4c\u5957\u7684\u60c5\u51b5\uff0c\u5982\u201c3%g2%n##\u201d\uff0c\u8fd4\u56de\u201cgnngnngnn\u201d\uff0c\u8f93\u5165\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc710000\u3002 \u8f93\u5165\u5b57\u7b26\u4e32\u4fdd\u8bc1\u5408\u6cd5\uff0c\u4e14\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002 \u8f93\u5165\u683c\u5f0f \u4e00\u884c\u5e26\u6570\u5b57\u548c\u5d4c\u5957\u62ec\u53f7\u7684\u5b57\u7b26\u4e32\u3002 \u8f93\u51fa\u683c\u5f0f \u5c55\u5f00\u7684\u5b57\u7b26\u4e32\u3002 \u8f93\u5165\u6837\u4f8b\uff1a 3%acm#2%acm# \u8f93\u51fa\u6837\u4f8b\uff1a acmacmacmacmacm \u601d\u60f31: \u9012\u5f52 \u601d\u60f32: \u4ece\u540e\u5411\u524d\u904d\u5386","title":"865. \u5b57\u7b26\u4e32\u5c55\u5f00"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#19","text":"","title":"\u6ef4\u6ef419\u7b14\u8bd5\u9898"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#eval","text":"n = int(input()) s = list(input().split(\" \")) for i in range(len(s)): if s[i] in ['+','-','*','/']: new_s = s[:] for j in range(i, 0, -2): if int(new_s[j + 1]) > int(new_s[j - 1]): break t=new_s[j+1] new_s[j+1]=new_s[j-1] new_s[j-1]=t if eval(\"\".join(new_s)) == eval(\"\".join(s)): s = new_s[:] else: break print(\" \".join(s))","title":"\u6cd5\u4e00 \u63d2\u5165\u6392\u5e8f + eval"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_15","text":"\u627e\u51fa\u5f85\u6392\u5e8f\u7684\u52a0\u6cd5 \u51cf\u6cd5 \u4e58\u6cd5 \u9664\u6cd5 \u51cf\u6cd5 \u9664\u6cd5 \u88ab\u9664\u6570\u53ef\u4ee5\u4ea4\u6362","title":"\u6cd5\u4e8c"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_16","text":"","title":"\u817e\u8baf\u7b14\u8bd5\u9898"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_17","text":"","title":"\u5fae\u8f6f\u7b2c\u4e09\u9898"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#problem","text":"Check if a positive integer \ud835\udc5bn can be written as sum of a positive integer and reverse of that integer. Here, reverse of a positive integer is defined as the integer obtained by reversing the decimal representation of that integer. For example, 121 = 92 + 29.","title":"Problem"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#analysis","text":"\u82e5 \ud835\udc65=\ud835\udc66+\ud835\udc5f(\ud835\udc66)x=y+r(y)\uff0c\u5176\u4e2d \ud835\udc5f(\ud835\udc66):=reverse of \ud835\udc66r(y):=reverse of y\uff0c\u5219\u53ef\u4ee5\u786e\u5b9a \ud835\udc66y \u662f\u51e0\u4f4d\u6570\u3002 \u82e5 \ud835\udc65x \u7684\u6700\u9ad8\u4f4d\u4e0a\u7684\u6570\u5b57\u5927\u4e8e 11\uff0c\u5219 \ud835\udc66y \u4e0e \ud835\udc65x \u4f4d\u6570\u76f8\u540c\u3002 \u82e5 \ud835\udc65x \u7684\u6700\u9ad8\u4f4d\u4e0a\u7684\u6570\u5b57\u7b49\u4e8e 11\uff0c\u5219 \ud835\udc65x \u7684\u6700\u9ad8\u4f4d\u53ef\u80fd\u662f \ud835\udc66+\ud835\udc5f(\ud835\udc66)y+r(y) \u8fdb\u4f4d\u5bfc\u81f4\u7684\uff0c\u4e8e\u662f\u6709\u4e24\u79cd\u53ef\u80fd \ud835\udc66y \u4e0e \ud835\udc65x \u4f4d\u6570\u76f8\u540c \ud835\udc66y \u6bd4 \ud835\udc65x \u5c11\u4e00\u4f4d \u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u8ba8\u8bba\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002\u786e\u5b9a\u4e86 \ud835\udc66y \u7684\u4f4d\u6570\uff0c\u8fdb\u4e00\u6b65\u53ef\u4ee5\u786e\u5b9a\u7b26\u5408\u6761\u4ef6\u7684 \ud835\udc66y \u662f\u5426\u5b58\u5728\u3002\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\uff0c\u5728 \u4e0d\u8fdb\u4f4d \u7684\u60c5\u51b5\u4e0b\uff0c\ud835\udc65x \u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u7279\u522b\u7684\uff0c\u5f53 \ud835\udc66y \u7684\u957f\u5ea6\u662f\u5947\u6570\u65f6\uff0c\u4e2d\u95f4\u7684\u90a3\u4e00\u4f4d\u4e0a\u5fc5\u987b\u662f\u5076\u6570\u3002 // x = y + reverse(y) // y \u6709 d.size() \u4f4d bool check(vector<int> d) { for (int i = 0, j = (int)d.size() - 1; i < j; ++i, --j) { // case 1: d[i] == d[j] // case 2: d[i] == d[j] + 10 // case 2: d[i] - 1 == d[j] // case 3: d[i] - 1 == d[j] + 10 if (d[i] == d[j]) continue; if (d[i] == d[j] + 10) d[j - 1] -= 1; else if (d[i] - 1 == d[j]) { d[i + 1] += 10; } else if (d[i] - 1 == d[j] + 10) { d[i + 1] += 10; d[j - 1] -= 1; } else { return false; } } if (d.size() & 1) { int t = d[d.size() / 2]; return t % 2 == 0 && t >= 0 && t <= 18; } return true; } bool solve(const char* s) { vector<int> d; for (int i = 0; s[i]; ++i) { d.push_back(s[i] - '0'); } bool res = check(d); if (d.front() == 1 && d.size() > 1) { d[1] += 10; d.erase(d.begin()); res |= check(d); } return res; }","title":"Analysis"},{"location":"\u7b97\u6cd5/\u9762\u8bd5\u9898\u603b\u7ed3.html#_18","text":"11\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u627e\u5176\u4e2d\u6700\u5c0f\u7684300\u4e2a\u6570\u3002 \u6700\u4f18\u89e3\u662flg(11)*300\u3002\u4f60\u7528\u4e00\u4e2a\u5e26\u5750\u6807\u7684\u6700\u5c0f\u5806\uff0c\u53ef\u4ee5\u5728lg(11)\u4e2d\u5f97\u5230\u6700\u5c0f\u503c\u7684\u5750\u6807\u3002\u7136\u540e\u66f4\u65b0\u5750\u6807\uff0c\u5e76\u653e\u65b0\u503c\u5165\u5806\u3002 def sort(lists, k=300): n = len(lists) ans = [] heap = [(lists[i][0], i) for i in range(n)] idx = {i: 1 for i in range(n)} heapq.heapify(heap) for _ in range(k): val, i = heapq.heappop(heap) ans.append(val) heapq.heappush(heap, (lists[i][idx[i]], i)) idx[i] += 1 return ans","title":"\u641c\u72d7"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html","text":"[toc] \u4e00\u3001Transformer \u5173\u952e\u8bcd: encoder, decoder, self-attention(multi-head self-attention), position encoding, Residuals, layer normalization, feed-forward 1.1 \u4f20\u7edf\u9012\u5f52\u7f51\u7edc\u7684\u95ee\u9898 \u200b \u5904\u7406Seq2seq\u6700\u5e38\u7528\u7684\u5c31\u662fRNN\u3002RNN\u7684\u8ba1\u7b97\u9650\u5236\u4e3a\u662f\u987a\u5e8f\u7684, \u65e0\u6cd5Parallel(\u5e76\u884c\u5904\u7406)\u3002 \u95ee\u9898: \u65f6\u95f4\u7247 t\u7684\u8ba1\u7b97\u4f9d\u8d56 t-1\u65f6\u523b\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u8fd9\u6837\u9650\u5236\u4e86\u6a21\u578b\u7684\u5e76\u884c\u80fd\u529b\u3002 \u987a\u5e8f\u8ba1\u7b97\u7684\u8fc7\u7a0b\u4e2d\u4fe1\u606f\u4f1a\u4e22\u5931\uff0c\u5c3d\u7ba1LSTM\u7b49\u95e8\u673a\u5236\u7684\u7ed3\u6784\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7f13\u89e3\u4e86\u957f\u671f\u4f9d\u8d56\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5bf9\u4e8e\u7279\u522b\u957f\u671f\u7684\u4f9d\u8d56\u73b0\u8c61,LSTM\u4f9d\u65e7\u65e0\u80fd\u4e3a\u529b\u3002 \u89e3\u51b3\u65b9\u6848: \u200b \u89e3\u51b3\u96be\u4ee5RNN\u7684\u96be\u4ee5\u5e73\u884c\u5316\u8ba1\u7b97\u95ee\u9898\u7684\u529e\u6cd5\u662f\u5229\u7528Transformer(Self-attention)\u66ff\u6362RNN\u3002 \u9996\u5148\u5b83\u4f7f\u7528\u4e86Attention\u673a\u5236\uff0c\u5c06\u5e8f\u5217\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u7f29\u5c0f\u4e3a\u4e00\u4e2a\u5e38\u91cf\u3002 \u5176\u6b21\u5b83\u4e0d\u662f\u7c7b\u4f3cRNN\u7684\u987a\u5e8f\u7ed3\u6784\uff0c\u56e0\u6b64\u5177\u6709\u66f4\u597d\u7684\u5e76\u884c\u6027\uff0c\u7b26\u5408\u73b0\u6709\u7684GPU\u6846\u67b6\u3002 \u200b \u8bba\u6587\u4e2d\u7ed9\u51faTransformer\u7684\u5b9a\u4e49\u662f\uff1aTransformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence aligned RNNs or convolution\u3002 \u7f3a\u70b9: \u5b9e\u8df5\u4e0a\uff1a\u6709\u4e9bRNN\u8f7b\u6613\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898transformer\u6ca1\u505a\u5230\uff0c\u6bd4\u5982 \u590d\u5236string \uff0c\u6216\u8005\u63a8\u7406\u65f6\u78b0\u5230\u7684sequence\u957f\u5ea6\u6bd4\u8bad\u7ec3\u65f6\u66f4\u957f\uff08\u56e0\u4e3a\u78b0\u5230\u4e86\u6ca1\u89c1\u8fc7\u7684position embedding\uff09\u3002 \u7406\u8bba\u4e0a\uff1atransformers\u4e0d\u662fcomputationally universal(\u56fe\u7075\u5b8c\u5907)\uff0c\u8fd9\u79cd\u975eRNN\u5f0f\u7684\u6a21\u578b\u662f\u975e\u56fe\u7075\u5b8c\u5907\u7684\u7684\uff0c \u65e0\u6cd5\u5355\u72ec\u5b8c\u6210NLP\u4e2d\u63a8\u7406\u3001\u51b3\u7b56\u7b49\u8ba1\u7b97\u95ee\u9898 \uff08\u5305\u62ec\u4f7f\u7528transformer\u7684bert\u6a21\u578b\u7b49\u7b49\uff09\u3002 1.2 Transformer\u6574\u4f53\u7ed3\u6784 \u200b \u7f16\u7801\u7ec4\u4ef6\u662f\u4e00\u7cfb\u5217\u7f16\u7801\u5668\u7684\u5806\u53e0\uff08\u6587\u7ae0\u4e2d\u662f6\u4e2a\u7f16\u7801\u5668\u7684\u5806\u53e0\uff09, \u89e3\u7801\u90e8\u5206\u4e5f\u662f\u540c\u6837\u7684\u5806\u53e0\u6570\u3002 \u200b \u7f16\u7801\u5668\u5728\u7ed3\u6784\u4e0a\u90fd\u662f\u4e00\u6837\u7684\uff08\u4f46\u662f\u5b83\u4eec\u4e0d\u5171\u4eab\u6743\u91cd\uff09\u3002\u6bcf\u4e2a\u90fd\u53ef\u4ee5\u5206\u89e3\u6210\u4e24\u4e2a\u5b50\u6a21\u5757\uff1a \u200b \u7f16\u7801\u5668\u7684\u8f93\u5165\u9996\u5148\u6d41\u7ecfself-attention\u5c42\uff0c\u8be5\u5c42\u6709\u52a9\u4e8e\u7f16\u7801\u5668\u5bf9\u7279\u5b9a\u5355\u8bcd\u7f16\u7801\u65f6\u67e5\u770b\u8f93\u5165\u5e8f\u5217\u7684\u5176\u4ed6\u5355\u8bcd\u3002 \u200b Self-attention\u5c42\u7684\u8f93\u51fa\u88ab\u9001\u5165\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u3002\u5b8c\u5168\u76f8\u540c\u7684\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u72ec\u7acb\u5e94\u7528\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u3002 \u200b \u89e3\u7801\u5668\u4e5f\u5177\u6709\u8fd9\u4e24\u5c42\uff0c\u4f46\u662f\u8fd9\u4e24\u5c42\u4e2d\u95f4\u8fd8\u63d2\u5165\u4e86attention\u5c42\uff0c\u80fd\u5e2e\u52a9\u89e3\u7801\u5668\u6ce8\u610f\u8f93\u5165\u53e5\u5b50\u7684\u76f8\u5173\u90e8\u5206\uff08\u548c seq2seq\u6a21\u578b \u7684attention\u76f8\u540c\uff09 1.3 Transformer\u6570\u636e\u6d41\u52a8 \u200b (1) \u6784\u5efa\u8f93\u5165 \u200b \u8f93\u5165\u5355\u8bcd\u8f6c\u6210word embedding\u548cposition encoding\u76f8\u52a0\u4f5c\u4e3a\u8f93\u5165, \u7ef4\u5ea6512\u3002 (2) Encoder\u90e8\u5206 \u7ecf\u8fc76\u6b21encoder, \u6bcf\u4e2aencoder\u8f93\u5165\u8f93\u51fa\u7ef4\u5ea6512, \u5168\u8fde\u63a5\u9690\u5c42\u7ef4\u5ea62048 multi-head self-attention\u5c42, feed-forward\u5c42, \u5bf9\u8f93\u51fa\u505a residual connect + layer normalization (3) Decoder\u90e8\u5206 \u7ecf\u8fc76\u6b21decoder, \u6bcf\u4e2adecoder\u8f93\u5165\u8f93\u51fa\u7ef4\u5ea6512, \u5168\u8fde\u63a5\u9690\u5c42\u7ef4\u5ea62048 masked multi-head self-attention\u5c42(masked\u4ee3\u8868\u8f93\u5165\u6765\u6e90\u4e8e\u4e0a\u4e00\u65f6\u95f4\u7684\u8f93\u51fa), \u5bf9\u8f93\u51fa\u505a residual connect + layer normalization encoder-decoder attention, decoder\u7684V\u4e0e\u4e4b\u524dencoder\u90e8\u5206\u7684K\u548cV\u53bb\u505aattention, \u4e4b\u540e\u5bf9\u8f93\u51fa\u505a residual connect + layer normalization feed-forward\u5c42, \u5bf9\u8f93\u51fa\u505a residual connect + layer normalization \u200b \u533a\u522b Decoder\u4e0eEncoder\u4e2d\u7684self-attention\u5c42\u6709\u533a\u522b, decoder\u4e2d\u4ec5\u5141\u8bb8 self-attention\u5c42\u5173\u6ce8\u8f93\u51fa\u5e8f\u5217\u4e2d\u8f83\u65e9\u7684\u4f4d\u7f6e\u3002\u8fd9\u662f\u901a\u8fc7\u5728\u8ba1\u7b97self-attention\u4e2dsoftmax\u6b65\u9aa4\u524d\u5c4f\u853d\u672a\u6765\u4f4d\u7f6e\uff08\u5c06\u5b83\u4eec\u8bbe\u7f6e\u4e3a-inf\uff09\u5b9e\u73b0\u7684\u3002 \u200b Transformer\u4e00\u4e2a\u91cd\u8981\u7279\u6027: \u6bcf\u4e2a\u4f4d\u7f6e\u7684\u5355\u8bcd\u5728\u7ecf\u8fc7\u7f16\u7801\u5668\u65f6\u6d41\u7ecf\u81ea\u5df1\u7684\u8def\u5f84\u3002self-attention\u5c42\u4e2d\u8fd9\u4e9b\u8def\u5f84\u4e4b\u95f4\u6709\u4f9d\u8d56\u5173\u7cfb\u3002\u7136\u800c\u524d\u9988\u5c42\u5e76\u4e0d\u5177\u6709\u8fd9\u4e9b\u4f9d\u8d56\u5173\u7cfb\uff0c\u6240\u4ee5\u5404\u79cd\u8def\u5f84\u5728\u6d41\u7ecf\u524d\u9988\u5c42\u65f6\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u3002 1.4 Self-Attention\u7ec6\u8282 (1) \u9700\u8981\u4ece\u6bcf\u4e2a\u8f93\u5165\u8bcd\u5411\u91cf\u4e2d\u521b\u5efa\u4e09\u4e2a\u5411\u91cf, Query, Key, Value q \u7528\u4e8ematch\u5176\u5b83\u8f93\u51fa k \u7528\u4e8e\u88abmatch v \u662f\u62bd\u53d6\u51fa\u6765\u7684\u4fe1\u606f\u3002 \u200b \u6ce8\u610f \u8fd9\u4e9b\u65b0\u521b\u5efa\u7684\u5411\u91cf\u7684\u7ef4\u5ea6\u5c0f\u4e8e\u8bcd\u5d4c\u5165\u5411\u91cf(embedding vector)\u3002\u5b83\u4eec\uff08\u65b0\u521b\u5efa\u7684\u5411\u91cf\uff09\u7684\u7ef4\u5ea6\u662f64\uff0c\u800c\u8bcd\u5d4c\u5165\u548c\u7f16\u7801\u5668\u7684\u8f93\u5165\u8f93\u51fa\u5411\u91cf\u7684\u7ef4\u5ea6\u662f512\u3002\u5b83\u4eec\u4e0d\u5fc5\u66f4\u5c0f\uff0c\u8fd9\u662f\u4e00\u79cd\u67b6\u6784\u9009\u62e9\uff0c\u53ef\u4ee5\u4f7f\u591a\u5934\u6ce8\u610f\u529b(multiheaded attention)\u8ba1\u7b97\u4e0d\u53d8\u3002 (2) \u8ba1\u7b97\u5f97\u5206(score \u6743\u91cd) \u200b \u5f53\u6211\u4eec\u5728\u67d0\u4e2a\u4f4d\u7f6e\u7f16\u7801\u5355\u8bcd\u65f6\uff0c\u5206\u6570\u51b3\u5b9a\u4e86\u5bf9\u8f93\u5165\u53e5\u5b50\u7684\u5176\u4ed6\u90e8\u5206\u653e\u7f6e\u591a\u5c11\u7684\u7126\u70b9(\u6ce8\u610f\u529b)\u3002 (3) \u5bf9\u52a0\u6743\u503c\u5411\u91cf\u6c42\u548c, \u8fd9\u6837\u5c31\u4ea7\u751f\u4e86\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u7684self-attention\u7684\u8f93\u51fa \u603b\u7ed3 \u200b \u8fd9\u5c31\u662fself-attention\u8ba1\u7b97\u3002\u5f97\u5230\u7684\u5411\u91cf\u53ef\u4ee5\u9001\u5f80\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u3002 \u200b \u7136\u800c\u5728\u771f\u6b63\u7684\u5b9e\u73b0\u4e2d\uff0c\u8ba1\u7b97\u8fc7\u7a0b\u901a\u8fc7\u77e9\u9635\u8ba1\u7b97\u6765\u8fdb\u884c\uff0c\u4ee5\u4fbf\u52a0\u5feb\u8ba1\u7b97\u3002 1.5 Multi-head Self-attention \u4f5c\u7528 \u5b83\u6269\u5c55\u4e86\u6a21\u578b\u5173\u6ce8\u4e0d\u540c\u4f4d\u7f6e\u7684\u80fd\u529b\u3002 \u5b83\u7ed9\u4e88attention\u5c42\u591a\u4e2a\u201c\u8868\u8fbe\u5b50\u7a7a\u95f4\u201d\u3002 1.6 Positional Encoding Self-Attention\u672a\u89e3\u51b3\u8f93\u5165\u5e8f\u5217\u4e2d\u5355\u8bcd\u987a\u5e8f\u7684\u95ee\u9898\u3002Transformer\u4e3a\u6bcf\u4e2a\u8f93\u5165\u7684\u8bcd\u5d4c\u5165\u589e\u52a0\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u5411\u91cf\u3002\u8fd9\u4e9b\u5411\u91cf\u9075\u5faa\u6a21\u578b\u5b66\u4e60\u5230\u7684\u7279\u5b9a\u6a21\u5f0f\uff0c\u8fd9\u6709\u52a9\u4e8e\u786e\u5b9a\u6bcf\u4e2a\u5355\u8bcd\u7684\u4f4d\u7f6e\uff0c\u6216\u8005\u5b66\u4e60\u5230\u4e0d\u540c\u5355\u8bcd\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u5728\u539f\u59cb\u7684\u8bba\u6587\u4e2d\uff0c\u4f5c\u8005\u52a0\u5165\u8bbe\u5b9a\u7684$e^i$(\u4e0d\u662f\u5b66\u4e60\u51fa\u6765\u7684)\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u76f8\u5f53\u4e8e\u63d0\u4f9b\u4f4d\u7f6e\u8d44\u8baf\u3002 \u200b \u8bba\u6587\u4e2d\u7684$e^i$\u88ab\u76f4\u63a5\u52a0\u5230\u4e86$a^i$\u4e0a, \u4e3a\u4ec0\u4e48\u4e0d\u628a$e^i$\u548c$a^i$\u505aconcat\u5462, \u7531\u4e0b\u56fe\u53ef\u77e5\u672c\u8d28\u4e0a\u5c31\u662f\u505a\u4e86\u4f4d\u7f6e\u7684onthot\u548c\u539f\u59cb\u8f93\u5165\u505a\u4e86concat\u505a\u4e00\u4e2a\u77e9\u9635\u6620\u5c04\u5f97\u5230\u7684\u5c31\u662f$e^i$\u4e0e$a^i$\u7684\u7d2f\u52a0\u7ed3\u679c \u200b \u4e0b\u56fe\u4e2d\uff0c\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u4e2a\u5411\u91cf\u7684\u4f4d\u7f6e\u7f16\u7801, \u6bcf\u884c\u5305\u542b512\u4e2a\u503c\u2014\u6bcf\u4e2a\u503c\u4ecb\u4e8e-1\u52301\u4e4b\u95f4\u3002\u8fd9\u91cc\u6211\u4eec\u8fdb\u884c\u4e86\u6d82\u8272\uff0c\u4f7f\u6a21\u5f0f\u53ef\u89c1\u3002\u8be5\u4f8b\u5b50\u4e2d\u517120\u4e2a\u8bcd\uff08\u884c\uff09\uff0c\u8bcd\u5d4c\u5165\u5411\u91cf\u7ef4\u5ea6\u4e3a512\u7ef4(\u5217)\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u4e2d\u5fc3\u533a\u57df\u5206\u6210\u4e24\u534a\u3002\u8fd9\u662f\u56e0\u4e3a\u5de6\u8fb9\u7684\u503c\u662f\u7531\u4e00\u4e2a\u51fd\u6570(\u6b63\u5f26)\u4ea7\u751f\u7684\uff0c\u53f3\u8fb9\u7684\u503c\u662f\u7531\u53e6\u4e00\u4e2a\u51fd\u6570(\u4f59\u5f26)\u4ea7\u751f\u7684\u3002\u7136\u540e\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\u5f62\u6210\u6bcf\u4e2a\u4f4d\u7f6e\u7f16\u7801\u5411\u91cf\u3002 \u200b \u4f4d\u7f6e\u7f16\u7801\u7684\u516c\u5f0f\u5728\u6587\u7ae0(3.5\u8282)\u6709\u63cf\u8ff0\u3002\u4f60\u53ef\u4ee5\u5728 get_timing_signal_1d() \u51fd\u6570\u4e2d\u770b\u5230\u7528\u4e8e\u751f\u6210\u4f4d\u7f6e\u7f16\u7801\u7684\u4ee3\u7801\u3002\u8fd9\u5e76\u4e0d\u662f\u751f\u6210\u4f4d\u7f6e\u7f16\u7801\u7684\u552f\u4e00\u65b9\u5f0f\u3002\u7136\u800c\uff0c\u5b83\u7684\u4f18\u70b9\u5728\u4e8e\u53ef\u4ee5\u6269\u5c55\u5230\u770b\u4e0d\u89c1\u7684\u5e8f\u5217\u957f\u5ea6\uff08eg. \u5982\u679c\u8981\u7ffb\u8bd1\u7684\u53e5\u5b50\u7684\u957f\u5ea6\u8fdc\u957f\u4e8e\u8bad\u7ec3\u96c6\u4e2d\u6700\u957f\u7684\u53e5\u5b50\uff09\u3002 1.7 \u8bad\u7ec3\u8fc7\u7a0b \u200b \u635f\u5931\u51fd\u6570 \u200b beam search 1.8 Transformer \u6e90\u7801\u5206\u6790 1.8.1 Transformer\u6e90\u7801\u5217\u8868 attention-is-all-you-need-pytorch \uff08\u5f3a\u70c8\u63a8\u8350\uff0c\u8bfb\u6e90\u7801\u518d\u7ed3\u5408\u6587\u7ae0\uff0c\u7406\u89e3\u66f4\u5168\u9762\u548c\u6df1\u5165\uff09 The Annotated Transformer (harvardnlp\u7684\u4ee3\u7801\u89e3\u8bfb)\u53ca\u5176 \u4fee\u6539\u7248 \u601d\u8def (\u63a8\u8350) tensorflow/tensor2tensor (\u5b98\u65b9\u5b9e\u73b0) tensorflow/models/official/transformer (tf-models\u5b9e\u73b0) Pytorch-transformer (\u5e38\u7528\u5de5\u5177) \u200b \u6211\u9009\u53d6harvardnlp\u4fee\u6539\u7248\u6765\u8fdb\u884c\u6e90\u7801\u5206\u6790\u3002 1.9 Universal Transformers [TODO] Universal Transformers Universal Transformer 1.10 \u8fdb\u4e00\u6b65\u5b66\u4e60 \u5982\u679c\u60f3\u66f4\u6df1\u7406\u89e3\u7684\u8bdd\uff0c\u6211\u5efa\u8bae\uff1a \u9605\u8bfb\u6587\u7ae0 Attention Is All You Need \uff0c\u548cTransformer\u7684\u5b98\u65b9\u535a\u6587\uff1a ( Transformer: A Novel Neural Network Architecture for Language Understanding ), \u548c Tensor2Tensor announcement \u3002 \u770b \u0141ukasz Kaiser\u2019s \u7684\u8bb2\u89e3\u89c6\u9891 \u6df1\u5165\u6a21\u578b\u7ec6\u8282\u3002 \u6253\u5f00 Tensor2Tensor\u7684Jupyter notebook \u6765\u8be6\u7ec6\u4e86\u89e3\u3002 \u63a2\u7d22 Tensor2Tensor \u4ee3\u7801\u4ed3\u5e93 \u3002 \u4ee5\u53ca\u76f8\u5173\u5de5\u4f5c\uff1a Depthwise Separable Convolutions for Neural Machine Translation One Model To Learn Them All Discrete Autoencoders for Sequence Models Generating Wikipedia by Summarizing Long Sequences Image Transformer Training Tips for the Transformer Model Self-Attention with Relative Position Representations Fast Decoding in Sequence Models using Discrete Latent Variables Adafactor: Adaptive Learning Rates with Sublinear Memory Cost \u4e8c\u3001\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b 2.1 Feature-based\u65b9\u6cd5 \u200b \u5e7f\u6cdb\u91c7\u7528\u7684 \u5355\u8bcd\u8868\u5f81\u5b66\u4e60 \uff0c\u5df2\u7ecf\u662f\u6570\u5341\u5e74\u7684\u6d3b\u8dc3\u7814\u7a76\u9886\u57df\uff0c\u5305\u62ec\u975e\u795e\u7ecf\u7f51\u7edc\u548c\u795e\u7ecf\u7f51\u7edc\u7684\u7b97\u6cd5, \u4f8b\u5982ELMo\u3002 2.2 Fine-tuning\u65b9\u6cd5 \u200b \u4e00\u79cd\u6e90\u4e8e\u8bed\u8a00\u6a21\u578b(LMs)\u7684\u8fc1\u79fb\u5b66\u4e60\u65b0\u8d8b\u52bf\uff0c\u662f\u5fae\u8c03\u524d\u9884\u8bad\u7ec3\u4e00\u4e9bLM\u76ee\u6807\u4e0a\u7684\u6a21\u578b\u67b6\u6784, \u4f8b\u5982GPT, BERT\u3002 \u4e09\u3001ELMO [TODO] 3.1 ELMO\u601d\u60f3\u8d77\u6e90 \u200b \u5c3d\u7ba1\u6709\u4e0d\u540c\u7684\u610f\u601d\uff0c\u4f46\u4f7f\u7528\u4f20\u7edf\u7684word embedding\u7684\u65b9\u6cd5\uff0c\u76f8\u540c\u7684\u5355\u8bcd\u90fd\u4f1a\u5bf9\u5e94\u540c\u6837\u7684embedding\u3002\u4f46\u6211\u4eec\u5e0c\u671b\u9488\u5bf9\u4e0d\u540c\u610f\u601d\u7684bank\uff0c\u53ef\u4ee5\u7ed9\u51fa\u4e0d\u540c\u7684embedding\u8868\u793a\u3002 \u200b \u6839\u636e\u4e0a\u4e0b\u6587\u8bed\u5883\u7684\u4e0d\u540c\uff0c\u540c\u4e00\u4e2a\u5355\u8bcdbank\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5f97\u5230\u4e0d\u540c\u7684embedding\uff0c\u5982\u679cbank\u7684\u610f\u601d\u662f\u94f6\u884c\uff0c\u6211\u4eec\u671f\u671b\u5b83\u4eec\u4e4b\u95f4\u7684embedding\u80fd\u591f\u76f8\u8fd1\uff0c\u540c\u65f6\u80fd\u591f\u4e0e\u6cb3\u5824\u610f\u601d\u7684bank\u76f8\u8ddd\u8f83\u8fdc\u3002 \u200b \u57fa\u4e8e\u8fd9\u4e2a\u601d\u60f3\uff0c\u9996\u5148\u6709\u4e86ELMO\u3002 3.2 ELMO\u4ecb\u7ecd(Embeddings from Language Model) \u200b ELMO\u662fEmbeddings from Language Model\u7684\u7b80\u79f0\uff0cELMO\u662f\u300a\u829d\u9ebb\u8857\u300b\u4e2d\u7684\u4e00\u4e2a\u89d2\u8272\u3002\u5b83\u662f\u4e00\u4e2aRNN-based\u7684\u8bed\u8a00\u6a21\u578b\uff0c\u5176\u4efb\u52a1\u662f\u5b66\u4e60\u53e5\u5b50\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5355\u8bcd\u6216\u8005\u524d\u4e00\u4e2a\u5355\u8bcd\u662f\u4ec0\u4e48\u3002 \u200b \u5b83\u662f\u4e00\u4e2a\u53cc\u5411\u7684RNN\u7f51\u7edc\uff0c\u8fd9\u6837\u6bcf\u4e00\u4e2a\u5355\u8bcd\u90fd\u5bf9\u5e94\u4e24\u4e2ahidden state\uff0c\u8fdb\u884c\u62fc\u63a5\u4fbf\u53ef\u4ee5\u5f97\u5230\u5355\u8bcd\u7684Embedding\u8868\u793a\u3002\u5f53\u540c\u4e00\u4e2a\u5355\u8bcd\u4e0a\u4e0b\u6587\u4e0d\u4e00\u6837\uff0c\u5f97\u5230\u7684embedding\u5c31\u4e0d\u540c\u3002 \u200b \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u641e\u66f4\u591a\u5c42\uff1a \u200b \u8fd9\u4e48\u591a\u5c42\u7684RNN\uff0c\u5185\u90e8\u6bcf\u4e00\u5c42\u8f93\u51fa\u90fd\u662f\u5355\u8bcd\u7684\u4e00\u4e2a\u8868\u793a\uff0c\u90a3\u6211\u4eec\u53d6\u54ea\u4e00\u5c42\u7684\u8f93\u51fa\u6765\u4ee3\u8868\u5355\u8bcd\u7684embedding\u5462\uff1f\u5728ELMO\u4e2d\uff0c\u4e00\u4e2a\u5355\u8bcd\u4f1a\u5f97\u5230\u591a\u4e2aembedding\uff0c\u5bf9\u4e0d\u540c\u7684embedding\u8fdb\u884c\u52a0\u6743\u6c42\u548c\uff0c\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684embedding\u7528\u4e8e\u4e0b\u6e38\u4efb\u52a1\u3002\u8981\u8bf4\u660e\u4e00\u4e2a\u8fd9\u91cc\u7684embedding\u4e2a\u6570\uff0c\u4e0b\u56fe\u4e2d\u53ea\u753b\u4e86\u4e24\u5c42RNN\u8f93\u51fa\u7684hidden state\uff0c\u5176\u5b9e\u8f93\u5165\u5230RNN\u7684\u539f\u59cbembedding\u4e5f\u662f\u9700\u8981\u7684\uff0c\u6240\u4ee5\u4f60\u4f1a\u770b\u5230\u8bf4\u53f3\u4e0b\u89d2\u7684\u56fe\u7247\u4e2d\uff0c\u5305\u542b\u4e86\u4e09\u4e2aembedding\u3002 \u200b \u4f46\u4e0d\u540c\u7684\u6743\u91cd\u662f\u57fa\u4e8e\u4e0b\u6e38\u4efb\u52a1\u5b66\u4e60\u51fa\u6765\u7684\uff0c\u4e0a\u56fe\u4e2d\u53f3\u4e0b\u89d2\u7ed9\u4e865\u4e2a\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u5176\u5f97\u5230\u7684embedding\u6743\u91cd\u5404\u4e0d\u76f8\u540c\u3002 \u56db\u3001GPT [TODO] 4.1 OpenAI GPT 4.2 GPT-2 \u4e94\u3001BERT 5.1 BERT\u4ecb\u7ecd \u200b Bert\u662fBidirectional Encoder Representations from Transformers\u7684\u7f29\u5199\uff0c\u5b83\u4e5f\u662f\u829d\u9ebb\u8857\u7684\u4eba\u7269\u4e4b\u4e00\u3002\u5373\u539f\u7406\u662fTransformer\u7684\u53cc\u5411\u7f16\u7801\u8868\u793a\u6765\u6539\u8fdb\u57fa\u4e8e\u67b6\u6784\u5fae\u8c03\u7684\u65b9\u6cd5\u3002Transformer\u4e2d\u7684Encoder\u5c31\u662fBert\u9884\u8bad\u7ec3\u7684\u67b6\u6784\u3002\u5982\u679c\u662f\u4e2d\u6587\u7684\u8bdd\uff0c\u53ef\u4ee5\u628a\u5b57\u4f5c\u4e3a\u5355\u4f4d\uff0c\u800c\u4e0d\u662f\u8bcd\u3002 \u200b \u4e0d\u540c\u4e8e\u6700\u8fd1\u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0cBERT\u65e8\u5728\u57fa\u4e8e\u6240\u6709\u5c42\u7684\u5de6\u3001\u53f3\u8bed\u5883\u6765\u9884\u8bad\u7ec3\u6df1\u5ea6\u53cc\u5411\u8868\u5f81\u3002\u56e0\u6b64\uff0c\u9884\u8bad\u7ec3\u7684BERT\u8868\u5f81\u53ef\u4ee5\u4ec5\u7528\u4e00\u4e2a\u989d\u5916\u7684\u8f93\u51fa\u5c42\u8fdb\u884c\u5fae\u8c03\uff0c\u8fdb\u800c\u4e3a\u5f88\u591a\u4efb\u52a1(\u5982\u95ee\u7b54\u548c\u8bed\u8a00\u63a8\u7406)\u521b\u5efa\u5f53\u524d\u6700\u4f18\u6a21\u578b\uff0c\u65e0\u9700\u5bf9\u4efb\u52a1\u7279\u5b9a\u67b6\u6784\u505a\u51fa\u5927\u91cf\u4fee\u6539\u3002 \u200b BERT\u7684\u5237\u65b0\u4e8611\u4e2aNLP\u4efb\u52a1\u7684\u5f53\u524d\u6700\u4f18\u7ed3\u679c\uff0c\u5305\u62ec\u5c06GLUE\u57fa\u51c6\u63d0\u5347\u81f380.4%(7.6%\u7684\u7edd\u5bf9\u6539\u8fdb)\u3001\u5c06MultiNLI\u7684\u51c6\u786e\u7387\u63d0\u9ad8\u523086.7%(5.6%\u7684\u7edd\u5bf9\u6539\u8fdb)\uff0c\u4ee5\u53ca\u5c06SQuADv1.1\u95ee\u7b54\u6d4b\u8bd5F1\u7684\u5f97\u5206\u63d0\u9ad8\u81f393.2\u5206(1.5\u5206\u7edd\u5bf9\u63d0\u9ad8)\u2014\u2014\u6bd4\u4eba\u7c7b\u6027\u80fd\u8fd8\u9ad8\u51fa2.0\u5206\u3002 \u200b BERT\u8bba\u6587\u8d21\u732e: \u6211\u4eec\u8bc1\u660e\u4e86\u53cc\u5411\u9884\u8bad\u7ec3\u5bf9 \u8bed\u8a00\u8868\u5f81\u91cf \u7684\u91cd\u8981\u6027 \u6211\u4eec\u5c55\u793a\u4e86\u9884\u8bad\u7ec3\u8868\u5f81\u91cf\u80fd\u6d88\u9664\u8bb8\u591a\u91cd\u578b\u5de5\u7a0b \u4efb\u52a1\u7279\u5b9a\u67b6\u6784 \u7684\u9700\u6c42\u3002BERT\u662f\u7b2c\u4e00\u4e2a\u57fa\u4e8e\u5fae\u8c03\u7684\u8868\u5f81\u6a21\u578b\uff0c\u5b83\u5728\u5927\u91cf\u7684\u53e5\u5b50\u7ea7\u548c\u8bcd\u5757\u7ea7\u4efb\u52a1\u4e0a\u5b9e\u73b0\u4e86\u6700\u5148\u8fdb\u7684\u6027\u80fd\uff0c\u4f18\u4e8e\u8bb8\u591a\u5177\u6709\u4efb\u52a1\u7279\u5b9a\u67b6\u6784\u7684\u7cfb\u7edf\u3002(fine-tuning) BERT\u63a8\u8fdb\u4e8611\u9879NLP\u4efb\u52a1\u7684\u6700\u9ad8\u6c34\u5e73\u3002 5.2 BERT\u67b6\u6784 \u200b BERT\u6846\u67b6\u6709\u4e24\u6b65, pre-training\u548cfine-tuning, \u9664\u8f93\u51fa\u5c42\u5916, \u8fd9\u4e24\u4e2a\u6b65\u9aa4\u67b6\u6784\u662f\u7edf\u4e00\u7684\u3002 \u200b BERT\u6a21\u578b\u57fa\u4e8e\u591a\u5c42\u53cc\u5411Transformer Encoder\u5b9e\u73b0\u3002 \u200b BERT\u7684input embedding\u6709token embedding + segment embedding + position embedding \u5bf9\u4e8e\u82f1\u6587\u6a21\u578b\uff0c\u4f7f\u7528\u4e86Wordpiece\u6a21\u578b\u6765\u4ea7\u751fSubword\u4ece\u800c\u51cf\u5c0f\u8bcd\u8868\u89c4\u6a21\uff1b\u5bf9\u4e8e\u4e2d\u6587\u6a21\u578b\uff0c\u76f4\u63a5\u8bad\u7ec3\u57fa\u4e8e\u5b57\u7684\u6a21\u578b\u3002 \u6a21\u578b\u8f93\u5165\u9700\u8981\u9644\u52a0\u4e00\u4e2a\u8d77\u59cbToken\uff0c\u8bb0\u4e3a[CLS]\uff0c\u5bf9\u5e94\u6700\u7ec8\u7684Hidden State\uff08\u5373Transformer\u7684\u8f93\u51fa\uff09\u53ef\u4ee5\u7528\u6765\u8868\u5f81\u6574\u4e2a\u53e5\u5b50\uff0c\u7528\u4e8e\u4e0b\u6e38\u7684\u5206\u7c7b\u4efb\u52a1\u3002 \u6a21\u578b\u80fd\u591f\u5904\u7406\u53e5\u95f4\u5173\u7cfb\u3002\u4e3a\u533a\u522b\u4e24\u4e2a\u53e5\u5b50\uff0c\u7528\u4e00\u4e2a\u7279\u6b8a\u6807\u8bb0\u7b26[SEP]\u8fdb\u884c\u5206\u9694\uff0c\u53e6\u5916\u9488\u5bf9\u4e0d\u540c\u7684\u53e5\u5b50\uff0c\u5c06\u5b66\u4e60\u5230\u7684Segment Embeddings \u52a0\u5230\u6bcf\u4e2aToken\u7684Embedding\u4e0a\u3002 \u5bf9\u4e8e\u5355\u53e5\u8f93\u5165\uff0c\u53ea\u6709\u4e00\u79cdSegment Embedding\uff1b\u5bf9\u4e8e\u53e5\u5bf9\u8f93\u5165\uff0c\u4f1a\u6709\u4e24\u79cdSegment Embedding\u3002 \u200b $BERT_{large}$\u7684\u53c2\u6570\u662f\u5c42\u6570(L=24)\u9690\u5c42\u7ed3\u70b9\u6570(H=1024)\u548cself-attention\u5934\u7684\u4e2a\u6570(A=16), \u603b\u53c2\u6570340M\u3002(\u6df1\u800c\u7a84) 5.3 Pre-training \u200b BERT\u9884\u8bad\u7ec3\u8fc7\u7a0b\u5305\u542b\u4e24\u4e2a\u4e0d\u540c\u7684\u9884\u8bad\u7ec3\u4efb\u52a1\uff0c\u5206\u522b\u662fMasked Language Model\u548cNext Sentence Prediction\u4efb\u52a1\u3002 \u200b Masked LM\uff0c\u901a\u8fc7\u968f\u673a\u63a9\u76d6\u4e00\u4e9b\u8bcd\uff08\u66ff\u6362\u4e3a\u7edf\u4e00\u6807\u8bb0\u7b26[MASK]\uff09\uff0c\u7136\u540e\u9884\u6d4b\u8fd9\u4e9b\u88ab\u906e\u76d6\u7684\u8bcd\u6765\u8bad\u7ec3\u53cc\u5411\u8bed\u8a00\u6a21\u578b\uff0c\u5e76\u4e14\u4f7f\u6bcf\u4e2a\u8bcd\u7684\u8868\u5f81\u53c2\u8003\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002NSP\u662f\u9884\u6d4b\u4e0b\u4e00\u4e2a\u53e5\u5b50\uff0c\u8fd9\u91cc\uff0c\u5148\u628a\u4e24\u53e5\u8bdd\u8fde\u8d77\u6765\uff0c\u4e2d\u95f4\u52a0\u4e00\u4e2a[SEP]\u4f5c\u4e3a\u4e24\u4e2a\u53e5\u5b50\u7684\u5206\u9694\u7b26\u3002\u800c\u5728\u4e24\u4e2a\u53e5\u5b50\u7684\u5f00\u5934\uff0c\u653e\u4e00\u4e2a[CLS]\u6807\u5fd7\u7b26\uff0c\u5c06\u5176\u5f97\u5230\u7684embedding\u8f93\u5165\u5230\u4e8c\u5206\u7c7b\u7684\u6a21\u578b\uff0c\u8f93\u51fa\u4e24\u4e2a\u53e5\u5b50\u662f\u4e0d\u662f\u63a5\u5728\u4e00\u8d77\u7684\u3002 \u200b \u5b9e\u9645\u4e2d\uff0c\u540c\u65f6\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u5f80\u5f80\u5f97\u5230\u7684\u7ed3\u679c\u6700\u597d\u3002 \u200b \u5982\u679c\u662f\u5206\u7c7b\u4efb\u52a1[CLS]\uff0c\u5728\u53e5\u5b50\u524d\u9762\u52a0\u4e00\u4e2a\u6807\u5fd7\uff0c\u5c06\u5176\u7ecf\u8fc7Bert\u5f97\u5230\u7684embedding\u8f93\u51fa\u5230\u4e8c\u5206\u7c7b\u6a21\u578b\u4e2d\uff0c\u5f97\u5230\u5206\u7c7b\u7ed3\u679c\u3002\u4e8c\u5206\u7c7b\u6a21\u578b\u4ece\u5934\u5f00\u59cb\u5b66\uff0c\u800cBert\u5728\u9884\u8bad\u7ec3\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u5fae\u8c03\uff08fine-tuning\uff09\u3002 Task 1: Masked LM \u200b \u4ece\u76f4\u89c9\u4e0a\u770b\uff0c\u7814\u7a76\u56e2\u961f\u6709\u7406\u7531\u76f8\u4fe1\uff0c\u6df1\u5ea6\u53cc\u5411\u6a21\u578b\u6bd4left-to-right \u6a21\u578b\u6216left-to-right and right-to-left\u6a21\u578b\u7684\u6d45\u5c42\u8fde\u63a5\u66f4\u5f3a\u5927\u3002\u9057\u61be\u7684\u662f\uff0c\u6807\u51c6\u6761\u4ef6\u8bed\u8a00\u6a21\u578b\u53ea\u80fd\u4ece\u5de6\u5230\u53f3\u6216\u4ece\u53f3\u5230\u5de6\u8fdb\u884c\u8bad\u7ec3\uff0c\u56e0\u4e3a\u53cc\u5411\u6761\u4ef6\u4f5c\u7528\u5c06\u5141\u8bb8\u6bcf\u4e2a\u5355\u8bcd\u5728\u591a\u5c42\u4e0a\u4e0b\u6587\u4e2d\u95f4\u63a5\u5730\u201csee itself\u201d\u3002 \u200b \u4e3a\u4e86\u8bad\u7ec3\u4e00\u4e2a\u6df1\u5ea6\u53cc\u5411\u8868\u793a\uff08deep bidirectional representation\uff09\uff0c\u7814\u7a76\u56e2\u961f\u91c7\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u5373\u968f\u673a\u5c4f\u853d\uff08masking\uff09\u90e8\u5206\u8f93\u5165token\uff0c\u7136\u540e\u53ea\u9884\u6d4b\u90a3\u4e9b\u88ab\u5c4f\u853d\u7684token\u3002 \u200b \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4e0emasked token\u5bf9\u5e94\u7684\u6700\u7ec8\u9690\u85cf\u5411\u91cf\u88ab\u8f93\u5165\u5230\u8bcd\u6c47\u8868\u4e0a\u7684\u8f93\u51fasoftmax\u4e2d\uff0c\u5c31\u50cf\u5728\u6807\u51c6LM\u4e2d\u4e00\u6837\u3002\u5728\u56e2\u961f\u6240\u6709\u5b9e\u9a8c\u4e2d\uff0c\u968f\u673a\u5730\u5c4f\u853d\u4e86\u6bcf\u4e2a\u5e8f\u5217\u4e2d15%\u7684WordPiece token\u3002 \u200b \u867d\u7136\u8fd9\u786e\u5b9e\u80fd\u8ba9\u56e2\u961f\u83b7\u5f97\u53cc\u5411\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u6709\u4e24\u4e2a\u7f3a\u70b9\u3002\u9996\u5148\uff0c\u9884\u8bad\u7ec3\u548cfinetuning\u4e4b\u95f4\u4e0d\u5339\u914d\uff0c\u56e0\u4e3a\u5728finetuning\u671f\u95f4\u4ece\u672a\u770b\u5230[MASK]token\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e2\u961f\u5e76\u4e0d\u603b\u662f\u7528\u5b9e\u9645\u7684[MASK]token\u66ff\u6362\u88ab\u201cmasked\u201d\u7684\u8bcd\u6c47\u3002 \u200b \u6570\u636e\u751f\u6210\u5668\u5c06\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u59cb\u7ec8\u7528[MASK]\u66ff\u6362\u6240\u9009\u5355\u8bcd\uff1a 80\uff05\u7684\u65f6\u95f4\uff1a\u7528[MASK]\u6807\u8bb0\u66ff\u6362\u5355\u8bcd\uff0c\u4f8b\u5982\uff0cmy dog is hairy \u2192 my dog is [MASK] 10\uff05\u7684\u65f6\u95f4\uff1a\u7528\u4e00\u4e2a\u968f\u673a\u7684\u5355\u8bcd\u66ff\u6362\u8be5\u5355\u8bcd\uff0c\u4f8b\u5982\uff0cmy dog is hairy \u2192 my dog is apple 10\uff05\u7684\u65f6\u95f4\uff1a\u4fdd\u6301\u5355\u8bcd\u4e0d\u53d8\uff0c\u4f8b\u5982\uff0cmy dog is hairy \u2192 my dog is hairy. \u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u5c06\u8868\u793a\u504f\u5411\u4e8e\u5b9e\u9645\u89c2\u5bdf\u5230\u7684\u5355\u8bcd\u3002 \u95ee\u98981: \u4f1a\u9020\u6210\u9884\u8bad\u7ec3\u548c\u5fae\u8c03\u65f6\u7684\u4e0d\u4e00\u81f4\uff0c\u56e0\u4e3a\u5728\u5fae\u8c03\u65f6[MASK]\u603b\u662f\u4e0d\u53ef\u89c1\u7684 \u200b \u7b54:\u628a80%\u9700\u8981\u88ab\u66ff\u6362\u6210[MASK]\u7684\u8bcd\u8fdb\u884c\u66ff\u6362\uff0c10%\u7684\u968f\u673a\u66ff\u6362\u4e3a\u5176\u4ed6\u8bcd\uff0c10%\u4fdd\u7559\u539f\u8bcd\u3002\u7531\u4e8eTransformer Encoder\u5e76\u4e0d\u77e5\u9053\u54ea\u4e2a\u8bcd\u9700\u8981\u88ab\u9884\u6d4b\uff0c\u54ea\u4e2a\u8bcd\u662f\u88ab\u968f\u673a\u66ff\u6362\u7684\uff0c\u8fd9\u6837\u5c31\u5f3a\u8feb\u6bcf\u4e2a\u8bcd\u7684\u8868\u8fbe\u9700\u8981\u53c2\u7167\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002 \u95ee\u98982: \u7531\u4e8e\u6bcf\u4e2aBatch\u4e2d\u53ea\u670915%\u7684\u8bcd\u4f1a\u88ab\u9884\u6d4b\uff0c\u56e0\u6b64\u6a21\u578b\u7684\u6536\u655b\u901f\u5ea6\u6bd4\u8d77\u5355\u5411\u7684\u8bed\u8a00\u6a21\u578b\u4f1a\u6162\uff0c\u8bad\u7ec3\u82b1\u8d39\u7684\u65f6\u95f4\u4f1a\u66f4\u957f\u3002 \u200b \u7b54: \u76ee\u524d\u6ca1\u6709\u6709\u6548\u7684\u89e3\u51b3\u529e\u6cd5\uff0c\u4f46\u662f\u4ece\u63d0\u5347\u6536\u76ca\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4ed8\u51fa\u7684\u4ee3\u4ef7\u662f\u503c\u5f97\u7684\u3002 Task2: Next Sentence Prediction \u200b \u8bb8\u591a\u91cd\u8981\u7684\u4e0b\u6e38\u4efb\u52a1\uff0c\u5982\u95ee\u7b54\uff08QA\uff09\u548c\u81ea\u7136\u8bed\u8a00\u63a8\u7406\uff08NLI\uff09\u90fd\u662f\u57fa\u4e8e\u7406\u89e3\u4e24\u4e2a\u53e5\u5b50\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u8fd9\u5e76\u6ca1\u6709\u901a\u8fc7\u8bed\u8a00\u5efa\u6a21\u76f4\u63a5\u83b7\u5f97\u3002 \u200b \u5728\u4e3a\u4e86\u8bad\u7ec3\u4e00\u4e2a\u7406\u89e3\u53e5\u5b50\u7684\u6a21\u578b\u5173\u7cfb\uff0c\u9884\u5148\u8bad\u7ec3\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5316\u7684\u4e0b\u4e00\u53e5\u6d4b\u4efb\u52a1\uff0c\u8fd9\u4e00\u4efb\u52a1\u53ef\u4ee5\u4ece\u4efb\u4f55\u5355\u8bed\u8bed\u6599\u5e93\u4e2d\u751f\u6210\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u5f53\u9009\u62e9\u53e5\u5b50A\u548cB\u4f5c\u4e3a\u9884\u8bad\u7ec3\u6837\u672c\u65f6\uff0cB\u670950\uff05\u7684\u53ef\u80fd\u662fA\u7684\u4e0b\u4e00\u4e2a\u53e5\u5b50\uff0c\u4e5f\u670950\uff05\u7684\u53ef\u80fd\u662f\u6765\u81ea\u8bed\u6599\u5e93\u7684\u968f\u673a\u53e5\u5b50(\u5355\u4e00\u9884\u6599)\u3002 \u200b \u56e2\u961f\u5b8c\u5168\u968f\u673a\u5730\u9009\u62e9\u4e86NotNext\u8bed\u53e5\uff0c\u6700\u7ec8\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u5728\u6b64\u4efb\u52a1\u4e0a\u5b9e\u73b0\u4e8697\uff05-98\uff05\u7684\u51c6\u786e\u7387\u3002 \u9884\u8bad\u7ec3\u8fc7\u7a0b \u200b BERT\u9884\u8bad\u7ec3\u8fc7\u7a0b\u4e3b\u8981\u9075\u5faa\u73b0\u6709\u7684\u8bed\u8a00\u6a21\u578b\u9884\u8bad\u7ec3\u6587\u732e\u3002\u5bf9\u4e8e\u9884\u8bad\u7ec3\u8bed\u6599\u5e93,\u6211\u4eec\u4f7f\u7528 Books Corpus(800M\u5355\u8bcd)\u548c\u82f1\u8bed\u7ef4\u57fa\u767e\u79d1(2,500M\u5355\u8bcd)\u7684\u4e32\u8054\u3002\u5bf9\u4e8e\u7ef4\u57fa\u767e\u79d1, \u6211\u4eec\u53ea\u63d0\u53d6\u6587\u672c\u6bb5\u843d\u5e76\u5ffd\u7565\u5217\u8868\u3001\u8868\u683c\u548c\u9898\u5934\u3002\u81f3\u5173\u91cd\u8981\u7684\u662f, \u4f7f\u7528\u6587\u6863\u7ea7\u8bed\u6599\u5e93\u800c\u4e0d\u662f\u6d17\u724c\u5f0f(\u4e71\u8bcd\u5e8f)\u53e5\u5b50\u7ea7\u8bed\u6599\u5e93, \u4f8b\u5982 Bilion word Benchmark, \u4ee5\u4fbf\u63d0\u53d6\u957f\u7684\u8fde\u7eed\u5e8f\u5217\u3002 \u200b \u4e3a\u4e86\u751f\u6210\u6bcf\u4e2a\u8bad\u7ec3\u8f93\u5165\u5e8f\u5217, \u6211\u4eec\u4ece\u8bed\u6599\u5e93\u4e2d\u91c7\u6837\u4e24\u4e2a\u6587\u672c\u8de8\u5ea6, \u6211\u4eec\u5c06\u5176\u79f0\u4e3a\u53e5\u5b50\", \u5373\u4f7f\u5b83\u4eec\u901a\u5e38\u6bd4\u5355\u4e2a\u53e5\u5b50\u957f\u5f97\u591a(\u4f46\u4e5f\u53ef\u4ee5\u66f4\u77ed)\u3002\u7b2c\u4e00\u4e2a\u53e5\u5b50\u63a5\u6536A\u5d4c\u5165, \u7b2c\u4e8c\u4e2a\u53e5\u5b50\u63a5\u6536B\u5d4c\u5165\u3002B\u670950%\u53ef\u80fd\u521a\u597d\u662fA\u5d4c\u5165\u540e\u7684\u4e0b\u4e00\u4e2a\u53e5\u5b50,\u4ea6\u670950%\u53ef\u80fd\u662f\u4e2a\u968f\u673a\u53e5\u5b50, \u6b64\u4e43\u4e3a\u4e0b\u4e00\u53e5\u9884\u6d4b\u4efb\u52a1\u800c\u505a\u3002\u5bf9\u5b83\u4eec\u91c7\u6837, \u4f7f\u5176\u7ec4\u5408\u957f\u5ea6\u2264512\u4e2a\u8bcd\u5757\u3002\u8be5LM\u906e\u853d\u5e94\u7528\u4e8e\u5177\u670915%\u7edf\u4e00\u63a9\u853d\u7387\u7684 Wordpiece\u8bcd\u5757\u5316\u4e4b\u540e, \u5e76\u4e14\u4e0d\u7279\u522b\u8003\u8651\u90e8\u5206\u5b57\u5757\u3002 \u200b \u6211\u4eec\u8bad\u7ec3\u6279\u91cf\u5927\u5c0f\u4e3a256\u4e2a\u5e8f\u5217(256\u4e2a\u5e8f\u5217*512\u4e2a\u8bcd\u5757=128,000\u4e2a\u8bcd\u5757/\u6279\u6b21), \u6301\u7eed1,000,000\u4e2astep, \u76f8\u6bd4\u4e8e33\u4ebf\u4e2a\u5355\u8bcd\u8bed\u6599\u5e93, \u6709\u5927\u7ea640\u4e2a\u5468\u671f\u3002\u6211\u4eec\u4f7f\u7528Adam(\u5b66\u4e60\u7a0b\u5e8f), \u8bbe\u5176learning rate=1e4, \u03b21=0.9, \u03b22=0.999, L2\u6743\u91cd\u8870\u51cf\u4e3a0.01, \u5b66\u4e60\u7387\u9884\u70ed\u8d85\u8fc7\u524d10,000\u6b65\u4ee5\u4e0a\u4ee5\u53ca\u7ebf\u6027\u8870\u51cf\u8be5\u5b66\u4e60\u7387\u3002\u6211\u4eec\u5728\u6240\u6709\u5c42\u4e0a\u4f7f\u75280.1\u7684\u4e22\u5931\u6982\u7387\u3002\u5728 OpenAIGPT\u4e4b\u540e,\u6211\u4eec\u4f7f\u7528gelu\u6fc0\u6d3b\u800c\u4e0d\u662f\u6807\u51c6reu\u3002\u8bad\u7ec3\u635f\u5931\u662f\u5e73\u5747\u7684\u906e\u853dLM\u53ef\u80fd\u6027\u548c\u5e73\u5747\u7684\u4e0b\u4e00\u53e5\u5b50\u9884\u6d4b\u53ef\u80fd\u6027\u7684\u603b\u548c\u3002 \u200b \u5728Pod\u914d\u7f6e\u76844\u4e2a\u4e91TPU\u4e0a\u8fdb\u884c\u4e86$BERT_{BASE}$\u8bad\u7ec3(\u603b\u517116\u4e2aTPU\u82af\u7247)\u3002\u572816\u4e2a\u4e91TPU(\u603b\u517164\u4e2aTPU\u82af\u7247)\u8fdb\u884c\u4e86$BERT_{LARGE}$\u8bad\u7ec3\u3002\u6bcf\u6b21\u9884\u8bad\u7ec3\u97004\u5929\u5b8c\u6210\u3002 5.4 Fine-tuning \u200b \u5bf9\u4e8e\u5e8f\u5217\u7ea7\u5206\u7c7b\u4efb\u52a1\uff0cBERT\u5fae\u8c03\u5f88\u7b80\u5355\u3002\u4e3a\u4e86\u83b7\u5f97\u8f93\u5165\u5e8f\u5217\u7684\u56fa\u5b9a\u7ef4\u5ea6\u6c60\u5316\u8868\u5f81\uff0c\u6211\u4eec\u5bf9\u8be5\u8f93\u5165\u7b2c\u4e00\u4e2a\u8bcd\u5757[CLS]\u8bcd\u5d4c\u5165C\u7684\u9690\u85cf\u72b6\u6001\u505a\u5904\u7406\u3002\u5fae\u8c03\u671f\u95f4\u6dfb\u52a0\u7684\u552f\u4e00\u65b0\u53c2\u6570\u662f\u5206\u7c7b\u5c42\u5411\u91cfW\u3002\u8be5\u6807\u7b7e\u6982\u7387P\u7528\u6807\u51c6softmax\u51fd\u6570\uff0cP=softmax(CWT)\u8ba1\u7b97\u3002BERT\u548cW\u7684\u6240\u6709\u53c2\u6570\u90fd\u7ecf\u8fc7\u8054\u52a8\u5730\u5fae\u8c03\uff0c\u4ee5\u6700\u5927\u5316\u6b63\u786e\u6807\u7b7e\u7684\u5bf9\u6570\u6982\u7387\u3002\u5bf9\u4e8e\u8de8\u5ea6\u7ea7\u548c\u8bcd\u5757\u7ea7\u9884\u6d4b\u4efb\u52a1\uff0c\u5fc5\u987b\u4ee5\u4efb\u52a1\u7279\u5b9a\u65b9\u5f0f\u7a0d\u5fae\u4fee\u6539\u4e0a\u8ff0\u8fc7\u7a0b\u3002 \u5bf9\u4e8e\u5fae\u8c03\uff0c\u5927\u591a\u6570\u6a21\u578b\u8d85\u53c2\u6570\u4e0e\u9884\u8bad\u7ec3\u76f8\u540c\uff0c\u4f46\u6279\u91cf\u5927\u5c0f\u3001\u5b66\u4e60\u7387\u548c\u8bad\u7ec3\u5468\u671f\u6570\u91cf\u9664\u5916\u3002\u4e22\u5931\u6982\u7387\u59cb\u7ec8\u4fdd\u6301\u57280.1\u3002\u6700\u4f73\u8d85\u53c2\u6570\u503c\u662f\u7279\u5b9a\u4e8e\u4efb\u52a1\u7684\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u4ee5\u4e0b\u8303\u56f4\u7684\u53ef\u80fd\u503c\u53ef\u4ee5\u5728\u6240\u6709\u4efb\u52a1\u4e2d\u5f88\u597d\u5730\u5de5\u4f5c\uff1a \u6279\u91cf\u5927\u5c0f \uff1a16,32 \u5b66\u4e60\u7387 (Adam)\uff1a5e-5,3e-5,2e-5 \u5468\u671f\u6570\u91cf \uff1a3,4 \u6211\u4eec\u8fd8\u89c2\u5bdf\u5230\uff0c\u5927\u6570\u636e\u96c6(\u5982100k+\u8bcd\u5757\u7684\u8bad\u7ec3\u6837\u4f8b)\u5bf9\u8d85\u53c2\u6570\u9009\u62e9\u7684\u654f\u611f\u6027\u8fdc\u5c0f\u4e8e\u5c0f\u6570\u636e\u96c6\u3002\u5fae\u8c03\u901a\u5e38\u975e\u5e38\u5feb\uff0c\u56e0\u6b64\u9700\u5408\u7406\u7b80\u5355\u5730\u5bf9\u4e0a\u8ff0\u53c2\u6570\u8fdb\u884c\u8be6\u5c3d\u641c\u7d22\uff0c\u5e76\u9009\u62e9\u5f00\u53d1\u96c6\u4e0a\u6027\u80fd\u6700\u4f73\u7684\u6a21\u578b\u3002 5.5 WordPiece\u539f\u7406(\u4e0d\u9002\u7528\u4e2d\u6587) \u200b \u73b0\u5728\u57fa\u672c\u6027\u80fd\u597d\u4e00\u4e9b\u7684NLP\u6a21\u578b\uff0c\u4f8b\u5982OpenAI GPT\uff0cgoogle\u7684BERT\uff0c\u5728\u6570\u636e\u9884\u5904\u7406\u7684\u65f6\u5019\u90fd\u4f1a\u6709WordPiece\u7684\u8fc7\u7a0b\u3002WordPiece\u5b57\u9762\u7406\u89e3\u662f\u628aword\u62c6\u6210piece\u4e00\u7247\u4e00\u7247\uff0c\u5176\u5b9e\u5c31\u662f\u8fd9\u4e2a\u610f\u601d\u3002 \u200b WordPiece\u7684\u4e00\u79cd\u4e3b\u8981\u7684\u5b9e\u73b0\u65b9\u5f0f\u53eb\u505aBPE\uff08Byte-Pair Encoding\uff09\u53cc\u5b57\u8282\u7f16\u7801\u3002 \u200b BPE\u7684\u8fc7\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a\u628a\u4e00\u4e2a\u5355\u8bcd\u518d\u62c6\u5206\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u6b64\u8868\u4f1a\u53d8\u5f97\u7cbe\u7b80\uff0c\u5e76\u4e14\u5bd3\u610f\u66f4\u52a0\u6e05\u6670\u3002 \u200b \u6bd4\u5982\"loved\",\"loving\",\"loves\"\u8fd9\u4e09\u4e2a\u5355\u8bcd\u3002\u5176\u5b9e\u672c\u8eab\u7684\u8bed\u4e49\u90fd\u662f\u201c\u7231\u201d\u7684\u610f\u601d\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u4ee5\u5355\u8bcd\u4e3a\u5355\u4f4d\uff0c\u90a3\u5b83\u4eec\u5c31\u7b97\u4e0d\u4e00\u6837\u7684\u8bcd\uff0c\u5728\u82f1\u8bed\u4e2d\u4e0d\u540c\u540e\u7f00\u7684\u8bcd\u975e\u5e38\u7684\u591a\uff0c\u5c31\u4f1a\u4f7f\u5f97\u8bcd\u8868\u53d8\u7684\u5f88\u5927\uff0c\u8bad\u7ec3\u901f\u5ea6\u53d8\u6162\uff0c\u8bad\u7ec3\u7684\u6548\u679c\u4e5f\u4e0d\u662f\u592a\u597d\u3002 \u200b BPE\u7b97\u6cd5\u901a\u8fc7\u8bad\u7ec3\uff0c\u80fd\u591f\u628a\u4e0a\u9762\u76843\u4e2a\u5355\u8bcd\u62c6\u5206\u6210\"lov\",\"ed\",\"ing\",\"es\"\u51e0\u90e8\u5206\uff0c\u8fd9\u6837\u53ef\u4ee5\u628a\u8bcd\u7684\u672c\u8eab\u7684\u610f\u601d\u548c\u65f6\u6001\u5206\u5f00\uff0c\u6709\u6548\u7684\u51cf\u5c11\u4e86\u8bcd\u8868\u7684\u6570\u91cf\u3002 \u200b BPE\u7684\u5927\u6982\u8bad\u7ec3\u8fc7\u7a0b\uff1a\u9996\u5148\u5c06\u8bcd\u5206\u6210\u4e00\u4e2a\u4e00\u4e2a\u7684\u5b57\u7b26\uff0c\u7136\u540e\u5728\u8bcd\u7684\u8303\u56f4\u5185\u7edf\u8ba1\u5b57\u7b26\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6bcf\u6b21\u5c06\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26\u5bf9\u4fdd\u5b58\u8d77\u6765\uff0c\u76f4\u5230\u5faa\u73af\u6b21\u6570\u7ed3\u675f\u3002 \u200b \u6211\u4eec\u6a21\u62df\u4e00\u4e0bBPE\u7b97\u6cd5\u3002\u6211\u4eec\u539f\u59cb\u8bcd\u8868\u5982\u4e0b\uff1a{'l o w e r ': 2, 'n e w e s t ': 6, 'w i d e s t ': 3, 'l o w ': 5}, \u5176\u4e2d\u7684key\u662f\u8bcd\u8868\u7684\u5355\u8bcd\u62c6\u5206\u5c42\u5b57\u6bcd\uff0c\u518d\u52a0\u4ee3\u8868\u7ed3\u5c3e\uff0cvalue\u4ee3\u8868\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u3002 \u200b \u4e0b\u9762\u6211\u4eec\u6bcf\u4e00\u6b65\u5728\u6574\u5f20\u8bcd\u8868\u4e2d\u627e\u51fa\u9891\u7387\u6700\u9ad8\u76f8\u90bb\u5e8f\u5217\uff0c\u5e76\u628a\u5b83\u5408\u5e76\uff0c\u4f9d\u6b21\u5faa\u73af\u3002 \u539f\u59cb\u8bcd\u8868 {'l o w e r </w>': 2, 'n e w e s t </w>': 6, 'w i d e s t </w>': 3, 'l o w </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('s', 't') 9 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'n e w e st </w>': 6, 'l o w e r </w>': 2, 'w i d e st </w>': 3, 'l o w </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('e', 'st') 9 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'l o w e r </w>': 2, 'l o w </w>': 5, 'w i d est </w>': 3, 'n e w est </w>': 6} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('est', '</w>') 9 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'l o w e r </w>': 2, 'n e w est</w>': 6, 'l o w </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('l', 'o') 7 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'lo w e r </w>': 2, 'n e w est</w>': 6, 'lo w </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('lo', 'w') 7 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'low e r </w>': 2, 'n e w est</w>': 6, 'low </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('n', 'e') 6 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'low e r </w>': 2, 'ne w est</w>': 6, 'low </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('w', 'est</w>') 6 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'low e r </w>': 2, 'ne west</w>': 6, 'low </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('ne', 'west</w>') 6 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'low e r </w>': 2, 'newest</w>': 6, 'low </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('low', '</w>') 5 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'low e r </w>': 2, 'newest</w>': 6, 'low</w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('i', 'd') 3 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w id est</w>': 3, 'newest</w>': 6, 'low</w>': 5, 'low e r </w>': 2} \u200b \u8fd9\u6837\u6211\u4eec\u901a\u8fc7BPE\u5f97\u5230\u4e86\u66f4\u52a0\u5408\u9002\u7684\u8bcd\u8868\u4e86\uff0c\u8fd9\u4e2a\u8bcd\u8868\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b\u4e0d\u662f\u5355\u8bcd\u7684\u7ec4\u5408\uff0c\u4f46\u662f\u8fd9\u4e2a\u672c\u8eab\u662f\u6709\u610f\u4e49\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u52a0\u901fNLP\u7684\u5b66\u4e60\uff0c\u63d0\u5347\u4e0d\u540c\u8bcd\u4e4b\u95f4\u7684\u8bed\u4e49\u7684\u533a\u5206\u5ea6\u3002 5.6 \u6e90\u7801\u5206\u6790 [TODO] \u6e90\u7801 https://github.com/huggingface/transformers https://huggingface.co/transformers/index.html 5.7 BERT\u5e94\u7528\u573a\u666f \u81ea\u7136\u8bed\u8a00\u63a8\u7406\u4efb\u52a1\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u524d\u63d0\uff0f\u5047\u8bbe\uff0c\u5f97\u5230\u63a8\u8bba\u662f\u5426\u6b63\u786e\uff1a \u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u662f\u62bd\u53d6\u5f0fQA\uff0c\u62bd\u53d6\u5f0f\u7684\u610f\u601d\u662f\u8f93\u5165\u4e00\u4e2a\u539f\u6587\u548c\u95ee\u9898\uff0c\u8f93\u51fa\u4e24\u4e2a\u6574\u6570start\u548cend\uff0c\u4ee3\u8868\u7b54\u6848\u5728\u539f\u6587\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\uff0c\u4e24\u4e2a\u4f4d\u7f6e\u4e2d\u95f4\u7684\u7ed3\u679c\u5c31\u662f\u7b54\u6848\u3002 \u5177\u4f53\u600e\u4e48\u89e3\u51b3\u521a\u624d\u7684QA\u95ee\u9898\u5462\uff1f\u628a\u95ee\u9898 - \u5206\u9694\u7b26 - \u539f\u6587\u8f93\u5165\u5230BERT\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5355\u8bcd\u8f93\u51fa\u4e00\u4e2a\u9ec4\u989c\u8272\u7684embedding\uff0c\u8fd9\u91cc\u8fd8\u9700\u8981\u5b66\u4e60\u4e24\u4e2a\uff08\u4e00\u4e2a\u6a59\u8272\u4e00\u4e2a\u84dd\u8272\uff09\u7684\u5411\u91cf\uff0c\u8fd9\u4e24\u4e2a\u5411\u91cf\u5206\u522b\u4e0e\u539f\u6587\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u5bf9\u5e94\u7684embedding\u8fdb\u884c\u70b9\u4e58\uff0c\u7ecf\u8fc7softmax\u4e4b\u540e\u5f97\u5230\u8f93\u51fa\u6700\u9ad8\u7684\u4f4d\u7f6e\u3002\u6b63\u5e38\u60c5\u51b5\u4e0bstart <= end\uff0c\u4f46\u5982\u679cstart > end\u7684\u8bdd\uff0c\u8bf4\u660e\u662f\u77db\u76fe\u7684case\uff0c\u6b64\u9898\u65e0\u89e3\u3002 5.8 \u5b9e\u9a8c\u90e8\u5206 5.9 Bert\u5b66\u5230\u4ec0\u4e48 Bert\u5b66\u5230\u4e86\u4ec0\u4e48\u5462\uff1f\u53ef\u4ee5\u770b\u4e0b\u4e0b\u9762\u4e24\u4e2a\u6587\u732e\uff08\u7ed9\u5927\u4f19\u8d34\u51fa\u6765\uff1a https://arxiv.org/abs/1905.05950 \u548c https://openreview.net/pdf?id=SJzSgnRcKX \uff09\uff1a \u516d\u3001ERNIE 6.1 ERNIE 1.0 6.1.1 \u57fa\u672c\u601d\u60f3 \u200b ERINE\u662fEnhanced Representation through Knowledge Integration\u7f29\u5199\u3002 \u200b ERINE\u662f\u5728BERT\u57fa\u7840\u4e0a\u5bf9\u4e2d\u6587\u8bed\u5883\u505a\u7684\u6539\u8fdb, \u76f8\u6bd4\u4e8eBERT\u5176\u6539\u8fdb\u7684\u5730\u65b9\u5728\u4e8e\u5bf9Masked\u7684\u6539\u8fdb\uff0c\u767e\u5ea6\u7684ERNIE\u901a\u8fc7MLM\u63a9\u76d6\u7684\u4e0d\u53ea\u662f\u5b57\uff0c\u8fd8\u6709\u8bcd\u4ee5\u53ca\u5b9e\u4f53\u3002\u76f8\u8f83\u4e8e BERT \u5b66\u4e60\u539f\u59cb\u8bed\u8a00\u4fe1\u53f7\uff0cERNIE \u76f4\u63a5\u5bf9\u5148\u9a8c\u8bed\u4e49\u77e5\u8bc6\u5355\u5143\u8fdb\u884c\u5efa\u6a21\uff0c\u589e\u5f3a\u4e86\u6a21\u578b\u8bed\u4e49\u8868\u793a\u80fd\u529b\u3002 \u200b ERNIE \u6a21\u578b\u672c\u8eab\u4fdd\u6301\u57fa\u4e8e\u5b57\u7279\u5f81\u8f93\u5165\u5efa\u6a21\uff0c\u4f7f\u5f97\u6a21\u578b\u5728\u5e94\u7528\u65f6\u4e0d\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u4fe1\u606f\uff0c\u5177\u5907\u66f4\u5f3a\u7684\u901a\u7528\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002 \u200b ERNIE \u7684\u8bad\u7ec3\u8bed\u6599\u5f15\u5165\u4e86\u591a\u6e90\u6570\u636e\u77e5\u8bc6\u3002\u9664\u4e86\u767e\u79d1\u7c7b\u6587\u7ae0\u5efa\u6a21\uff0c\u8fd8\u5bf9\u65b0\u95fb\u8d44\u8baf\u7c7b\u3001\u8bba\u575b\u5bf9\u8bdd\u7c7b\u6570\u636e\u8fdb\u884c\u5b66\u4e60\u3002 6.1.2 \u8bad\u7ec3\u8fc7\u7a0b\u6539\u8fdb(Knowledge Integration) \u200b \u8bba\u6587\u63d0\u51famulti-stage knowledge masking strategy, \u6309\u987a\u5e8f\u8bad\u7ec3Basic-Level Masking, Phrase-Level, Entity-level Masking\u7b49\u8fc7\u7a0b\u3002 6.1.3 Dialogue Language Model \u200b \u539f\u59cb\u5bf9\u8bdd\u4e3a3\u4e2a\u53e5\u5b50\uff1a\u201dHow old are you?\u201d\u3001\u201d8.\u201d\u548c\u201dWhere is your hometown?\u201d\u3002\u6a21\u578b\u7684\u8f93\u5165\u662f3\u4e2a\u53e5\u5b50(\u800c\u4e0d\u662fBERT\u91cc\u7684\u4e24\u4e2a)\uff0c\u4e2d\u95f4\u7528SEP\u5206\u5f00\uff0c\u800c\u4e14\u5206\u522b\u7528Dialogue Embedding Q\u548cR\u5206\u522b\u8868\u793aQuery\u548cResponse\u7684Embedding\uff0c\u8fd9\u4e2aEmbedding\u7c7b\u4f3c\u4e8eBERT\u7684Segment Embedding\uff0c\u4f46\u662f\u5b83\u67093\u4e2a\u53e5\u5b50\uff0c\u56e0\u6b64\u53ef\u80fd\u51fa\u73b0QRQ\u3001QRR\u3001QQR\u7b49\u7ec4\u5408\u3002 6.1.3 \u6e90\u7801\u5206\u6790 [TODO] https://zhuanlan.zhihu.com/p/76757794 Pytorch\u7248\u672c\u6e90\u7801 https://github.com/thunlp/ERNIE 6.1.4 \u6548\u679c\u9a8c\u8bc1 [TODO] 6.2 ERNIE 2.0 6.2.1 \u57fa\u672c\u601d\u60f3 \u200b \u540d\u5b57\u4fee\u6539\u4e3aA Continual Pre-training framework for Language Understanding\u3002 \u200b \u4f5c\u8005\u8ba4\u4e3a\u4e4b\u524d\u7684\u6a21\u578b\uff0c\u6bd4\u5982BERT\uff0c\u53ea\u662f\u5229\u7528\u8bcd\u7684\u5171\u73b0\u8fd9\u4e2a\u7edf\u8ba1\u4fe1\u606f\u901a\u8fc7\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u6765\u5b66\u4e60\u4e0a\u4e0b\u6587\u76f8\u5173\u7684Word Embedding\u3002ERNIE 2.0\u5e0c\u671b\u80fd\u591f\u5229\u7528\u591a\u79cd\u65e0\u76d1\u7763(\u5f31\u76d1\u7763)\u7684\u4efb\u52a1\u6765\u5b66\u4e60\u8bcd\u6cd5\u7684(lexical)\u3001\u53e5\u6cd5(syntactic)\u548c\u8bed\u4e49(semantic)\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u8bcd\u7684\u5171\u73b0\u3002 \u200b \u56e0\u4e3a\u5f15\u5165\u4e86\u5f88\u591a\u65b0\u7684\u4efb\u52a1\uff0c\u6240\u4ee5\u4f5c\u4e3amulti-task\u6765\u4e00\u8d77\u8bad\u7ec3\u662f\u975e\u5e38\u81ea\u7136\u7684\u60f3\u6cd5\u3002\u4f46\u662f\u4e00\u4e0b\u5c31\u628a\u6240\u6709\u7684\u4efb\u52a1\u540c\u65f6\u6765\u8bad\u7ec3\u53ef\u80fd\u6bd4\u8f83\u96be\u4ee5\u8bad\u7ec3(\u8fd9\u53ea\u662f\u6211\u7684\u731c\u6d4b)\uff0c\u56e0\u6b64\u4f7f\u7528\u589e\u91cf\u7684\u65b9\u5f0f\u4f1a\u66f4\u52a0\u7b80\u5355\uff1a\u9996\u5148\u8bad\u7ec3\u4e00\u4e2atask\uff1b\u7136\u540e\u589e\u52a0\u4e00\u4e2a\u65b0\u7684Task\u4e00\u8d77\u6765multi-task Learning\uff1b\u7136\u540e\u518d\u589e\u52a0\u4e00\u4e2a\u53d8\u62103\u4e2atask\u7684multi-task Learning\u2026\u2026 6.2.2 ERNIE Framework \u200b \u6301\u7eed\u7684(continual)pretraining\u8fc7\u7a0b\u5305\u62ec\u4e24\u4e2a\u6b65\u9aa4\u3002\u7b2c\u4e00\u6b65\u6211\u4eec\u901a\u8fc7\u5927\u6570\u636e\u548c\u5148\u9a8c\u77e5\u8bc6\u6765\u6301\u7eed\u7684\u6784\u9020\u65e0\u76d1\u7763\u4efb\u52a1\u3002\u7b2c\u4e8c\u6b65\u6211\u4eec\u589e\u91cf\u7684\u901a\u8fc7multi-task learning\u6765\u66f4\u65b0ERNIE\u6a21\u578b\u3002 \u200b \u5bf9\u4e8epre-training\u4efb\u52a1\uff0c\u6211\u4eec\u4f1a\u6784\u9020\u4e0d\u540c\u7c7b\u578b\u7684\u4efb\u52a1\uff0c\u5305\u62ec\u8bcd\u76f8\u5173\u7684(word-aware)\u3001\u7ed3\u6784\u76f8\u5173\u7684(structure-aware)\u548c\u8bed\u4e49\u76f8\u5173\u7684(semantic-aware)\u4efb\u52a1\uff0c\u5206\u522b\u6765\u5b66\u4e60\u8bcd\u6cd5\u7684\u3001\u53e5\u6cd5\u7684\u548c\u8bed\u4e49\u7684\u4fe1\u606f\u3002\u6240\u6709\u8fd9\u4e9b\u4efb\u52a1\u90fd\u53ea\u662f\u4f9d\u8d56\u81ea\u76d1\u7763\u7684\u6216\u8005\u5f31\u76d1\u7763\u7684\u4fe1\u53f7\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u5728\u6ca1\u6709\u4eba\u5de5\u6807\u6ce8\u7684\u6761\u4ef6\u4e0b\u4ece\u5927\u91cf\u6570\u636e\u83b7\u5f97\u3002\u5bf9\u4e8emulti-task pre-training\uff0cERNIE 2.0\u4f7f\u7528\u589e\u91cf\u7684\u6301\u7eed\u5b66\u4e60\u7684\u65b9\u5f0f\u6765\u8bad\u7ec3\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9996\u5148\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\u8bad\u7ec3\u4e00\u4e2a\u521d\u59cb\u7684\u6a21\u578b\uff0c\u7136\u540e\u5f15\u5165\u65b0\u7684\u4efb\u52a1\u6765\u66f4\u65b0\u6a21\u578b\u3002\u5f53\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u4efb\u52a1\u65f6\uff0c\u4f7f\u7528\u4e4b\u524d\u7684\u6a21\u578b\u53c2\u6570\u6765\u521d\u59cb\u5316\u5f53\u524d\u6a21\u578b\u3002\u5f15\u5165\u65b0\u7684\u4efb\u52a1\u540e\uff0c\u5e76\u4e0d\u662f\u53ea\u4f7f\u7528\u65b0\u7684\u4efb\u52a1\u6765\u8bad\u7ec3\uff0c\u800c\u662f\u901a\u8fc7multi-task learning\u540c\u65f6\u5b66\u4e60\u4e4b\u524d\u7684\u4efb\u52a1\u548c\u65b0\u589e\u52a0\u7684\u4efb\u52a1\uff0c\u8fd9\u6837\u5b83\u5c31\u65e2\u8981\u5b66\u4e60\u65b0\u7684\u4fe1\u606f\u540c\u65f6\u4e5f\u4e0d\u80fd\u5fd8\u8bb0\u8001\u7684\u4fe1\u606f\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0cERNIE 2.0\u53ef\u4ee5\u6301\u7eed\u5b66\u4e60\u5e76\u4e14\u7d2f\u79ef\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5b66\u5230\u7684\u6240\u6709\u77e5\u8bc6\uff0c\u4ece\u800c\u5728\u65b0\u7684\u4e0b\u6e38\u4efb\u52a1\u4e0a\u80fd\u591f\u5f97\u5230\u66f4\u597d\u7684\u6548\u679c\u3002 \u200b \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6301\u7eedpre-training\u65f6\u4e0d\u540c\u7684task\u90fd\u4f7f\u7528\u7684\u662f\u5b8c\u5168\u76f8\u540c\u7684\u7f51\u7edc\u7ed3\u6784\u6765\u7f16\u7801\u4e0a\u4e0b\u6587\u7684\u6587\u672c\u4fe1\u606f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5171\u4eab\u5b66\u4e60\u5230\u7684\u77e5\u8bc6\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528RNN\u6216\u8005\u6df1\u5c42\u7684Transformer\u6a21\u578b(\u5177\u4f53\u662f\u7528Transformer\u8fd8\u662fRNN\u90fd\u53ef\u4ee5\uff0c\u5f53\u7136\u66f4\u52a0BERT\u7b49\u7684\u7ecf\u9a8c\uff0c\u4f7f\u7528Transformer\u4f1a\u66f4\u597d\u4e00\u4e9b)\uff0c\u8fd9\u4e9b\u53c2\u6570\u5728\u6240\u6709\u7684pre-training\u4efb\u52a1\u662f\u90fd\u4f1a\u66f4\u65b0\u3002 \u200b \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6211\u4eec\u7684\u6846\u67b6\u6709\u4e24\u79cd\u635f\u5931\u51fd\u6570\u3002\u4e00\u79cd\u662f\u5e8f\u5217\u7ea7\u522b\u7684\u635f\u5931\uff0c\u5b83\u4f7f\u7528CLS\u7684\u8f93\u51fa\u6765\u8ba1\u7b97\uff1b\u800c\u53e6\u4e00\u79cd\u662ftoken\u7ea7\u522b\u7684\u635f\u5931\uff0c\u6bcf\u4e00\u4e2atoken\u90fd\u6709\u4e00\u4e2a\u671f\u671b\u7684\u8f93\u51fa\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u6a21\u578b\u9884\u6d4b\u7684\u548c\u671f\u671b\u7684\u503c\u6765\u8ba1\u7b97loss\u3002\u4e0d\u540c\u7684pre-training task\u6709\u5b83\u81ea\u5df1\u7684\u635f\u5931\u51fd\u6570\uff0c\u591a\u4e2a\u4efb\u52a1\u7684\u635f\u5931\u51fd\u6570\u4f1a\u7ec4\u5408\u8d77\u6765\u4f5c\u4e3a\u672c\u6b21multi-task pre-training\u7684los 6.2.3 Model Structure \u200b \u6a21\u578b\u91c7\u6837\u548cBERT\u7c7b\u4f3c\u7684Transformer Encoder\u6a21\u578b\u3002\u4e3a\u4e86\u8ba9\u6a21\u578b\u5b66\u4e60\u5230\u4efb\u52a1\u7279\u5b9a\u7684\u4fe1\u606f\uff0cERNIE 2.0\u8fd8\u5f15\u5165\u4e86Task Embedding\u3002\u6bcf\u4e2aTask\u90fd\u6709\u4e00\u4e2aID\uff0c\u6bcf\u4e2aTask\u90fd\u7f16\u7801\u6210\u4e00\u4e2a\u53ef\u4ee5\u5b66\u4e60\u7684\u5411\u91cf\uff0c\u8fd9\u6837\u6a21\u578b\u53ef\u4ee5\u5b66\u4e60\u5230\u4e0e\u67d0\u4e2a\u7279\u5b9aTask\u76f8\u5173\u7684\u4fe1\u606f\u3002 \u200b \u7f51\u7edc\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 6.2.4 Pre-training Tasks Word-aware Tasks Knowledge Masking Task \u200b \u8fd9\u5176\u5b9e\u5c31\u662fERNIE 1.0\u7248\u672c\u7684\u4efb\u52a1\uff0c\u5305\u62ecword\u3001phrase\u548centity\u7ea7\u522b\u7684mask\u5f97\u5230\u7684\u4efb\u52a1\u3002 Capitalization Prediction Task \u200b \u9884\u6d4b\u4e00\u4e2a\u8bcd\u662f\u5426\u9996\u5b57\u6bcd\u5927\u5c0f\u7684\u4efb\u52a1\u3002\u5bf9\u4e8e\u82f1\u6587\u6765\u8bf4\uff0c\u9996\u5b57\u7b26\u5927\u5c0f\u7684\u8bcd\u5f80\u5f80\u662f\u547d\u540d\u5b9e\u4f53\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4efb\u52a1\u53ef\u4ee5\u5b66\u4e60\u5230\u4e00\u4e9bentity\u7684\u77e5\u8bc6\u3002 Token-Document Relation Task \u200b \u9884\u6d4b\u5f53\u524d\u8bcd\u662f\u5426\u51fa\u73b0\u5728\u5176\u5b83\u7684Document\u91cc\uff0c\u4e00\u4e2a\u8bcd\u5982\u679c\u51fa\u73b0\u5728\u591a\u4e2aDocument\u91cc\uff0c\u8981\u4e48\u5b83\u662f\u5e38\u89c1\u7684\u8bcd\uff0c\u8981\u4e48\u5b83\u662f\u8fd9\u4e24\u4e2aDocument\u5171\u4eab\u7684\u4e3b\u9898\u7684\u8bcd\u3002\u8fd9\u4e2a\u4efb\u52a1\u80fd\u591f\u8ba9\u5b83\u5b66\u4e60\u591a\u4e2aDocument\u7684\u5171\u540c\u4e3b\u9898\u3002 Structure-aware Tasks Sentence Reordering Task \u200b \u7ed9\u5b9a\u4e00\u4e2a\u6bb5\u843d(paragraph)\uff0c\u9996\u5148\u628a\u5b83\u968f\u673a\u7684\u5207\u5206\u62101\u5230m\u4e2asegment\u3002\u7136\u540e\u628asegment\u968f\u673a\u6253\u6563(segment\u5185\u90e8\u7684\u8bcd\u5e76\u4e0d\u6253\u6563)\uff0c\u8ba9\u6a21\u578b\u6765\u6062\u590d\u3002\u90a3\u600e\u4e48\u6062\u590d\u5462\uff1f\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u79cd\u6700\u7b80\u5355\u7c97\u66b4\u7684\u5206\u7c7b\u7684\u65b9\u6cd5\uff0c\u603b\u5171\u6709$k=\\sum_1^m k!$\u79cd\u5206\u7c7b\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u5206\u7c7b\u4efb\u52a1\uff0c\u5b83\u53ef\u4ee5\u8ba9\u6a21\u578b\u5b66\u4e60\u6bb5\u843d\u7684\u7bc7\u7ae0\u7ed3\u6784\u4fe1\u606f\u3002 Sentence Distance Task \u200b \u4e24\u4e2a\u53e5\u5b50\u7684\u201d\u8ddd\u79bb\u201d\u7684\u4efb\u52a1\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u53e5\u5b50\u67093\u79cd\u5173\u7cfb(3\u5206\u7c7b\u4efb\u52a1)\uff1a\u5b83\u4eec\u662f\u524d\u540e\u76f8\u90bb\u7684\u53e5\u5b50\uff1b\u5b83\u4eec\u4e0d\u76f8\u90bb\u4f46\u662f\u5c5e\u4e8e\u540c\u4e00\u4e2aDocument\uff1b\u5b83\u4eec\u5c5e\u4e8e\u4e0d\u540c\u7684Document\u3002 Semantic-aware Tasks Discourse Relation Task \u200b \u8fd9\u4e2a\u4efb\u52a1\u4f1a\u8ba9\u6a21\u578b\u6765\u9884\u6d4b\u4e24\u4e2a\u53e5\u5b50\u7684\u8bed\u4e49\u6216\u8005\u4fee\u8f9e(rhetorical)\u5173\u7cfb\u3002 IR Relevance Task \u200b \u8fd9\u662f\u5229\u7528\u641c\u7d22\u5f15\u64ce(\u767e\u5ea6\u7684\u4f18\u52bf)\u7684\u6570\u636e\uff0c\u7ed9\u5b9aQuery\u548c\u641c\u7d22\u7ed3\u679c(\u53ef\u4ee5\u8ba4\u4e3a\u662f\u76f8\u5173\u7f51\u9875\u7684\u6458\u8981)\uff0c\u53ef\u4ee5\u5206\u4e3a3\u7c7b\uff1a\u5f3a\u76f8\u5173\u3001\u5f31\u76f8\u5173\u548c\u5b8c\u5168\u4e0d\u76f8\u5173\u3002 6.2.5 \u6e90\u7801\u5206\u6790 [TODO] https://github.com/PaddlePaddle/ERNIE 6.2.6 \u6548\u679c\u9a8c\u8bc1 [TODO] \u4e03\u3001XLNet [TODO] \u516b\u3001BERT vs. ERNIE [TODO] 3.1 \u539f\u7406\u5bf9\u6bd4 3.2 \u9002\u7528\u8303\u56f4 3.3 \u5b9e\u9a8c\u6bd4\u8f83 \u4e94\u3001\u4e3b\u8981\u53c2\u8003\u8d44\u6599 Attention Is All You Need The Illustrated Transformer Universal Transformers \u674e\u5b8f\u6bc5Transformer\u89c6\u9891\u53ca\u7b14\u8bb0 \u7f8e\u56e2BERT\u7684\u63a2\u7d22\u548c\u5b9e\u8df5 Pre-Training with Whole Word Masking for Chinese BERT ERNIE: Enhanced Representation through Knowledge Integration ERNIE 2.0: A Continual Pre-training Framework for Language Understanding \u3002 \u4e2d\u6587\u4efb\u52a1\u5168\u9762\u8d85\u8d8aBERT\uff1a\u767e\u5ea6\u6b63\u5f0f\u53d1\u5e03NLP\u9884\u8bad\u7ec3\u6a21\u578bERNIE ...","title":"\u9884\u5904\u7406\u6a21\u578b"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#transformer","text":"\u5173\u952e\u8bcd: encoder, decoder, self-attention(multi-head self-attention), position encoding, Residuals, layer normalization, feed-forward","title":"\u4e00\u3001Transformer"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#11","text":"\u200b \u5904\u7406Seq2seq\u6700\u5e38\u7528\u7684\u5c31\u662fRNN\u3002RNN\u7684\u8ba1\u7b97\u9650\u5236\u4e3a\u662f\u987a\u5e8f\u7684, \u65e0\u6cd5Parallel(\u5e76\u884c\u5904\u7406)\u3002 \u95ee\u9898: \u65f6\u95f4\u7247 t\u7684\u8ba1\u7b97\u4f9d\u8d56 t-1\u65f6\u523b\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u8fd9\u6837\u9650\u5236\u4e86\u6a21\u578b\u7684\u5e76\u884c\u80fd\u529b\u3002 \u987a\u5e8f\u8ba1\u7b97\u7684\u8fc7\u7a0b\u4e2d\u4fe1\u606f\u4f1a\u4e22\u5931\uff0c\u5c3d\u7ba1LSTM\u7b49\u95e8\u673a\u5236\u7684\u7ed3\u6784\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7f13\u89e3\u4e86\u957f\u671f\u4f9d\u8d56\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5bf9\u4e8e\u7279\u522b\u957f\u671f\u7684\u4f9d\u8d56\u73b0\u8c61,LSTM\u4f9d\u65e7\u65e0\u80fd\u4e3a\u529b\u3002 \u89e3\u51b3\u65b9\u6848: \u200b \u89e3\u51b3\u96be\u4ee5RNN\u7684\u96be\u4ee5\u5e73\u884c\u5316\u8ba1\u7b97\u95ee\u9898\u7684\u529e\u6cd5\u662f\u5229\u7528Transformer(Self-attention)\u66ff\u6362RNN\u3002 \u9996\u5148\u5b83\u4f7f\u7528\u4e86Attention\u673a\u5236\uff0c\u5c06\u5e8f\u5217\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u7f29\u5c0f\u4e3a\u4e00\u4e2a\u5e38\u91cf\u3002 \u5176\u6b21\u5b83\u4e0d\u662f\u7c7b\u4f3cRNN\u7684\u987a\u5e8f\u7ed3\u6784\uff0c\u56e0\u6b64\u5177\u6709\u66f4\u597d\u7684\u5e76\u884c\u6027\uff0c\u7b26\u5408\u73b0\u6709\u7684GPU\u6846\u67b6\u3002 \u200b \u8bba\u6587\u4e2d\u7ed9\u51faTransformer\u7684\u5b9a\u4e49\u662f\uff1aTransformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence aligned RNNs or convolution\u3002 \u7f3a\u70b9: \u5b9e\u8df5\u4e0a\uff1a\u6709\u4e9bRNN\u8f7b\u6613\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898transformer\u6ca1\u505a\u5230\uff0c\u6bd4\u5982 \u590d\u5236string \uff0c\u6216\u8005\u63a8\u7406\u65f6\u78b0\u5230\u7684sequence\u957f\u5ea6\u6bd4\u8bad\u7ec3\u65f6\u66f4\u957f\uff08\u56e0\u4e3a\u78b0\u5230\u4e86\u6ca1\u89c1\u8fc7\u7684position embedding\uff09\u3002 \u7406\u8bba\u4e0a\uff1atransformers\u4e0d\u662fcomputationally universal(\u56fe\u7075\u5b8c\u5907)\uff0c\u8fd9\u79cd\u975eRNN\u5f0f\u7684\u6a21\u578b\u662f\u975e\u56fe\u7075\u5b8c\u5907\u7684\u7684\uff0c \u65e0\u6cd5\u5355\u72ec\u5b8c\u6210NLP\u4e2d\u63a8\u7406\u3001\u51b3\u7b56\u7b49\u8ba1\u7b97\u95ee\u9898 \uff08\u5305\u62ec\u4f7f\u7528transformer\u7684bert\u6a21\u578b\u7b49\u7b49\uff09\u3002","title":"1.1 \u4f20\u7edf\u9012\u5f52\u7f51\u7edc\u7684\u95ee\u9898"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#12-transformer","text":"\u200b \u7f16\u7801\u7ec4\u4ef6\u662f\u4e00\u7cfb\u5217\u7f16\u7801\u5668\u7684\u5806\u53e0\uff08\u6587\u7ae0\u4e2d\u662f6\u4e2a\u7f16\u7801\u5668\u7684\u5806\u53e0\uff09, \u89e3\u7801\u90e8\u5206\u4e5f\u662f\u540c\u6837\u7684\u5806\u53e0\u6570\u3002 \u200b \u7f16\u7801\u5668\u5728\u7ed3\u6784\u4e0a\u90fd\u662f\u4e00\u6837\u7684\uff08\u4f46\u662f\u5b83\u4eec\u4e0d\u5171\u4eab\u6743\u91cd\uff09\u3002\u6bcf\u4e2a\u90fd\u53ef\u4ee5\u5206\u89e3\u6210\u4e24\u4e2a\u5b50\u6a21\u5757\uff1a \u200b \u7f16\u7801\u5668\u7684\u8f93\u5165\u9996\u5148\u6d41\u7ecfself-attention\u5c42\uff0c\u8be5\u5c42\u6709\u52a9\u4e8e\u7f16\u7801\u5668\u5bf9\u7279\u5b9a\u5355\u8bcd\u7f16\u7801\u65f6\u67e5\u770b\u8f93\u5165\u5e8f\u5217\u7684\u5176\u4ed6\u5355\u8bcd\u3002 \u200b Self-attention\u5c42\u7684\u8f93\u51fa\u88ab\u9001\u5165\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u3002\u5b8c\u5168\u76f8\u540c\u7684\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u72ec\u7acb\u5e94\u7528\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u3002 \u200b \u89e3\u7801\u5668\u4e5f\u5177\u6709\u8fd9\u4e24\u5c42\uff0c\u4f46\u662f\u8fd9\u4e24\u5c42\u4e2d\u95f4\u8fd8\u63d2\u5165\u4e86attention\u5c42\uff0c\u80fd\u5e2e\u52a9\u89e3\u7801\u5668\u6ce8\u610f\u8f93\u5165\u53e5\u5b50\u7684\u76f8\u5173\u90e8\u5206\uff08\u548c seq2seq\u6a21\u578b \u7684attention\u76f8\u540c\uff09","title":"1.2 Transformer\u6574\u4f53\u7ed3\u6784"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#13-transformer","text":"\u200b (1) \u6784\u5efa\u8f93\u5165 \u200b \u8f93\u5165\u5355\u8bcd\u8f6c\u6210word embedding\u548cposition encoding\u76f8\u52a0\u4f5c\u4e3a\u8f93\u5165, \u7ef4\u5ea6512\u3002 (2) Encoder\u90e8\u5206 \u7ecf\u8fc76\u6b21encoder, \u6bcf\u4e2aencoder\u8f93\u5165\u8f93\u51fa\u7ef4\u5ea6512, \u5168\u8fde\u63a5\u9690\u5c42\u7ef4\u5ea62048 multi-head self-attention\u5c42, feed-forward\u5c42, \u5bf9\u8f93\u51fa\u505a residual connect + layer normalization (3) Decoder\u90e8\u5206 \u7ecf\u8fc76\u6b21decoder, \u6bcf\u4e2adecoder\u8f93\u5165\u8f93\u51fa\u7ef4\u5ea6512, \u5168\u8fde\u63a5\u9690\u5c42\u7ef4\u5ea62048 masked multi-head self-attention\u5c42(masked\u4ee3\u8868\u8f93\u5165\u6765\u6e90\u4e8e\u4e0a\u4e00\u65f6\u95f4\u7684\u8f93\u51fa), \u5bf9\u8f93\u51fa\u505a residual connect + layer normalization encoder-decoder attention, decoder\u7684V\u4e0e\u4e4b\u524dencoder\u90e8\u5206\u7684K\u548cV\u53bb\u505aattention, \u4e4b\u540e\u5bf9\u8f93\u51fa\u505a residual connect + layer normalization feed-forward\u5c42, \u5bf9\u8f93\u51fa\u505a residual connect + layer normalization \u200b \u533a\u522b Decoder\u4e0eEncoder\u4e2d\u7684self-attention\u5c42\u6709\u533a\u522b, decoder\u4e2d\u4ec5\u5141\u8bb8 self-attention\u5c42\u5173\u6ce8\u8f93\u51fa\u5e8f\u5217\u4e2d\u8f83\u65e9\u7684\u4f4d\u7f6e\u3002\u8fd9\u662f\u901a\u8fc7\u5728\u8ba1\u7b97self-attention\u4e2dsoftmax\u6b65\u9aa4\u524d\u5c4f\u853d\u672a\u6765\u4f4d\u7f6e\uff08\u5c06\u5b83\u4eec\u8bbe\u7f6e\u4e3a-inf\uff09\u5b9e\u73b0\u7684\u3002 \u200b Transformer\u4e00\u4e2a\u91cd\u8981\u7279\u6027: \u6bcf\u4e2a\u4f4d\u7f6e\u7684\u5355\u8bcd\u5728\u7ecf\u8fc7\u7f16\u7801\u5668\u65f6\u6d41\u7ecf\u81ea\u5df1\u7684\u8def\u5f84\u3002self-attention\u5c42\u4e2d\u8fd9\u4e9b\u8def\u5f84\u4e4b\u95f4\u6709\u4f9d\u8d56\u5173\u7cfb\u3002\u7136\u800c\u524d\u9988\u5c42\u5e76\u4e0d\u5177\u6709\u8fd9\u4e9b\u4f9d\u8d56\u5173\u7cfb\uff0c\u6240\u4ee5\u5404\u79cd\u8def\u5f84\u5728\u6d41\u7ecf\u524d\u9988\u5c42\u65f6\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u3002","title":"1.3 Transformer\u6570\u636e\u6d41\u52a8"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#14-self-attention","text":"(1) \u9700\u8981\u4ece\u6bcf\u4e2a\u8f93\u5165\u8bcd\u5411\u91cf\u4e2d\u521b\u5efa\u4e09\u4e2a\u5411\u91cf, Query, Key, Value q \u7528\u4e8ematch\u5176\u5b83\u8f93\u51fa k \u7528\u4e8e\u88abmatch v \u662f\u62bd\u53d6\u51fa\u6765\u7684\u4fe1\u606f\u3002 \u200b \u6ce8\u610f \u8fd9\u4e9b\u65b0\u521b\u5efa\u7684\u5411\u91cf\u7684\u7ef4\u5ea6\u5c0f\u4e8e\u8bcd\u5d4c\u5165\u5411\u91cf(embedding vector)\u3002\u5b83\u4eec\uff08\u65b0\u521b\u5efa\u7684\u5411\u91cf\uff09\u7684\u7ef4\u5ea6\u662f64\uff0c\u800c\u8bcd\u5d4c\u5165\u548c\u7f16\u7801\u5668\u7684\u8f93\u5165\u8f93\u51fa\u5411\u91cf\u7684\u7ef4\u5ea6\u662f512\u3002\u5b83\u4eec\u4e0d\u5fc5\u66f4\u5c0f\uff0c\u8fd9\u662f\u4e00\u79cd\u67b6\u6784\u9009\u62e9\uff0c\u53ef\u4ee5\u4f7f\u591a\u5934\u6ce8\u610f\u529b(multiheaded attention)\u8ba1\u7b97\u4e0d\u53d8\u3002 (2) \u8ba1\u7b97\u5f97\u5206(score \u6743\u91cd) \u200b \u5f53\u6211\u4eec\u5728\u67d0\u4e2a\u4f4d\u7f6e\u7f16\u7801\u5355\u8bcd\u65f6\uff0c\u5206\u6570\u51b3\u5b9a\u4e86\u5bf9\u8f93\u5165\u53e5\u5b50\u7684\u5176\u4ed6\u90e8\u5206\u653e\u7f6e\u591a\u5c11\u7684\u7126\u70b9(\u6ce8\u610f\u529b)\u3002 (3) \u5bf9\u52a0\u6743\u503c\u5411\u91cf\u6c42\u548c, \u8fd9\u6837\u5c31\u4ea7\u751f\u4e86\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u7684self-attention\u7684\u8f93\u51fa \u603b\u7ed3 \u200b \u8fd9\u5c31\u662fself-attention\u8ba1\u7b97\u3002\u5f97\u5230\u7684\u5411\u91cf\u53ef\u4ee5\u9001\u5f80\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u3002 \u200b \u7136\u800c\u5728\u771f\u6b63\u7684\u5b9e\u73b0\u4e2d\uff0c\u8ba1\u7b97\u8fc7\u7a0b\u901a\u8fc7\u77e9\u9635\u8ba1\u7b97\u6765\u8fdb\u884c\uff0c\u4ee5\u4fbf\u52a0\u5feb\u8ba1\u7b97\u3002","title":"1.4 Self-Attention\u7ec6\u8282"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#15-multi-head-self-attention","text":"\u4f5c\u7528 \u5b83\u6269\u5c55\u4e86\u6a21\u578b\u5173\u6ce8\u4e0d\u540c\u4f4d\u7f6e\u7684\u80fd\u529b\u3002 \u5b83\u7ed9\u4e88attention\u5c42\u591a\u4e2a\u201c\u8868\u8fbe\u5b50\u7a7a\u95f4\u201d\u3002","title":"1.5 Multi-head Self-attention"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#16-positional-encoding","text":"Self-Attention\u672a\u89e3\u51b3\u8f93\u5165\u5e8f\u5217\u4e2d\u5355\u8bcd\u987a\u5e8f\u7684\u95ee\u9898\u3002Transformer\u4e3a\u6bcf\u4e2a\u8f93\u5165\u7684\u8bcd\u5d4c\u5165\u589e\u52a0\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u5411\u91cf\u3002\u8fd9\u4e9b\u5411\u91cf\u9075\u5faa\u6a21\u578b\u5b66\u4e60\u5230\u7684\u7279\u5b9a\u6a21\u5f0f\uff0c\u8fd9\u6709\u52a9\u4e8e\u786e\u5b9a\u6bcf\u4e2a\u5355\u8bcd\u7684\u4f4d\u7f6e\uff0c\u6216\u8005\u5b66\u4e60\u5230\u4e0d\u540c\u5355\u8bcd\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u5728\u539f\u59cb\u7684\u8bba\u6587\u4e2d\uff0c\u4f5c\u8005\u52a0\u5165\u8bbe\u5b9a\u7684$e^i$(\u4e0d\u662f\u5b66\u4e60\u51fa\u6765\u7684)\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u76f8\u5f53\u4e8e\u63d0\u4f9b\u4f4d\u7f6e\u8d44\u8baf\u3002 \u200b \u8bba\u6587\u4e2d\u7684$e^i$\u88ab\u76f4\u63a5\u52a0\u5230\u4e86$a^i$\u4e0a, \u4e3a\u4ec0\u4e48\u4e0d\u628a$e^i$\u548c$a^i$\u505aconcat\u5462, \u7531\u4e0b\u56fe\u53ef\u77e5\u672c\u8d28\u4e0a\u5c31\u662f\u505a\u4e86\u4f4d\u7f6e\u7684onthot\u548c\u539f\u59cb\u8f93\u5165\u505a\u4e86concat\u505a\u4e00\u4e2a\u77e9\u9635\u6620\u5c04\u5f97\u5230\u7684\u5c31\u662f$e^i$\u4e0e$a^i$\u7684\u7d2f\u52a0\u7ed3\u679c \u200b \u4e0b\u56fe\u4e2d\uff0c\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u4e2a\u5411\u91cf\u7684\u4f4d\u7f6e\u7f16\u7801, \u6bcf\u884c\u5305\u542b512\u4e2a\u503c\u2014\u6bcf\u4e2a\u503c\u4ecb\u4e8e-1\u52301\u4e4b\u95f4\u3002\u8fd9\u91cc\u6211\u4eec\u8fdb\u884c\u4e86\u6d82\u8272\uff0c\u4f7f\u6a21\u5f0f\u53ef\u89c1\u3002\u8be5\u4f8b\u5b50\u4e2d\u517120\u4e2a\u8bcd\uff08\u884c\uff09\uff0c\u8bcd\u5d4c\u5165\u5411\u91cf\u7ef4\u5ea6\u4e3a512\u7ef4(\u5217)\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u4e2d\u5fc3\u533a\u57df\u5206\u6210\u4e24\u534a\u3002\u8fd9\u662f\u56e0\u4e3a\u5de6\u8fb9\u7684\u503c\u662f\u7531\u4e00\u4e2a\u51fd\u6570(\u6b63\u5f26)\u4ea7\u751f\u7684\uff0c\u53f3\u8fb9\u7684\u503c\u662f\u7531\u53e6\u4e00\u4e2a\u51fd\u6570(\u4f59\u5f26)\u4ea7\u751f\u7684\u3002\u7136\u540e\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\u5f62\u6210\u6bcf\u4e2a\u4f4d\u7f6e\u7f16\u7801\u5411\u91cf\u3002 \u200b \u4f4d\u7f6e\u7f16\u7801\u7684\u516c\u5f0f\u5728\u6587\u7ae0(3.5\u8282)\u6709\u63cf\u8ff0\u3002\u4f60\u53ef\u4ee5\u5728 get_timing_signal_1d() \u51fd\u6570\u4e2d\u770b\u5230\u7528\u4e8e\u751f\u6210\u4f4d\u7f6e\u7f16\u7801\u7684\u4ee3\u7801\u3002\u8fd9\u5e76\u4e0d\u662f\u751f\u6210\u4f4d\u7f6e\u7f16\u7801\u7684\u552f\u4e00\u65b9\u5f0f\u3002\u7136\u800c\uff0c\u5b83\u7684\u4f18\u70b9\u5728\u4e8e\u53ef\u4ee5\u6269\u5c55\u5230\u770b\u4e0d\u89c1\u7684\u5e8f\u5217\u957f\u5ea6\uff08eg. \u5982\u679c\u8981\u7ffb\u8bd1\u7684\u53e5\u5b50\u7684\u957f\u5ea6\u8fdc\u957f\u4e8e\u8bad\u7ec3\u96c6\u4e2d\u6700\u957f\u7684\u53e5\u5b50\uff09\u3002","title":"1.6 Positional Encoding"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#17","text":"\u200b \u635f\u5931\u51fd\u6570 \u200b beam search","title":"1.7 \u8bad\u7ec3\u8fc7\u7a0b"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#18-transformer","text":"","title":"1.8 Transformer \u6e90\u7801\u5206\u6790"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#181-transformer","text":"attention-is-all-you-need-pytorch \uff08\u5f3a\u70c8\u63a8\u8350\uff0c\u8bfb\u6e90\u7801\u518d\u7ed3\u5408\u6587\u7ae0\uff0c\u7406\u89e3\u66f4\u5168\u9762\u548c\u6df1\u5165\uff09 The Annotated Transformer (harvardnlp\u7684\u4ee3\u7801\u89e3\u8bfb)\u53ca\u5176 \u4fee\u6539\u7248 \u601d\u8def (\u63a8\u8350) tensorflow/tensor2tensor (\u5b98\u65b9\u5b9e\u73b0) tensorflow/models/official/transformer (tf-models\u5b9e\u73b0) Pytorch-transformer (\u5e38\u7528\u5de5\u5177) \u200b \u6211\u9009\u53d6harvardnlp\u4fee\u6539\u7248\u6765\u8fdb\u884c\u6e90\u7801\u5206\u6790\u3002","title":"1.8.1 Transformer\u6e90\u7801\u5217\u8868"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#19-universal-transformers-todo","text":"Universal Transformers Universal Transformer","title":"1.9 Universal Transformers [TODO]"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#110","text":"\u5982\u679c\u60f3\u66f4\u6df1\u7406\u89e3\u7684\u8bdd\uff0c\u6211\u5efa\u8bae\uff1a \u9605\u8bfb\u6587\u7ae0 Attention Is All You Need \uff0c\u548cTransformer\u7684\u5b98\u65b9\u535a\u6587\uff1a ( Transformer: A Novel Neural Network Architecture for Language Understanding ), \u548c Tensor2Tensor announcement \u3002 \u770b \u0141ukasz Kaiser\u2019s \u7684\u8bb2\u89e3\u89c6\u9891 \u6df1\u5165\u6a21\u578b\u7ec6\u8282\u3002 \u6253\u5f00 Tensor2Tensor\u7684Jupyter notebook \u6765\u8be6\u7ec6\u4e86\u89e3\u3002 \u63a2\u7d22 Tensor2Tensor \u4ee3\u7801\u4ed3\u5e93 \u3002 \u4ee5\u53ca\u76f8\u5173\u5de5\u4f5c\uff1a Depthwise Separable Convolutions for Neural Machine Translation One Model To Learn Them All Discrete Autoencoders for Sequence Models Generating Wikipedia by Summarizing Long Sequences Image Transformer Training Tips for the Transformer Model Self-Attention with Relative Position Representations Fast Decoding in Sequence Models using Discrete Latent Variables Adafactor: Adaptive Learning Rates with Sublinear Memory Cost","title":"1.10 \u8fdb\u4e00\u6b65\u5b66\u4e60"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#_1","text":"","title":"\u4e8c\u3001\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#21-feature-based","text":"\u200b \u5e7f\u6cdb\u91c7\u7528\u7684 \u5355\u8bcd\u8868\u5f81\u5b66\u4e60 \uff0c\u5df2\u7ecf\u662f\u6570\u5341\u5e74\u7684\u6d3b\u8dc3\u7814\u7a76\u9886\u57df\uff0c\u5305\u62ec\u975e\u795e\u7ecf\u7f51\u7edc\u548c\u795e\u7ecf\u7f51\u7edc\u7684\u7b97\u6cd5, \u4f8b\u5982ELMo\u3002","title":"2.1 Feature-based\u65b9\u6cd5"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#22-fine-tuning","text":"\u200b \u4e00\u79cd\u6e90\u4e8e\u8bed\u8a00\u6a21\u578b(LMs)\u7684\u8fc1\u79fb\u5b66\u4e60\u65b0\u8d8b\u52bf\uff0c\u662f\u5fae\u8c03\u524d\u9884\u8bad\u7ec3\u4e00\u4e9bLM\u76ee\u6807\u4e0a\u7684\u6a21\u578b\u67b6\u6784, \u4f8b\u5982GPT, BERT\u3002","title":"2.2 Fine-tuning\u65b9\u6cd5"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#elmo-todo","text":"","title":"\u4e09\u3001ELMO [TODO]"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#31-elmo","text":"\u200b \u5c3d\u7ba1\u6709\u4e0d\u540c\u7684\u610f\u601d\uff0c\u4f46\u4f7f\u7528\u4f20\u7edf\u7684word embedding\u7684\u65b9\u6cd5\uff0c\u76f8\u540c\u7684\u5355\u8bcd\u90fd\u4f1a\u5bf9\u5e94\u540c\u6837\u7684embedding\u3002\u4f46\u6211\u4eec\u5e0c\u671b\u9488\u5bf9\u4e0d\u540c\u610f\u601d\u7684bank\uff0c\u53ef\u4ee5\u7ed9\u51fa\u4e0d\u540c\u7684embedding\u8868\u793a\u3002 \u200b \u6839\u636e\u4e0a\u4e0b\u6587\u8bed\u5883\u7684\u4e0d\u540c\uff0c\u540c\u4e00\u4e2a\u5355\u8bcdbank\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5f97\u5230\u4e0d\u540c\u7684embedding\uff0c\u5982\u679cbank\u7684\u610f\u601d\u662f\u94f6\u884c\uff0c\u6211\u4eec\u671f\u671b\u5b83\u4eec\u4e4b\u95f4\u7684embedding\u80fd\u591f\u76f8\u8fd1\uff0c\u540c\u65f6\u80fd\u591f\u4e0e\u6cb3\u5824\u610f\u601d\u7684bank\u76f8\u8ddd\u8f83\u8fdc\u3002 \u200b \u57fa\u4e8e\u8fd9\u4e2a\u601d\u60f3\uff0c\u9996\u5148\u6709\u4e86ELMO\u3002","title":"3.1 ELMO\u601d\u60f3\u8d77\u6e90"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#32-elmoembeddings-from-language-model","text":"\u200b ELMO\u662fEmbeddings from Language Model\u7684\u7b80\u79f0\uff0cELMO\u662f\u300a\u829d\u9ebb\u8857\u300b\u4e2d\u7684\u4e00\u4e2a\u89d2\u8272\u3002\u5b83\u662f\u4e00\u4e2aRNN-based\u7684\u8bed\u8a00\u6a21\u578b\uff0c\u5176\u4efb\u52a1\u662f\u5b66\u4e60\u53e5\u5b50\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5355\u8bcd\u6216\u8005\u524d\u4e00\u4e2a\u5355\u8bcd\u662f\u4ec0\u4e48\u3002 \u200b \u5b83\u662f\u4e00\u4e2a\u53cc\u5411\u7684RNN\u7f51\u7edc\uff0c\u8fd9\u6837\u6bcf\u4e00\u4e2a\u5355\u8bcd\u90fd\u5bf9\u5e94\u4e24\u4e2ahidden state\uff0c\u8fdb\u884c\u62fc\u63a5\u4fbf\u53ef\u4ee5\u5f97\u5230\u5355\u8bcd\u7684Embedding\u8868\u793a\u3002\u5f53\u540c\u4e00\u4e2a\u5355\u8bcd\u4e0a\u4e0b\u6587\u4e0d\u4e00\u6837\uff0c\u5f97\u5230\u7684embedding\u5c31\u4e0d\u540c\u3002 \u200b \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u641e\u66f4\u591a\u5c42\uff1a \u200b \u8fd9\u4e48\u591a\u5c42\u7684RNN\uff0c\u5185\u90e8\u6bcf\u4e00\u5c42\u8f93\u51fa\u90fd\u662f\u5355\u8bcd\u7684\u4e00\u4e2a\u8868\u793a\uff0c\u90a3\u6211\u4eec\u53d6\u54ea\u4e00\u5c42\u7684\u8f93\u51fa\u6765\u4ee3\u8868\u5355\u8bcd\u7684embedding\u5462\uff1f\u5728ELMO\u4e2d\uff0c\u4e00\u4e2a\u5355\u8bcd\u4f1a\u5f97\u5230\u591a\u4e2aembedding\uff0c\u5bf9\u4e0d\u540c\u7684embedding\u8fdb\u884c\u52a0\u6743\u6c42\u548c\uff0c\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684embedding\u7528\u4e8e\u4e0b\u6e38\u4efb\u52a1\u3002\u8981\u8bf4\u660e\u4e00\u4e2a\u8fd9\u91cc\u7684embedding\u4e2a\u6570\uff0c\u4e0b\u56fe\u4e2d\u53ea\u753b\u4e86\u4e24\u5c42RNN\u8f93\u51fa\u7684hidden state\uff0c\u5176\u5b9e\u8f93\u5165\u5230RNN\u7684\u539f\u59cbembedding\u4e5f\u662f\u9700\u8981\u7684\uff0c\u6240\u4ee5\u4f60\u4f1a\u770b\u5230\u8bf4\u53f3\u4e0b\u89d2\u7684\u56fe\u7247\u4e2d\uff0c\u5305\u542b\u4e86\u4e09\u4e2aembedding\u3002 \u200b \u4f46\u4e0d\u540c\u7684\u6743\u91cd\u662f\u57fa\u4e8e\u4e0b\u6e38\u4efb\u52a1\u5b66\u4e60\u51fa\u6765\u7684\uff0c\u4e0a\u56fe\u4e2d\u53f3\u4e0b\u89d2\u7ed9\u4e865\u4e2a\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u5176\u5f97\u5230\u7684embedding\u6743\u91cd\u5404\u4e0d\u76f8\u540c\u3002","title":"3.2 ELMO\u4ecb\u7ecd(Embeddings from Language Model)"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#gpt-todo","text":"","title":"\u56db\u3001GPT [TODO]"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#41-openai-gpt","text":"","title":"4.1 OpenAI GPT"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#42-gpt-2","text":"","title":"4.2 GPT-2"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#bert","text":"","title":"\u4e94\u3001BERT"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#51-bert","text":"\u200b Bert\u662fBidirectional Encoder Representations from Transformers\u7684\u7f29\u5199\uff0c\u5b83\u4e5f\u662f\u829d\u9ebb\u8857\u7684\u4eba\u7269\u4e4b\u4e00\u3002\u5373\u539f\u7406\u662fTransformer\u7684\u53cc\u5411\u7f16\u7801\u8868\u793a\u6765\u6539\u8fdb\u57fa\u4e8e\u67b6\u6784\u5fae\u8c03\u7684\u65b9\u6cd5\u3002Transformer\u4e2d\u7684Encoder\u5c31\u662fBert\u9884\u8bad\u7ec3\u7684\u67b6\u6784\u3002\u5982\u679c\u662f\u4e2d\u6587\u7684\u8bdd\uff0c\u53ef\u4ee5\u628a\u5b57\u4f5c\u4e3a\u5355\u4f4d\uff0c\u800c\u4e0d\u662f\u8bcd\u3002 \u200b \u4e0d\u540c\u4e8e\u6700\u8fd1\u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0cBERT\u65e8\u5728\u57fa\u4e8e\u6240\u6709\u5c42\u7684\u5de6\u3001\u53f3\u8bed\u5883\u6765\u9884\u8bad\u7ec3\u6df1\u5ea6\u53cc\u5411\u8868\u5f81\u3002\u56e0\u6b64\uff0c\u9884\u8bad\u7ec3\u7684BERT\u8868\u5f81\u53ef\u4ee5\u4ec5\u7528\u4e00\u4e2a\u989d\u5916\u7684\u8f93\u51fa\u5c42\u8fdb\u884c\u5fae\u8c03\uff0c\u8fdb\u800c\u4e3a\u5f88\u591a\u4efb\u52a1(\u5982\u95ee\u7b54\u548c\u8bed\u8a00\u63a8\u7406)\u521b\u5efa\u5f53\u524d\u6700\u4f18\u6a21\u578b\uff0c\u65e0\u9700\u5bf9\u4efb\u52a1\u7279\u5b9a\u67b6\u6784\u505a\u51fa\u5927\u91cf\u4fee\u6539\u3002 \u200b BERT\u7684\u5237\u65b0\u4e8611\u4e2aNLP\u4efb\u52a1\u7684\u5f53\u524d\u6700\u4f18\u7ed3\u679c\uff0c\u5305\u62ec\u5c06GLUE\u57fa\u51c6\u63d0\u5347\u81f380.4%(7.6%\u7684\u7edd\u5bf9\u6539\u8fdb)\u3001\u5c06MultiNLI\u7684\u51c6\u786e\u7387\u63d0\u9ad8\u523086.7%(5.6%\u7684\u7edd\u5bf9\u6539\u8fdb)\uff0c\u4ee5\u53ca\u5c06SQuADv1.1\u95ee\u7b54\u6d4b\u8bd5F1\u7684\u5f97\u5206\u63d0\u9ad8\u81f393.2\u5206(1.5\u5206\u7edd\u5bf9\u63d0\u9ad8)\u2014\u2014\u6bd4\u4eba\u7c7b\u6027\u80fd\u8fd8\u9ad8\u51fa2.0\u5206\u3002 \u200b BERT\u8bba\u6587\u8d21\u732e: \u6211\u4eec\u8bc1\u660e\u4e86\u53cc\u5411\u9884\u8bad\u7ec3\u5bf9 \u8bed\u8a00\u8868\u5f81\u91cf \u7684\u91cd\u8981\u6027 \u6211\u4eec\u5c55\u793a\u4e86\u9884\u8bad\u7ec3\u8868\u5f81\u91cf\u80fd\u6d88\u9664\u8bb8\u591a\u91cd\u578b\u5de5\u7a0b \u4efb\u52a1\u7279\u5b9a\u67b6\u6784 \u7684\u9700\u6c42\u3002BERT\u662f\u7b2c\u4e00\u4e2a\u57fa\u4e8e\u5fae\u8c03\u7684\u8868\u5f81\u6a21\u578b\uff0c\u5b83\u5728\u5927\u91cf\u7684\u53e5\u5b50\u7ea7\u548c\u8bcd\u5757\u7ea7\u4efb\u52a1\u4e0a\u5b9e\u73b0\u4e86\u6700\u5148\u8fdb\u7684\u6027\u80fd\uff0c\u4f18\u4e8e\u8bb8\u591a\u5177\u6709\u4efb\u52a1\u7279\u5b9a\u67b6\u6784\u7684\u7cfb\u7edf\u3002(fine-tuning) BERT\u63a8\u8fdb\u4e8611\u9879NLP\u4efb\u52a1\u7684\u6700\u9ad8\u6c34\u5e73\u3002","title":"5.1 BERT\u4ecb\u7ecd"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#52-bert","text":"\u200b BERT\u6846\u67b6\u6709\u4e24\u6b65, pre-training\u548cfine-tuning, \u9664\u8f93\u51fa\u5c42\u5916, \u8fd9\u4e24\u4e2a\u6b65\u9aa4\u67b6\u6784\u662f\u7edf\u4e00\u7684\u3002 \u200b BERT\u6a21\u578b\u57fa\u4e8e\u591a\u5c42\u53cc\u5411Transformer Encoder\u5b9e\u73b0\u3002 \u200b BERT\u7684input embedding\u6709token embedding + segment embedding + position embedding \u5bf9\u4e8e\u82f1\u6587\u6a21\u578b\uff0c\u4f7f\u7528\u4e86Wordpiece\u6a21\u578b\u6765\u4ea7\u751fSubword\u4ece\u800c\u51cf\u5c0f\u8bcd\u8868\u89c4\u6a21\uff1b\u5bf9\u4e8e\u4e2d\u6587\u6a21\u578b\uff0c\u76f4\u63a5\u8bad\u7ec3\u57fa\u4e8e\u5b57\u7684\u6a21\u578b\u3002 \u6a21\u578b\u8f93\u5165\u9700\u8981\u9644\u52a0\u4e00\u4e2a\u8d77\u59cbToken\uff0c\u8bb0\u4e3a[CLS]\uff0c\u5bf9\u5e94\u6700\u7ec8\u7684Hidden State\uff08\u5373Transformer\u7684\u8f93\u51fa\uff09\u53ef\u4ee5\u7528\u6765\u8868\u5f81\u6574\u4e2a\u53e5\u5b50\uff0c\u7528\u4e8e\u4e0b\u6e38\u7684\u5206\u7c7b\u4efb\u52a1\u3002 \u6a21\u578b\u80fd\u591f\u5904\u7406\u53e5\u95f4\u5173\u7cfb\u3002\u4e3a\u533a\u522b\u4e24\u4e2a\u53e5\u5b50\uff0c\u7528\u4e00\u4e2a\u7279\u6b8a\u6807\u8bb0\u7b26[SEP]\u8fdb\u884c\u5206\u9694\uff0c\u53e6\u5916\u9488\u5bf9\u4e0d\u540c\u7684\u53e5\u5b50\uff0c\u5c06\u5b66\u4e60\u5230\u7684Segment Embeddings \u52a0\u5230\u6bcf\u4e2aToken\u7684Embedding\u4e0a\u3002 \u5bf9\u4e8e\u5355\u53e5\u8f93\u5165\uff0c\u53ea\u6709\u4e00\u79cdSegment Embedding\uff1b\u5bf9\u4e8e\u53e5\u5bf9\u8f93\u5165\uff0c\u4f1a\u6709\u4e24\u79cdSegment Embedding\u3002 \u200b $BERT_{large}$\u7684\u53c2\u6570\u662f\u5c42\u6570(L=24)\u9690\u5c42\u7ed3\u70b9\u6570(H=1024)\u548cself-attention\u5934\u7684\u4e2a\u6570(A=16), \u603b\u53c2\u6570340M\u3002(\u6df1\u800c\u7a84)","title":"5.2 BERT\u67b6\u6784"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#53-pre-training","text":"\u200b BERT\u9884\u8bad\u7ec3\u8fc7\u7a0b\u5305\u542b\u4e24\u4e2a\u4e0d\u540c\u7684\u9884\u8bad\u7ec3\u4efb\u52a1\uff0c\u5206\u522b\u662fMasked Language Model\u548cNext Sentence Prediction\u4efb\u52a1\u3002 \u200b Masked LM\uff0c\u901a\u8fc7\u968f\u673a\u63a9\u76d6\u4e00\u4e9b\u8bcd\uff08\u66ff\u6362\u4e3a\u7edf\u4e00\u6807\u8bb0\u7b26[MASK]\uff09\uff0c\u7136\u540e\u9884\u6d4b\u8fd9\u4e9b\u88ab\u906e\u76d6\u7684\u8bcd\u6765\u8bad\u7ec3\u53cc\u5411\u8bed\u8a00\u6a21\u578b\uff0c\u5e76\u4e14\u4f7f\u6bcf\u4e2a\u8bcd\u7684\u8868\u5f81\u53c2\u8003\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002NSP\u662f\u9884\u6d4b\u4e0b\u4e00\u4e2a\u53e5\u5b50\uff0c\u8fd9\u91cc\uff0c\u5148\u628a\u4e24\u53e5\u8bdd\u8fde\u8d77\u6765\uff0c\u4e2d\u95f4\u52a0\u4e00\u4e2a[SEP]\u4f5c\u4e3a\u4e24\u4e2a\u53e5\u5b50\u7684\u5206\u9694\u7b26\u3002\u800c\u5728\u4e24\u4e2a\u53e5\u5b50\u7684\u5f00\u5934\uff0c\u653e\u4e00\u4e2a[CLS]\u6807\u5fd7\u7b26\uff0c\u5c06\u5176\u5f97\u5230\u7684embedding\u8f93\u5165\u5230\u4e8c\u5206\u7c7b\u7684\u6a21\u578b\uff0c\u8f93\u51fa\u4e24\u4e2a\u53e5\u5b50\u662f\u4e0d\u662f\u63a5\u5728\u4e00\u8d77\u7684\u3002 \u200b \u5b9e\u9645\u4e2d\uff0c\u540c\u65f6\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u5f80\u5f80\u5f97\u5230\u7684\u7ed3\u679c\u6700\u597d\u3002 \u200b \u5982\u679c\u662f\u5206\u7c7b\u4efb\u52a1[CLS]\uff0c\u5728\u53e5\u5b50\u524d\u9762\u52a0\u4e00\u4e2a\u6807\u5fd7\uff0c\u5c06\u5176\u7ecf\u8fc7Bert\u5f97\u5230\u7684embedding\u8f93\u51fa\u5230\u4e8c\u5206\u7c7b\u6a21\u578b\u4e2d\uff0c\u5f97\u5230\u5206\u7c7b\u7ed3\u679c\u3002\u4e8c\u5206\u7c7b\u6a21\u578b\u4ece\u5934\u5f00\u59cb\u5b66\uff0c\u800cBert\u5728\u9884\u8bad\u7ec3\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u5fae\u8c03\uff08fine-tuning\uff09\u3002","title":"5.3 Pre-training"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#task-1-masked-lm","text":"\u200b \u4ece\u76f4\u89c9\u4e0a\u770b\uff0c\u7814\u7a76\u56e2\u961f\u6709\u7406\u7531\u76f8\u4fe1\uff0c\u6df1\u5ea6\u53cc\u5411\u6a21\u578b\u6bd4left-to-right \u6a21\u578b\u6216left-to-right and right-to-left\u6a21\u578b\u7684\u6d45\u5c42\u8fde\u63a5\u66f4\u5f3a\u5927\u3002\u9057\u61be\u7684\u662f\uff0c\u6807\u51c6\u6761\u4ef6\u8bed\u8a00\u6a21\u578b\u53ea\u80fd\u4ece\u5de6\u5230\u53f3\u6216\u4ece\u53f3\u5230\u5de6\u8fdb\u884c\u8bad\u7ec3\uff0c\u56e0\u4e3a\u53cc\u5411\u6761\u4ef6\u4f5c\u7528\u5c06\u5141\u8bb8\u6bcf\u4e2a\u5355\u8bcd\u5728\u591a\u5c42\u4e0a\u4e0b\u6587\u4e2d\u95f4\u63a5\u5730\u201csee itself\u201d\u3002 \u200b \u4e3a\u4e86\u8bad\u7ec3\u4e00\u4e2a\u6df1\u5ea6\u53cc\u5411\u8868\u793a\uff08deep bidirectional representation\uff09\uff0c\u7814\u7a76\u56e2\u961f\u91c7\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u5373\u968f\u673a\u5c4f\u853d\uff08masking\uff09\u90e8\u5206\u8f93\u5165token\uff0c\u7136\u540e\u53ea\u9884\u6d4b\u90a3\u4e9b\u88ab\u5c4f\u853d\u7684token\u3002 \u200b \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4e0emasked token\u5bf9\u5e94\u7684\u6700\u7ec8\u9690\u85cf\u5411\u91cf\u88ab\u8f93\u5165\u5230\u8bcd\u6c47\u8868\u4e0a\u7684\u8f93\u51fasoftmax\u4e2d\uff0c\u5c31\u50cf\u5728\u6807\u51c6LM\u4e2d\u4e00\u6837\u3002\u5728\u56e2\u961f\u6240\u6709\u5b9e\u9a8c\u4e2d\uff0c\u968f\u673a\u5730\u5c4f\u853d\u4e86\u6bcf\u4e2a\u5e8f\u5217\u4e2d15%\u7684WordPiece token\u3002 \u200b \u867d\u7136\u8fd9\u786e\u5b9e\u80fd\u8ba9\u56e2\u961f\u83b7\u5f97\u53cc\u5411\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u6709\u4e24\u4e2a\u7f3a\u70b9\u3002\u9996\u5148\uff0c\u9884\u8bad\u7ec3\u548cfinetuning\u4e4b\u95f4\u4e0d\u5339\u914d\uff0c\u56e0\u4e3a\u5728finetuning\u671f\u95f4\u4ece\u672a\u770b\u5230[MASK]token\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e2\u961f\u5e76\u4e0d\u603b\u662f\u7528\u5b9e\u9645\u7684[MASK]token\u66ff\u6362\u88ab\u201cmasked\u201d\u7684\u8bcd\u6c47\u3002 \u200b \u6570\u636e\u751f\u6210\u5668\u5c06\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u59cb\u7ec8\u7528[MASK]\u66ff\u6362\u6240\u9009\u5355\u8bcd\uff1a 80\uff05\u7684\u65f6\u95f4\uff1a\u7528[MASK]\u6807\u8bb0\u66ff\u6362\u5355\u8bcd\uff0c\u4f8b\u5982\uff0cmy dog is hairy \u2192 my dog is [MASK] 10\uff05\u7684\u65f6\u95f4\uff1a\u7528\u4e00\u4e2a\u968f\u673a\u7684\u5355\u8bcd\u66ff\u6362\u8be5\u5355\u8bcd\uff0c\u4f8b\u5982\uff0cmy dog is hairy \u2192 my dog is apple 10\uff05\u7684\u65f6\u95f4\uff1a\u4fdd\u6301\u5355\u8bcd\u4e0d\u53d8\uff0c\u4f8b\u5982\uff0cmy dog is hairy \u2192 my dog is hairy. \u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u5c06\u8868\u793a\u504f\u5411\u4e8e\u5b9e\u9645\u89c2\u5bdf\u5230\u7684\u5355\u8bcd\u3002 \u95ee\u98981: \u4f1a\u9020\u6210\u9884\u8bad\u7ec3\u548c\u5fae\u8c03\u65f6\u7684\u4e0d\u4e00\u81f4\uff0c\u56e0\u4e3a\u5728\u5fae\u8c03\u65f6[MASK]\u603b\u662f\u4e0d\u53ef\u89c1\u7684 \u200b \u7b54:\u628a80%\u9700\u8981\u88ab\u66ff\u6362\u6210[MASK]\u7684\u8bcd\u8fdb\u884c\u66ff\u6362\uff0c10%\u7684\u968f\u673a\u66ff\u6362\u4e3a\u5176\u4ed6\u8bcd\uff0c10%\u4fdd\u7559\u539f\u8bcd\u3002\u7531\u4e8eTransformer Encoder\u5e76\u4e0d\u77e5\u9053\u54ea\u4e2a\u8bcd\u9700\u8981\u88ab\u9884\u6d4b\uff0c\u54ea\u4e2a\u8bcd\u662f\u88ab\u968f\u673a\u66ff\u6362\u7684\uff0c\u8fd9\u6837\u5c31\u5f3a\u8feb\u6bcf\u4e2a\u8bcd\u7684\u8868\u8fbe\u9700\u8981\u53c2\u7167\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002 \u95ee\u98982: \u7531\u4e8e\u6bcf\u4e2aBatch\u4e2d\u53ea\u670915%\u7684\u8bcd\u4f1a\u88ab\u9884\u6d4b\uff0c\u56e0\u6b64\u6a21\u578b\u7684\u6536\u655b\u901f\u5ea6\u6bd4\u8d77\u5355\u5411\u7684\u8bed\u8a00\u6a21\u578b\u4f1a\u6162\uff0c\u8bad\u7ec3\u82b1\u8d39\u7684\u65f6\u95f4\u4f1a\u66f4\u957f\u3002 \u200b \u7b54: \u76ee\u524d\u6ca1\u6709\u6709\u6548\u7684\u89e3\u51b3\u529e\u6cd5\uff0c\u4f46\u662f\u4ece\u63d0\u5347\u6536\u76ca\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4ed8\u51fa\u7684\u4ee3\u4ef7\u662f\u503c\u5f97\u7684\u3002","title":"Task 1: Masked LM"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#task2-next-sentence-prediction","text":"\u200b \u8bb8\u591a\u91cd\u8981\u7684\u4e0b\u6e38\u4efb\u52a1\uff0c\u5982\u95ee\u7b54\uff08QA\uff09\u548c\u81ea\u7136\u8bed\u8a00\u63a8\u7406\uff08NLI\uff09\u90fd\u662f\u57fa\u4e8e\u7406\u89e3\u4e24\u4e2a\u53e5\u5b50\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u8fd9\u5e76\u6ca1\u6709\u901a\u8fc7\u8bed\u8a00\u5efa\u6a21\u76f4\u63a5\u83b7\u5f97\u3002 \u200b \u5728\u4e3a\u4e86\u8bad\u7ec3\u4e00\u4e2a\u7406\u89e3\u53e5\u5b50\u7684\u6a21\u578b\u5173\u7cfb\uff0c\u9884\u5148\u8bad\u7ec3\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5316\u7684\u4e0b\u4e00\u53e5\u6d4b\u4efb\u52a1\uff0c\u8fd9\u4e00\u4efb\u52a1\u53ef\u4ee5\u4ece\u4efb\u4f55\u5355\u8bed\u8bed\u6599\u5e93\u4e2d\u751f\u6210\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u5f53\u9009\u62e9\u53e5\u5b50A\u548cB\u4f5c\u4e3a\u9884\u8bad\u7ec3\u6837\u672c\u65f6\uff0cB\u670950\uff05\u7684\u53ef\u80fd\u662fA\u7684\u4e0b\u4e00\u4e2a\u53e5\u5b50\uff0c\u4e5f\u670950\uff05\u7684\u53ef\u80fd\u662f\u6765\u81ea\u8bed\u6599\u5e93\u7684\u968f\u673a\u53e5\u5b50(\u5355\u4e00\u9884\u6599)\u3002 \u200b \u56e2\u961f\u5b8c\u5168\u968f\u673a\u5730\u9009\u62e9\u4e86NotNext\u8bed\u53e5\uff0c\u6700\u7ec8\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u5728\u6b64\u4efb\u52a1\u4e0a\u5b9e\u73b0\u4e8697\uff05-98\uff05\u7684\u51c6\u786e\u7387\u3002","title":"Task2: Next Sentence Prediction"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#_2","text":"\u200b BERT\u9884\u8bad\u7ec3\u8fc7\u7a0b\u4e3b\u8981\u9075\u5faa\u73b0\u6709\u7684\u8bed\u8a00\u6a21\u578b\u9884\u8bad\u7ec3\u6587\u732e\u3002\u5bf9\u4e8e\u9884\u8bad\u7ec3\u8bed\u6599\u5e93,\u6211\u4eec\u4f7f\u7528 Books Corpus(800M\u5355\u8bcd)\u548c\u82f1\u8bed\u7ef4\u57fa\u767e\u79d1(2,500M\u5355\u8bcd)\u7684\u4e32\u8054\u3002\u5bf9\u4e8e\u7ef4\u57fa\u767e\u79d1, \u6211\u4eec\u53ea\u63d0\u53d6\u6587\u672c\u6bb5\u843d\u5e76\u5ffd\u7565\u5217\u8868\u3001\u8868\u683c\u548c\u9898\u5934\u3002\u81f3\u5173\u91cd\u8981\u7684\u662f, \u4f7f\u7528\u6587\u6863\u7ea7\u8bed\u6599\u5e93\u800c\u4e0d\u662f\u6d17\u724c\u5f0f(\u4e71\u8bcd\u5e8f)\u53e5\u5b50\u7ea7\u8bed\u6599\u5e93, \u4f8b\u5982 Bilion word Benchmark, \u4ee5\u4fbf\u63d0\u53d6\u957f\u7684\u8fde\u7eed\u5e8f\u5217\u3002 \u200b \u4e3a\u4e86\u751f\u6210\u6bcf\u4e2a\u8bad\u7ec3\u8f93\u5165\u5e8f\u5217, \u6211\u4eec\u4ece\u8bed\u6599\u5e93\u4e2d\u91c7\u6837\u4e24\u4e2a\u6587\u672c\u8de8\u5ea6, \u6211\u4eec\u5c06\u5176\u79f0\u4e3a\u53e5\u5b50\", \u5373\u4f7f\u5b83\u4eec\u901a\u5e38\u6bd4\u5355\u4e2a\u53e5\u5b50\u957f\u5f97\u591a(\u4f46\u4e5f\u53ef\u4ee5\u66f4\u77ed)\u3002\u7b2c\u4e00\u4e2a\u53e5\u5b50\u63a5\u6536A\u5d4c\u5165, \u7b2c\u4e8c\u4e2a\u53e5\u5b50\u63a5\u6536B\u5d4c\u5165\u3002B\u670950%\u53ef\u80fd\u521a\u597d\u662fA\u5d4c\u5165\u540e\u7684\u4e0b\u4e00\u4e2a\u53e5\u5b50,\u4ea6\u670950%\u53ef\u80fd\u662f\u4e2a\u968f\u673a\u53e5\u5b50, \u6b64\u4e43\u4e3a\u4e0b\u4e00\u53e5\u9884\u6d4b\u4efb\u52a1\u800c\u505a\u3002\u5bf9\u5b83\u4eec\u91c7\u6837, \u4f7f\u5176\u7ec4\u5408\u957f\u5ea6\u2264512\u4e2a\u8bcd\u5757\u3002\u8be5LM\u906e\u853d\u5e94\u7528\u4e8e\u5177\u670915%\u7edf\u4e00\u63a9\u853d\u7387\u7684 Wordpiece\u8bcd\u5757\u5316\u4e4b\u540e, \u5e76\u4e14\u4e0d\u7279\u522b\u8003\u8651\u90e8\u5206\u5b57\u5757\u3002 \u200b \u6211\u4eec\u8bad\u7ec3\u6279\u91cf\u5927\u5c0f\u4e3a256\u4e2a\u5e8f\u5217(256\u4e2a\u5e8f\u5217*512\u4e2a\u8bcd\u5757=128,000\u4e2a\u8bcd\u5757/\u6279\u6b21), \u6301\u7eed1,000,000\u4e2astep, \u76f8\u6bd4\u4e8e33\u4ebf\u4e2a\u5355\u8bcd\u8bed\u6599\u5e93, \u6709\u5927\u7ea640\u4e2a\u5468\u671f\u3002\u6211\u4eec\u4f7f\u7528Adam(\u5b66\u4e60\u7a0b\u5e8f), \u8bbe\u5176learning rate=1e4, \u03b21=0.9, \u03b22=0.999, L2\u6743\u91cd\u8870\u51cf\u4e3a0.01, \u5b66\u4e60\u7387\u9884\u70ed\u8d85\u8fc7\u524d10,000\u6b65\u4ee5\u4e0a\u4ee5\u53ca\u7ebf\u6027\u8870\u51cf\u8be5\u5b66\u4e60\u7387\u3002\u6211\u4eec\u5728\u6240\u6709\u5c42\u4e0a\u4f7f\u75280.1\u7684\u4e22\u5931\u6982\u7387\u3002\u5728 OpenAIGPT\u4e4b\u540e,\u6211\u4eec\u4f7f\u7528gelu\u6fc0\u6d3b\u800c\u4e0d\u662f\u6807\u51c6reu\u3002\u8bad\u7ec3\u635f\u5931\u662f\u5e73\u5747\u7684\u906e\u853dLM\u53ef\u80fd\u6027\u548c\u5e73\u5747\u7684\u4e0b\u4e00\u53e5\u5b50\u9884\u6d4b\u53ef\u80fd\u6027\u7684\u603b\u548c\u3002 \u200b \u5728Pod\u914d\u7f6e\u76844\u4e2a\u4e91TPU\u4e0a\u8fdb\u884c\u4e86$BERT_{BASE}$\u8bad\u7ec3(\u603b\u517116\u4e2aTPU\u82af\u7247)\u3002\u572816\u4e2a\u4e91TPU(\u603b\u517164\u4e2aTPU\u82af\u7247)\u8fdb\u884c\u4e86$BERT_{LARGE}$\u8bad\u7ec3\u3002\u6bcf\u6b21\u9884\u8bad\u7ec3\u97004\u5929\u5b8c\u6210\u3002","title":"\u9884\u8bad\u7ec3\u8fc7\u7a0b"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#54-fine-tuning","text":"\u200b \u5bf9\u4e8e\u5e8f\u5217\u7ea7\u5206\u7c7b\u4efb\u52a1\uff0cBERT\u5fae\u8c03\u5f88\u7b80\u5355\u3002\u4e3a\u4e86\u83b7\u5f97\u8f93\u5165\u5e8f\u5217\u7684\u56fa\u5b9a\u7ef4\u5ea6\u6c60\u5316\u8868\u5f81\uff0c\u6211\u4eec\u5bf9\u8be5\u8f93\u5165\u7b2c\u4e00\u4e2a\u8bcd\u5757[CLS]\u8bcd\u5d4c\u5165C\u7684\u9690\u85cf\u72b6\u6001\u505a\u5904\u7406\u3002\u5fae\u8c03\u671f\u95f4\u6dfb\u52a0\u7684\u552f\u4e00\u65b0\u53c2\u6570\u662f\u5206\u7c7b\u5c42\u5411\u91cfW\u3002\u8be5\u6807\u7b7e\u6982\u7387P\u7528\u6807\u51c6softmax\u51fd\u6570\uff0cP=softmax(CWT)\u8ba1\u7b97\u3002BERT\u548cW\u7684\u6240\u6709\u53c2\u6570\u90fd\u7ecf\u8fc7\u8054\u52a8\u5730\u5fae\u8c03\uff0c\u4ee5\u6700\u5927\u5316\u6b63\u786e\u6807\u7b7e\u7684\u5bf9\u6570\u6982\u7387\u3002\u5bf9\u4e8e\u8de8\u5ea6\u7ea7\u548c\u8bcd\u5757\u7ea7\u9884\u6d4b\u4efb\u52a1\uff0c\u5fc5\u987b\u4ee5\u4efb\u52a1\u7279\u5b9a\u65b9\u5f0f\u7a0d\u5fae\u4fee\u6539\u4e0a\u8ff0\u8fc7\u7a0b\u3002 \u5bf9\u4e8e\u5fae\u8c03\uff0c\u5927\u591a\u6570\u6a21\u578b\u8d85\u53c2\u6570\u4e0e\u9884\u8bad\u7ec3\u76f8\u540c\uff0c\u4f46\u6279\u91cf\u5927\u5c0f\u3001\u5b66\u4e60\u7387\u548c\u8bad\u7ec3\u5468\u671f\u6570\u91cf\u9664\u5916\u3002\u4e22\u5931\u6982\u7387\u59cb\u7ec8\u4fdd\u6301\u57280.1\u3002\u6700\u4f73\u8d85\u53c2\u6570\u503c\u662f\u7279\u5b9a\u4e8e\u4efb\u52a1\u7684\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u4ee5\u4e0b\u8303\u56f4\u7684\u53ef\u80fd\u503c\u53ef\u4ee5\u5728\u6240\u6709\u4efb\u52a1\u4e2d\u5f88\u597d\u5730\u5de5\u4f5c\uff1a \u6279\u91cf\u5927\u5c0f \uff1a16,32 \u5b66\u4e60\u7387 (Adam)\uff1a5e-5,3e-5,2e-5 \u5468\u671f\u6570\u91cf \uff1a3,4 \u6211\u4eec\u8fd8\u89c2\u5bdf\u5230\uff0c\u5927\u6570\u636e\u96c6(\u5982100k+\u8bcd\u5757\u7684\u8bad\u7ec3\u6837\u4f8b)\u5bf9\u8d85\u53c2\u6570\u9009\u62e9\u7684\u654f\u611f\u6027\u8fdc\u5c0f\u4e8e\u5c0f\u6570\u636e\u96c6\u3002\u5fae\u8c03\u901a\u5e38\u975e\u5e38\u5feb\uff0c\u56e0\u6b64\u9700\u5408\u7406\u7b80\u5355\u5730\u5bf9\u4e0a\u8ff0\u53c2\u6570\u8fdb\u884c\u8be6\u5c3d\u641c\u7d22\uff0c\u5e76\u9009\u62e9\u5f00\u53d1\u96c6\u4e0a\u6027\u80fd\u6700\u4f73\u7684\u6a21\u578b\u3002","title":"5.4 Fine-tuning"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#55-wordpiece","text":"\u200b \u73b0\u5728\u57fa\u672c\u6027\u80fd\u597d\u4e00\u4e9b\u7684NLP\u6a21\u578b\uff0c\u4f8b\u5982OpenAI GPT\uff0cgoogle\u7684BERT\uff0c\u5728\u6570\u636e\u9884\u5904\u7406\u7684\u65f6\u5019\u90fd\u4f1a\u6709WordPiece\u7684\u8fc7\u7a0b\u3002WordPiece\u5b57\u9762\u7406\u89e3\u662f\u628aword\u62c6\u6210piece\u4e00\u7247\u4e00\u7247\uff0c\u5176\u5b9e\u5c31\u662f\u8fd9\u4e2a\u610f\u601d\u3002 \u200b WordPiece\u7684\u4e00\u79cd\u4e3b\u8981\u7684\u5b9e\u73b0\u65b9\u5f0f\u53eb\u505aBPE\uff08Byte-Pair Encoding\uff09\u53cc\u5b57\u8282\u7f16\u7801\u3002 \u200b BPE\u7684\u8fc7\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a\u628a\u4e00\u4e2a\u5355\u8bcd\u518d\u62c6\u5206\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u6b64\u8868\u4f1a\u53d8\u5f97\u7cbe\u7b80\uff0c\u5e76\u4e14\u5bd3\u610f\u66f4\u52a0\u6e05\u6670\u3002 \u200b \u6bd4\u5982\"loved\",\"loving\",\"loves\"\u8fd9\u4e09\u4e2a\u5355\u8bcd\u3002\u5176\u5b9e\u672c\u8eab\u7684\u8bed\u4e49\u90fd\u662f\u201c\u7231\u201d\u7684\u610f\u601d\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u4ee5\u5355\u8bcd\u4e3a\u5355\u4f4d\uff0c\u90a3\u5b83\u4eec\u5c31\u7b97\u4e0d\u4e00\u6837\u7684\u8bcd\uff0c\u5728\u82f1\u8bed\u4e2d\u4e0d\u540c\u540e\u7f00\u7684\u8bcd\u975e\u5e38\u7684\u591a\uff0c\u5c31\u4f1a\u4f7f\u5f97\u8bcd\u8868\u53d8\u7684\u5f88\u5927\uff0c\u8bad\u7ec3\u901f\u5ea6\u53d8\u6162\uff0c\u8bad\u7ec3\u7684\u6548\u679c\u4e5f\u4e0d\u662f\u592a\u597d\u3002 \u200b BPE\u7b97\u6cd5\u901a\u8fc7\u8bad\u7ec3\uff0c\u80fd\u591f\u628a\u4e0a\u9762\u76843\u4e2a\u5355\u8bcd\u62c6\u5206\u6210\"lov\",\"ed\",\"ing\",\"es\"\u51e0\u90e8\u5206\uff0c\u8fd9\u6837\u53ef\u4ee5\u628a\u8bcd\u7684\u672c\u8eab\u7684\u610f\u601d\u548c\u65f6\u6001\u5206\u5f00\uff0c\u6709\u6548\u7684\u51cf\u5c11\u4e86\u8bcd\u8868\u7684\u6570\u91cf\u3002 \u200b BPE\u7684\u5927\u6982\u8bad\u7ec3\u8fc7\u7a0b\uff1a\u9996\u5148\u5c06\u8bcd\u5206\u6210\u4e00\u4e2a\u4e00\u4e2a\u7684\u5b57\u7b26\uff0c\u7136\u540e\u5728\u8bcd\u7684\u8303\u56f4\u5185\u7edf\u8ba1\u5b57\u7b26\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6bcf\u6b21\u5c06\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26\u5bf9\u4fdd\u5b58\u8d77\u6765\uff0c\u76f4\u5230\u5faa\u73af\u6b21\u6570\u7ed3\u675f\u3002 \u200b \u6211\u4eec\u6a21\u62df\u4e00\u4e0bBPE\u7b97\u6cd5\u3002\u6211\u4eec\u539f\u59cb\u8bcd\u8868\u5982\u4e0b\uff1a{'l o w e r ': 2, 'n e w e s t ': 6, 'w i d e s t ': 3, 'l o w ': 5}, \u5176\u4e2d\u7684key\u662f\u8bcd\u8868\u7684\u5355\u8bcd\u62c6\u5206\u5c42\u5b57\u6bcd\uff0c\u518d\u52a0\u4ee3\u8868\u7ed3\u5c3e\uff0cvalue\u4ee3\u8868\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u3002 \u200b \u4e0b\u9762\u6211\u4eec\u6bcf\u4e00\u6b65\u5728\u6574\u5f20\u8bcd\u8868\u4e2d\u627e\u51fa\u9891\u7387\u6700\u9ad8\u76f8\u90bb\u5e8f\u5217\uff0c\u5e76\u628a\u5b83\u5408\u5e76\uff0c\u4f9d\u6b21\u5faa\u73af\u3002 \u539f\u59cb\u8bcd\u8868 {'l o w e r </w>': 2, 'n e w e s t </w>': 6, 'w i d e s t </w>': 3, 'l o w </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('s', 't') 9 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'n e w e st </w>': 6, 'l o w e r </w>': 2, 'w i d e st </w>': 3, 'l o w </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('e', 'st') 9 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'l o w e r </w>': 2, 'l o w </w>': 5, 'w i d est </w>': 3, 'n e w est </w>': 6} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('est', '</w>') 9 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'l o w e r </w>': 2, 'n e w est</w>': 6, 'l o w </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('l', 'o') 7 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'lo w e r </w>': 2, 'n e w est</w>': 6, 'lo w </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('lo', 'w') 7 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'low e r </w>': 2, 'n e w est</w>': 6, 'low </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('n', 'e') 6 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'low e r </w>': 2, 'ne w est</w>': 6, 'low </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('w', 'est</w>') 6 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'low e r </w>': 2, 'ne west</w>': 6, 'low </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('ne', 'west</w>') 6 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'low e r </w>': 2, 'newest</w>': 6, 'low </w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('low', '</w>') 5 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w i d est</w>': 3, 'low e r </w>': 2, 'newest</w>': 6, 'low</w>': 5} \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5e8f\u5217 ('i', 'd') 3 \u5408\u5e76\u6700\u9891\u7e41\u7684\u5e8f\u5217\u540e\u7684\u8bcd\u8868 {'w id est</w>': 3, 'newest</w>': 6, 'low</w>': 5, 'low e r </w>': 2} \u200b \u8fd9\u6837\u6211\u4eec\u901a\u8fc7BPE\u5f97\u5230\u4e86\u66f4\u52a0\u5408\u9002\u7684\u8bcd\u8868\u4e86\uff0c\u8fd9\u4e2a\u8bcd\u8868\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b\u4e0d\u662f\u5355\u8bcd\u7684\u7ec4\u5408\uff0c\u4f46\u662f\u8fd9\u4e2a\u672c\u8eab\u662f\u6709\u610f\u4e49\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u52a0\u901fNLP\u7684\u5b66\u4e60\uff0c\u63d0\u5347\u4e0d\u540c\u8bcd\u4e4b\u95f4\u7684\u8bed\u4e49\u7684\u533a\u5206\u5ea6\u3002","title":"5.5 WordPiece\u539f\u7406(\u4e0d\u9002\u7528\u4e2d\u6587)"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#56-todo","text":"\u6e90\u7801 https://github.com/huggingface/transformers https://huggingface.co/transformers/index.html","title":"5.6 \u6e90\u7801\u5206\u6790 [TODO]"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#57-bert","text":"\u81ea\u7136\u8bed\u8a00\u63a8\u7406\u4efb\u52a1\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u524d\u63d0\uff0f\u5047\u8bbe\uff0c\u5f97\u5230\u63a8\u8bba\u662f\u5426\u6b63\u786e\uff1a \u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u662f\u62bd\u53d6\u5f0fQA\uff0c\u62bd\u53d6\u5f0f\u7684\u610f\u601d\u662f\u8f93\u5165\u4e00\u4e2a\u539f\u6587\u548c\u95ee\u9898\uff0c\u8f93\u51fa\u4e24\u4e2a\u6574\u6570start\u548cend\uff0c\u4ee3\u8868\u7b54\u6848\u5728\u539f\u6587\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\uff0c\u4e24\u4e2a\u4f4d\u7f6e\u4e2d\u95f4\u7684\u7ed3\u679c\u5c31\u662f\u7b54\u6848\u3002 \u5177\u4f53\u600e\u4e48\u89e3\u51b3\u521a\u624d\u7684QA\u95ee\u9898\u5462\uff1f\u628a\u95ee\u9898 - \u5206\u9694\u7b26 - \u539f\u6587\u8f93\u5165\u5230BERT\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5355\u8bcd\u8f93\u51fa\u4e00\u4e2a\u9ec4\u989c\u8272\u7684embedding\uff0c\u8fd9\u91cc\u8fd8\u9700\u8981\u5b66\u4e60\u4e24\u4e2a\uff08\u4e00\u4e2a\u6a59\u8272\u4e00\u4e2a\u84dd\u8272\uff09\u7684\u5411\u91cf\uff0c\u8fd9\u4e24\u4e2a\u5411\u91cf\u5206\u522b\u4e0e\u539f\u6587\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u5bf9\u5e94\u7684embedding\u8fdb\u884c\u70b9\u4e58\uff0c\u7ecf\u8fc7softmax\u4e4b\u540e\u5f97\u5230\u8f93\u51fa\u6700\u9ad8\u7684\u4f4d\u7f6e\u3002\u6b63\u5e38\u60c5\u51b5\u4e0bstart <= end\uff0c\u4f46\u5982\u679cstart > end\u7684\u8bdd\uff0c\u8bf4\u660e\u662f\u77db\u76fe\u7684case\uff0c\u6b64\u9898\u65e0\u89e3\u3002","title":"5.7 BERT\u5e94\u7528\u573a\u666f"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#58","text":"","title":"5.8 \u5b9e\u9a8c\u90e8\u5206"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#59-bert","text":"Bert\u5b66\u5230\u4e86\u4ec0\u4e48\u5462\uff1f\u53ef\u4ee5\u770b\u4e0b\u4e0b\u9762\u4e24\u4e2a\u6587\u732e\uff08\u7ed9\u5927\u4f19\u8d34\u51fa\u6765\uff1a https://arxiv.org/abs/1905.05950 \u548c https://openreview.net/pdf?id=SJzSgnRcKX \uff09\uff1a","title":"5.9 Bert\u5b66\u5230\u4ec0\u4e48"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#ernie","text":"","title":"\u516d\u3001ERNIE"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#61-ernie-10","text":"","title":"6.1 ERNIE 1.0"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#611","text":"\u200b ERINE\u662fEnhanced Representation through Knowledge Integration\u7f29\u5199\u3002 \u200b ERINE\u662f\u5728BERT\u57fa\u7840\u4e0a\u5bf9\u4e2d\u6587\u8bed\u5883\u505a\u7684\u6539\u8fdb, \u76f8\u6bd4\u4e8eBERT\u5176\u6539\u8fdb\u7684\u5730\u65b9\u5728\u4e8e\u5bf9Masked\u7684\u6539\u8fdb\uff0c\u767e\u5ea6\u7684ERNIE\u901a\u8fc7MLM\u63a9\u76d6\u7684\u4e0d\u53ea\u662f\u5b57\uff0c\u8fd8\u6709\u8bcd\u4ee5\u53ca\u5b9e\u4f53\u3002\u76f8\u8f83\u4e8e BERT \u5b66\u4e60\u539f\u59cb\u8bed\u8a00\u4fe1\u53f7\uff0cERNIE \u76f4\u63a5\u5bf9\u5148\u9a8c\u8bed\u4e49\u77e5\u8bc6\u5355\u5143\u8fdb\u884c\u5efa\u6a21\uff0c\u589e\u5f3a\u4e86\u6a21\u578b\u8bed\u4e49\u8868\u793a\u80fd\u529b\u3002 \u200b ERNIE \u6a21\u578b\u672c\u8eab\u4fdd\u6301\u57fa\u4e8e\u5b57\u7279\u5f81\u8f93\u5165\u5efa\u6a21\uff0c\u4f7f\u5f97\u6a21\u578b\u5728\u5e94\u7528\u65f6\u4e0d\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u4fe1\u606f\uff0c\u5177\u5907\u66f4\u5f3a\u7684\u901a\u7528\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002 \u200b ERNIE \u7684\u8bad\u7ec3\u8bed\u6599\u5f15\u5165\u4e86\u591a\u6e90\u6570\u636e\u77e5\u8bc6\u3002\u9664\u4e86\u767e\u79d1\u7c7b\u6587\u7ae0\u5efa\u6a21\uff0c\u8fd8\u5bf9\u65b0\u95fb\u8d44\u8baf\u7c7b\u3001\u8bba\u575b\u5bf9\u8bdd\u7c7b\u6570\u636e\u8fdb\u884c\u5b66\u4e60\u3002","title":"6.1.1 \u57fa\u672c\u601d\u60f3"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#612-knowledge-integration","text":"\u200b \u8bba\u6587\u63d0\u51famulti-stage knowledge masking strategy, \u6309\u987a\u5e8f\u8bad\u7ec3Basic-Level Masking, Phrase-Level, Entity-level Masking\u7b49\u8fc7\u7a0b\u3002","title":"6.1.2 \u8bad\u7ec3\u8fc7\u7a0b\u6539\u8fdb(Knowledge Integration)"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#613-dialogue-language-model","text":"\u200b \u539f\u59cb\u5bf9\u8bdd\u4e3a3\u4e2a\u53e5\u5b50\uff1a\u201dHow old are you?\u201d\u3001\u201d8.\u201d\u548c\u201dWhere is your hometown?\u201d\u3002\u6a21\u578b\u7684\u8f93\u5165\u662f3\u4e2a\u53e5\u5b50(\u800c\u4e0d\u662fBERT\u91cc\u7684\u4e24\u4e2a)\uff0c\u4e2d\u95f4\u7528SEP\u5206\u5f00\uff0c\u800c\u4e14\u5206\u522b\u7528Dialogue Embedding Q\u548cR\u5206\u522b\u8868\u793aQuery\u548cResponse\u7684Embedding\uff0c\u8fd9\u4e2aEmbedding\u7c7b\u4f3c\u4e8eBERT\u7684Segment Embedding\uff0c\u4f46\u662f\u5b83\u67093\u4e2a\u53e5\u5b50\uff0c\u56e0\u6b64\u53ef\u80fd\u51fa\u73b0QRQ\u3001QRR\u3001QQR\u7b49\u7ec4\u5408\u3002","title":"6.1.3 Dialogue Language Model"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#613-todo","text":"https://zhuanlan.zhihu.com/p/76757794 Pytorch\u7248\u672c\u6e90\u7801 https://github.com/thunlp/ERNIE","title":"6.1.3 \u6e90\u7801\u5206\u6790 [TODO]"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#614-todo","text":"","title":"6.1.4 \u6548\u679c\u9a8c\u8bc1 [TODO]"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#62-ernie-20","text":"","title":"6.2 ERNIE 2.0"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#621","text":"\u200b \u540d\u5b57\u4fee\u6539\u4e3aA Continual Pre-training framework for Language Understanding\u3002 \u200b \u4f5c\u8005\u8ba4\u4e3a\u4e4b\u524d\u7684\u6a21\u578b\uff0c\u6bd4\u5982BERT\uff0c\u53ea\u662f\u5229\u7528\u8bcd\u7684\u5171\u73b0\u8fd9\u4e2a\u7edf\u8ba1\u4fe1\u606f\u901a\u8fc7\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u6765\u5b66\u4e60\u4e0a\u4e0b\u6587\u76f8\u5173\u7684Word Embedding\u3002ERNIE 2.0\u5e0c\u671b\u80fd\u591f\u5229\u7528\u591a\u79cd\u65e0\u76d1\u7763(\u5f31\u76d1\u7763)\u7684\u4efb\u52a1\u6765\u5b66\u4e60\u8bcd\u6cd5\u7684(lexical)\u3001\u53e5\u6cd5(syntactic)\u548c\u8bed\u4e49(semantic)\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u8bcd\u7684\u5171\u73b0\u3002 \u200b \u56e0\u4e3a\u5f15\u5165\u4e86\u5f88\u591a\u65b0\u7684\u4efb\u52a1\uff0c\u6240\u4ee5\u4f5c\u4e3amulti-task\u6765\u4e00\u8d77\u8bad\u7ec3\u662f\u975e\u5e38\u81ea\u7136\u7684\u60f3\u6cd5\u3002\u4f46\u662f\u4e00\u4e0b\u5c31\u628a\u6240\u6709\u7684\u4efb\u52a1\u540c\u65f6\u6765\u8bad\u7ec3\u53ef\u80fd\u6bd4\u8f83\u96be\u4ee5\u8bad\u7ec3(\u8fd9\u53ea\u662f\u6211\u7684\u731c\u6d4b)\uff0c\u56e0\u6b64\u4f7f\u7528\u589e\u91cf\u7684\u65b9\u5f0f\u4f1a\u66f4\u52a0\u7b80\u5355\uff1a\u9996\u5148\u8bad\u7ec3\u4e00\u4e2atask\uff1b\u7136\u540e\u589e\u52a0\u4e00\u4e2a\u65b0\u7684Task\u4e00\u8d77\u6765multi-task Learning\uff1b\u7136\u540e\u518d\u589e\u52a0\u4e00\u4e2a\u53d8\u62103\u4e2atask\u7684multi-task Learning\u2026\u2026","title":"6.2.1 \u57fa\u672c\u601d\u60f3"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#622-ernie-framework","text":"\u200b \u6301\u7eed\u7684(continual)pretraining\u8fc7\u7a0b\u5305\u62ec\u4e24\u4e2a\u6b65\u9aa4\u3002\u7b2c\u4e00\u6b65\u6211\u4eec\u901a\u8fc7\u5927\u6570\u636e\u548c\u5148\u9a8c\u77e5\u8bc6\u6765\u6301\u7eed\u7684\u6784\u9020\u65e0\u76d1\u7763\u4efb\u52a1\u3002\u7b2c\u4e8c\u6b65\u6211\u4eec\u589e\u91cf\u7684\u901a\u8fc7multi-task learning\u6765\u66f4\u65b0ERNIE\u6a21\u578b\u3002 \u200b \u5bf9\u4e8epre-training\u4efb\u52a1\uff0c\u6211\u4eec\u4f1a\u6784\u9020\u4e0d\u540c\u7c7b\u578b\u7684\u4efb\u52a1\uff0c\u5305\u62ec\u8bcd\u76f8\u5173\u7684(word-aware)\u3001\u7ed3\u6784\u76f8\u5173\u7684(structure-aware)\u548c\u8bed\u4e49\u76f8\u5173\u7684(semantic-aware)\u4efb\u52a1\uff0c\u5206\u522b\u6765\u5b66\u4e60\u8bcd\u6cd5\u7684\u3001\u53e5\u6cd5\u7684\u548c\u8bed\u4e49\u7684\u4fe1\u606f\u3002\u6240\u6709\u8fd9\u4e9b\u4efb\u52a1\u90fd\u53ea\u662f\u4f9d\u8d56\u81ea\u76d1\u7763\u7684\u6216\u8005\u5f31\u76d1\u7763\u7684\u4fe1\u53f7\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u5728\u6ca1\u6709\u4eba\u5de5\u6807\u6ce8\u7684\u6761\u4ef6\u4e0b\u4ece\u5927\u91cf\u6570\u636e\u83b7\u5f97\u3002\u5bf9\u4e8emulti-task pre-training\uff0cERNIE 2.0\u4f7f\u7528\u589e\u91cf\u7684\u6301\u7eed\u5b66\u4e60\u7684\u65b9\u5f0f\u6765\u8bad\u7ec3\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9996\u5148\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\u8bad\u7ec3\u4e00\u4e2a\u521d\u59cb\u7684\u6a21\u578b\uff0c\u7136\u540e\u5f15\u5165\u65b0\u7684\u4efb\u52a1\u6765\u66f4\u65b0\u6a21\u578b\u3002\u5f53\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u4efb\u52a1\u65f6\uff0c\u4f7f\u7528\u4e4b\u524d\u7684\u6a21\u578b\u53c2\u6570\u6765\u521d\u59cb\u5316\u5f53\u524d\u6a21\u578b\u3002\u5f15\u5165\u65b0\u7684\u4efb\u52a1\u540e\uff0c\u5e76\u4e0d\u662f\u53ea\u4f7f\u7528\u65b0\u7684\u4efb\u52a1\u6765\u8bad\u7ec3\uff0c\u800c\u662f\u901a\u8fc7multi-task learning\u540c\u65f6\u5b66\u4e60\u4e4b\u524d\u7684\u4efb\u52a1\u548c\u65b0\u589e\u52a0\u7684\u4efb\u52a1\uff0c\u8fd9\u6837\u5b83\u5c31\u65e2\u8981\u5b66\u4e60\u65b0\u7684\u4fe1\u606f\u540c\u65f6\u4e5f\u4e0d\u80fd\u5fd8\u8bb0\u8001\u7684\u4fe1\u606f\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0cERNIE 2.0\u53ef\u4ee5\u6301\u7eed\u5b66\u4e60\u5e76\u4e14\u7d2f\u79ef\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5b66\u5230\u7684\u6240\u6709\u77e5\u8bc6\uff0c\u4ece\u800c\u5728\u65b0\u7684\u4e0b\u6e38\u4efb\u52a1\u4e0a\u80fd\u591f\u5f97\u5230\u66f4\u597d\u7684\u6548\u679c\u3002 \u200b \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6301\u7eedpre-training\u65f6\u4e0d\u540c\u7684task\u90fd\u4f7f\u7528\u7684\u662f\u5b8c\u5168\u76f8\u540c\u7684\u7f51\u7edc\u7ed3\u6784\u6765\u7f16\u7801\u4e0a\u4e0b\u6587\u7684\u6587\u672c\u4fe1\u606f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5171\u4eab\u5b66\u4e60\u5230\u7684\u77e5\u8bc6\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528RNN\u6216\u8005\u6df1\u5c42\u7684Transformer\u6a21\u578b(\u5177\u4f53\u662f\u7528Transformer\u8fd8\u662fRNN\u90fd\u53ef\u4ee5\uff0c\u5f53\u7136\u66f4\u52a0BERT\u7b49\u7684\u7ecf\u9a8c\uff0c\u4f7f\u7528Transformer\u4f1a\u66f4\u597d\u4e00\u4e9b)\uff0c\u8fd9\u4e9b\u53c2\u6570\u5728\u6240\u6709\u7684pre-training\u4efb\u52a1\u662f\u90fd\u4f1a\u66f4\u65b0\u3002 \u200b \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6211\u4eec\u7684\u6846\u67b6\u6709\u4e24\u79cd\u635f\u5931\u51fd\u6570\u3002\u4e00\u79cd\u662f\u5e8f\u5217\u7ea7\u522b\u7684\u635f\u5931\uff0c\u5b83\u4f7f\u7528CLS\u7684\u8f93\u51fa\u6765\u8ba1\u7b97\uff1b\u800c\u53e6\u4e00\u79cd\u662ftoken\u7ea7\u522b\u7684\u635f\u5931\uff0c\u6bcf\u4e00\u4e2atoken\u90fd\u6709\u4e00\u4e2a\u671f\u671b\u7684\u8f93\u51fa\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u6a21\u578b\u9884\u6d4b\u7684\u548c\u671f\u671b\u7684\u503c\u6765\u8ba1\u7b97loss\u3002\u4e0d\u540c\u7684pre-training task\u6709\u5b83\u81ea\u5df1\u7684\u635f\u5931\u51fd\u6570\uff0c\u591a\u4e2a\u4efb\u52a1\u7684\u635f\u5931\u51fd\u6570\u4f1a\u7ec4\u5408\u8d77\u6765\u4f5c\u4e3a\u672c\u6b21multi-task pre-training\u7684los","title":"6.2.2 ERNIE Framework"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#623-model-structure","text":"\u200b \u6a21\u578b\u91c7\u6837\u548cBERT\u7c7b\u4f3c\u7684Transformer Encoder\u6a21\u578b\u3002\u4e3a\u4e86\u8ba9\u6a21\u578b\u5b66\u4e60\u5230\u4efb\u52a1\u7279\u5b9a\u7684\u4fe1\u606f\uff0cERNIE 2.0\u8fd8\u5f15\u5165\u4e86Task Embedding\u3002\u6bcf\u4e2aTask\u90fd\u6709\u4e00\u4e2aID\uff0c\u6bcf\u4e2aTask\u90fd\u7f16\u7801\u6210\u4e00\u4e2a\u53ef\u4ee5\u5b66\u4e60\u7684\u5411\u91cf\uff0c\u8fd9\u6837\u6a21\u578b\u53ef\u4ee5\u5b66\u4e60\u5230\u4e0e\u67d0\u4e2a\u7279\u5b9aTask\u76f8\u5173\u7684\u4fe1\u606f\u3002 \u200b \u7f51\u7edc\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"6.2.3 Model Structure"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#624-pre-training-tasks","text":"","title":"6.2.4 Pre-training Tasks"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#word-aware-tasks","text":"Knowledge Masking Task \u200b \u8fd9\u5176\u5b9e\u5c31\u662fERNIE 1.0\u7248\u672c\u7684\u4efb\u52a1\uff0c\u5305\u62ecword\u3001phrase\u548centity\u7ea7\u522b\u7684mask\u5f97\u5230\u7684\u4efb\u52a1\u3002 Capitalization Prediction Task \u200b \u9884\u6d4b\u4e00\u4e2a\u8bcd\u662f\u5426\u9996\u5b57\u6bcd\u5927\u5c0f\u7684\u4efb\u52a1\u3002\u5bf9\u4e8e\u82f1\u6587\u6765\u8bf4\uff0c\u9996\u5b57\u7b26\u5927\u5c0f\u7684\u8bcd\u5f80\u5f80\u662f\u547d\u540d\u5b9e\u4f53\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4efb\u52a1\u53ef\u4ee5\u5b66\u4e60\u5230\u4e00\u4e9bentity\u7684\u77e5\u8bc6\u3002 Token-Document Relation Task \u200b \u9884\u6d4b\u5f53\u524d\u8bcd\u662f\u5426\u51fa\u73b0\u5728\u5176\u5b83\u7684Document\u91cc\uff0c\u4e00\u4e2a\u8bcd\u5982\u679c\u51fa\u73b0\u5728\u591a\u4e2aDocument\u91cc\uff0c\u8981\u4e48\u5b83\u662f\u5e38\u89c1\u7684\u8bcd\uff0c\u8981\u4e48\u5b83\u662f\u8fd9\u4e24\u4e2aDocument\u5171\u4eab\u7684\u4e3b\u9898\u7684\u8bcd\u3002\u8fd9\u4e2a\u4efb\u52a1\u80fd\u591f\u8ba9\u5b83\u5b66\u4e60\u591a\u4e2aDocument\u7684\u5171\u540c\u4e3b\u9898\u3002","title":"Word-aware Tasks"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#structure-aware-tasks","text":"Sentence Reordering Task \u200b \u7ed9\u5b9a\u4e00\u4e2a\u6bb5\u843d(paragraph)\uff0c\u9996\u5148\u628a\u5b83\u968f\u673a\u7684\u5207\u5206\u62101\u5230m\u4e2asegment\u3002\u7136\u540e\u628asegment\u968f\u673a\u6253\u6563(segment\u5185\u90e8\u7684\u8bcd\u5e76\u4e0d\u6253\u6563)\uff0c\u8ba9\u6a21\u578b\u6765\u6062\u590d\u3002\u90a3\u600e\u4e48\u6062\u590d\u5462\uff1f\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u79cd\u6700\u7b80\u5355\u7c97\u66b4\u7684\u5206\u7c7b\u7684\u65b9\u6cd5\uff0c\u603b\u5171\u6709$k=\\sum_1^m k!$\u79cd\u5206\u7c7b\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u5206\u7c7b\u4efb\u52a1\uff0c\u5b83\u53ef\u4ee5\u8ba9\u6a21\u578b\u5b66\u4e60\u6bb5\u843d\u7684\u7bc7\u7ae0\u7ed3\u6784\u4fe1\u606f\u3002 Sentence Distance Task \u200b \u4e24\u4e2a\u53e5\u5b50\u7684\u201d\u8ddd\u79bb\u201d\u7684\u4efb\u52a1\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u53e5\u5b50\u67093\u79cd\u5173\u7cfb(3\u5206\u7c7b\u4efb\u52a1)\uff1a\u5b83\u4eec\u662f\u524d\u540e\u76f8\u90bb\u7684\u53e5\u5b50\uff1b\u5b83\u4eec\u4e0d\u76f8\u90bb\u4f46\u662f\u5c5e\u4e8e\u540c\u4e00\u4e2aDocument\uff1b\u5b83\u4eec\u5c5e\u4e8e\u4e0d\u540c\u7684Document\u3002","title":"Structure-aware Tasks"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#semantic-aware-tasks","text":"Discourse Relation Task \u200b \u8fd9\u4e2a\u4efb\u52a1\u4f1a\u8ba9\u6a21\u578b\u6765\u9884\u6d4b\u4e24\u4e2a\u53e5\u5b50\u7684\u8bed\u4e49\u6216\u8005\u4fee\u8f9e(rhetorical)\u5173\u7cfb\u3002 IR Relevance Task \u200b \u8fd9\u662f\u5229\u7528\u641c\u7d22\u5f15\u64ce(\u767e\u5ea6\u7684\u4f18\u52bf)\u7684\u6570\u636e\uff0c\u7ed9\u5b9aQuery\u548c\u641c\u7d22\u7ed3\u679c(\u53ef\u4ee5\u8ba4\u4e3a\u662f\u76f8\u5173\u7f51\u9875\u7684\u6458\u8981)\uff0c\u53ef\u4ee5\u5206\u4e3a3\u7c7b\uff1a\u5f3a\u76f8\u5173\u3001\u5f31\u76f8\u5173\u548c\u5b8c\u5168\u4e0d\u76f8\u5173\u3002","title":"Semantic-aware Tasks"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#625-todo","text":"https://github.com/PaddlePaddle/ERNIE","title":"6.2.5 \u6e90\u7801\u5206\u6790 [TODO]"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#626-todo","text":"","title":"6.2.6 \u6548\u679c\u9a8c\u8bc1 [TODO]"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#xlnet-todo","text":"","title":"\u4e03\u3001XLNet [TODO]"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#bert-vs-ernie-todo","text":"","title":"\u516b\u3001BERT vs. ERNIE [TODO]"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#31","text":"","title":"3.1 \u539f\u7406\u5bf9\u6bd4"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#32","text":"","title":"3.2 \u9002\u7528\u8303\u56f4"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#33","text":"","title":"3.3 \u5b9e\u9a8c\u6bd4\u8f83"},{"location":"\u81ea\u7136\u8bed\u8a00\u5904\u7406/BERT\u53caERNIE\u5b66\u4e60.html#_3","text":"Attention Is All You Need The Illustrated Transformer Universal Transformers \u674e\u5b8f\u6bc5Transformer\u89c6\u9891\u53ca\u7b14\u8bb0 \u7f8e\u56e2BERT\u7684\u63a2\u7d22\u548c\u5b9e\u8df5 Pre-Training with Whole Word Masking for Chinese BERT ERNIE: Enhanced Representation through Knowledge Integration ERNIE 2.0: A Continual Pre-training Framework for Language Understanding \u3002 \u4e2d\u6587\u4efb\u52a1\u5168\u9762\u8d85\u8d8aBERT\uff1a\u767e\u5ea6\u6b63\u5f0f\u53d1\u5e03NLP\u9884\u8bad\u7ec3\u6a21\u578bERNIE ...","title":"\u4e94\u3001\u4e3b\u8981\u53c2\u8003\u8d44\u6599"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html","text":"\u591a\u6a21\u6001\u5185\u5bb9\u8d28\u91cf\u4e4b\u5047\u65b0\u95fb \u5047\u65b0\u95fb\u662f\u4e00\u4e2a\u5fae\u89c2\u9886\u57df\u95ee\u9898, \u548c\u8c23\u8a00\u5206\u7c7b, \u4e8b\u5b9e\u5224\u65ad, \u6807\u9898\u515a\u68c0\u6d4b, \u5783\u573e\u5185\u5bb9\u6316\u6398\u7b49\u90fd\u6bd4\u8f83\u7c7b\u4f3c, \u5b8f\u89c2\u4e0a\u90fd\u5c5e\u4e8e\u5185\u5bb9\u8d28\u91cf\u7684\u9886\u57df, \u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u901a\u7528, \u6570\u636e\u96c6\u53ef\u516c\u7528, \u672c\u6587\u4ecb\u7ecd\u51e0\u7bc7\u6709\u4ee3\u8868\u6027\u7684\u5047\u65b0\u95fb\u8bba\u6587, \u4ece\u4e2d\u5b66\u4e60\u591a\u6a21\u6001, \u57fa\u4e8e\u7f51\u7edc, \u7279\u5f81\u6316\u6398\u7b49\u4efb\u52a1\u5728\u5047\u65b0\u95fb\u9886\u57df\u7684\u4e00\u4e9b\u5b9e\u6218\u3002 \u6a21\u578b\u6784\u5efa \u6839\u636e[Kai Shu, 2017]\u7684\u5212\u5206, \u6a21\u578b\u5728\u8fd9\u91cc\u4e3b\u8981\u6709\u4e24\u7c7b, 1 \u57fa\u4e8e\u5185\u5bb9\u7684\u5efa\u6a21 2\u57fa\u4e8e\u793e\u4ea4\u7f51\u7edc\u7684\u6a21\u578b\u3002 1.\u57fa\u4e8e\u5185\u5bb9\u7684\u5efa\u6a21 \u67091.1\u9762\u5411\u77e5\u8bc6\u548c\u4e8b\u5b9e\u5e93\u7684\u548c1.2\u9762\u5411\u884c\u6587\u98ce\u683c\u7684 1.1 \u9762\u5411\u77e5\u8bc6\u5e93 \u200b \u4e8b\u5b9e\u68c0\u67e5\u7cfb\u7edf\u6709\u70b9\u7c7b\u4f3c\u8c23\u8a00\u9274\u522b\u7cfb\u7edf, \u5bf9\u6587\u7ae0\u63cf\u8ff0\u7684\u89c2\u70b9\u548c\u5ba2\u89c2\u4e8b\u7269\u8fdb\u884c\u8f83\u771f, \u7c7b\u4f3cQA\u7cfb\u7edf\u662f\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684NLP\u9886\u57df, \u5305\u62ec\u77e5\u8bc6\u8868\u793a, \u77e5\u8bc6\u63a8\u7406\u3002\u5728\u77e5\u8bc6\u5e93\u6570\u636e\u96c6\u4e0a\u6709\u51e0\u79cd\u5212\u5206\u65b9\u5f0f: 1. \u4e13\u5bb6\u7cfb\u7edf\uff1a \u5404\u4e2a\u9886\u57df\u7684\u4e13\u5bb6\u6784\u5efa\u7684\u77e5\u8bc6\u5e93\uff0c \u663e\u7136\u8fd9\u79cd\u65b9\u5f0f\u7684\u6548\u7387\u548c\u6269\u5c55\u6027\u90fd\u975e\u5e38\u5dee\u3002 \u4e0d\u8fc7\u5982\u679c\u662f\u5782\u76f4\u7c7b\u76ee\uff08\u751f\u7269\uff0c\u5386\u53f2\uff09\u90a3\u6216\u8bb8\u53ef\u4ee5\u5728\u67d0\u4e2a\u5ba2\u89c2\u4e8b\u5b9e\u6bd4\u8f83\u591a\u7684\u7c7b\u76ee\u4e0b\u8fdb\u884c\u5c1d\u8bd5\uff1b 2. \u96c6\u4f53\u667a\u6167\uff1a \u7528\u6237\u96c6\u4f53\u77e5\u8bc6\u7684\u53cd\u9988\u6765\u6784\u5efa\u7684\u4e00\u5957\u77e5\u8bc6\u5e93\u3002 1 \u548c 2 \u6709\u4e86\u4e4b\u540e\u5176\u5b9e\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u68c0\u7d22\u7684\u65b9\u6cd5\uff0c\u6765\u5bf9\u65b0\u7684\u5185\u5bb9\u8fdb\u884c\u76f8\u4f3c\u5ea6\u5224\u65ad\uff0c\u4ece\u800c\u5145\u5206\u5229\u7528\u79ef\u7d2f\u7684\u5386\u53f2\u5185\u5bb9\u63d0\u4f9b\u51fa\u6765\u7684\u7279\u5f81\u6307\u793a\u3002 3. \u57fa\u4e8e\u7b97\u6cd5\u5206\u7c7b\uff1a \u4f7f\u7528\u77e5\u8bc6\u56fe\u8c31\u6216\u8005\u4e8b\u7406\u56fe\u8c31\u6765\u5bf9\u5185\u5bb9\u8fdb\u884c\u771f\u5b9e\u6027\u5224\u65ad\uff0c\u5f53\u524d\u4e3b\u8981\u7684\u5f00\u653e\u77e5\u8bc6\u56fe\u8c31\u6709 DB-pedia \u548c Google Relation Extraction \u6570\u636e\u96c6\u3002 \u8fd9\u4e2a\u9886\u57df\u7684\u95ee\u9898\uff0c\u7c7b\u4f3c NLP \u7684 QA \u95ee\u9898\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003 *[Yuyu Zhang, 2017]* \u7684 VRN\u53d8\u5206\u63a8\u7406\u7f51\u7edc\u3002 \u4f5c\u8005\u901a\u8fc7\u6982\u7387\u6a21\u578b\u6765\u8bc6\u522b\u95ee\u53e5\u4e2d\u7684\u5b9e\u4f53\uff0c\u95ee\u7b54\u65f6\u5728 KB \u4e0a\u505a\u903b\u8f91\u63a8\u7406\uff0c\u4e14\u63a8\u7406\u89c4\u5219\u5c06\u88ab\u5b66\u4e60\u51fa\u6765\u3002\u5373\u53ef\u7528\u4e8e\u505a\u4e8b\u5b9e\u5224\u65ad\u3002 \u5f53\u524d\u8fd9\u4e2a\u65b9\u5411\u6280\u672f\u843d\u5730\u6210\u672c\u9ad8\uff0c\u96be\u5ea6\u8f83\u5927\uff0c\u6548\u679c\u4e5f\u4e0d\u4e00\u5b9a\u7406\u60f3\u3002 1.2 \u9762\u5411\u5185\u5bb9\u98ce\u683c \u7528\u6587\u7ae0\u5185\u5bb9\u672c\u8eab\u7684\u884c\u6587\u98ce\u683c\uff0c\u901a\u8fc7\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u5f97\u5230\u53e5\u5b50\u7684\u53e5\u6cd5\u7ed3\u6784\uff0c\u6216\u8005 RST \u4fee\u8f9e\u4f9d\u8d56\u7406\u8bba\u7b49\u5176\u4ed6 NLP \u6df1\u5ea6\u6a21\u578b\u53bb\u6355\u6349\u53e5\u5b50\u6587\u6cd5\u4fe1\u606f\u3002 \u6839\u636e\u6355\u6349\u6587\u672c\u4fe1\u606f\u63cf\u8ff0\u79cd\u7c7b\u7684\u4e0d\u540c\uff0c\u4f5c\u8005\u5206\u4e3a\u4e24\u7c7b\uff0c\u68c0\u6d4b\u6b3a\u9a97\u7a0b\u5ea6\uff0c\u68c0\u6d4b\u63cf\u8ff0\u7684\u4e3b\u89c2\u5ba2\u89c2\u7a0b\u5ea6\uff08\u8d8a\u5ba2\u89c2\u516c\u6b63\u7684\u53ef\u80fd\u6027\u8d8a\u5927\uff09\u4e24\u79cd\u3002\u9707\u60ca\u4f53\u7684\u6807\u9898\u515a\u5c31\u5c5e\u4e8e\u8fd9\u7c7b\u3002 \u5176\u4e2d\uff0c\u5047\u65b0\u95fb\u53ef\u80fd\u7528\u5230\u7684\u7279\u5f81\uff0c\u5305\u62ec\u666e\u901a\u7279\u5f81\u548c\u805a\u5408\u7279\u5f81\u4e24\u5927\u7c7b\u3002\u666e\u901a\u7279\u5f81\u5c31\u662f\u9875\u9762\uff0c\u6587\u672c\uff0c\u56fe\u7247\uff0c\u6807\u9898\u7b49\u5355\u7eaf\u7684\u7279\u5f81 embedding\uff0c\u805a\u5408\u7279\u5f81\u5c31\u662f\u628a\u5404\u4e2a\u666e\u901a\u7279\u5f81\u8fdb\u884c\u7ec4\u5408\u548c\u6709\u76d1\u7763\u7684\u8bad\u7ec3\u6210\u4e00\u4e2a\u4e00\u4e2a\u5b50\u6a21\u578b\u95ee\u9898\u3002\u7136\u540e\u8fd9\u4e9b\u5b50\u6a21\u578b\u7684\u8f93\u51fa\u53c8\u53ef\u4ee5\u4f5c\u4e3a\u805a\u5408\u7279\u5f81\u7528\u5728\u5047\u65b0\u95fb\u9886\u57df\u3002 \u4e0b\u56fe\u5c31\u662f\u6211\u4eec\u4f7f\u7528\u7684\u4e3b\u8981\u7279\u5f81\u96c6\uff1a 1.2 \u57fa\u4e8e\u793e\u4ea4\u7f51\u7edc\u5efa\u6a21 \u5206\u4e3a\u4e24\u79cd\uff0c\u57fa\u4e8e \u7acb\u573a \u548c\u57fa\u4e8e \u4f20\u64ad\u884c\u4e3a \u7684\u3002 \u524d\u8005\u4e3b\u8981\u662f\u57fa\u4e8e\u7528\u6237\u5bf9\u5185\u5bb9\u7684\u64cd\u4f5c\uff08\u8bc4\u8bba\uff0c\u70b9\u8d5e \uff0c\u4e3e\u62a5\u7b49\u7b49\uff09\u6784\u5efa\u77e9\u9635\u6216\u8005\u56fe\u6a21\u578b\u3002 \u800c\u57fa\u4e8e\u4f20\u64ad\u884c\u4e3a\u5bf9\u5bf9\u8c61\u5efa\u6a21\uff0c\u7c7b\u4f3c PageRank \u7684\u884c\u4e3a\u4f20\u9012\u3002\u4e0b\u9762\u4ecb\u7ecd\u7684 *News Verification by Exploiting Conflicting Social Viewpoints in Microblogs* \u4e00\u6587\u5c31\u662f\u8fd9\u79cd\u7c7b\u578b \u3002 \u5bf9\u865a\u5047\u65b0\u95fb\u7684\u4f20\u64ad\u6e38\u8d70\u8f68\u8ff9\u8ddf\u8e2a\uff0c \u4ee5\u53ca\u901a\u8fc7\u56fe\u6a21\u578b\u548c\u6f14\u5316\u6a21\u578b\u4e2d\u9488\u5bf9\u7279\u5b9a\u5047\u65b0\u95fb\u7684\u8fdb\u4e00\u6b65\u8c03\u67e5\uff1b \u8bc6\u522b\u865a\u5047\u65b0\u95fb\u7684\u5173\u952e\u4f20\u64ad\u8005\uff0c\u5bf9\u4e8e\u51cf\u8f7b\u793e\u4ea4\u5a92\u4f53\u7684\u4f20\u64ad\u8303\u56f4\u81f3\u5173\u91cd\u8981\u3002 \u5206\u53c9\u4f20\u64ad\uff1a [Benjamin D. Horne and Sibel Adal\u0131,2017] \u901a\u8fc7\u624b\u5de5\u6784\u5efa\u4e86\u5927\u91cf\u7684\u7279\u5f81\uff0c\u4f7f\u7528\u5355\u56e0\u7d20\u65b9\u5dee\u5206\u6790\u548c\u79e9\u548c\u68c0\u9a8c\u5bf9\u7279\u5f81\u8fdb\u884c\u6316\u6398\u3002 \u53d1\u73b0\u771f\u65b0\u95fb\u6587\u7ae0\u660e\u663e\u957f\u4e8e\u5047\u65b0\u95fb\u6587\u7ae0\uff0c\u5047\u65b0\u95fb\u5f88\u5c11\u4f7f\u7528\u6280\u672f\u8bcd\u6c47\uff0c\u66f4\u5c11\u7684\u6807\u70b9\u7b26\u53f7\uff0c\u66f4\u5c11\u7684\u5f15\u53f7\u548c\u66f4\u591a\u7684\u8bcd\u6c47\u662f\u5197\u4f59\u7684\u3002\u53e6\u5916\u6807\u9898\u4e5f\u6709\u660e\u663e\u7684\u4e0d\u540c\uff0c\u5047\u65b0\u95fb\u7684\u6807\u9898\u4f1a\u66f4\u957f\uff0c\u66f4\u559c\u6b22\u589e\u52a0\u540d\u8bcd\u548c\u52a8\u8bcd\u3002\u771f\u7684\u65b0\u95fb\u901a\u8fc7\u8ba8\u8bba\u6765\u8bf4\u670d\uff0c\u5047\u65b0\u95fb\u901a\u8fc7\u542f\u53d1\u6765\u8bf4\u670d\u3002 \u7c7b\u4f3c\u7684\u5185\u5bb9\u5206\u6790\u8fd8\u6709\uff1a Automatic Detection of Fake News \u3002 [z.zhao et, 2018] \u53d1\u73b0\u5927\u591a\u6570\u4eba\u8f6c\u53d1\uff08\u7ea2\u70b9\uff09\u771f\u5b9e\u65b0\u95fb\u662f\u4ece\u4e00\u4e2a\u96c6\u4e2d\u7684\u6765\u6e90\uff08\u7eff\u70b9\uff09\u3002\u800c\u865a\u5047\u65b0\u95fb\u901a\u8fc7\u4eba\u4eec\u8f6c\u53d1\u5176\u4ed6\u8f6c\u53d1\u8005\u6765\u4f20\u64ad\u7684\u3002 \u5927\u591a\u6570\u4eba\u8f6c\u53d1\uff08\u7ea2\u70b9\uff09\u771f\u5b9e\u65b0\u95fb\u662f\u4ece\u4e00\u4e2a\uff0c\u96c6\u4e2d\u7684\u6765\u6e90\uff08\u7eff\u70b9\uff09\u3002\u800c\u865a\u5047\u65b0\u95fb\u901a\u8fc7\u4eba\u4eec\u8f6c\u53d1\u5176\u4ed6\u8f6c\u53d1\u8005\u6765\u4f20\u64ad\u7684\u3002 \u5047\u65b0\u95fb\u76844\u4e2a\u7814\u7a76\u65b9\u5411 [Kai Shu, 2017] \u6587\u7ae0\u603b\u7ed3\u4e86\u5047\u65b0\u95fb\u7684\u51e0\u4e2a\u4e3b\u8981\u7684\u7814\u7a76\u65b9\u5411\u3002 \u6570\u636e\u65b9\u9762\u7684\u7814\u7a76\u5de5\u4f5c\uff1a \u73b0\u5728\u8fd8\u6ca1\u6709\u6807\u51c6\u7684\u6d4b\u8bc4\u6570\u636e\u96c6\uff0c\u8fd9\u662f\u9700\u8981\u53bb\u5efa\u7acb\u7684\u3002\u518d\u6709\u5c31\u662f\u901a\u8fc7\u4f20\u64ad\u7279\u6027\u53bb\u66f4\u65e9\u7684\u68c0\u6d4b\u5047\u65b0\u95fb\u3002\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u4ece\u5fc3\u7406\u5b66\u89d2\u5ea6\u53bb\u505a\u5047\u65b0\u95fb\u7684\u610f\u56fe\u68c0\u6d4b\uff0c\u8fd9\u4e2a\u89d2\u5ea6\u8fc7\u53bb\u5f80\u5f80\u88ab\u5ffd\u7565\u3002 \u6a21\u578b\u7279\u5f81\u65b9\u9762\u7684\u7814\u7a76\u5de5\u4f5c\uff1a \u5f80\u5f80\u4f1a\u4f7f\u7528\u7528\u6237\u7684\u753b\u50cf\u7279\u5f81\uff0c\u5185\u5bb9\u7279\u5f81\uff08NLP\u3001CV\uff09\u7ed3\u5408\u6df1\u5ea6\u5b66\u4e60\uff0c\u8fd8\u6709\u4f20\u64ad\u7f51\u7edc\u7279\u5f81\uff0c\u6bd4\u5982\u7528\u6237\u548c\u5185\u5bb9\u4e4b\u95f4\u7684\u5173\u7cfb\u6784\u9020\u51fa\u6765\u7684\u7f51\u7edc\u7279\u5f81\uff0c\u7f51\u7edc\u672c\u8eab\u7684 embedding \u8868\u73b0\u3002 \u6a21\u578b\u65b9\u9762\u7684\u7814\u7a76\u5de5\u4f5c\uff1a \u7b2c\u4e00\u4e2a\u5c31\u662f\u7279\u5f81\u4e4b\u95f4\u7684\u7ec4\u5408\u3002\u7b2c\u4e8c\u662f\u9884\u6d4b\u76ee\u6807\u7684\u53d8\u5316\u3002\u7b2c\u4e09\u4e0d\u8bba\u662f\u4ece\u5185\u5bb9\u6e90\uff0c\u8fd8\u662f\u6587\u7ae0\u98ce\u683c\uff0c\u6216\u8005\u5185\u5bb9\u7684\u53cd\u9988\uff08\u8bc4\u8bba\uff0c\u7b49\u4e92\u52a8\u884c\u4e3a\uff09\u90fd\u6709\u5404\u81ea\u7684\u9650\u5236\uff0c\u7ec4\u5408\u8fd9\u4e9b\u6a21\u578b\u3002\u6700\u540e\u5c31\u662f\u7a7a\u95f4\u53d8\u6362\uff0c\u628a\u7279\u5f81\u53d8\u6362\u5230\u53e6\u5916\u7684 latent \u8bed\u4e49\u7a7a\u95f4\u5c1d\u8bd5\u89e3\u51b3\u3002 \u6570\u636e\u96c6 \u6b64\u90e8\u5206\u6765\u81ea\u5916\u7f51\u6574\u7406\uff1a\u4f5c\u8005\uff1aDilicelSten \u539f\u6587\uff1ahttps://blog.csdn.net/Totoro1745/article/details/84678858 FakeNewsNet \u4e0b\u8f7d\u94fe\u63a5\uff1ahttps://github.com/KaiDMML/FakeNewsNet \u8bf4\u660e\uff1a\u8be5\u6570\u636e\u96c6\u5305\u542b\u65b0\u95fb\u5185\u5bb9\u548c\u6b63\u786e\u6807\u6ce8\u771f\u5047\u65b0\u95fb\u6807\u7b7e\u7684\u793e\u4f1a\u8bed\u5883\u7279\u5f81\u3002 \u4f7f\u7528\u8bba\u6587\uff1a \uff081\uff09A Stylometric Inquiry into Hyperpartisan and Fake News \uff082\uff09Exploiting Tri-Relationship for Fake News Detection BuzzFeedNews \u94fe\u63a5\uff1ahttps://github.com/BuzzFeedNews/2016-10-facebookfact-check/tree/master/data \u8bf4\u660e\uff1a\u8be5\u6570\u636e\u96c6\u5305\u62ec\u5b8c\u6574\u7684Facebook\u65b0\u95fb\u53d1\u5e03\u4e8e\u63a5\u8fd12016\u5e74\u7f8e\u56fd\u5927\u9009\u4ece9\u670819\u65e5\u523023\u65e5\u4ee5\u53ca9\u670826\u65e5\u548c27\u65e5\u3002 LIAR \u94fe\u63a5\uff1ahttp://www.cs.ucsb.edu/~william/software.html \u8bf4\u660e\uff1a\u8be5\u6570\u636e\u96c6\u662f\u4ecePolitiFact\u6536\u96c6\uff0c\u5305\u62ec\u7b80\u77ed\u9648\u8ff0\uff0c\u4f8b\u5982\u65b0\u95fb\u7a3f\uff0c\u7535\u89c6 \u6216\u7535\u53f0\u91c7\u8bbf\uff0c\u7ade\u9009\u6f14\u8bb2\u7b49\uff0c\u5e76\u5305\u542b\u5143\u6570\u636e\u3002 \u4f7f\u7528\u8bba\u6587\uff1a \uff081\uff09\u201cLiar,LIar Pants on Fire\u201d:A New Benchmark Dataset for Fake News Detection \uff082\uff09Multi-Source Multi-Class Fake News Detection BS Detector \u94fe\u63a5\uff1ahttps://github.com/bs-detector/bs-detector \u8bf4\u660e\uff1a\u4e3a\u65b0\u95fb\u6d4f\u89c8\u5668\u5bfc\u51fa\u7684\u6570\u636e\u96c6\uff0c\u5305\u542b\u65b0\u95fb\u5185\u5bb9\u548c\u6b63\u786e\u6807\u6ce8\u771f\u5047\u65b0\u95fb\u6807\u7b7e\u3002 CREDBANK \u94fe\u63a5\uff1ahttp://compsocial.github.io/CREDBANK-data/ \u8bf4\u660e\uff1a \u63a8\u7279 \u7684\u5927\u6570\u636e\u96c6\uff0c\u5305\u542b\u65b0\u95fb\u5185\u5bb9\u548c\u4eba\u5de5\u6807\u6ce8\u6807\u7b7e\u3002 \u6570\u636e\u96c6\u6d89\u53ca\u7684\u5185\u5bb9\u5982\u4e0b\uff1a Twitter and Weibo DataSet \u94fe\u63a5\uff1ahttps://github.com/majingCUHK/Rumor_RvNN http://alt.qcri.org/\u02dcwgao/data/rumdect.zip \u8bf4\u660e\uff1a5000\u6761\u8a00\u8bba\u5e26\u7740500w\u7684\u8f6c\u53d1\u91cf \u4f7f\u7528\u8bba\u6587\uff1a \uff081\uff09CSI: A Hybrid Deep Model for Fake News Detection \uff082\uff09Detecting rumors from microblogs with recurrent neural network \uff083\uff09Early Detection of Fake News on Social Media Through Propagation Path Classification with Recurrent and Convolutional Networks Twitter15 Twitter16 \u94fe\u63a5\uff1ahttps://www.dropbox.com/s/7ewzdrbelpmrnxu/rumdetect2017.zip?dl=0 \u8bf4\u660e\uff1a\u8c23\u8a00\u6570\u636e \u4f7f\u7528\u8bba\u6587\uff1a Detect Rumors in Microblog Posts Using Propagation Structure via Kernel Learning \u63a8\u7279\u8bed\u6599 \u94fe\u63a5\uff1ahttp://www.cs.jhu.edu/svitlana/ \u8bf4\u660e\uff1a\u5177\u4f53\u65f6\u95f4\u4e8b\u4ef6\u6240\u641c\u96c6\u7684\u6570\u636e\u96c6 \u4f7f\u7528\u8bba\u6587\uff1a Separating Facts from Fiction Linguistic Models to Classify Suspicious and Trusted News Posts on Twitter \u5305\u542b\u56fe\u7684\u5047\u65b0\u95fb\u6570\u636e\u96c6 \u94fe\u63a5\uff1ahttps://drive.google.com/open?id=0B3e3qZpPtccsMFo5bk9Ib3VCc2c \u8bf4\u660e\uff1a\u6587\u672c+\u56fe\u50cf \u4f7f\u7528\u8bba\u6587 TI-CNN: Convolutional Neural Networks for Fake News Detection \u8c23\u8a00\u6570\u636e\u96c6 \u94fe\u63a5\uff1ahttp://mia.kaist.ac.kr/publications/rumor. \u8bf4\u660e\uff1a\u6570\u636e\u96c6\u5305\u542b\u4e09\u4e2a\u7ef4\u5ea6\uff1a\u65f6\u95f4\uff0c\u7ed3\u6784\u548c\u8bed\u8a00 \u4f7f\u7528\u8bba\u6587\uff1a Prominent features of rumor propagation in online social media \u76f8\u5173\u8bba\u6587\u4ecb\u7ecd \u5728\u5de5\u4e1a\u754c\u6bd4\u5982\u4e92\u8054\u7f51\u516c\u53f8\u89e3\u51b3\u8be5\u7c7b\u95ee\u9898\u4e3b\u8981\u8fd8\u662f\u901a\u8fc7\u6784\u5efa pipeline\uff0c\u878d\u5408\u591a\u4e2a\u6a21\u578b\uff1a\u5185\u5bb9\u5411\u6a21\u578b\u96c6\uff0c\u7528\u6237\u5411\u6a21\u578b\u96c6\uff0c\u7ed3\u5408\u53f7\u4e3b\u53d1\u5e03\u8005\u7279\u5f81\uff0c\u5185\u5bb9\u4ea7\u751f\u7684\u7528\u6237\u884c\u4e3a\u7279\u5f81\u7b49\u7efc\u5408\u6784\u5efa\u4e00\u5957\u4f53\u7cfb\u8fdb\u884c\u89e3\u51b3\u3002 \u6211\u4eec\u5728\u5b9e\u9645\u63a7\u5236\u7684\u65f6\u5019\u7ed3\u5408\u4e86\u51e0\u5341\u4e2a\u9759\u6001 + \u52a8\u6001\u7279\u5f81\u6a21\u578b\u548c\u77e5\u8bc6\u5e93\u8fdb\u884c\u53ec\u56de pop \u4eba\u5de5\u9a8c\u8bc1\u3002 \u7136\u800c\u548c\u5de5\u4e1a\u754c\u5904\u7406\u95ee\u9898\u4e0d\u540c\u7684\u662f\uff0c\u9876\u4f1a\u7684\u76f8\u5173\u8bba\u6587\u4e3b\u8981\u6839\u636e\u6570\u636e\u96c6\u7684\u7279\u70b9\uff0c\u901a\u8fc7\u5355\u6a21\u578b\u8fdb\u884c\u5efa\u6a21\u89e3\u51b3\u3002 \u4e3b\u8981\u7684\u53c2\u8003\u7684\u7ef4\u5ea6\u6709\uff1a 1\uff09\u5185\u5bb9\u672c\u4f53 \uff1b2\uff09\u5185\u5bb9\u751f\u4ea7\u6e90\uff08\u6e90\uff0c\u5185\u5bb9\u53d1\u5e03\u8005\uff09\uff1b3\uff09\u5185\u5bb9\u9605\u8bfb\u8005\uff08\u7528\u6237\uff09\u53ca\u5176\u884c\u4e3a\uff08\u8ba2\u9605\uff0c\u8bc4\u8bba\uff09\u4e09\u5927\u7c7b\uff0c\u591a\u4e2a\u5c0f\u7c7b\u7684\u7279\u5f81\u8fdb\u884c\u878d\u5408\u5904\u7406\u3002 \u6bd4\u5982\u901a\u8fc7\u7aef\u5230\u7aef\u7684\u6df1\u5ea6\u5b66\u4e60\uff0c\u57fa\u4e8e\u6982\u7387\u5206\u5e03\u7684\u7279\u5f81\u6316\u6398\uff0c\u6784\u5efa\u65b0\u9896\u7684\u7efc\u5408\u7c7b\u76ee\u6807\u51fd\u6570\u7b49\u5927\u4e00\u7edf\u7684\u65b9\u5f0f\u8fdb\u884c\u5c1d\u8bd5\u89e3\u51b3\u3002\u5f88\u591a\u6a21\u578b\u5f80\u5f80\u53ea\u80fd\u5728\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u5b9e\u8df5\u3002\u6211\u4eec\u4ecb\u7ecd\u51e0\u7bc7\u5b66\u672f\u9886\u57df\u76f8\u5173\u8f83\u65b0\u8bba\u6587\u3002 \u8fd9\u7bc7\u662f CIKM 2017 \u7684 long paper\u3002 \u4f5c\u8005\u8ba4\u4e3a\u901a\u8fc7\u6784\u5efa\u793e\u4ea4\u56fe\u8c31\u5e76\u4e0d\u4fbf\u5229\uff0c\u6784\u5efa\u4e00\u4e9b\u5047\u65b0\u95fb\u7684\u7279\u5f81\u4e5f\u9700\u8981\u5927\u91cf\u4eba\u5de5\u77e5\u8bc6\u3002\u6587\u7ae0\u8ba4\u4e3a\u4e4b\u524d\u7684\u68c0\u6d4b\u65b9\u6cd5\u4e0d\u80fd\u5f88\u597d\u7684\u4e00\u6b21\u6574\u5408\u6b63\u6587\uff08text\uff09\uff0c\u53cd\u9988\uff08response\uff09\uff0c\u6e90\uff08source\uff09\u4e09\u8005\u7684\u7279\u5f81\u3002\u8bba\u6587\u7684\u6570\u636e\u96c6\u6765\u81ea twitter \u548c weibo\uff0cweibo \u4e2d\u7684\u6b63\u6587\u5c31\u662f\u8ba8\u8bba\u7684\u67d0\u4e2a\u8bdd\u9898\uff0c\u800c\u975e\u4e00\u822c\u7684\u6587\u7ae0\uff0c\u53cd\u9988\u5c31\u662f\u4e3b\u9898\u53c2\u4e0e\u8005\u7684\u56de\u590d\uff0c\u6e90\u5c31\u662f\u56de\u590d\u7684\u7528\u6237\u3002 \u6574\u4e2a\u67b6\u6784\u7531\u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a Capture \u6a21\u5757 \u7528\u4e8e\u63d0\u53d6\u4e00\u7bc7\u6b63\u6587\u6240\u6709\u7684\u53cd\u9988\u6587\u672c\u4fe1\u606f\uff0c\u901a\u8fc7 LSTM \u6765\u7ec4\u88c5\u591a\u4e2a\u56de\u590d\u5185\u5bb9\u3002 Scoure \u6a21\u5757 \u901a\u8fc7\u6784\u5efa\u7528\u6237\u5173\u7cfb\u7f51\u7edc\u964d\u7eac\u540e\u8ba1\u7b97\u5f97\u5230\u4e00\u5bf9si\u548cy^i \uff0csi\u7528\u4e8e\u540e\u7eed\u7f51\u7edc\u8ba1\u7b97\uff0cy^i \u4e5f\u53ef\u7528\u4e8e\u5355\u72ec\u7684\u7528\u6237\u5206\u6790\u3002 \u5982\u4e0a\u56fe\u7684 Capture \u90e8\u5206\u7528\u6765\u62bd\u53d6\u6587\u7ae0\u548c\u7528\u6237\u7684\u4f4e\u7ef4\u5ea6\u8868\u793a \uff0c\u7528\u4e00\u4e2a RNN \u6765\u62bd\u53d6\u6b63\u6587\uff08text\uff09\u7684\u5411\u91cf\u3002 \u8fd9\u7bc7\u662f\u4e2d\u79d1\u9662\u8ba1\u7b97\u673a\u7814\u7a76\u6240\u7684\u91d1\u5fd7\u5a01\u548c\u66f9\u5a1f\u535a\u58eb\u7684\u7814\u7a76\u5de5\u4f5c\uff0c\u53d1\u8868\u5728 AAAI 2016\u3002 Step 1\uff1a\u4f5c\u8005\u901a\u8fc7\u4e00\u4e2a Topic \u6a21\u578b\u6765\u8fdb\u884c\u51b2\u7a81\u7684\u89c2\u70b9\u6316\u6398\u3002 \u901a\u8fc7\u5bf9\u53d1\u5e16\u7684\u652f\u6301\u548c\u53cd\u5bf9\u884c\u4e3a\u6784\u9020\u4fe1\u7528\u7f51\u7edc\uff08Credibility NetWork\uff09\uff0c\u4f5c\u8005\u8ba4\u4e3a\u6bcf\u4e00\u4e2a\u5e16\u5b50\uff08tweet\uff09\u90fd\u662f\u7531\u4e00\u7ec4\u6df7\u5408\u7684\u4e3b\u9898 topic\uff0c\u548c\u5bf9\u67d0\u4e2a\u7279\u5b9a\u4e3b\u9898 topic \u591a\u79cd\u89c2\u70b9 viewpiont \u7ec4\u6210\u3002 \u6bcf\u4e00\u4e2a\u4e3b\u9898-\u89c2\u70b9\uff08topic-viewpoint \uff09pair\uff0c\u5b83\u7684\u5206\u5e03\u53c2\u6570\u6765\u81ea Dirichlet \u5206\u5e03 \u3002k \u8868\u793a topic \u7ef4\u5ea6\uff0cl \u8868\u793a viewpoint \u7ef4\u5ea6\u3002 \\1. \u6bcf\u4e00\u4e2a\u5e16\u5b50\uff0c\u7ec4\u6210\u5b83\u7684\u6240\u6709 topic\uff0c\u7b26\u5408\u4e00\u4e2a\u53c2\u6570\u4e3a \u03b8t \u7684 Dirichlet \u5206\u5e03 \u3002 \\2. \u540c\u6837\u5bf9\u6240\u6709\u53ef\u80fd\u7684 topic\uff0c\u7ec4\u6210\u5b83\u7684\u6240\u6709\u7684 viewpoint \u540c\u6837\u7b26\u5408\u4e00\u4e2a\u53c2\u6570\u4e3a \u03c8tk \u7684 Dirichlet \u5206\u5e03\u3002 \u7136\u540e\u600e\u4e48\u751f\u6210\u6587\u7ae0\u5462\uff0c\u5c31\u662f\u901a\u8fc7 \u03b8t \u4e3a\u53c2\u6570\u7684\u591a\u9879\u5f0f\u5206\u5e03\u4e2d\u5f97\u5230\u4e3b\u9898\uff0c\u4ece \u03c8tk \u7684\u591a\u9879\u5f0f\u5206\u5e03\u4e2d\u5f97\u5230\u89c2\u70b9 Vtn\uff0c\u7531\u4e8e\u8fd9\u91cc\u5df2\u7ecf\u786e\u5b9a\u4e86 \u03c8tk \u7684 k\uff0c\u5c31\u662f\u4e3b\u9898 k=Ztn\uff0c\u6240\u4ee5\u5c31\u662f \uff0cl \u5c31\u662f Vtn\u3002 \u90a3\u6700\u7ec8\u4e00\u4e2a tweet \u7684 topic-viewpoint \u751f\u6210\u7684\u53c2\u6570 \u03a6kl \u5c31\u53ef\u4ee5\u5199\u6210 \uff0c\u5c31\u662f\u4ea7\u751f\u81ea\u591a\u9879\u5f0f\u5206\u5e03 \u3002 \u5982\u679c\u4e00\u4e2a\u6765\u81ea\u540c\u4e00\u4e2a\u4e3b\u9898\u4e0b\u9762\u7684\u591a\u4e2a\u4e3b\u9898-\u89c2\u70b9 pair\uff0c\u4e4b\u95f4\u8ddd\u79bb\u975e\u5e38\u5927\uff08\u8bbe\u5b9a\u503ch\uff09 \u3002\u8ddd\u79bb\u91c7\u7528 Jensen-Shannon Distance\uff08JSD\uff09\uff0c\u5176\u5b9e JSD \u662f KL Divergence\uff08Dkl\uff09\u7684\u7b49\u4ef7\u6a21\u5f0f\u3002 \u5177\u4f53\u51b2\u7a81\u89c2\u70b9\u6316\u6398\u5982\u4e0b\uff1a \\1. \u5bf9\u4e00\u4e2a\u65b0\u95fb\u6570\u636e\u96c6\u5efa\u6a21\uff0c\u751f\u6210\u5927\u91cf\u7684 topic-viewpoint pair\uff1b \\2. \u6bd4\u8f83\u540c\u4e00\u4e2a topic \u751f\u6210\u7684 topic-viewpoint \u5bf9\u7684 JSD\uff0c\u5efa\u7acb\u94fe\u63a5\u5173\u7cfb\uff1b \\3. \u7528 Wagstaff et al 2001 \u63d0\u5230\u7684\u5e26\u9650\u5236\u7684 K-means \u7b97\u6cd5\uff0c\u628a\u67d0\u4e2a topic \u4e0b\u7684 viewpoint \u89c2\u70b9\u805a\u5408\u6210\u4e24\u4e2a\u5f7c\u6b64\u51b2\u7a81\u7684\u5806\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u4fe1\u7528\u7f51\u7edc\u7684\u5b9a\u4e49\u3002\u6839\u636e\u4e0a\u9762\u7684\u4e3b\u9898\u6a21\u578b\u6316\u6398\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u53c2\u6570 \u03b8t\uff08\u4e3b\u9898\uff09\u548c\u03c8tk\uff08\u89c2\u70b9\uff09\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a tweet t \u5728 topic k \u4e0a\u7684 viewpoint l \u89c2\u70b9\u4e3a\uff1a \u4e24\u4e24 tweet \u7684\u51fd\u6570\u503c\u5b9a\u4e49\u4e3a Djs \u8868\u793a Jensen-Shannon \u8ddd\u79bb\u3002wij \u5c31\u662f f(ti,tj) \u7684\u77e9\u9635\u3002 \u6587\u4e2d\u5b9a\u4e49 loss function \u5982\u4e0b\uff1a \u5176\u4e2d \u7684 C(ti) \u8868\u793a tweet ti \u7684\u4fe1\u7528\u503c\uff0c\u662f\u9700\u8981\u5b66\u4e60\u7684\u53c2\u6570\u3002 \u5177\u4f53\u6c42\u5bfc\u548c\u8bc1\u660e\u7f51\u7edc\u53ef\u6536\u655b\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\u8bba\u6587\uff0c\u6700\u7ec8\u5f97\u5230\u6bcf k \u8f6e\u8fed\u4ee3\u7684\u8868\u8fbe\u5f0f\uff1a \u8bba\u6587\u5f00\u59cb\u5148\u901a\u8fc7\u5927\u91cf\u6570\u636e\u5206\u6790\u6316\u6398\uff0c\u53d1\u73b0\u5e16\u5b50\u5185\u5bb9\uff0c\u4f5c\u8005\u548c\u4e3b\u9898\u4e09\u8005\u548c\u65b0\u95fb\u7684\u771f\u5047\u6709\u5f88\u5f3a\u7684\u5173\u8054\u6027\u3002\u4e8e\u662f\u628a\u4e09\u8005\u653e\u5165\u4e00\u4e2a\u6df1\u5ea6\u6269\u6563\u7f51\u7edc\u4e2d \uff0c\u540c\u65f6\u6700\u5c0f\u5316\u4e09\u8005\u7684\u76ee\u6807\u3002 \u8bba\u6587\u901a\u8fc7\u5b66\u4e60\u663e\u5f0f\u7279\u5f81\uff08Explicit\uff09\u548c\u6f5c\u5728\u7279\u5f81\uff08Latent\uff09\uff0c\u6f5c\u5728\u7279\u5f81\u901a\u8fc7 GRU \u7684 Hidden \u5c42\u548c Fusion \u5c42\u5f97\u5230\uff1a \u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a GDU \u5355\u5143\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u9488\u5bf9\u5e16\u5b50\u6b63\u6587\uff0c\u8fd8\u53ef\u4ee5\u5bf9\u4f5c\u8005\uff0c\u4e3b\u9898\u540c\u65f6\u8fdb\u884c\u5b66\u4e60\u3002 \u5176\u4e2d\uff0c\u4f5c\u8005\u7684 L(Tu) \u5982\u4e0b\uff1a \u5176\u4ed6\u7684 L(Tn) L(Ts) \u662f\u4e00\u6837\u7684\u5f62\u5f0f\u3002 \u6700\u7ec8\u7684\u7f51\u7edc\u67b6\u6784\u4e09\u8005\u76f8\u4e92\u8fde\u63a5\u8d77\u6765\u5982\u4e0b\u56fe\uff1a \u8bba\u6587\u548c\u5176\u4ed6\u65b9\u6cd5\u8fdb\u884c\u4e86\u5bf9\u6bd4\u3002\u6574\u4e2a\u65b9\u6cd5\u6709\u70b9\u7c7b\u4f3c\u56fe\u795e\u7ecf\u7f51\u7edc\u3002 \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4e86 WSDM '19 \uff0c\u4e2a\u4eba\u8ba4\u4e3a\u521b\u65b0\u6027\u5f88\u9ad8\u3002\u628a\u4f5c\u8005\uff08\u6216\u8005\u662f\u53d1\u5e03\u8005\uff09\uff0c\u65b0\u95fb\uff0c\u793e\u4ea4\u7f51\u7edc\u7684\u7528\u6237\uff0c\u548c\u7528\u6237\u76f4\u63a5\u7684\u8ba2\u9605\u884c\u4e3a\uff0c\u6784\u5efa\u4e86 5 \u4e2a\u77e9\u9635\u3002 \u65b0\u95fb\u5185\u5bb9\u77e9\u9635\uff1b\u7528\u6237\u77e9\u9635\uff1b\u7528\u6237-\u65b0\u95fb\u884c\u4e3a\u77e9\u9635\uff0c\u4f5c\u8005-\u65b0\u95fb\u53d1\u5e03\u5173\u7cfb\u77e9\u9635\u3002\u5176\u4e2d\u65b0\u95fb\u5185\u5bb9\u77e9\u9635\uff0c\u548c\u7528\u6237\u77e9\u9635\uff0c\u91c7\u7528 NMF \u8fdb\u884c\u5206\u89e3\u3002 \u7528\u6237-\u65b0\u95fb\u884c\u4e3a\u77e9\u9635\u5206\u89e3\u7684\u76ee\u6807\u662f\uff1a\u9ad8\u4fe1\u7528\u5206\u7684\u7528\u6237\u504f\u597d\u5206\u4eab\u771f\u5b9e\u65b0\u95fb\uff0c\u4f4e\u4fe1\u7528\u5206\u7528\u6237\u504f\u597d\u5206\u4eab\u5047\u65b0\u95fb\u3002 \u4f5c\u8005-\u65b0\u95fb\u53d1\u5e03\u5173\u7cfb\u77e9\u9635\u5206\u89e3\u7684\u76ee\u6807\uff1a\u57fa\u4e8e\u65b0\u95fb\u53d1\u5e03\u8005\u7684\u6f5c\u5728\u7279\u5f81\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ed6\u53d1\u5e03\u7684\u884c\u4e3a\u5f97\u5230\u3002\u6587\u7ae0\u628a\u65b0\u95fb\u53d1\u5e03\u8005\u5206\u4e3a\u5404\u79cd\u515a\u6d3e\u98ce\u683c o \uff0c\u7136\u540e\u7528\u5206\u89e3\u540e\u7684\u77e9\u9635\u62df\u5408\u8fd9\u4e2a\u7279\u5f81\u3002 \u901a\u8fc7\u548c Hadamard \u6b63\u4ea4\u77e9\u9635\u505a\u8fd0\u7b97 \u2299 \u6765\u8861\u91cf\u8bef\u5dee\u5927\u5c0f\u3002 \u6700\u540e\u901a\u8fc7\u628a\u521a\u521a\u51e0\u4e2a\u77e9\u9635\u5f97\u5230\u7684\u5206\u89e3\u77e9\u9635\u8fdb\u884c\u8fd0\u7b97\uff0c\u6700\u7ec8\u76ee\u6807\u662f\uff1a \u628a\u6240\u6709\u7684\u77e9\u9635\u5206\u89e3\u76ee\u6807\u548c\u6700\u7ec8\u76ee\u6807\u62fc\u63a5\u8d77\u6765\u5c31\u5f97\u5230\u7684\u6574\u4f53\u76ee\u6807\u51fd\u6570\uff1a \u5177\u4f53\u6c42\u5bfc\u8fc7\u7a0b\u9700\u8981\u4e00\u5b9a\u6570\u5b66\u77e5\u8bc6\uff0c\u5bf9\u8fd9\u7bc7\u8bba\u6587\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u770b\u539f\u6587\u3002 \u76f8\u5173\u6bd4\u8d5b Dean Pomerleau \u548c Delip Rao \u5728 2017 \u5e74\u4e3e\u529e\u4e86\u5047\u65b0\u95fb\u6311\u6218\uff1a Exploring how artificial intelligence technologies could be leveraged to combat fake news. \u6bd4\u8d5b\u5730\u5740\uff1a http://www.fakenewschallenge.org/ \u8bad\u7ec3\u6837\u672c\u548c\u9884\u6d4b\u8f93\u5165\u90fd\u662f\u4e00\u4e2a\u957f\u4e8b\u4ef6\u6807\u9898\u548c\u4e00\u6bb5\u6b63\u6587\u5185\u5bb9\u3002\u8f93\u51fa\u7684\u76ee\u6807\u662f\u6b63\u6587\u5185\u5bb9\u662f\u5bf9\u6807\u9898\u7684\uff1a1\uff09\u8d5e\u540c\uff0c2\uff09\u53cd\u5bf9\uff0c3\uff09\u8ba8\u8bba\uff0c4\uff09\u4e0d\u76f8\u5173\u3002 \u7ec4\u59d4\u4f1a\u8ba4\u4e3a\uff0c\u89c2\u70b9\u68c0\u6d4b\u4efb\u52a1\u548c\u5047\u65b0\u95fb\u4efb\u52a1\u573a\u666f\u662f\u6709\u5f3a\u76f8\u5173\u7684\uff0c\u4ec5\u4ec5\u76f8\u5173\u6216\u4e0d\u76f8\u5173\u4f1a\u6bd4\u8f83\u5bb9\u6613\u3002\u901a\u8fc7\u6b63\u6587\u6765\u5206\u6790\u89c2\u70b9\u662f\u5426\u8d5e\u540c\u6807\u9898\u7684\u5185\u5bb9\u9648\u8ff0\u3002\u7b2c\u4e00\u540d\u91c7\u7528\u4e86\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u548c GBDT \u4e24\u4e2a\u6a21\u578b\u3002\u7b2c\u4e8c\u540d\u91c7\u7528\u4e86\u591a\u79cd\u6a21\u578b\u5f97\u5230\u7279\u5f81\uff08\u5982 NMF\uff0cLDA \uff0cLSI\uff0cunigrams \u7b49\u7b49\uff09\u52a0\u4e0a\u591a\u5c42 MLP\u3002\u8fd9\u6b21\u6bd4\u8d5b\u5176\u5b9e\u53ea\u80fd\u7b97\u5047\u65b0\u95fb\u9886\u57df\u7684\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u5c1d\u8bd5\u3002 [Andreas Hanselowski, 2018] \u8fd9\u7bc7 COLING \u7684 Long Paper \u4e2d\u4f5c\u8005\u5bf9\u8fd9\u6b21\u6bd4\u8d5b\u7684\u524d\u4e09\u540d\u7684\u65b9\u6cd5\u548c\u7279\u5f81\u8868\u73b0\u8fdb\u884c\u4e86\u5206\u6790\uff0c\u63d0\u51fa\u4e86\u81ea\u5df1\u7684\u6539\u8fdb\u65b9\u6848\uff0c\u53d6\u5f97\u4e86\u8be5\u4efb\u52a1 state-of-the-art \u7684\u8868\u73b0\u3002 \u4ed6\u4eec\u7684\u6846\u67b6\u628a\u8bed\u4e49\u4fe1\u606f\u7279\u5f81\u901a\u8fc7 stackLstm \u8868\u5f81\uff0c\u518d\u52a0\u4e0a\u5bf9\u6807\u9898\u548c\u6b63\u6587\u7684\u7279\u5f81\u878d\u5408\uff0c\u5b9e\u9a8c\u8868\u73b0\u5728\u5c0f\u6837\u672c\u7684\u7c7b\u522b\u4e0a\u6709\u660e\u663e\u63d0\u5347\u3002 \u53c2\u8003\u6587\u732e [1] \u4e00\u6587\u770b\u61c2\u865a\u5047\u65b0\u95fb\u68c0\u6d4b\uff08\u9644\u6570\u636e\u96c6 & \u8bba\u6587\u63a8\u8350\uff09https://zhuanlan.zhihu.com/p/57124028 [1]. Yuyu Zhang, Hanjun Dai, Zornitsa Kozareva, Alexander J. Smola, Le Song. \"Variational Reasoning for Question Answering with Knowledge Graph\". arXiv preprint arXiv:1709.04071, 2017. [2]. Zhiwei Jin, Juan Cao, Yongdong Zhang, and Jiebo Luo. \"News Verification by Exploiting Conflicting Social Viewpoints in Microblogs\". AAAI 2016. [3]. Kai Shu, Suhang Wang, Huan Liu. \"Beyond News Contents: The Role of Social Context for Fake News Detection\". WSDM 2019. [4]. Kai Shu, Amy Sliva, Suhang Wang, Jiliang Tang, Huan Liu. \"Fake News Detection on Social Media: A Data Mining Perspective\". SIGKDD 2017. [5]. William Yang Wang. \u201cLiar, Liar Pants on Fire\u201d: A New Benchmark Dataset for Fake News Detection. ACL 2017. [6]. Natali Ruchansky, Sungyong Seo, Yan Liu. \"CSI: A Hybrid Deep Model for Fake News Detection\". CIKM 2017. [7]. Andreas Hanselowski, Avinesh PVS, Benjamin Schiller, Felix Caspelherr, Debanjan Chaudhuri, Christian M. Meyer, Iryna Gurevych. \"A Retrospective Analysis of the Fake News Challenge Stance Detection Task\". arXiv preprint arXiv:1806.05180, 2018. [8]. Benjamin D. Horne, Sibel Adali. \"This Just In: Fake News Packs a Lot in Title, Uses Simpler, Repetitive Content in Text Body, More Similar to Satire than Real News\". ICWSM 2017. \u591a\u6a21\u6001\u5185\u5bb9\u7406\u89e3\u7b97\u6cd5\u5728\u65b0\u95fb\u68c0\u6d4b\u4e2d\u7684\u5e94\u7528 1. \u80cc\u666f \u968f\u7740\u4e92\u8054\u7f51\u7684\u666e\u53ca\uff0c\u7528\u6237\u7684\u751f\u6d3b\u65b9\u5f0f\u4e5f\u53d1\u751f\u4e86\u5f88\u5927\u6539\u53d8\uff0c\u73b0\u4eca\u793e\u4f1a\u4e2d\uff0c\u6211\u4eec\u4ece\u4e92\u8054\u7f51\u4e0a\u83b7\u53d6\u7684\u4fe1\u606f\u8d8a\u6765\u8d8a\u591a\u30022018\u5e74\u9876\u7ea7\u56fd\u9645\u671f\u520a\u300a\u79d1\u5b66\u300b\u6307\u51fa\uff0c\u57282016\u5e74\u7f8e\u56fd\u603b\u7edf\u5927\u9009\u671f\u95f4\u6837\u672c\u9009\u6c11\u5e73\u5747\u6bcf\u4eba\u6bcf\u5929\u8981\u63a5\u89e64\u7bc7\u5047\u65b0\u95fb\uff1b\u8981\u4f20\u64ad\u81f31500\u4e2a\u9009\u6c11\uff0c\u5047\u65b0\u95fb\u7684\u901f\u5ea6\u662f\u771f\u5b9e\u65b0\u95fb\u76846-20\u500d\u3002\u56e0\u6b64\u5229\u7528\u4eba\u5de5\u667a\u80fd\u7684\u65b9\u5f0f\u5bf9\u65b0\u95fb\u771f\u5b9e\u6027\u4f5c\u81ea\u52a8\u6d4b\u8bc4\uff0c\u5bf9\u9650\u5236\u8c23\u8a00\u4f20\u64ad\u6709\u5f88\u5927\u76ca\u5904\u3002\u4ee5\u4e92\u8054\u7f51\u4e3a\u8f7d\u4f53\uff0c\u65b0\u95fb\u901a\u5e38\u5305\u62ec\u6587\u672c\u3001\u56fe\u7247\u3001\u77ed\u89c6\u9891\u7b49\u5185\u5bb9\u4fe1\u606f\uff0c\u540c\u65f6\u8fd8\u6709\u65b0\u95fb\u548c\u7528\u6237\u7684\u5c5e\u6027\u7279\u5f81\uff0c\u672c\u6587\u4ecb\u7ecd\u4e00\u79cd\u5229\u7528\u591a\u6a21\u6001\u6570\u636e\u589e\u5f3a\u865a\u5047\u65b0\u95fb\u68c0\u6d4b\u5bf9\u65b9\u6cd5\uff0c\u6570\u636e\u6765\u6e90\u4e3a[1]\u3002 2. \u95ee\u9898\u63cf\u8ff0 \u591a\u6a21\u6001\u4fe1\u606f\u878d\u5408\u901a\u5e38\u5305\u542b\u5404\u6a21\u6001\u6570\u636e\u7279\u5f81\u63d0\u53d6\u3001\u7279\u5f81\u878d\u5408\u3001\u51b3\u7b56\u4e09\u4e2a\u6a21\u5757\uff0c\u5176\u4e2d\u7279\u5f81\u63d0\u53d6\u662f\u5bf9\u56fe\u50cf\u3001\u6587\u672c\u7b49\u6570\u636e\uff0c\u7528\u4e0e\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u63d0\u53d6\u6837\u672c\u7684\u5168\u5c40\u7279\u5f81\uff0c\u4ee5\u4fbf\u540e\u7eed\u878d\u5408\u3002\u5728\u7279\u5f81\u878d\u5408\u90e8\u5206\uff0c\u5bf9\u5404\u6a21\u6001\u7279\u5f81\u8fdb\u884c\u7edf\u4e00\u5316\u3002\u51b3\u7b56\u5219\u662f\u8bad\u7ec3\u4ee5\u4efb\u52a1\u8f93\u51fa\u4e3a\u76ee\u6807\uff08\u5982\u5206\u7c7b\u6807\u7b7e\uff09\u7684\u6a21\u578b\u3002\u795e\u7ecf\u7f51\u7edc\u5177\u6709\u5f3a\u5927\u7279\u5f81\u62bd\u8c61\u529f\u80fd\uff0c\u56e0\u6b64\u7279\u5f81\u878d\u5408\u548c\u51b3\u7b56\uff08\u5206\u7c7b\u5668\u8bad\u7ec3\uff09\u901a\u5e38\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\uff0c\u5373\u7f51\u7edc\u4ee5\u4e0d\u540c\u6a21\u6001\u7279\u5f81\u4f5c\u4e3a\u8f93\u5165\uff0c\u4efb\u52a1\u7ed3\u679c\u4f5c\u4e3a\u8f93\u51fa\u3002\u65b0\u95fb\u68c0\u6d4b\u8fc7\u7a0b\u5982\u56fe1\u6240\u793a\uff0c\u540e\u6587\u5c06\u5206\u522b\u4ecb\u7ecd\u5404\u90e8\u5206\u7684\u5b9e\u73b0\u7ec6\u8282\u3002 3. \u7279\u5f81\u63d0\u53d6 \u516c\u5f00\u6570\u636e\u96c6[1]\u4e2d\uff0c\u6bcf\u6761\u6837\u672c\u5305\u62ec9\u79cd\u6570\u636e\uff1a\u6587\u672c\u3001\u56fe\u50cfid\u3001\u65b0\u95fb\u7c7b\u578b\u3001userGender\u3001userFollowCount\u3001userFansCount\u3001userWeiboCount\u3001userLocation\u3001userDescription\uff0c\u6b64\u5916\u6bcf\u6761\u6837\u672c\u6709\u552f\u4e00\u7684id\uff0c\u8bad\u7ec3\u65f6\u6bcf\u6761id\u6709\u4e8c\u503c\u6807\u7b7e\uff0c0\u8868\u793a\u771f\u5b9e\u65b0\u95fb\uff0c1\u8868\u793a\u865a\u5047\u65b0\u95fb\u3002\u5176\u4e2d\u6587\u672c\u4e0d\u4e3a\u7a7a\uff0c\u56fe\u50cfid\u53ef\u80fd\u4e3a\u7a7a\u6216\u591a\u4e2a\uff0c\u5176\u4ed6\u5c5e\u6027\u53ef\u80fd\u4e3a\u7a7a\uff08nan\uff09\u3002 \u63d0\u53d6\u7279\u5f81\u65f6\uff0c\u5c06\u4e0a\u8ff0\u6570\u636e\u5206\u4e3a\u56db\u79cd\u7c7b\u578b\uff0c\u4e0b\u9762\u5206\u522b\u4ecb\u7ecd\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u63d0\u53d6\u65b9\u5f0f\u3002 1\uff09\u6587\u672c\u6570\u636e\uff1a\u4f5c\u4e3a\u65b0\u95fb\u5185\u5bb9\u7406\u89e3\u7684\u4e3b\u8981\u6a21\u6001\uff0c\u6211\u4eec\u91c7\u7528bert\u5de5\u5177\uff0c\u7528chinese_L-12_H-768_A-12\u63d0\u4f9b\u5bf9\u9884\u8bad\u7ec3\u6a21\u578b\u548c\u8bcd\u5e93\u5bf9\u6bcf\u6761\u6587\u672c\u63d0\u53d6sentence_embedding\uff0c\u6700\u7ec8\u6bcf\u6761\u6587\u672c\u88ab\u6620\u5c04\u4e3a768\u7ef4\u5411\u91cf\u3002 2\uff09\u56fe\u50cf\u6570\u636e\uff1a\u4e0e\u6587\u672c\u7c7b\u4f3c\uff0c\u56fe\u50cf\u6570\u636e\u4e5f\u5305\u542b\u4e86\u5185\u5bb9\u76f8\u5173\u7684\u8bed\u4e49\u6570\u636e\uff0c\u6211\u4eec\u91c7\u7528alexnet\u7ed3\u6784\uff0c\u548c\u5176\u5728imagenet-1000\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u56fe\u50cf\u7279\u5f81\u8fdb\u884c\u63d0\u53d6\u3002 3\uff09\u9759\u6001\u5c5e\u6027\uff1a\u5c5e\u6027\u5305\u62ec\u4e24\u4e2a\u5b50\u7c7b\uff0c\u7b2c\u4e00\u79cd\u662f\u65b0\u95fb\u7c7b\u578b\u3001userGender\u548cuserLocation\uff0c\u8fd9\u4e9b\u5c5e\u6027\u662f\u6709\u9650\u7684\u79bb\u6563\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u6839\u636e\u503c\u57df\u7684\u8303\u56f4\uff0c\u5c06\u5176\u6620\u5c04\u4e3aone-hot\u5411\u91cf\uff0c\u7136\u540e\u6536\u5c3e\u76f8\u8fde\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6d4b\u8bd5\u6570\u636e\u7684\u5c5e\u6027\u53ef\u80fd\u51fa\u73b0\u65b0\u7684\u5c5e\u6027\u53d6\u503c\uff0c\u5219\u5bf9\u5e94\u7684\u5411\u91cf\u662f0\u3002\u4f8b\u5982\uff1a\u8bad\u7ec3\u96c6\u4e2d\u57ce\u5e02\u5c5e\u6027\u662f\u300c\u5317\u4eac\uff0c\u4e0a\u6d77\uff0c\u5e7f\u5dde\u300d\uff0c\u5bf9\u5e94\u7684one-hot\u7279\u5f81\u662f[1 0 0]\uff0c[0 1 0]\uff0c[0 0 1]\uff0c\u6d4b\u8bd5\u65f6\u57ce\u5e02\u5c5e\u6027\u51fa\u73b0\u4e86\u6df1\u5733\u3001\u676d\u5dde\uff0c\u5219\u8fd9\u4e9b\u65b0\u5c5e\u6027\u5747\u4e3a[0 0 0]\u3002\u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u8bad\u7ec3\u65f6\u7f51\u7edc\u53ea\u4f1a\u5bf9\u5df2\u6709\u4fe1\u606f\u8fdb\u884c\u54cd\u5e94\uff0c\u800c\u65e0\u6cd5\u5bf9\u672a\u77e5\u4fe1\u606f\u505a\u5224\u65ad\u3002\u5982\u679c\u79bb\u6563\u5c5e\u6027\u4e4b\u95f4\u6709\u76f8\u5173\u6027\uff0c\u4f8b\u5982\u57ce\u5e02\u95f4\u7684\u76f8\u5173\u6027\u7528\u8ddd\u79bb\u5ea6\u91cf\uff0c\u5219\u53ef\u4ee5\u7528\u5148\u9a8c\u4fe1\u606f\u8fdb\u884c\u4fee\u6b63\uff0c\u8fd9\u6837\u6df1\u5733\u53ef\u80fd\u662f[0 0.1 0.9]\uff0c\u676d\u5dde\u662f[0 0.8 0.2]\u3002 \u7b2c\u4e8c\u7c7b\u5c5e\u6027\u5305\u62ec\u4e09\u4e2a\u5c5e\u6027\uff1auserFollowCount\u3001userFansCount\u548cuserWeiboCount\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\u57df\u7406\u8bba\u4e0a\u662f\u65e0\u9650\u7684\uff0c\u4e14\u6570\u503c\u5177\u6709\u4e00\u5b9a\u610f\u4e49\u3002\u8fd9\u91cc\u6211\u4eec\u5148\u5bf9\u6570\u636e\u8fdb\u884c\u805a\u7c7b\uff0c\u5177\u4f53\u505a\u6cd5\u662f\u5c06\u4e09\u4e2a\u5c5e\u6027\u770b\u4f5c\u4e09\u7ef4\u5411\u91cf\uff0c\u7528kmeans\u805a\u6210N\u7c7b\uff0c\u7136\u540e\u6bcf\u6761\u6837\u672c\u6620\u5c04\u5230\u5bf9\u5e94\u7684\u7c7b\u522b\uff0c\u6700\u540e\u5c06N\u4e2a\u7c7b\u522b\u7f16\u53f7\u6620\u5c04\u4e3aone-hot\u7279\u5f81\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u80fd\u591f\u5c06\u5c5e\u6027\u7edf\u4e00\u7f16\u7801\u4e3aone-hot\u7279\u5f81\uff0c\u540c\u65f6\u5bf9\u8fc7\u5927\u6216\u8fc7\u5c0f\u7684\u6570\u636e\u4e5f\u80fd\u5c06\u5176\u5f52\u4e3a\u76f8\u8fd1\u7684\u7c7b\u522b\u4e2d\u3002 4\uff09userDescription\uff1a\u8be5\u5c5e\u6027\u8f83\u4e3a\u7279\u6b8a\uff0c\u662f\u7528\u6237\u7684\u5c5e\u6027\u63cf\u8ff0\uff0c\u4f46\u6570\u636e\u672c\u8d28\u4e0a\u662f\u6587\u672c\u4fe1\u606f\uff0c\u6211\u4eec\u91c7\u7528\u4e0e\u6587\u672c\u6570\u636e\u76f8\u540c\u7684\u5904\u7406\u65b9\u5f0f\u63d0\u53d6768\u7ef4\u7684sentence_embedding\u3002\u5728\u878d\u5408\u65f6\uff0c\u5355\u72ec\u5f53\u4f5c\u4e00\u4e2a\u6a21\u6001\u8003\u8651\u3002 \u56fe2 \u4e0d\u540c\u6a21\u6001\u6570\u636e\u7279\u5f81\u8868\u5f81\u793a\u610f 4. \u591a\u6a21\u6001\u5185\u5bb9\u7406\u89e3 \u5bf9\u5404\u7c7b\u578b\u6570\u636e\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u540e\uff0c\u9700\u8981\u7528\u591a\u6a21\u6001\u5b66\u4e60\u7684\u65b9\u6cd5\u5c06\u8fd9\u4e9b\u7279\u5f81\u5173\u8054\u8d77\u6765\u3002\u591a\u6a21\u6001\u5b66\u4e60\u6839\u636e\u878d\u5408\u5bf9\u8c61\u7684\u4e0d\u540c\uff0c\u53ef\u5206\u4e3a\u7279\u5f81\u5c42\u7684\u878d\u5408\u548c\u5206\u6570\u5c42\u7684\u878d\u5408\uff0c\u7279\u5f81\u5c42\u662f\u4ee5\u4e0a\u4e00\u8282\u4e2d\u7684\u7279\u5f81\u4e3a\u8f93\u5165\uff0c\u6784\u5efa\u6a21\u578b\u3002\u5206\u6570\u5c42\u901a\u5e38\u662f\u5bf9\u5404\u6a21\u6001\u6570\u636e\u90fd\u8bad\u7ec3\u6a21\u578b\uff0c\u7136\u540e\u5c06\u5206\u7c7b\u9884\u6d4b\u7684\u6982\u7387\u5411\u91cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u518d\u8bad\u7ec3\u7edf\u4e00\u7684\u5206\u7c7b\u5668\u3002\u7531\u4e0a\u4e00\u8282\u5206\u6790\u53ef\u77e5\uff0c\u65b0\u95fb\u4e2d\u7684\u6a21\u6001\u5e76\u4e0d\u662f\u5b8c\u5168\u7b49\u540c\u7684\uff0c\u65b0\u95fb\u5185\u5bb9\u76f4\u63a5\u7531\u6587\u672c\u63cf\u8ff0\uff0c\u56fe\u7247\u4e5f\u4e0e\u65b0\u95fb\u5185\u5bb9\u6709\u8f83\u5927\u76f8\u5173\u6027\uff0c\u8fd9\u4e24\u4e2d\u6a21\u6001\u53ef\u4ee5\u76f4\u63a5\u8bad\u7ec3\u5206\u7c7b\u5668\u3002\u800c\u5176\u4ed6\u5c5e\u6027\u5219\u662f\u5bf9\u7528\u6237\u548c\u65b0\u95fb\u7684\u63cf\u8ff0\uff0c\u548c\u65b0\u95fb\u5185\u5bb9\u4e0d\u4e00\u5b9a\u6709\u76f4\u63a5\u5173\u7cfb\uff0c\u8fd9\u4e9b\u6a21\u6001\u5219\u4e0d\u9002\u5408\u8bad\u7ec3\u5206\u7c7b\u5668\u3002\u56e0\u6b64\u6211\u4eec\u4e3b\u8981\u63a2\u7a76\u7279\u5f81\u5c42\u9762\u7684\u878d\u5408\uff0c\u5bf9\u4e8e\u5206\u6570\u5c42\u878d\u5408\uff0c\u6211\u4eec\u5c1d\u8bd5\u4e86\u4e00\u79cd\u4e0d\u540c\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u5bf9\u7edf\u4e00\u7279\u5f81\u8bad\u7ec3\u591a\u4e2a\u5206\u7c7b\u5668\uff0c\u5c06\u8fd9\u4e9b\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u5206\u6570\u8fdb\u884c\u878d\u5408\uff0c\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6295\u7968\u65b9\u5f0f\u3002\u4e0b\u9762\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u65b9\u6cd5\u3002 4.1 \u7279\u5f81\u7ea7\u7684\u591a\u6a21\u6001\u5b66\u4e60 \u6211\u4eec\u9996\u5148\u91c7\u7528[2]\u4e2d\u7684\u4e24\u79cd\u7279\u5f81\u878d\u5408\u65b9\u6cd5\uff0c\u5bf9\u56db\u79cd\u6a21\u6001\u7279\u5f81\u5206\u522b\u8fdb\u884c\u591a\u5c42\u5168\u8fde\u63a5\u8ba1\u7b97\uff0c\u5f97\u5230\u76f8\u540c\u5c3a\u5bf8\u7684\u5411\u91cf\uff0c\u7136\u540e\u8fdb\u884c\u5411\u91cf\u62fc\u63a5\uff08concatenate\uff09\u6216\u9010\u5143\u7d20\u70b9\u4e58\uff08pairwise product\uff09\u64cd\u4f5c\u3002\u56fe3\u662f\u4ee5\u4e09\u79cd\u6a21\u6001\uff08\u6587\u672c\u7279\u5f81\u3001\u56fe\u50cf\u7279\u5f81\u548c\u7528\u6237\u63cf\u8ff0\u7279\u5f81\uff09\u4e3a\u4f8b\u7684\u7279\u5f81\u5c42\u878d\u5408\u793a\u610f\u56fe\u3002 \u56fe3 \u4e09\u79cd\u6a21\u6001\u7684\u7279\u5f81\u5c42\u878d\u5408\u65b9\u5f0f\u53ca\u5176\u5bf9\u5e94\u7684\u7f51\u7edc\u7ed3\u6784\u3002\uff08a\uff09\u62fc\u63a5\u8fde\u63a5\uff0c\uff08b\uff09\u70b9\u4e58\u8fde\u63a5\u3002 \u5206\u6790\u8fd9\u4e24\u79cd\u7f51\u7edc\u7ed3\u6784\u53ef\u77e5\uff0c\u62fc\u63a5\u8fde\u63a5\u80fd\u591f\u5b8c\u6574\u4fdd\u7559\u5404\u901a\u9053\u7684\u4fe1\u606f\u3002\u800c\u70b9\u4e58\u8fde\u63a5\u53ef\u4ee5\u770b\u4f5c\u662f\u8ba1\u7b97\u5404\u901a\u9053\u7684\u76f8\u5173\u6027\uff0c\u5f53\u5404\u901a\u9053\u5728\u67d0\u4e00\u7ef4\u54cd\u5e94\u90fd\u8f83\u5927\u65f6\u624d\u6709\u503c\uff0c\u5982\u679c\u5176\u4e2d\u6709\u4e00\u4e2a\u6a21\u6001\u5728256\u7ef4\u5411\u91cf\u4e2d\u67d0\u4e00\u7ef4\u6570\u503c\u8f83\u5c0f\uff0c\u5219\u878d\u5408\u540e\u6574\u4f53\u5728\u8fd9\u4e00\u7ef4\u7684\u6570\u503c\u4f1a\u5f88\u5c0f\u3002\u6211\u4eec\u5728\u6b64\u57fa\u7840\u4e0a\u63d0\u51fa\u4e00\u79cd\u65b0\u7684\u878d\u5408\u7ed3\u6784\uff0c\u8bb0\u4e3a\u6df7\u5408\uff08mix\uff09\u8fde\u63a5\uff0c\u540c\u65f6\u4fdd\u7559\u5404\u6a21\u6001\u72ec\u7acb\u4fe1\u606f\u548c\u4e92\u76f8\u5173\u4fe1\u606f\uff0c\u5176\u7ed3\u6784\u5982\u56fe4\u6240\u793a\uff1a \u56fe4 \u4e24\u79cdmix\u7ed3\u6784\u8bbe\u8ba1\u65b9\u5f0f\u3002\uff08a\uff09\u4e09\u5143\u7ec4\u70b9\u4e58\uff08\u8bb0\u4e3amix-1\uff09\uff0c\uff08b\uff09\u591a\u4e2a\u4e8c\u5143\u7ec4\u70b9\u4e58\uff08\u8bb0\u4e3amix-2\uff09 \u6df7\u5408\u8fde\u63a5\u4fdd\u7559\u4e86\u6240\u6709\u4fe1\u606f\uff0c\u53ef\u4ee5\u907f\u514d\u67d0\u4e00\u4e2a\u6a21\u6001\u7684256\u7ef4\u5411\u91cf\u5728\u67d0\u4e00\u7ef4\u6570\u503c\u8f83\u5c0f\uff0c\u9020\u6210\u5176\u4ed6\u6a21\u6001\u4fe1\u606f\u7684\u4e22\u5931\u3002\u540c\u65f6\uff0cmix\u7ed3\u6784\u53ef\u4ee5\u907f\u514d\u68af\u5ea6\u6d88\u5931\u7684\u60c5\u51b5\u3002\u5f53\u6a21\u6001\u6570\u5927\u4e8e2\u65f6\uff0c\u76f8\u5173\u9879\u53ef\u4ee5\u6709\u4e0d\u540c\u8868\u793a\uff0c\u56e0\u6b64\u6df7\u5408\u8fde\u63a5\u4e5f\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u63d0\u51fa\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\uff0c\u5206\u522b\u5982\u56fe4(a)\u548c\u56fe4(b)\u8868\u793a\u3002mix-1\u7ed3\u6784\u5c31\u662f\u56fe3\u7684\u4e24\u79cd\u65b9\u5f0f\u6df7\u5408\uff0c\u5176\u4f18\u70b9\u5728\u4e8e\u8fde\u63a5\u540e\u7ef4\u5ea6\u968f\u6a21\u6001\u6570\u7ebf\u6027\u589e\u957f\u3002\u7f3a\u70b9\u662f\u5f53\u6a21\u6001\u6570\u5f88\u591a\u65f6\uff0c\u76f8\u5173\u9879\u6570\u503c\u7684\u6570\u91cf\u7ea7\u4f1a\u6709\u660e\u663e\u7684\u53d8\u5316\uff0c\u4f8b\u5982\u5982\u679c\u6211\u4eec\u91c7\u7528Batch normalization\u5c06feature map\u63a7\u5236\u57280\uff5e1\u4e4b\u95f4\uff0c\u5219\u76f8\u5173\u9879\u5f88\u53ef\u80fd\u63a5\u8fd10\uff0c\u8fdb\u800c\u9000\u5316\u4e3a\u62fc\u63a5\u8fde\u63a5\uff1b\u5982\u679cfeature map\u7684\u503c\u53ef\u80fd\u5927\u4e8e1\uff0c\u5219\u76f8\u5173\u9879\u6570\u91cf\u7ea7\u53ef\u80fd\u4f1a\u5927\u5927\u589e\u52a0\u3002mix-2\u4e2d\u76f8\u5173\u9879\u662f\u7531\u5404\u6a21\u6001\u4e24\u4e24\u70b9\u4e58\u5f97\u5230\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u907f\u514d\u76f8\u5173\u9879\u4e58\u79ef\u8fc7\u5c0f\u7684\u60c5\u51b5\uff0c\u800c\u4e14\u8003\u8651\u4e86\u4efb\u610f\u4e24\u6a21\u6001\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002\u4f46\u662fmix-2\u8fde\u63a5\u540e\u7684\u957f\u5ea6\u4e0e\u6a21\u6001\u6570\u7684\u5e73\u65b9\u5448\u6b63\u6bd4\uff0c\u5f53\u6a21\u6001\u8f83\u591a\u662f\u4f1a\u51fa\u73b0\u7279\u5f81\u8fc7\u957f\u7684\u60c5\u51b5\u3002\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4f18\u7f3a\u70b9\uff0c\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8bbe\u8ba1\u9700\u8981\u7684\u7ed3\u6784\u3002 4.2 \u5206\u6570\u7ea7\u7684\u591a\u6a21\u6001\u5b66\u4e60 \u591a\u6a21\u6001\u5b66\u4e60\u7684\u53e6\u4e00\u79cd\u5e38\u7528\u65b9\u6cd5\u662f\u5bf9\u5206\u6570\u7ea7\u7684\u878d\u5408\uff0c\u901a\u5e38\u505a\u6cd5\u662f\u7528\u6bcf\u4e2a\u6a21\u6001\u8bad\u7ec3\u5206\u7c7b\u5668\uff0c\u7136\u540e\u5c06\u5404\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u5206\u6570\u8fdb\u884c\u878d\u5408\u3002\u7531\u524d\u6587\u5206\u6790\u53ef\u5f97\uff0c\u65b0\u95fb\u5185\u5bb9\u8bc6\u522b\u4e2d\u5404\u4e2a\u6a21\u6001\u7684\u5185\u5bb9\u4e0d\u662f\u5bf9\u7b49\u7684\uff0c\u53ea\u6709\u6587\u672c\u548c\u56fe\u50cf\u662f\u5bf9\u5185\u5bb9\u7684\u63cf\u8ff0\uff0c\u800c\u4e14\u5e76\u4e0d\u662f\u6bcf\u6761\u6587\u672c\u90fd\u5305\u62ec\u56fe\u50cf\u3002\u56e0\u6b64\u6211\u4eec\u5c1d\u8bd5\u8bad\u7ec3\u591a\u4e2a\u5206\u7c7b\u5668\uff0c\u518d\u5c06\u5206\u7c7b\u5668\u7684\u9884\u6d4b\u7ed3\u679c\u8fdb\u884c\u5206\u6570\u5c42\u7684\u878d\u5408\u3002 \u56fe5 \u591a\u4e2a\u9884\u6d4b\u6a21\u578b\u7684\u8054\u5408 \u5206\u6570\u7ea7\u7684\u591a\u6a21\u6001\u5b66\u4e60\u662f\u5c06\u9884\u6d4b\u7684\u5206\u6570\u5411\u91cf\u4f5c\u4e3a\u7279\u5f81\u8fdb\u884c\u5b66\u4e60\uff0c\u6211\u4eec\u8fd9\u91cc\u91c7\u7528\u591a\u4e2a\u5206\u7c7b\u5668\uff0c\u5bf9\u9884\u6d4b\u5206\u6570\u62fc\u63a5\u540e\u518d\u901a\u8fc7\u5206\u7c7b\u5668\u83b7\u5f97\u6700\u7ec8\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u672c\u8d28\u53ef\u4ee5\u770b\u4f5c\u662f\u7528\u591a\u4e2a\u5206\u7c7b\u6a21\u578b\u7684\u9884\u6d4b\u503c\u8fdb\u884c\u7efc\u5408\uff0c\u6700\u7b80\u5355\u7684\u51b3\u7b56\u65b9\u5f0f\u53ef\u4ee5\u91c7\u7528\u6295\u7968\u3002 5. \u5b9e\u9a8c\u7ed3\u679c \u6211\u4eec\u5229\u7528\u516c\u5f00\u6bd4\u8d5b\u6570\u636e\u96c6[1]\u5bf9\u7b97\u6cd5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6570\u636e\u96c6\u6709\u8d85\u8fc738000\u6761\u65b0\u95fb\uff0c\u5bf9\u5e94\u603b\u56fe\u7247\u6570\u8d85\u8fc734000\u5f20\uff0c\u5176\u4e2d\u4e00\u4e2a\u65b0\u95fb\u53ef\u80fd\u5305\u62ec\u591a\u5f20\u56fe\u7247\uff0c\u6bcf\u4e2a\u56fe\u7247\u4e5f\u53ef\u80fd\u88ab\u591a\u6761\u65b0\u95fb\u7d22\u5f15\u3002\u5f53\u4e0d\u4f7f\u7528\u56fe\u7247\u65f6\uff0c\u6211\u4eec\u5c06\u6bcf\u6761\u65b0\u95fb\u4f5c\u4e3a\u4e00\u4e2a\u6837\u672c\uff0c\u5c06\u6570\u636e\u5212\u5206\u4e3a10\u4efd\uff0c\u5176\u4e2d9\u4efd\u4f5c\u4e3a\u8bad\u7ec3\u6570\u636e\uff0c1\u4efd\u4f5c\u4e3a\u9a8c\u8bc1\u6570\u636e\u3002\u4e3a\u6d4b\u8bd5\u6a21\u578b\u6cdb\u5316\u80fd\u529b\uff0c\u6211\u4eec\u91c7\u7528\u4ea4\u53c9\u9a8c\u8bc1\u7684\u65b9\u6cd5\uff0c\u6d4b\u8bd510\u6b21\uff0c\u6bcf\u6b21\u53d6\u4e0d\u540c\u7684\u6570\u636e\u96c6\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\u3002\u5f53\u4f7f\u7528\u56fe\u7247\u65f6\uff0c\u6211\u4eec\u53ea\u53d6\u5305\u542b\u56fe\u7247\u7684\u65b0\u95fb\uff0c\u5c06\u6bcf\u5f20\u56fe\u7247\u548c\u5176\u4ed6\u4fe1\u606f\u7ec4\u6210\u4e00\u4e2a\u6837\u672c\u5bf9\uff0c\u8bad\u7ec3\u548c\u6d4b\u8bd5\u96c6\u5212\u5206\u76f8\u540c\u3002 \u9996\u5148\u6211\u4eec\u6d4b\u8bd5\u4e0d\u540c\u6a21\u6001\u5bf9\u5206\u7c7b\u51c6\u786e\u7387\u7684\u5f71\u54cd\uff0c\u7531\u4e0a\u6587\u5206\u6790\u53ef\u77e5\uff0c\u6570\u636e\u96c6\u7684\u6784\u6210\u4e0e\u662f\u5426\u4f7f\u7528\u56fe\u7247\u6709\u5173\uff0c\u56e0\u6b64\u5b9e\u9a8c\u4e2d\u6211\u4eec\u5206\u522b\u8fdb\u884c\u5bf9\u6bd4\u3002\u88681\u5c55\u793a\u6587\u672c\u3001\u63cf\u8ff0\u3001\u5c5e\u6027\u7684\u7ec4\u5408\u5bf9\u7ed3\u679c\u5bf9\u5f71\u54cd\u3002 \u88681 \u7279\u5f81\u7ea7\u591a\u6a21\u6001\u65b0\u95fb\u68c0\u6d4b\u51c6\u786e\u7387\uff08\u4e0d\u5305\u542b\u89c6\u89c9\u6a21\u6001\uff09 \u7531\u88681\u53ef\u77e5\u591a\u6a21\u6001\u7279\u5f81\u878d\u5408\u7684\u6548\u679c\u8981\u4f18\u4e8e\u53ea\u7528\u6587\u672c\u7684\u6548\u679c\uff0c\u91c7\u7528\u4e09\u4e2a\u6a21\u6001\u7684\u6548\u679c\u6700\u597d\u3002\u540c\u65f6\uff0c\u5c5e\u6027\u5c5e\u6027\u5bf9\u51c6\u786e\u7387\u7684\u63d0\u5347\u6548\u679c\u8981\u4f18\u4e8e\u7528\u6237\u63cf\u8ff0\u6a21\u6001\u3002\u6b64\u5916\uff0c\u5728\u5b9e\u9a8c\u65f6\u6211\u4eec\u53d1\u73b0\uff0c\u52a0\u5165userFansCount\u3001userFollowCount\u3001userWeiboCount\u805a\u7c7b\u6620\u5c04\u7684one-hot\u7279\u5f81\u540e\uff0c\u6548\u679c\u53cd\u800c\u7565\u5fae\u4e0b\u964d\uff0c\u56e0\u6b64\u5c5e\u6027\u53ea\u5305\u542b\u7c7b\u578b\u3001\u6027\u522b\u548c\u5730\u70b9\u8fd9\u4e09\u4e2a\u79bb\u6563\u5c5e\u6027\uff0c\u5982\u4f55\u5408\u7406\u7684\u4f7f\u7528\u6570\u503c\u5316\u7684\u5c5e\u6027\u63d0\u5347\u5206\u7c7b\u6548\u679c\u53ef\u4ee5\u4f5c\u4e3a\u540e\u7eed\u7684\u601d\u8003\u3002\u88682\u662f\u52a0\u5165\u89c6\u89c9\u6a21\u6001\u7ec4\u6210\u6837\u672c\u5bf9\u7684\u6d4b\u8bd5\u7ed3\u679c\u3002 \u88682 \u7279\u5f81\u7ea7\u591a\u6a21\u6001\u65b0\u95fb\u68c0\u6d4b\u51c6\u786e\u7387\uff08\u5305\u542b\u89c6\u89c9\u6a21\u6001\uff09 \u968f\u7740\u6a21\u6001\u6570\u91cf\u589e\u591a\uff0c\u9884\u6d4b\u7684\u51c6\u786e\u7387\u4e5f\u54cd\u5e94\u63d0\u5347\u3002\u88683\u5c55\u793a\u4e86\u76f8\u540c\u6a21\u6001\u7ec4\u5408\u65f6\uff0c\u4e0d\u540c\u7ed3\u6784\u7684\u5f71\u54cd\u3002 \u88683 \u4e0d\u540c\u7ed3\u6784\u7684\u68c0\u6d4b\u51c6\u786e\u7387 \u88683\u663e\u793a\uff0c\u5728\u9a8c\u8bc1\u96c6\u4e2dconcatenate\u7684\u6027\u80fd\u8981\u4f18\u4e8epairwise product\uff0c\u6211\u4eec\u63d0\u51fa\u7684mix-2\u7ed3\u6784\u8981\u4f18\u4e8e\u5176\u4ed6\u5f62\u5f0f\u7684\u7279\u5f81\u878d\u5408\u3002\u5728\u6bd4\u8d5b\u5b9e\u9645\u6d4b\u8bd5\u65f6\uff0cmix-1\u548cmix-2\u5747\u8981\u4f18\u4e8e\u5355\u4e00\u7684\u878d\u5408\u65b9\u5f0f\uff0c\u5206\u6790\u6570\u636e\u6211\u4eec\u53d1\u73b0\uff0c\u8bad\u7ec3\u96c6\u4e2d\u6837\u672c\u6709\u4e00\u5b9a\u91cd\u590d\u6027\uff0c\u5373\u6837\u672c\u7684\u6587\u672c\u5185\u5bb9\u662f\u76f8\u540c\u7684\u3002\u56e0\u6b64\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u5206\u5e03\u53ef\u80fd\u5b58\u5728\u4e00\u5b9a\u504f\u5dee\uff0c\u6a21\u578b\u53ef\u80fd\u51fa\u73b0\u8fc7\u62df\u5408\u73b0\u8c61\uff0c\u56e0\u6b64\u5b9e\u9645\u5e94\u7528\u65f6\u53ef\u6839\u636e\u95ee\u9898\u548c\u6570\u636e\u7684\u7279\u70b9\uff0c\u9009\u62e9\u5408\u9002\u7684\u878d\u5408\u7ed3\u6784\u3002\u6700\u540e\u6d4b\u8bd5\u5206\u6570\u7ea7\u7684\u878d\u5408\uff0c\u7ed3\u679c\u5982\u88684\u6240\u793a\u3002 \u88684 \u5206\u6570\u7ea7\u878d\u5408\u7684\u5206\u7c7b\u51c6\u786e\u7387 \u53ef\u4ee5\u770b\u5230\uff0c\u5206\u6570\u7ea7\u7684\u878d\u5408\u6548\u679c\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8981\u4f18\u4e8e\u7279\u5f81\u7ea7\u7684\u878d\u5408\u3002\u4f46\u662f\uff0c\u5728\u5b9e\u9645\u6d4b\u8bd5\u65f6\u540c\u6837\u7ed3\u679c\u4f1a\u4e0b\u964d\uff0c\u5206\u6790\u539f\u56e0\uff0c\u6211\u4eec\u8ba4\u4e3a\u540c\u6837\u53ef\u80fd\u51fa\u73b0\u4e86\u8fc7\u62df\u5408\u7684\u73b0\u8c61\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u95ee\u9898\u4e2d\u53ef\u6839\u636e\u60c5\u51b5\u8fdb\u884c\u9009\u62e9\u3002 \u57fa\u4e8eBERT\u548cCNN\u7684\u591a\u6a21\u578b\u865a\u5047\u65b0\u95fb\u5206\u7c7b","title":"\u591a\u6a21\u6001\u5185\u5bb9\u8d28\u91cf\u4e4b\u5047\u65b0\u95fb"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#_1","text":"\u5047\u65b0\u95fb\u662f\u4e00\u4e2a\u5fae\u89c2\u9886\u57df\u95ee\u9898, \u548c\u8c23\u8a00\u5206\u7c7b, \u4e8b\u5b9e\u5224\u65ad, \u6807\u9898\u515a\u68c0\u6d4b, \u5783\u573e\u5185\u5bb9\u6316\u6398\u7b49\u90fd\u6bd4\u8f83\u7c7b\u4f3c, \u5b8f\u89c2\u4e0a\u90fd\u5c5e\u4e8e\u5185\u5bb9\u8d28\u91cf\u7684\u9886\u57df, \u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u901a\u7528, \u6570\u636e\u96c6\u53ef\u516c\u7528, \u672c\u6587\u4ecb\u7ecd\u51e0\u7bc7\u6709\u4ee3\u8868\u6027\u7684\u5047\u65b0\u95fb\u8bba\u6587, \u4ece\u4e2d\u5b66\u4e60\u591a\u6a21\u6001, \u57fa\u4e8e\u7f51\u7edc, \u7279\u5f81\u6316\u6398\u7b49\u4efb\u52a1\u5728\u5047\u65b0\u95fb\u9886\u57df\u7684\u4e00\u4e9b\u5b9e\u6218\u3002","title":"\u591a\u6a21\u6001\u5185\u5bb9\u8d28\u91cf\u4e4b\u5047\u65b0\u95fb"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#_2","text":"\u6839\u636e[Kai Shu, 2017]\u7684\u5212\u5206, \u6a21\u578b\u5728\u8fd9\u91cc\u4e3b\u8981\u6709\u4e24\u7c7b, 1 \u57fa\u4e8e\u5185\u5bb9\u7684\u5efa\u6a21 2\u57fa\u4e8e\u793e\u4ea4\u7f51\u7edc\u7684\u6a21\u578b\u3002","title":"\u6a21\u578b\u6784\u5efa"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#1","text":"\u67091.1\u9762\u5411\u77e5\u8bc6\u548c\u4e8b\u5b9e\u5e93\u7684\u548c1.2\u9762\u5411\u884c\u6587\u98ce\u683c\u7684","title":"1.\u57fa\u4e8e\u5185\u5bb9\u7684\u5efa\u6a21"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#11","text":"\u200b \u4e8b\u5b9e\u68c0\u67e5\u7cfb\u7edf\u6709\u70b9\u7c7b\u4f3c\u8c23\u8a00\u9274\u522b\u7cfb\u7edf, \u5bf9\u6587\u7ae0\u63cf\u8ff0\u7684\u89c2\u70b9\u548c\u5ba2\u89c2\u4e8b\u7269\u8fdb\u884c\u8f83\u771f, \u7c7b\u4f3cQA\u7cfb\u7edf\u662f\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684NLP\u9886\u57df, \u5305\u62ec\u77e5\u8bc6\u8868\u793a, \u77e5\u8bc6\u63a8\u7406\u3002\u5728\u77e5\u8bc6\u5e93\u6570\u636e\u96c6\u4e0a\u6709\u51e0\u79cd\u5212\u5206\u65b9\u5f0f: 1. \u4e13\u5bb6\u7cfb\u7edf\uff1a \u5404\u4e2a\u9886\u57df\u7684\u4e13\u5bb6\u6784\u5efa\u7684\u77e5\u8bc6\u5e93\uff0c \u663e\u7136\u8fd9\u79cd\u65b9\u5f0f\u7684\u6548\u7387\u548c\u6269\u5c55\u6027\u90fd\u975e\u5e38\u5dee\u3002 \u4e0d\u8fc7\u5982\u679c\u662f\u5782\u76f4\u7c7b\u76ee\uff08\u751f\u7269\uff0c\u5386\u53f2\uff09\u90a3\u6216\u8bb8\u53ef\u4ee5\u5728\u67d0\u4e2a\u5ba2\u89c2\u4e8b\u5b9e\u6bd4\u8f83\u591a\u7684\u7c7b\u76ee\u4e0b\u8fdb\u884c\u5c1d\u8bd5\uff1b 2. \u96c6\u4f53\u667a\u6167\uff1a \u7528\u6237\u96c6\u4f53\u77e5\u8bc6\u7684\u53cd\u9988\u6765\u6784\u5efa\u7684\u4e00\u5957\u77e5\u8bc6\u5e93\u3002 1 \u548c 2 \u6709\u4e86\u4e4b\u540e\u5176\u5b9e\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u68c0\u7d22\u7684\u65b9\u6cd5\uff0c\u6765\u5bf9\u65b0\u7684\u5185\u5bb9\u8fdb\u884c\u76f8\u4f3c\u5ea6\u5224\u65ad\uff0c\u4ece\u800c\u5145\u5206\u5229\u7528\u79ef\u7d2f\u7684\u5386\u53f2\u5185\u5bb9\u63d0\u4f9b\u51fa\u6765\u7684\u7279\u5f81\u6307\u793a\u3002 3. \u57fa\u4e8e\u7b97\u6cd5\u5206\u7c7b\uff1a \u4f7f\u7528\u77e5\u8bc6\u56fe\u8c31\u6216\u8005\u4e8b\u7406\u56fe\u8c31\u6765\u5bf9\u5185\u5bb9\u8fdb\u884c\u771f\u5b9e\u6027\u5224\u65ad\uff0c\u5f53\u524d\u4e3b\u8981\u7684\u5f00\u653e\u77e5\u8bc6\u56fe\u8c31\u6709 DB-pedia \u548c Google Relation Extraction \u6570\u636e\u96c6\u3002 \u8fd9\u4e2a\u9886\u57df\u7684\u95ee\u9898\uff0c\u7c7b\u4f3c NLP \u7684 QA \u95ee\u9898\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003 *[Yuyu Zhang, 2017]* \u7684 VRN\u53d8\u5206\u63a8\u7406\u7f51\u7edc\u3002 \u4f5c\u8005\u901a\u8fc7\u6982\u7387\u6a21\u578b\u6765\u8bc6\u522b\u95ee\u53e5\u4e2d\u7684\u5b9e\u4f53\uff0c\u95ee\u7b54\u65f6\u5728 KB \u4e0a\u505a\u903b\u8f91\u63a8\u7406\uff0c\u4e14\u63a8\u7406\u89c4\u5219\u5c06\u88ab\u5b66\u4e60\u51fa\u6765\u3002\u5373\u53ef\u7528\u4e8e\u505a\u4e8b\u5b9e\u5224\u65ad\u3002 \u5f53\u524d\u8fd9\u4e2a\u65b9\u5411\u6280\u672f\u843d\u5730\u6210\u672c\u9ad8\uff0c\u96be\u5ea6\u8f83\u5927\uff0c\u6548\u679c\u4e5f\u4e0d\u4e00\u5b9a\u7406\u60f3\u3002","title":"1.1 \u9762\u5411\u77e5\u8bc6\u5e93"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#12","text":"\u7528\u6587\u7ae0\u5185\u5bb9\u672c\u8eab\u7684\u884c\u6587\u98ce\u683c\uff0c\u901a\u8fc7\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u5f97\u5230\u53e5\u5b50\u7684\u53e5\u6cd5\u7ed3\u6784\uff0c\u6216\u8005 RST \u4fee\u8f9e\u4f9d\u8d56\u7406\u8bba\u7b49\u5176\u4ed6 NLP \u6df1\u5ea6\u6a21\u578b\u53bb\u6355\u6349\u53e5\u5b50\u6587\u6cd5\u4fe1\u606f\u3002 \u6839\u636e\u6355\u6349\u6587\u672c\u4fe1\u606f\u63cf\u8ff0\u79cd\u7c7b\u7684\u4e0d\u540c\uff0c\u4f5c\u8005\u5206\u4e3a\u4e24\u7c7b\uff0c\u68c0\u6d4b\u6b3a\u9a97\u7a0b\u5ea6\uff0c\u68c0\u6d4b\u63cf\u8ff0\u7684\u4e3b\u89c2\u5ba2\u89c2\u7a0b\u5ea6\uff08\u8d8a\u5ba2\u89c2\u516c\u6b63\u7684\u53ef\u80fd\u6027\u8d8a\u5927\uff09\u4e24\u79cd\u3002\u9707\u60ca\u4f53\u7684\u6807\u9898\u515a\u5c31\u5c5e\u4e8e\u8fd9\u7c7b\u3002 \u5176\u4e2d\uff0c\u5047\u65b0\u95fb\u53ef\u80fd\u7528\u5230\u7684\u7279\u5f81\uff0c\u5305\u62ec\u666e\u901a\u7279\u5f81\u548c\u805a\u5408\u7279\u5f81\u4e24\u5927\u7c7b\u3002\u666e\u901a\u7279\u5f81\u5c31\u662f\u9875\u9762\uff0c\u6587\u672c\uff0c\u56fe\u7247\uff0c\u6807\u9898\u7b49\u5355\u7eaf\u7684\u7279\u5f81 embedding\uff0c\u805a\u5408\u7279\u5f81\u5c31\u662f\u628a\u5404\u4e2a\u666e\u901a\u7279\u5f81\u8fdb\u884c\u7ec4\u5408\u548c\u6709\u76d1\u7763\u7684\u8bad\u7ec3\u6210\u4e00\u4e2a\u4e00\u4e2a\u5b50\u6a21\u578b\u95ee\u9898\u3002\u7136\u540e\u8fd9\u4e9b\u5b50\u6a21\u578b\u7684\u8f93\u51fa\u53c8\u53ef\u4ee5\u4f5c\u4e3a\u805a\u5408\u7279\u5f81\u7528\u5728\u5047\u65b0\u95fb\u9886\u57df\u3002 \u4e0b\u56fe\u5c31\u662f\u6211\u4eec\u4f7f\u7528\u7684\u4e3b\u8981\u7279\u5f81\u96c6\uff1a","title":"1.2 \u9762\u5411\u5185\u5bb9\u98ce\u683c"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#12_1","text":"\u5206\u4e3a\u4e24\u79cd\uff0c\u57fa\u4e8e \u7acb\u573a \u548c\u57fa\u4e8e \u4f20\u64ad\u884c\u4e3a \u7684\u3002 \u524d\u8005\u4e3b\u8981\u662f\u57fa\u4e8e\u7528\u6237\u5bf9\u5185\u5bb9\u7684\u64cd\u4f5c\uff08\u8bc4\u8bba\uff0c\u70b9\u8d5e \uff0c\u4e3e\u62a5\u7b49\u7b49\uff09\u6784\u5efa\u77e9\u9635\u6216\u8005\u56fe\u6a21\u578b\u3002 \u800c\u57fa\u4e8e\u4f20\u64ad\u884c\u4e3a\u5bf9\u5bf9\u8c61\u5efa\u6a21\uff0c\u7c7b\u4f3c PageRank \u7684\u884c\u4e3a\u4f20\u9012\u3002\u4e0b\u9762\u4ecb\u7ecd\u7684 *News Verification by Exploiting Conflicting Social Viewpoints in Microblogs* \u4e00\u6587\u5c31\u662f\u8fd9\u79cd\u7c7b\u578b \u3002 \u5bf9\u865a\u5047\u65b0\u95fb\u7684\u4f20\u64ad\u6e38\u8d70\u8f68\u8ff9\u8ddf\u8e2a\uff0c \u4ee5\u53ca\u901a\u8fc7\u56fe\u6a21\u578b\u548c\u6f14\u5316\u6a21\u578b\u4e2d\u9488\u5bf9\u7279\u5b9a\u5047\u65b0\u95fb\u7684\u8fdb\u4e00\u6b65\u8c03\u67e5\uff1b \u8bc6\u522b\u865a\u5047\u65b0\u95fb\u7684\u5173\u952e\u4f20\u64ad\u8005\uff0c\u5bf9\u4e8e\u51cf\u8f7b\u793e\u4ea4\u5a92\u4f53\u7684\u4f20\u64ad\u8303\u56f4\u81f3\u5173\u91cd\u8981\u3002 \u5206\u53c9\u4f20\u64ad\uff1a [Benjamin D. Horne and Sibel Adal\u0131,2017] \u901a\u8fc7\u624b\u5de5\u6784\u5efa\u4e86\u5927\u91cf\u7684\u7279\u5f81\uff0c\u4f7f\u7528\u5355\u56e0\u7d20\u65b9\u5dee\u5206\u6790\u548c\u79e9\u548c\u68c0\u9a8c\u5bf9\u7279\u5f81\u8fdb\u884c\u6316\u6398\u3002 \u53d1\u73b0\u771f\u65b0\u95fb\u6587\u7ae0\u660e\u663e\u957f\u4e8e\u5047\u65b0\u95fb\u6587\u7ae0\uff0c\u5047\u65b0\u95fb\u5f88\u5c11\u4f7f\u7528\u6280\u672f\u8bcd\u6c47\uff0c\u66f4\u5c11\u7684\u6807\u70b9\u7b26\u53f7\uff0c\u66f4\u5c11\u7684\u5f15\u53f7\u548c\u66f4\u591a\u7684\u8bcd\u6c47\u662f\u5197\u4f59\u7684\u3002\u53e6\u5916\u6807\u9898\u4e5f\u6709\u660e\u663e\u7684\u4e0d\u540c\uff0c\u5047\u65b0\u95fb\u7684\u6807\u9898\u4f1a\u66f4\u957f\uff0c\u66f4\u559c\u6b22\u589e\u52a0\u540d\u8bcd\u548c\u52a8\u8bcd\u3002\u771f\u7684\u65b0\u95fb\u901a\u8fc7\u8ba8\u8bba\u6765\u8bf4\u670d\uff0c\u5047\u65b0\u95fb\u901a\u8fc7\u542f\u53d1\u6765\u8bf4\u670d\u3002 \u7c7b\u4f3c\u7684\u5185\u5bb9\u5206\u6790\u8fd8\u6709\uff1a Automatic Detection of Fake News \u3002 [z.zhao et, 2018] \u53d1\u73b0\u5927\u591a\u6570\u4eba\u8f6c\u53d1\uff08\u7ea2\u70b9\uff09\u771f\u5b9e\u65b0\u95fb\u662f\u4ece\u4e00\u4e2a\u96c6\u4e2d\u7684\u6765\u6e90\uff08\u7eff\u70b9\uff09\u3002\u800c\u865a\u5047\u65b0\u95fb\u901a\u8fc7\u4eba\u4eec\u8f6c\u53d1\u5176\u4ed6\u8f6c\u53d1\u8005\u6765\u4f20\u64ad\u7684\u3002 \u5927\u591a\u6570\u4eba\u8f6c\u53d1\uff08\u7ea2\u70b9\uff09\u771f\u5b9e\u65b0\u95fb\u662f\u4ece\u4e00\u4e2a\uff0c\u96c6\u4e2d\u7684\u6765\u6e90\uff08\u7eff\u70b9\uff09\u3002\u800c\u865a\u5047\u65b0\u95fb\u901a\u8fc7\u4eba\u4eec\u8f6c\u53d1\u5176\u4ed6\u8f6c\u53d1\u8005\u6765\u4f20\u64ad\u7684\u3002","title":"1.2 \u57fa\u4e8e\u793e\u4ea4\u7f51\u7edc\u5efa\u6a21"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#4","text":"[Kai Shu, 2017] \u6587\u7ae0\u603b\u7ed3\u4e86\u5047\u65b0\u95fb\u7684\u51e0\u4e2a\u4e3b\u8981\u7684\u7814\u7a76\u65b9\u5411\u3002 \u6570\u636e\u65b9\u9762\u7684\u7814\u7a76\u5de5\u4f5c\uff1a \u73b0\u5728\u8fd8\u6ca1\u6709\u6807\u51c6\u7684\u6d4b\u8bc4\u6570\u636e\u96c6\uff0c\u8fd9\u662f\u9700\u8981\u53bb\u5efa\u7acb\u7684\u3002\u518d\u6709\u5c31\u662f\u901a\u8fc7\u4f20\u64ad\u7279\u6027\u53bb\u66f4\u65e9\u7684\u68c0\u6d4b\u5047\u65b0\u95fb\u3002\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u4ece\u5fc3\u7406\u5b66\u89d2\u5ea6\u53bb\u505a\u5047\u65b0\u95fb\u7684\u610f\u56fe\u68c0\u6d4b\uff0c\u8fd9\u4e2a\u89d2\u5ea6\u8fc7\u53bb\u5f80\u5f80\u88ab\u5ffd\u7565\u3002 \u6a21\u578b\u7279\u5f81\u65b9\u9762\u7684\u7814\u7a76\u5de5\u4f5c\uff1a \u5f80\u5f80\u4f1a\u4f7f\u7528\u7528\u6237\u7684\u753b\u50cf\u7279\u5f81\uff0c\u5185\u5bb9\u7279\u5f81\uff08NLP\u3001CV\uff09\u7ed3\u5408\u6df1\u5ea6\u5b66\u4e60\uff0c\u8fd8\u6709\u4f20\u64ad\u7f51\u7edc\u7279\u5f81\uff0c\u6bd4\u5982\u7528\u6237\u548c\u5185\u5bb9\u4e4b\u95f4\u7684\u5173\u7cfb\u6784\u9020\u51fa\u6765\u7684\u7f51\u7edc\u7279\u5f81\uff0c\u7f51\u7edc\u672c\u8eab\u7684 embedding \u8868\u73b0\u3002 \u6a21\u578b\u65b9\u9762\u7684\u7814\u7a76\u5de5\u4f5c\uff1a \u7b2c\u4e00\u4e2a\u5c31\u662f\u7279\u5f81\u4e4b\u95f4\u7684\u7ec4\u5408\u3002\u7b2c\u4e8c\u662f\u9884\u6d4b\u76ee\u6807\u7684\u53d8\u5316\u3002\u7b2c\u4e09\u4e0d\u8bba\u662f\u4ece\u5185\u5bb9\u6e90\uff0c\u8fd8\u662f\u6587\u7ae0\u98ce\u683c\uff0c\u6216\u8005\u5185\u5bb9\u7684\u53cd\u9988\uff08\u8bc4\u8bba\uff0c\u7b49\u4e92\u52a8\u884c\u4e3a\uff09\u90fd\u6709\u5404\u81ea\u7684\u9650\u5236\uff0c\u7ec4\u5408\u8fd9\u4e9b\u6a21\u578b\u3002\u6700\u540e\u5c31\u662f\u7a7a\u95f4\u53d8\u6362\uff0c\u628a\u7279\u5f81\u53d8\u6362\u5230\u53e6\u5916\u7684 latent \u8bed\u4e49\u7a7a\u95f4\u5c1d\u8bd5\u89e3\u51b3\u3002","title":"\u5047\u65b0\u95fb\u76844\u4e2a\u7814\u7a76\u65b9\u5411"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#_3","text":"\u6b64\u90e8\u5206\u6765\u81ea\u5916\u7f51\u6574\u7406\uff1a\u4f5c\u8005\uff1aDilicelSten \u539f\u6587\uff1ahttps://blog.csdn.net/Totoro1745/article/details/84678858","title":"\u6570\u636e\u96c6"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#fakenewsnet","text":"\u4e0b\u8f7d\u94fe\u63a5\uff1ahttps://github.com/KaiDMML/FakeNewsNet \u8bf4\u660e\uff1a\u8be5\u6570\u636e\u96c6\u5305\u542b\u65b0\u95fb\u5185\u5bb9\u548c\u6b63\u786e\u6807\u6ce8\u771f\u5047\u65b0\u95fb\u6807\u7b7e\u7684\u793e\u4f1a\u8bed\u5883\u7279\u5f81\u3002 \u4f7f\u7528\u8bba\u6587\uff1a \uff081\uff09A Stylometric Inquiry into Hyperpartisan and Fake News \uff082\uff09Exploiting Tri-Relationship for Fake News Detection","title":"FakeNewsNet"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#buzzfeednews","text":"\u94fe\u63a5\uff1ahttps://github.com/BuzzFeedNews/2016-10-facebookfact-check/tree/master/data \u8bf4\u660e\uff1a\u8be5\u6570\u636e\u96c6\u5305\u62ec\u5b8c\u6574\u7684Facebook\u65b0\u95fb\u53d1\u5e03\u4e8e\u63a5\u8fd12016\u5e74\u7f8e\u56fd\u5927\u9009\u4ece9\u670819\u65e5\u523023\u65e5\u4ee5\u53ca9\u670826\u65e5\u548c27\u65e5\u3002","title":"BuzzFeedNews"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#liar","text":"\u94fe\u63a5\uff1ahttp://www.cs.ucsb.edu/~william/software.html \u8bf4\u660e\uff1a\u8be5\u6570\u636e\u96c6\u662f\u4ecePolitiFact\u6536\u96c6\uff0c\u5305\u62ec\u7b80\u77ed\u9648\u8ff0\uff0c\u4f8b\u5982\u65b0\u95fb\u7a3f\uff0c\u7535\u89c6 \u6216\u7535\u53f0\u91c7\u8bbf\uff0c\u7ade\u9009\u6f14\u8bb2\u7b49\uff0c\u5e76\u5305\u542b\u5143\u6570\u636e\u3002 \u4f7f\u7528\u8bba\u6587\uff1a \uff081\uff09\u201cLiar,LIar Pants on Fire\u201d:A New Benchmark Dataset for Fake News Detection \uff082\uff09Multi-Source Multi-Class Fake News Detection","title":"LIAR"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#bs-detector","text":"\u94fe\u63a5\uff1ahttps://github.com/bs-detector/bs-detector \u8bf4\u660e\uff1a\u4e3a\u65b0\u95fb\u6d4f\u89c8\u5668\u5bfc\u51fa\u7684\u6570\u636e\u96c6\uff0c\u5305\u542b\u65b0\u95fb\u5185\u5bb9\u548c\u6b63\u786e\u6807\u6ce8\u771f\u5047\u65b0\u95fb\u6807\u7b7e\u3002","title":"BS Detector"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#credbank","text":"\u94fe\u63a5\uff1ahttp://compsocial.github.io/CREDBANK-data/ \u8bf4\u660e\uff1a \u63a8\u7279 \u7684\u5927\u6570\u636e\u96c6\uff0c\u5305\u542b\u65b0\u95fb\u5185\u5bb9\u548c\u4eba\u5de5\u6807\u6ce8\u6807\u7b7e\u3002 \u6570\u636e\u96c6\u6d89\u53ca\u7684\u5185\u5bb9\u5982\u4e0b\uff1a","title":"CREDBANK"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#twitter-and-weibo-dataset","text":"\u94fe\u63a5\uff1ahttps://github.com/majingCUHK/Rumor_RvNN http://alt.qcri.org/\u02dcwgao/data/rumdect.zip \u8bf4\u660e\uff1a5000\u6761\u8a00\u8bba\u5e26\u7740500w\u7684\u8f6c\u53d1\u91cf \u4f7f\u7528\u8bba\u6587\uff1a \uff081\uff09CSI: A Hybrid Deep Model for Fake News Detection \uff082\uff09Detecting rumors from microblogs with recurrent neural network \uff083\uff09Early Detection of Fake News on Social Media Through Propagation Path Classification with Recurrent and Convolutional Networks","title":"Twitter and Weibo DataSet"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#twitter15-twitter16","text":"\u94fe\u63a5\uff1ahttps://www.dropbox.com/s/7ewzdrbelpmrnxu/rumdetect2017.zip?dl=0 \u8bf4\u660e\uff1a\u8c23\u8a00\u6570\u636e \u4f7f\u7528\u8bba\u6587\uff1a Detect Rumors in Microblog Posts Using Propagation Structure via Kernel Learning","title":"Twitter15 Twitter16"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#_4","text":"\u94fe\u63a5\uff1ahttp://www.cs.jhu.edu/svitlana/ \u8bf4\u660e\uff1a\u5177\u4f53\u65f6\u95f4\u4e8b\u4ef6\u6240\u641c\u96c6\u7684\u6570\u636e\u96c6 \u4f7f\u7528\u8bba\u6587\uff1a Separating Facts from Fiction Linguistic Models to Classify Suspicious and Trusted News Posts on Twitter","title":"\u63a8\u7279\u8bed\u6599"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#_5","text":"\u94fe\u63a5\uff1ahttps://drive.google.com/open?id=0B3e3qZpPtccsMFo5bk9Ib3VCc2c \u8bf4\u660e\uff1a\u6587\u672c+\u56fe\u50cf \u4f7f\u7528\u8bba\u6587 TI-CNN: Convolutional Neural Networks for Fake News Detection","title":"\u5305\u542b\u56fe\u7684\u5047\u65b0\u95fb\u6570\u636e\u96c6"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#_6","text":"\u94fe\u63a5\uff1ahttp://mia.kaist.ac.kr/publications/rumor. \u8bf4\u660e\uff1a\u6570\u636e\u96c6\u5305\u542b\u4e09\u4e2a\u7ef4\u5ea6\uff1a\u65f6\u95f4\uff0c\u7ed3\u6784\u548c\u8bed\u8a00 \u4f7f\u7528\u8bba\u6587\uff1a Prominent features of rumor propagation in online social media","title":"\u8c23\u8a00\u6570\u636e\u96c6"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#_7","text":"\u5728\u5de5\u4e1a\u754c\u6bd4\u5982\u4e92\u8054\u7f51\u516c\u53f8\u89e3\u51b3\u8be5\u7c7b\u95ee\u9898\u4e3b\u8981\u8fd8\u662f\u901a\u8fc7\u6784\u5efa pipeline\uff0c\u878d\u5408\u591a\u4e2a\u6a21\u578b\uff1a\u5185\u5bb9\u5411\u6a21\u578b\u96c6\uff0c\u7528\u6237\u5411\u6a21\u578b\u96c6\uff0c\u7ed3\u5408\u53f7\u4e3b\u53d1\u5e03\u8005\u7279\u5f81\uff0c\u5185\u5bb9\u4ea7\u751f\u7684\u7528\u6237\u884c\u4e3a\u7279\u5f81\u7b49\u7efc\u5408\u6784\u5efa\u4e00\u5957\u4f53\u7cfb\u8fdb\u884c\u89e3\u51b3\u3002 \u6211\u4eec\u5728\u5b9e\u9645\u63a7\u5236\u7684\u65f6\u5019\u7ed3\u5408\u4e86\u51e0\u5341\u4e2a\u9759\u6001 + \u52a8\u6001\u7279\u5f81\u6a21\u578b\u548c\u77e5\u8bc6\u5e93\u8fdb\u884c\u53ec\u56de pop \u4eba\u5de5\u9a8c\u8bc1\u3002 \u7136\u800c\u548c\u5de5\u4e1a\u754c\u5904\u7406\u95ee\u9898\u4e0d\u540c\u7684\u662f\uff0c\u9876\u4f1a\u7684\u76f8\u5173\u8bba\u6587\u4e3b\u8981\u6839\u636e\u6570\u636e\u96c6\u7684\u7279\u70b9\uff0c\u901a\u8fc7\u5355\u6a21\u578b\u8fdb\u884c\u5efa\u6a21\u89e3\u51b3\u3002 \u4e3b\u8981\u7684\u53c2\u8003\u7684\u7ef4\u5ea6\u6709\uff1a 1\uff09\u5185\u5bb9\u672c\u4f53 \uff1b2\uff09\u5185\u5bb9\u751f\u4ea7\u6e90\uff08\u6e90\uff0c\u5185\u5bb9\u53d1\u5e03\u8005\uff09\uff1b3\uff09\u5185\u5bb9\u9605\u8bfb\u8005\uff08\u7528\u6237\uff09\u53ca\u5176\u884c\u4e3a\uff08\u8ba2\u9605\uff0c\u8bc4\u8bba\uff09\u4e09\u5927\u7c7b\uff0c\u591a\u4e2a\u5c0f\u7c7b\u7684\u7279\u5f81\u8fdb\u884c\u878d\u5408\u5904\u7406\u3002 \u6bd4\u5982\u901a\u8fc7\u7aef\u5230\u7aef\u7684\u6df1\u5ea6\u5b66\u4e60\uff0c\u57fa\u4e8e\u6982\u7387\u5206\u5e03\u7684\u7279\u5f81\u6316\u6398\uff0c\u6784\u5efa\u65b0\u9896\u7684\u7efc\u5408\u7c7b\u76ee\u6807\u51fd\u6570\u7b49\u5927\u4e00\u7edf\u7684\u65b9\u5f0f\u8fdb\u884c\u5c1d\u8bd5\u89e3\u51b3\u3002\u5f88\u591a\u6a21\u578b\u5f80\u5f80\u53ea\u80fd\u5728\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u5b9e\u8df5\u3002\u6211\u4eec\u4ecb\u7ecd\u51e0\u7bc7\u5b66\u672f\u9886\u57df\u76f8\u5173\u8f83\u65b0\u8bba\u6587\u3002 \u8fd9\u7bc7\u662f CIKM 2017 \u7684 long paper\u3002 \u4f5c\u8005\u8ba4\u4e3a\u901a\u8fc7\u6784\u5efa\u793e\u4ea4\u56fe\u8c31\u5e76\u4e0d\u4fbf\u5229\uff0c\u6784\u5efa\u4e00\u4e9b\u5047\u65b0\u95fb\u7684\u7279\u5f81\u4e5f\u9700\u8981\u5927\u91cf\u4eba\u5de5\u77e5\u8bc6\u3002\u6587\u7ae0\u8ba4\u4e3a\u4e4b\u524d\u7684\u68c0\u6d4b\u65b9\u6cd5\u4e0d\u80fd\u5f88\u597d\u7684\u4e00\u6b21\u6574\u5408\u6b63\u6587\uff08text\uff09\uff0c\u53cd\u9988\uff08response\uff09\uff0c\u6e90\uff08source\uff09\u4e09\u8005\u7684\u7279\u5f81\u3002\u8bba\u6587\u7684\u6570\u636e\u96c6\u6765\u81ea twitter \u548c weibo\uff0cweibo \u4e2d\u7684\u6b63\u6587\u5c31\u662f\u8ba8\u8bba\u7684\u67d0\u4e2a\u8bdd\u9898\uff0c\u800c\u975e\u4e00\u822c\u7684\u6587\u7ae0\uff0c\u53cd\u9988\u5c31\u662f\u4e3b\u9898\u53c2\u4e0e\u8005\u7684\u56de\u590d\uff0c\u6e90\u5c31\u662f\u56de\u590d\u7684\u7528\u6237\u3002 \u6574\u4e2a\u67b6\u6784\u7531\u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a Capture \u6a21\u5757 \u7528\u4e8e\u63d0\u53d6\u4e00\u7bc7\u6b63\u6587\u6240\u6709\u7684\u53cd\u9988\u6587\u672c\u4fe1\u606f\uff0c\u901a\u8fc7 LSTM \u6765\u7ec4\u88c5\u591a\u4e2a\u56de\u590d\u5185\u5bb9\u3002 Scoure \u6a21\u5757 \u901a\u8fc7\u6784\u5efa\u7528\u6237\u5173\u7cfb\u7f51\u7edc\u964d\u7eac\u540e\u8ba1\u7b97\u5f97\u5230\u4e00\u5bf9si\u548cy^i \uff0csi\u7528\u4e8e\u540e\u7eed\u7f51\u7edc\u8ba1\u7b97\uff0cy^i \u4e5f\u53ef\u7528\u4e8e\u5355\u72ec\u7684\u7528\u6237\u5206\u6790\u3002 \u5982\u4e0a\u56fe\u7684 Capture \u90e8\u5206\u7528\u6765\u62bd\u53d6\u6587\u7ae0\u548c\u7528\u6237\u7684\u4f4e\u7ef4\u5ea6\u8868\u793a \uff0c\u7528\u4e00\u4e2a RNN \u6765\u62bd\u53d6\u6b63\u6587\uff08text\uff09\u7684\u5411\u91cf\u3002 \u8fd9\u7bc7\u662f\u4e2d\u79d1\u9662\u8ba1\u7b97\u673a\u7814\u7a76\u6240\u7684\u91d1\u5fd7\u5a01\u548c\u66f9\u5a1f\u535a\u58eb\u7684\u7814\u7a76\u5de5\u4f5c\uff0c\u53d1\u8868\u5728 AAAI 2016\u3002 Step 1\uff1a\u4f5c\u8005\u901a\u8fc7\u4e00\u4e2a Topic \u6a21\u578b\u6765\u8fdb\u884c\u51b2\u7a81\u7684\u89c2\u70b9\u6316\u6398\u3002 \u901a\u8fc7\u5bf9\u53d1\u5e16\u7684\u652f\u6301\u548c\u53cd\u5bf9\u884c\u4e3a\u6784\u9020\u4fe1\u7528\u7f51\u7edc\uff08Credibility NetWork\uff09\uff0c\u4f5c\u8005\u8ba4\u4e3a\u6bcf\u4e00\u4e2a\u5e16\u5b50\uff08tweet\uff09\u90fd\u662f\u7531\u4e00\u7ec4\u6df7\u5408\u7684\u4e3b\u9898 topic\uff0c\u548c\u5bf9\u67d0\u4e2a\u7279\u5b9a\u4e3b\u9898 topic \u591a\u79cd\u89c2\u70b9 viewpiont \u7ec4\u6210\u3002 \u6bcf\u4e00\u4e2a\u4e3b\u9898-\u89c2\u70b9\uff08topic-viewpoint \uff09pair\uff0c\u5b83\u7684\u5206\u5e03\u53c2\u6570\u6765\u81ea Dirichlet \u5206\u5e03 \u3002k \u8868\u793a topic \u7ef4\u5ea6\uff0cl \u8868\u793a viewpoint \u7ef4\u5ea6\u3002 \\1. \u6bcf\u4e00\u4e2a\u5e16\u5b50\uff0c\u7ec4\u6210\u5b83\u7684\u6240\u6709 topic\uff0c\u7b26\u5408\u4e00\u4e2a\u53c2\u6570\u4e3a \u03b8t \u7684 Dirichlet \u5206\u5e03 \u3002 \\2. \u540c\u6837\u5bf9\u6240\u6709\u53ef\u80fd\u7684 topic\uff0c\u7ec4\u6210\u5b83\u7684\u6240\u6709\u7684 viewpoint \u540c\u6837\u7b26\u5408\u4e00\u4e2a\u53c2\u6570\u4e3a \u03c8tk \u7684 Dirichlet \u5206\u5e03\u3002 \u7136\u540e\u600e\u4e48\u751f\u6210\u6587\u7ae0\u5462\uff0c\u5c31\u662f\u901a\u8fc7 \u03b8t \u4e3a\u53c2\u6570\u7684\u591a\u9879\u5f0f\u5206\u5e03\u4e2d\u5f97\u5230\u4e3b\u9898\uff0c\u4ece \u03c8tk \u7684\u591a\u9879\u5f0f\u5206\u5e03\u4e2d\u5f97\u5230\u89c2\u70b9 Vtn\uff0c\u7531\u4e8e\u8fd9\u91cc\u5df2\u7ecf\u786e\u5b9a\u4e86 \u03c8tk \u7684 k\uff0c\u5c31\u662f\u4e3b\u9898 k=Ztn\uff0c\u6240\u4ee5\u5c31\u662f \uff0cl \u5c31\u662f Vtn\u3002 \u90a3\u6700\u7ec8\u4e00\u4e2a tweet \u7684 topic-viewpoint \u751f\u6210\u7684\u53c2\u6570 \u03a6kl \u5c31\u53ef\u4ee5\u5199\u6210 \uff0c\u5c31\u662f\u4ea7\u751f\u81ea\u591a\u9879\u5f0f\u5206\u5e03 \u3002 \u5982\u679c\u4e00\u4e2a\u6765\u81ea\u540c\u4e00\u4e2a\u4e3b\u9898\u4e0b\u9762\u7684\u591a\u4e2a\u4e3b\u9898-\u89c2\u70b9 pair\uff0c\u4e4b\u95f4\u8ddd\u79bb\u975e\u5e38\u5927\uff08\u8bbe\u5b9a\u503ch\uff09 \u3002\u8ddd\u79bb\u91c7\u7528 Jensen-Shannon Distance\uff08JSD\uff09\uff0c\u5176\u5b9e JSD \u662f KL Divergence\uff08Dkl\uff09\u7684\u7b49\u4ef7\u6a21\u5f0f\u3002 \u5177\u4f53\u51b2\u7a81\u89c2\u70b9\u6316\u6398\u5982\u4e0b\uff1a \\1. \u5bf9\u4e00\u4e2a\u65b0\u95fb\u6570\u636e\u96c6\u5efa\u6a21\uff0c\u751f\u6210\u5927\u91cf\u7684 topic-viewpoint pair\uff1b \\2. \u6bd4\u8f83\u540c\u4e00\u4e2a topic \u751f\u6210\u7684 topic-viewpoint \u5bf9\u7684 JSD\uff0c\u5efa\u7acb\u94fe\u63a5\u5173\u7cfb\uff1b \\3. \u7528 Wagstaff et al 2001 \u63d0\u5230\u7684\u5e26\u9650\u5236\u7684 K-means \u7b97\u6cd5\uff0c\u628a\u67d0\u4e2a topic \u4e0b\u7684 viewpoint \u89c2\u70b9\u805a\u5408\u6210\u4e24\u4e2a\u5f7c\u6b64\u51b2\u7a81\u7684\u5806\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u4fe1\u7528\u7f51\u7edc\u7684\u5b9a\u4e49\u3002\u6839\u636e\u4e0a\u9762\u7684\u4e3b\u9898\u6a21\u578b\u6316\u6398\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u53c2\u6570 \u03b8t\uff08\u4e3b\u9898\uff09\u548c\u03c8tk\uff08\u89c2\u70b9\uff09\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a tweet t \u5728 topic k \u4e0a\u7684 viewpoint l \u89c2\u70b9\u4e3a\uff1a \u4e24\u4e24 tweet \u7684\u51fd\u6570\u503c\u5b9a\u4e49\u4e3a Djs \u8868\u793a Jensen-Shannon \u8ddd\u79bb\u3002wij \u5c31\u662f f(ti,tj) \u7684\u77e9\u9635\u3002 \u6587\u4e2d\u5b9a\u4e49 loss function \u5982\u4e0b\uff1a \u5176\u4e2d \u7684 C(ti) \u8868\u793a tweet ti \u7684\u4fe1\u7528\u503c\uff0c\u662f\u9700\u8981\u5b66\u4e60\u7684\u53c2\u6570\u3002 \u5177\u4f53\u6c42\u5bfc\u548c\u8bc1\u660e\u7f51\u7edc\u53ef\u6536\u655b\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\u8bba\u6587\uff0c\u6700\u7ec8\u5f97\u5230\u6bcf k \u8f6e\u8fed\u4ee3\u7684\u8868\u8fbe\u5f0f\uff1a \u8bba\u6587\u5f00\u59cb\u5148\u901a\u8fc7\u5927\u91cf\u6570\u636e\u5206\u6790\u6316\u6398\uff0c\u53d1\u73b0\u5e16\u5b50\u5185\u5bb9\uff0c\u4f5c\u8005\u548c\u4e3b\u9898\u4e09\u8005\u548c\u65b0\u95fb\u7684\u771f\u5047\u6709\u5f88\u5f3a\u7684\u5173\u8054\u6027\u3002\u4e8e\u662f\u628a\u4e09\u8005\u653e\u5165\u4e00\u4e2a\u6df1\u5ea6\u6269\u6563\u7f51\u7edc\u4e2d \uff0c\u540c\u65f6\u6700\u5c0f\u5316\u4e09\u8005\u7684\u76ee\u6807\u3002 \u8bba\u6587\u901a\u8fc7\u5b66\u4e60\u663e\u5f0f\u7279\u5f81\uff08Explicit\uff09\u548c\u6f5c\u5728\u7279\u5f81\uff08Latent\uff09\uff0c\u6f5c\u5728\u7279\u5f81\u901a\u8fc7 GRU \u7684 Hidden \u5c42\u548c Fusion \u5c42\u5f97\u5230\uff1a \u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a GDU \u5355\u5143\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u9488\u5bf9\u5e16\u5b50\u6b63\u6587\uff0c\u8fd8\u53ef\u4ee5\u5bf9\u4f5c\u8005\uff0c\u4e3b\u9898\u540c\u65f6\u8fdb\u884c\u5b66\u4e60\u3002 \u5176\u4e2d\uff0c\u4f5c\u8005\u7684 L(Tu) \u5982\u4e0b\uff1a \u5176\u4ed6\u7684 L(Tn) L(Ts) \u662f\u4e00\u6837\u7684\u5f62\u5f0f\u3002 \u6700\u7ec8\u7684\u7f51\u7edc\u67b6\u6784\u4e09\u8005\u76f8\u4e92\u8fde\u63a5\u8d77\u6765\u5982\u4e0b\u56fe\uff1a \u8bba\u6587\u548c\u5176\u4ed6\u65b9\u6cd5\u8fdb\u884c\u4e86\u5bf9\u6bd4\u3002\u6574\u4e2a\u65b9\u6cd5\u6709\u70b9\u7c7b\u4f3c\u56fe\u795e\u7ecf\u7f51\u7edc\u3002 \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4e86 WSDM '19 \uff0c\u4e2a\u4eba\u8ba4\u4e3a\u521b\u65b0\u6027\u5f88\u9ad8\u3002\u628a\u4f5c\u8005\uff08\u6216\u8005\u662f\u53d1\u5e03\u8005\uff09\uff0c\u65b0\u95fb\uff0c\u793e\u4ea4\u7f51\u7edc\u7684\u7528\u6237\uff0c\u548c\u7528\u6237\u76f4\u63a5\u7684\u8ba2\u9605\u884c\u4e3a\uff0c\u6784\u5efa\u4e86 5 \u4e2a\u77e9\u9635\u3002 \u65b0\u95fb\u5185\u5bb9\u77e9\u9635\uff1b\u7528\u6237\u77e9\u9635\uff1b\u7528\u6237-\u65b0\u95fb\u884c\u4e3a\u77e9\u9635\uff0c\u4f5c\u8005-\u65b0\u95fb\u53d1\u5e03\u5173\u7cfb\u77e9\u9635\u3002\u5176\u4e2d\u65b0\u95fb\u5185\u5bb9\u77e9\u9635\uff0c\u548c\u7528\u6237\u77e9\u9635\uff0c\u91c7\u7528 NMF \u8fdb\u884c\u5206\u89e3\u3002 \u7528\u6237-\u65b0\u95fb\u884c\u4e3a\u77e9\u9635\u5206\u89e3\u7684\u76ee\u6807\u662f\uff1a\u9ad8\u4fe1\u7528\u5206\u7684\u7528\u6237\u504f\u597d\u5206\u4eab\u771f\u5b9e\u65b0\u95fb\uff0c\u4f4e\u4fe1\u7528\u5206\u7528\u6237\u504f\u597d\u5206\u4eab\u5047\u65b0\u95fb\u3002 \u4f5c\u8005-\u65b0\u95fb\u53d1\u5e03\u5173\u7cfb\u77e9\u9635\u5206\u89e3\u7684\u76ee\u6807\uff1a\u57fa\u4e8e\u65b0\u95fb\u53d1\u5e03\u8005\u7684\u6f5c\u5728\u7279\u5f81\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ed6\u53d1\u5e03\u7684\u884c\u4e3a\u5f97\u5230\u3002\u6587\u7ae0\u628a\u65b0\u95fb\u53d1\u5e03\u8005\u5206\u4e3a\u5404\u79cd\u515a\u6d3e\u98ce\u683c o \uff0c\u7136\u540e\u7528\u5206\u89e3\u540e\u7684\u77e9\u9635\u62df\u5408\u8fd9\u4e2a\u7279\u5f81\u3002 \u901a\u8fc7\u548c Hadamard \u6b63\u4ea4\u77e9\u9635\u505a\u8fd0\u7b97 \u2299 \u6765\u8861\u91cf\u8bef\u5dee\u5927\u5c0f\u3002 \u6700\u540e\u901a\u8fc7\u628a\u521a\u521a\u51e0\u4e2a\u77e9\u9635\u5f97\u5230\u7684\u5206\u89e3\u77e9\u9635\u8fdb\u884c\u8fd0\u7b97\uff0c\u6700\u7ec8\u76ee\u6807\u662f\uff1a \u628a\u6240\u6709\u7684\u77e9\u9635\u5206\u89e3\u76ee\u6807\u548c\u6700\u7ec8\u76ee\u6807\u62fc\u63a5\u8d77\u6765\u5c31\u5f97\u5230\u7684\u6574\u4f53\u76ee\u6807\u51fd\u6570\uff1a \u5177\u4f53\u6c42\u5bfc\u8fc7\u7a0b\u9700\u8981\u4e00\u5b9a\u6570\u5b66\u77e5\u8bc6\uff0c\u5bf9\u8fd9\u7bc7\u8bba\u6587\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u770b\u539f\u6587\u3002","title":"\u76f8\u5173\u8bba\u6587\u4ecb\u7ecd"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#_8","text":"Dean Pomerleau \u548c Delip Rao \u5728 2017 \u5e74\u4e3e\u529e\u4e86\u5047\u65b0\u95fb\u6311\u6218\uff1a Exploring how artificial intelligence technologies could be leveraged to combat fake news. \u6bd4\u8d5b\u5730\u5740\uff1a http://www.fakenewschallenge.org/ \u8bad\u7ec3\u6837\u672c\u548c\u9884\u6d4b\u8f93\u5165\u90fd\u662f\u4e00\u4e2a\u957f\u4e8b\u4ef6\u6807\u9898\u548c\u4e00\u6bb5\u6b63\u6587\u5185\u5bb9\u3002\u8f93\u51fa\u7684\u76ee\u6807\u662f\u6b63\u6587\u5185\u5bb9\u662f\u5bf9\u6807\u9898\u7684\uff1a1\uff09\u8d5e\u540c\uff0c2\uff09\u53cd\u5bf9\uff0c3\uff09\u8ba8\u8bba\uff0c4\uff09\u4e0d\u76f8\u5173\u3002 \u7ec4\u59d4\u4f1a\u8ba4\u4e3a\uff0c\u89c2\u70b9\u68c0\u6d4b\u4efb\u52a1\u548c\u5047\u65b0\u95fb\u4efb\u52a1\u573a\u666f\u662f\u6709\u5f3a\u76f8\u5173\u7684\uff0c\u4ec5\u4ec5\u76f8\u5173\u6216\u4e0d\u76f8\u5173\u4f1a\u6bd4\u8f83\u5bb9\u6613\u3002\u901a\u8fc7\u6b63\u6587\u6765\u5206\u6790\u89c2\u70b9\u662f\u5426\u8d5e\u540c\u6807\u9898\u7684\u5185\u5bb9\u9648\u8ff0\u3002\u7b2c\u4e00\u540d\u91c7\u7528\u4e86\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u548c GBDT \u4e24\u4e2a\u6a21\u578b\u3002\u7b2c\u4e8c\u540d\u91c7\u7528\u4e86\u591a\u79cd\u6a21\u578b\u5f97\u5230\u7279\u5f81\uff08\u5982 NMF\uff0cLDA \uff0cLSI\uff0cunigrams \u7b49\u7b49\uff09\u52a0\u4e0a\u591a\u5c42 MLP\u3002\u8fd9\u6b21\u6bd4\u8d5b\u5176\u5b9e\u53ea\u80fd\u7b97\u5047\u65b0\u95fb\u9886\u57df\u7684\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u5c1d\u8bd5\u3002 [Andreas Hanselowski, 2018] \u8fd9\u7bc7 COLING \u7684 Long Paper \u4e2d\u4f5c\u8005\u5bf9\u8fd9\u6b21\u6bd4\u8d5b\u7684\u524d\u4e09\u540d\u7684\u65b9\u6cd5\u548c\u7279\u5f81\u8868\u73b0\u8fdb\u884c\u4e86\u5206\u6790\uff0c\u63d0\u51fa\u4e86\u81ea\u5df1\u7684\u6539\u8fdb\u65b9\u6848\uff0c\u53d6\u5f97\u4e86\u8be5\u4efb\u52a1 state-of-the-art \u7684\u8868\u73b0\u3002 \u4ed6\u4eec\u7684\u6846\u67b6\u628a\u8bed\u4e49\u4fe1\u606f\u7279\u5f81\u901a\u8fc7 stackLstm \u8868\u5f81\uff0c\u518d\u52a0\u4e0a\u5bf9\u6807\u9898\u548c\u6b63\u6587\u7684\u7279\u5f81\u878d\u5408\uff0c\u5b9e\u9a8c\u8868\u73b0\u5728\u5c0f\u6837\u672c\u7684\u7c7b\u522b\u4e0a\u6709\u660e\u663e\u63d0\u5347\u3002","title":"\u76f8\u5173\u6bd4\u8d5b"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#_9","text":"[1] \u4e00\u6587\u770b\u61c2\u865a\u5047\u65b0\u95fb\u68c0\u6d4b\uff08\u9644\u6570\u636e\u96c6 & \u8bba\u6587\u63a8\u8350\uff09https://zhuanlan.zhihu.com/p/57124028 [1]. Yuyu Zhang, Hanjun Dai, Zornitsa Kozareva, Alexander J. Smola, Le Song. \"Variational Reasoning for Question Answering with Knowledge Graph\". arXiv preprint arXiv:1709.04071, 2017. [2]. Zhiwei Jin, Juan Cao, Yongdong Zhang, and Jiebo Luo. \"News Verification by Exploiting Conflicting Social Viewpoints in Microblogs\". AAAI 2016. [3]. Kai Shu, Suhang Wang, Huan Liu. \"Beyond News Contents: The Role of Social Context for Fake News Detection\". WSDM 2019. [4]. Kai Shu, Amy Sliva, Suhang Wang, Jiliang Tang, Huan Liu. \"Fake News Detection on Social Media: A Data Mining Perspective\". SIGKDD 2017. [5]. William Yang Wang. \u201cLiar, Liar Pants on Fire\u201d: A New Benchmark Dataset for Fake News Detection. ACL 2017. [6]. Natali Ruchansky, Sungyong Seo, Yan Liu. \"CSI: A Hybrid Deep Model for Fake News Detection\". CIKM 2017. [7]. Andreas Hanselowski, Avinesh PVS, Benjamin Schiller, Felix Caspelherr, Debanjan Chaudhuri, Christian M. Meyer, Iryna Gurevych. \"A Retrospective Analysis of the Fake News Challenge Stance Detection Task\". arXiv preprint arXiv:1806.05180, 2018. [8]. Benjamin D. Horne, Sibel Adali. \"This Just In: Fake News Packs a Lot in Title, Uses Simpler, Repetitive Content in Text Body, More Similar to Satire than Real News\". ICWSM 2017.","title":"\u53c2\u8003\u6587\u732e"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#_10","text":"","title":"\u591a\u6a21\u6001\u5185\u5bb9\u7406\u89e3\u7b97\u6cd5\u5728\u65b0\u95fb\u68c0\u6d4b\u4e2d\u7684\u5e94\u7528"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#1_1","text":"\u968f\u7740\u4e92\u8054\u7f51\u7684\u666e\u53ca\uff0c\u7528\u6237\u7684\u751f\u6d3b\u65b9\u5f0f\u4e5f\u53d1\u751f\u4e86\u5f88\u5927\u6539\u53d8\uff0c\u73b0\u4eca\u793e\u4f1a\u4e2d\uff0c\u6211\u4eec\u4ece\u4e92\u8054\u7f51\u4e0a\u83b7\u53d6\u7684\u4fe1\u606f\u8d8a\u6765\u8d8a\u591a\u30022018\u5e74\u9876\u7ea7\u56fd\u9645\u671f\u520a\u300a\u79d1\u5b66\u300b\u6307\u51fa\uff0c\u57282016\u5e74\u7f8e\u56fd\u603b\u7edf\u5927\u9009\u671f\u95f4\u6837\u672c\u9009\u6c11\u5e73\u5747\u6bcf\u4eba\u6bcf\u5929\u8981\u63a5\u89e64\u7bc7\u5047\u65b0\u95fb\uff1b\u8981\u4f20\u64ad\u81f31500\u4e2a\u9009\u6c11\uff0c\u5047\u65b0\u95fb\u7684\u901f\u5ea6\u662f\u771f\u5b9e\u65b0\u95fb\u76846-20\u500d\u3002\u56e0\u6b64\u5229\u7528\u4eba\u5de5\u667a\u80fd\u7684\u65b9\u5f0f\u5bf9\u65b0\u95fb\u771f\u5b9e\u6027\u4f5c\u81ea\u52a8\u6d4b\u8bc4\uff0c\u5bf9\u9650\u5236\u8c23\u8a00\u4f20\u64ad\u6709\u5f88\u5927\u76ca\u5904\u3002\u4ee5\u4e92\u8054\u7f51\u4e3a\u8f7d\u4f53\uff0c\u65b0\u95fb\u901a\u5e38\u5305\u62ec\u6587\u672c\u3001\u56fe\u7247\u3001\u77ed\u89c6\u9891\u7b49\u5185\u5bb9\u4fe1\u606f\uff0c\u540c\u65f6\u8fd8\u6709\u65b0\u95fb\u548c\u7528\u6237\u7684\u5c5e\u6027\u7279\u5f81\uff0c\u672c\u6587\u4ecb\u7ecd\u4e00\u79cd\u5229\u7528\u591a\u6a21\u6001\u6570\u636e\u589e\u5f3a\u865a\u5047\u65b0\u95fb\u68c0\u6d4b\u5bf9\u65b9\u6cd5\uff0c\u6570\u636e\u6765\u6e90\u4e3a[1]\u3002","title":"1. \u80cc\u666f"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#2","text":"\u591a\u6a21\u6001\u4fe1\u606f\u878d\u5408\u901a\u5e38\u5305\u542b\u5404\u6a21\u6001\u6570\u636e\u7279\u5f81\u63d0\u53d6\u3001\u7279\u5f81\u878d\u5408\u3001\u51b3\u7b56\u4e09\u4e2a\u6a21\u5757\uff0c\u5176\u4e2d\u7279\u5f81\u63d0\u53d6\u662f\u5bf9\u56fe\u50cf\u3001\u6587\u672c\u7b49\u6570\u636e\uff0c\u7528\u4e0e\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u63d0\u53d6\u6837\u672c\u7684\u5168\u5c40\u7279\u5f81\uff0c\u4ee5\u4fbf\u540e\u7eed\u878d\u5408\u3002\u5728\u7279\u5f81\u878d\u5408\u90e8\u5206\uff0c\u5bf9\u5404\u6a21\u6001\u7279\u5f81\u8fdb\u884c\u7edf\u4e00\u5316\u3002\u51b3\u7b56\u5219\u662f\u8bad\u7ec3\u4ee5\u4efb\u52a1\u8f93\u51fa\u4e3a\u76ee\u6807\uff08\u5982\u5206\u7c7b\u6807\u7b7e\uff09\u7684\u6a21\u578b\u3002\u795e\u7ecf\u7f51\u7edc\u5177\u6709\u5f3a\u5927\u7279\u5f81\u62bd\u8c61\u529f\u80fd\uff0c\u56e0\u6b64\u7279\u5f81\u878d\u5408\u548c\u51b3\u7b56\uff08\u5206\u7c7b\u5668\u8bad\u7ec3\uff09\u901a\u5e38\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\uff0c\u5373\u7f51\u7edc\u4ee5\u4e0d\u540c\u6a21\u6001\u7279\u5f81\u4f5c\u4e3a\u8f93\u5165\uff0c\u4efb\u52a1\u7ed3\u679c\u4f5c\u4e3a\u8f93\u51fa\u3002\u65b0\u95fb\u68c0\u6d4b\u8fc7\u7a0b\u5982\u56fe1\u6240\u793a\uff0c\u540e\u6587\u5c06\u5206\u522b\u4ecb\u7ecd\u5404\u90e8\u5206\u7684\u5b9e\u73b0\u7ec6\u8282\u3002","title":"2. \u95ee\u9898\u63cf\u8ff0"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#3","text":"\u516c\u5f00\u6570\u636e\u96c6[1]\u4e2d\uff0c\u6bcf\u6761\u6837\u672c\u5305\u62ec9\u79cd\u6570\u636e\uff1a\u6587\u672c\u3001\u56fe\u50cfid\u3001\u65b0\u95fb\u7c7b\u578b\u3001userGender\u3001userFollowCount\u3001userFansCount\u3001userWeiboCount\u3001userLocation\u3001userDescription\uff0c\u6b64\u5916\u6bcf\u6761\u6837\u672c\u6709\u552f\u4e00\u7684id\uff0c\u8bad\u7ec3\u65f6\u6bcf\u6761id\u6709\u4e8c\u503c\u6807\u7b7e\uff0c0\u8868\u793a\u771f\u5b9e\u65b0\u95fb\uff0c1\u8868\u793a\u865a\u5047\u65b0\u95fb\u3002\u5176\u4e2d\u6587\u672c\u4e0d\u4e3a\u7a7a\uff0c\u56fe\u50cfid\u53ef\u80fd\u4e3a\u7a7a\u6216\u591a\u4e2a\uff0c\u5176\u4ed6\u5c5e\u6027\u53ef\u80fd\u4e3a\u7a7a\uff08nan\uff09\u3002 \u63d0\u53d6\u7279\u5f81\u65f6\uff0c\u5c06\u4e0a\u8ff0\u6570\u636e\u5206\u4e3a\u56db\u79cd\u7c7b\u578b\uff0c\u4e0b\u9762\u5206\u522b\u4ecb\u7ecd\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u63d0\u53d6\u65b9\u5f0f\u3002 1\uff09\u6587\u672c\u6570\u636e\uff1a\u4f5c\u4e3a\u65b0\u95fb\u5185\u5bb9\u7406\u89e3\u7684\u4e3b\u8981\u6a21\u6001\uff0c\u6211\u4eec\u91c7\u7528bert\u5de5\u5177\uff0c\u7528chinese_L-12_H-768_A-12\u63d0\u4f9b\u5bf9\u9884\u8bad\u7ec3\u6a21\u578b\u548c\u8bcd\u5e93\u5bf9\u6bcf\u6761\u6587\u672c\u63d0\u53d6sentence_embedding\uff0c\u6700\u7ec8\u6bcf\u6761\u6587\u672c\u88ab\u6620\u5c04\u4e3a768\u7ef4\u5411\u91cf\u3002 2\uff09\u56fe\u50cf\u6570\u636e\uff1a\u4e0e\u6587\u672c\u7c7b\u4f3c\uff0c\u56fe\u50cf\u6570\u636e\u4e5f\u5305\u542b\u4e86\u5185\u5bb9\u76f8\u5173\u7684\u8bed\u4e49\u6570\u636e\uff0c\u6211\u4eec\u91c7\u7528alexnet\u7ed3\u6784\uff0c\u548c\u5176\u5728imagenet-1000\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u56fe\u50cf\u7279\u5f81\u8fdb\u884c\u63d0\u53d6\u3002 3\uff09\u9759\u6001\u5c5e\u6027\uff1a\u5c5e\u6027\u5305\u62ec\u4e24\u4e2a\u5b50\u7c7b\uff0c\u7b2c\u4e00\u79cd\u662f\u65b0\u95fb\u7c7b\u578b\u3001userGender\u548cuserLocation\uff0c\u8fd9\u4e9b\u5c5e\u6027\u662f\u6709\u9650\u7684\u79bb\u6563\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u6839\u636e\u503c\u57df\u7684\u8303\u56f4\uff0c\u5c06\u5176\u6620\u5c04\u4e3aone-hot\u5411\u91cf\uff0c\u7136\u540e\u6536\u5c3e\u76f8\u8fde\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6d4b\u8bd5\u6570\u636e\u7684\u5c5e\u6027\u53ef\u80fd\u51fa\u73b0\u65b0\u7684\u5c5e\u6027\u53d6\u503c\uff0c\u5219\u5bf9\u5e94\u7684\u5411\u91cf\u662f0\u3002\u4f8b\u5982\uff1a\u8bad\u7ec3\u96c6\u4e2d\u57ce\u5e02\u5c5e\u6027\u662f\u300c\u5317\u4eac\uff0c\u4e0a\u6d77\uff0c\u5e7f\u5dde\u300d\uff0c\u5bf9\u5e94\u7684one-hot\u7279\u5f81\u662f[1 0 0]\uff0c[0 1 0]\uff0c[0 0 1]\uff0c\u6d4b\u8bd5\u65f6\u57ce\u5e02\u5c5e\u6027\u51fa\u73b0\u4e86\u6df1\u5733\u3001\u676d\u5dde\uff0c\u5219\u8fd9\u4e9b\u65b0\u5c5e\u6027\u5747\u4e3a[0 0 0]\u3002\u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u8bad\u7ec3\u65f6\u7f51\u7edc\u53ea\u4f1a\u5bf9\u5df2\u6709\u4fe1\u606f\u8fdb\u884c\u54cd\u5e94\uff0c\u800c\u65e0\u6cd5\u5bf9\u672a\u77e5\u4fe1\u606f\u505a\u5224\u65ad\u3002\u5982\u679c\u79bb\u6563\u5c5e\u6027\u4e4b\u95f4\u6709\u76f8\u5173\u6027\uff0c\u4f8b\u5982\u57ce\u5e02\u95f4\u7684\u76f8\u5173\u6027\u7528\u8ddd\u79bb\u5ea6\u91cf\uff0c\u5219\u53ef\u4ee5\u7528\u5148\u9a8c\u4fe1\u606f\u8fdb\u884c\u4fee\u6b63\uff0c\u8fd9\u6837\u6df1\u5733\u53ef\u80fd\u662f[0 0.1 0.9]\uff0c\u676d\u5dde\u662f[0 0.8 0.2]\u3002 \u7b2c\u4e8c\u7c7b\u5c5e\u6027\u5305\u62ec\u4e09\u4e2a\u5c5e\u6027\uff1auserFollowCount\u3001userFansCount\u548cuserWeiboCount\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\u57df\u7406\u8bba\u4e0a\u662f\u65e0\u9650\u7684\uff0c\u4e14\u6570\u503c\u5177\u6709\u4e00\u5b9a\u610f\u4e49\u3002\u8fd9\u91cc\u6211\u4eec\u5148\u5bf9\u6570\u636e\u8fdb\u884c\u805a\u7c7b\uff0c\u5177\u4f53\u505a\u6cd5\u662f\u5c06\u4e09\u4e2a\u5c5e\u6027\u770b\u4f5c\u4e09\u7ef4\u5411\u91cf\uff0c\u7528kmeans\u805a\u6210N\u7c7b\uff0c\u7136\u540e\u6bcf\u6761\u6837\u672c\u6620\u5c04\u5230\u5bf9\u5e94\u7684\u7c7b\u522b\uff0c\u6700\u540e\u5c06N\u4e2a\u7c7b\u522b\u7f16\u53f7\u6620\u5c04\u4e3aone-hot\u7279\u5f81\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u80fd\u591f\u5c06\u5c5e\u6027\u7edf\u4e00\u7f16\u7801\u4e3aone-hot\u7279\u5f81\uff0c\u540c\u65f6\u5bf9\u8fc7\u5927\u6216\u8fc7\u5c0f\u7684\u6570\u636e\u4e5f\u80fd\u5c06\u5176\u5f52\u4e3a\u76f8\u8fd1\u7684\u7c7b\u522b\u4e2d\u3002 4\uff09userDescription\uff1a\u8be5\u5c5e\u6027\u8f83\u4e3a\u7279\u6b8a\uff0c\u662f\u7528\u6237\u7684\u5c5e\u6027\u63cf\u8ff0\uff0c\u4f46\u6570\u636e\u672c\u8d28\u4e0a\u662f\u6587\u672c\u4fe1\u606f\uff0c\u6211\u4eec\u91c7\u7528\u4e0e\u6587\u672c\u6570\u636e\u76f8\u540c\u7684\u5904\u7406\u65b9\u5f0f\u63d0\u53d6768\u7ef4\u7684sentence_embedding\u3002\u5728\u878d\u5408\u65f6\uff0c\u5355\u72ec\u5f53\u4f5c\u4e00\u4e2a\u6a21\u6001\u8003\u8651\u3002 \u56fe2 \u4e0d\u540c\u6a21\u6001\u6570\u636e\u7279\u5f81\u8868\u5f81\u793a\u610f","title":"3. \u7279\u5f81\u63d0\u53d6"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#4_1","text":"\u5bf9\u5404\u7c7b\u578b\u6570\u636e\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u540e\uff0c\u9700\u8981\u7528\u591a\u6a21\u6001\u5b66\u4e60\u7684\u65b9\u6cd5\u5c06\u8fd9\u4e9b\u7279\u5f81\u5173\u8054\u8d77\u6765\u3002\u591a\u6a21\u6001\u5b66\u4e60\u6839\u636e\u878d\u5408\u5bf9\u8c61\u7684\u4e0d\u540c\uff0c\u53ef\u5206\u4e3a\u7279\u5f81\u5c42\u7684\u878d\u5408\u548c\u5206\u6570\u5c42\u7684\u878d\u5408\uff0c\u7279\u5f81\u5c42\u662f\u4ee5\u4e0a\u4e00\u8282\u4e2d\u7684\u7279\u5f81\u4e3a\u8f93\u5165\uff0c\u6784\u5efa\u6a21\u578b\u3002\u5206\u6570\u5c42\u901a\u5e38\u662f\u5bf9\u5404\u6a21\u6001\u6570\u636e\u90fd\u8bad\u7ec3\u6a21\u578b\uff0c\u7136\u540e\u5c06\u5206\u7c7b\u9884\u6d4b\u7684\u6982\u7387\u5411\u91cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u518d\u8bad\u7ec3\u7edf\u4e00\u7684\u5206\u7c7b\u5668\u3002\u7531\u4e0a\u4e00\u8282\u5206\u6790\u53ef\u77e5\uff0c\u65b0\u95fb\u4e2d\u7684\u6a21\u6001\u5e76\u4e0d\u662f\u5b8c\u5168\u7b49\u540c\u7684\uff0c\u65b0\u95fb\u5185\u5bb9\u76f4\u63a5\u7531\u6587\u672c\u63cf\u8ff0\uff0c\u56fe\u7247\u4e5f\u4e0e\u65b0\u95fb\u5185\u5bb9\u6709\u8f83\u5927\u76f8\u5173\u6027\uff0c\u8fd9\u4e24\u4e2d\u6a21\u6001\u53ef\u4ee5\u76f4\u63a5\u8bad\u7ec3\u5206\u7c7b\u5668\u3002\u800c\u5176\u4ed6\u5c5e\u6027\u5219\u662f\u5bf9\u7528\u6237\u548c\u65b0\u95fb\u7684\u63cf\u8ff0\uff0c\u548c\u65b0\u95fb\u5185\u5bb9\u4e0d\u4e00\u5b9a\u6709\u76f4\u63a5\u5173\u7cfb\uff0c\u8fd9\u4e9b\u6a21\u6001\u5219\u4e0d\u9002\u5408\u8bad\u7ec3\u5206\u7c7b\u5668\u3002\u56e0\u6b64\u6211\u4eec\u4e3b\u8981\u63a2\u7a76\u7279\u5f81\u5c42\u9762\u7684\u878d\u5408\uff0c\u5bf9\u4e8e\u5206\u6570\u5c42\u878d\u5408\uff0c\u6211\u4eec\u5c1d\u8bd5\u4e86\u4e00\u79cd\u4e0d\u540c\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u5bf9\u7edf\u4e00\u7279\u5f81\u8bad\u7ec3\u591a\u4e2a\u5206\u7c7b\u5668\uff0c\u5c06\u8fd9\u4e9b\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u5206\u6570\u8fdb\u884c\u878d\u5408\uff0c\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6295\u7968\u65b9\u5f0f\u3002\u4e0b\u9762\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u65b9\u6cd5\u3002","title":"4. \u591a\u6a21\u6001\u5185\u5bb9\u7406\u89e3"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#41","text":"\u6211\u4eec\u9996\u5148\u91c7\u7528[2]\u4e2d\u7684\u4e24\u79cd\u7279\u5f81\u878d\u5408\u65b9\u6cd5\uff0c\u5bf9\u56db\u79cd\u6a21\u6001\u7279\u5f81\u5206\u522b\u8fdb\u884c\u591a\u5c42\u5168\u8fde\u63a5\u8ba1\u7b97\uff0c\u5f97\u5230\u76f8\u540c\u5c3a\u5bf8\u7684\u5411\u91cf\uff0c\u7136\u540e\u8fdb\u884c\u5411\u91cf\u62fc\u63a5\uff08concatenate\uff09\u6216\u9010\u5143\u7d20\u70b9\u4e58\uff08pairwise product\uff09\u64cd\u4f5c\u3002\u56fe3\u662f\u4ee5\u4e09\u79cd\u6a21\u6001\uff08\u6587\u672c\u7279\u5f81\u3001\u56fe\u50cf\u7279\u5f81\u548c\u7528\u6237\u63cf\u8ff0\u7279\u5f81\uff09\u4e3a\u4f8b\u7684\u7279\u5f81\u5c42\u878d\u5408\u793a\u610f\u56fe\u3002 \u56fe3 \u4e09\u79cd\u6a21\u6001\u7684\u7279\u5f81\u5c42\u878d\u5408\u65b9\u5f0f\u53ca\u5176\u5bf9\u5e94\u7684\u7f51\u7edc\u7ed3\u6784\u3002\uff08a\uff09\u62fc\u63a5\u8fde\u63a5\uff0c\uff08b\uff09\u70b9\u4e58\u8fde\u63a5\u3002 \u5206\u6790\u8fd9\u4e24\u79cd\u7f51\u7edc\u7ed3\u6784\u53ef\u77e5\uff0c\u62fc\u63a5\u8fde\u63a5\u80fd\u591f\u5b8c\u6574\u4fdd\u7559\u5404\u901a\u9053\u7684\u4fe1\u606f\u3002\u800c\u70b9\u4e58\u8fde\u63a5\u53ef\u4ee5\u770b\u4f5c\u662f\u8ba1\u7b97\u5404\u901a\u9053\u7684\u76f8\u5173\u6027\uff0c\u5f53\u5404\u901a\u9053\u5728\u67d0\u4e00\u7ef4\u54cd\u5e94\u90fd\u8f83\u5927\u65f6\u624d\u6709\u503c\uff0c\u5982\u679c\u5176\u4e2d\u6709\u4e00\u4e2a\u6a21\u6001\u5728256\u7ef4\u5411\u91cf\u4e2d\u67d0\u4e00\u7ef4\u6570\u503c\u8f83\u5c0f\uff0c\u5219\u878d\u5408\u540e\u6574\u4f53\u5728\u8fd9\u4e00\u7ef4\u7684\u6570\u503c\u4f1a\u5f88\u5c0f\u3002\u6211\u4eec\u5728\u6b64\u57fa\u7840\u4e0a\u63d0\u51fa\u4e00\u79cd\u65b0\u7684\u878d\u5408\u7ed3\u6784\uff0c\u8bb0\u4e3a\u6df7\u5408\uff08mix\uff09\u8fde\u63a5\uff0c\u540c\u65f6\u4fdd\u7559\u5404\u6a21\u6001\u72ec\u7acb\u4fe1\u606f\u548c\u4e92\u76f8\u5173\u4fe1\u606f\uff0c\u5176\u7ed3\u6784\u5982\u56fe4\u6240\u793a\uff1a \u56fe4 \u4e24\u79cdmix\u7ed3\u6784\u8bbe\u8ba1\u65b9\u5f0f\u3002\uff08a\uff09\u4e09\u5143\u7ec4\u70b9\u4e58\uff08\u8bb0\u4e3amix-1\uff09\uff0c\uff08b\uff09\u591a\u4e2a\u4e8c\u5143\u7ec4\u70b9\u4e58\uff08\u8bb0\u4e3amix-2\uff09 \u6df7\u5408\u8fde\u63a5\u4fdd\u7559\u4e86\u6240\u6709\u4fe1\u606f\uff0c\u53ef\u4ee5\u907f\u514d\u67d0\u4e00\u4e2a\u6a21\u6001\u7684256\u7ef4\u5411\u91cf\u5728\u67d0\u4e00\u7ef4\u6570\u503c\u8f83\u5c0f\uff0c\u9020\u6210\u5176\u4ed6\u6a21\u6001\u4fe1\u606f\u7684\u4e22\u5931\u3002\u540c\u65f6\uff0cmix\u7ed3\u6784\u53ef\u4ee5\u907f\u514d\u68af\u5ea6\u6d88\u5931\u7684\u60c5\u51b5\u3002\u5f53\u6a21\u6001\u6570\u5927\u4e8e2\u65f6\uff0c\u76f8\u5173\u9879\u53ef\u4ee5\u6709\u4e0d\u540c\u8868\u793a\uff0c\u56e0\u6b64\u6df7\u5408\u8fde\u63a5\u4e5f\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u63d0\u51fa\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\uff0c\u5206\u522b\u5982\u56fe4(a)\u548c\u56fe4(b)\u8868\u793a\u3002mix-1\u7ed3\u6784\u5c31\u662f\u56fe3\u7684\u4e24\u79cd\u65b9\u5f0f\u6df7\u5408\uff0c\u5176\u4f18\u70b9\u5728\u4e8e\u8fde\u63a5\u540e\u7ef4\u5ea6\u968f\u6a21\u6001\u6570\u7ebf\u6027\u589e\u957f\u3002\u7f3a\u70b9\u662f\u5f53\u6a21\u6001\u6570\u5f88\u591a\u65f6\uff0c\u76f8\u5173\u9879\u6570\u503c\u7684\u6570\u91cf\u7ea7\u4f1a\u6709\u660e\u663e\u7684\u53d8\u5316\uff0c\u4f8b\u5982\u5982\u679c\u6211\u4eec\u91c7\u7528Batch normalization\u5c06feature map\u63a7\u5236\u57280\uff5e1\u4e4b\u95f4\uff0c\u5219\u76f8\u5173\u9879\u5f88\u53ef\u80fd\u63a5\u8fd10\uff0c\u8fdb\u800c\u9000\u5316\u4e3a\u62fc\u63a5\u8fde\u63a5\uff1b\u5982\u679cfeature map\u7684\u503c\u53ef\u80fd\u5927\u4e8e1\uff0c\u5219\u76f8\u5173\u9879\u6570\u91cf\u7ea7\u53ef\u80fd\u4f1a\u5927\u5927\u589e\u52a0\u3002mix-2\u4e2d\u76f8\u5173\u9879\u662f\u7531\u5404\u6a21\u6001\u4e24\u4e24\u70b9\u4e58\u5f97\u5230\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u907f\u514d\u76f8\u5173\u9879\u4e58\u79ef\u8fc7\u5c0f\u7684\u60c5\u51b5\uff0c\u800c\u4e14\u8003\u8651\u4e86\u4efb\u610f\u4e24\u6a21\u6001\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002\u4f46\u662fmix-2\u8fde\u63a5\u540e\u7684\u957f\u5ea6\u4e0e\u6a21\u6001\u6570\u7684\u5e73\u65b9\u5448\u6b63\u6bd4\uff0c\u5f53\u6a21\u6001\u8f83\u591a\u662f\u4f1a\u51fa\u73b0\u7279\u5f81\u8fc7\u957f\u7684\u60c5\u51b5\u3002\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4f18\u7f3a\u70b9\uff0c\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8bbe\u8ba1\u9700\u8981\u7684\u7ed3\u6784\u3002","title":"4.1 \u7279\u5f81\u7ea7\u7684\u591a\u6a21\u6001\u5b66\u4e60"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#42","text":"\u591a\u6a21\u6001\u5b66\u4e60\u7684\u53e6\u4e00\u79cd\u5e38\u7528\u65b9\u6cd5\u662f\u5bf9\u5206\u6570\u7ea7\u7684\u878d\u5408\uff0c\u901a\u5e38\u505a\u6cd5\u662f\u7528\u6bcf\u4e2a\u6a21\u6001\u8bad\u7ec3\u5206\u7c7b\u5668\uff0c\u7136\u540e\u5c06\u5404\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u5206\u6570\u8fdb\u884c\u878d\u5408\u3002\u7531\u524d\u6587\u5206\u6790\u53ef\u5f97\uff0c\u65b0\u95fb\u5185\u5bb9\u8bc6\u522b\u4e2d\u5404\u4e2a\u6a21\u6001\u7684\u5185\u5bb9\u4e0d\u662f\u5bf9\u7b49\u7684\uff0c\u53ea\u6709\u6587\u672c\u548c\u56fe\u50cf\u662f\u5bf9\u5185\u5bb9\u7684\u63cf\u8ff0\uff0c\u800c\u4e14\u5e76\u4e0d\u662f\u6bcf\u6761\u6587\u672c\u90fd\u5305\u62ec\u56fe\u50cf\u3002\u56e0\u6b64\u6211\u4eec\u5c1d\u8bd5\u8bad\u7ec3\u591a\u4e2a\u5206\u7c7b\u5668\uff0c\u518d\u5c06\u5206\u7c7b\u5668\u7684\u9884\u6d4b\u7ed3\u679c\u8fdb\u884c\u5206\u6570\u5c42\u7684\u878d\u5408\u3002 \u56fe5 \u591a\u4e2a\u9884\u6d4b\u6a21\u578b\u7684\u8054\u5408 \u5206\u6570\u7ea7\u7684\u591a\u6a21\u6001\u5b66\u4e60\u662f\u5c06\u9884\u6d4b\u7684\u5206\u6570\u5411\u91cf\u4f5c\u4e3a\u7279\u5f81\u8fdb\u884c\u5b66\u4e60\uff0c\u6211\u4eec\u8fd9\u91cc\u91c7\u7528\u591a\u4e2a\u5206\u7c7b\u5668\uff0c\u5bf9\u9884\u6d4b\u5206\u6570\u62fc\u63a5\u540e\u518d\u901a\u8fc7\u5206\u7c7b\u5668\u83b7\u5f97\u6700\u7ec8\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u672c\u8d28\u53ef\u4ee5\u770b\u4f5c\u662f\u7528\u591a\u4e2a\u5206\u7c7b\u6a21\u578b\u7684\u9884\u6d4b\u503c\u8fdb\u884c\u7efc\u5408\uff0c\u6700\u7b80\u5355\u7684\u51b3\u7b56\u65b9\u5f0f\u53ef\u4ee5\u91c7\u7528\u6295\u7968\u3002","title":"4.2 \u5206\u6570\u7ea7\u7684\u591a\u6a21\u6001\u5b66\u4e60"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#5","text":"\u6211\u4eec\u5229\u7528\u516c\u5f00\u6bd4\u8d5b\u6570\u636e\u96c6[1]\u5bf9\u7b97\u6cd5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6570\u636e\u96c6\u6709\u8d85\u8fc738000\u6761\u65b0\u95fb\uff0c\u5bf9\u5e94\u603b\u56fe\u7247\u6570\u8d85\u8fc734000\u5f20\uff0c\u5176\u4e2d\u4e00\u4e2a\u65b0\u95fb\u53ef\u80fd\u5305\u62ec\u591a\u5f20\u56fe\u7247\uff0c\u6bcf\u4e2a\u56fe\u7247\u4e5f\u53ef\u80fd\u88ab\u591a\u6761\u65b0\u95fb\u7d22\u5f15\u3002\u5f53\u4e0d\u4f7f\u7528\u56fe\u7247\u65f6\uff0c\u6211\u4eec\u5c06\u6bcf\u6761\u65b0\u95fb\u4f5c\u4e3a\u4e00\u4e2a\u6837\u672c\uff0c\u5c06\u6570\u636e\u5212\u5206\u4e3a10\u4efd\uff0c\u5176\u4e2d9\u4efd\u4f5c\u4e3a\u8bad\u7ec3\u6570\u636e\uff0c1\u4efd\u4f5c\u4e3a\u9a8c\u8bc1\u6570\u636e\u3002\u4e3a\u6d4b\u8bd5\u6a21\u578b\u6cdb\u5316\u80fd\u529b\uff0c\u6211\u4eec\u91c7\u7528\u4ea4\u53c9\u9a8c\u8bc1\u7684\u65b9\u6cd5\uff0c\u6d4b\u8bd510\u6b21\uff0c\u6bcf\u6b21\u53d6\u4e0d\u540c\u7684\u6570\u636e\u96c6\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\u3002\u5f53\u4f7f\u7528\u56fe\u7247\u65f6\uff0c\u6211\u4eec\u53ea\u53d6\u5305\u542b\u56fe\u7247\u7684\u65b0\u95fb\uff0c\u5c06\u6bcf\u5f20\u56fe\u7247\u548c\u5176\u4ed6\u4fe1\u606f\u7ec4\u6210\u4e00\u4e2a\u6837\u672c\u5bf9\uff0c\u8bad\u7ec3\u548c\u6d4b\u8bd5\u96c6\u5212\u5206\u76f8\u540c\u3002 \u9996\u5148\u6211\u4eec\u6d4b\u8bd5\u4e0d\u540c\u6a21\u6001\u5bf9\u5206\u7c7b\u51c6\u786e\u7387\u7684\u5f71\u54cd\uff0c\u7531\u4e0a\u6587\u5206\u6790\u53ef\u77e5\uff0c\u6570\u636e\u96c6\u7684\u6784\u6210\u4e0e\u662f\u5426\u4f7f\u7528\u56fe\u7247\u6709\u5173\uff0c\u56e0\u6b64\u5b9e\u9a8c\u4e2d\u6211\u4eec\u5206\u522b\u8fdb\u884c\u5bf9\u6bd4\u3002\u88681\u5c55\u793a\u6587\u672c\u3001\u63cf\u8ff0\u3001\u5c5e\u6027\u7684\u7ec4\u5408\u5bf9\u7ed3\u679c\u5bf9\u5f71\u54cd\u3002 \u88681 \u7279\u5f81\u7ea7\u591a\u6a21\u6001\u65b0\u95fb\u68c0\u6d4b\u51c6\u786e\u7387\uff08\u4e0d\u5305\u542b\u89c6\u89c9\u6a21\u6001\uff09 \u7531\u88681\u53ef\u77e5\u591a\u6a21\u6001\u7279\u5f81\u878d\u5408\u7684\u6548\u679c\u8981\u4f18\u4e8e\u53ea\u7528\u6587\u672c\u7684\u6548\u679c\uff0c\u91c7\u7528\u4e09\u4e2a\u6a21\u6001\u7684\u6548\u679c\u6700\u597d\u3002\u540c\u65f6\uff0c\u5c5e\u6027\u5c5e\u6027\u5bf9\u51c6\u786e\u7387\u7684\u63d0\u5347\u6548\u679c\u8981\u4f18\u4e8e\u7528\u6237\u63cf\u8ff0\u6a21\u6001\u3002\u6b64\u5916\uff0c\u5728\u5b9e\u9a8c\u65f6\u6211\u4eec\u53d1\u73b0\uff0c\u52a0\u5165userFansCount\u3001userFollowCount\u3001userWeiboCount\u805a\u7c7b\u6620\u5c04\u7684one-hot\u7279\u5f81\u540e\uff0c\u6548\u679c\u53cd\u800c\u7565\u5fae\u4e0b\u964d\uff0c\u56e0\u6b64\u5c5e\u6027\u53ea\u5305\u542b\u7c7b\u578b\u3001\u6027\u522b\u548c\u5730\u70b9\u8fd9\u4e09\u4e2a\u79bb\u6563\u5c5e\u6027\uff0c\u5982\u4f55\u5408\u7406\u7684\u4f7f\u7528\u6570\u503c\u5316\u7684\u5c5e\u6027\u63d0\u5347\u5206\u7c7b\u6548\u679c\u53ef\u4ee5\u4f5c\u4e3a\u540e\u7eed\u7684\u601d\u8003\u3002\u88682\u662f\u52a0\u5165\u89c6\u89c9\u6a21\u6001\u7ec4\u6210\u6837\u672c\u5bf9\u7684\u6d4b\u8bd5\u7ed3\u679c\u3002 \u88682 \u7279\u5f81\u7ea7\u591a\u6a21\u6001\u65b0\u95fb\u68c0\u6d4b\u51c6\u786e\u7387\uff08\u5305\u542b\u89c6\u89c9\u6a21\u6001\uff09 \u968f\u7740\u6a21\u6001\u6570\u91cf\u589e\u591a\uff0c\u9884\u6d4b\u7684\u51c6\u786e\u7387\u4e5f\u54cd\u5e94\u63d0\u5347\u3002\u88683\u5c55\u793a\u4e86\u76f8\u540c\u6a21\u6001\u7ec4\u5408\u65f6\uff0c\u4e0d\u540c\u7ed3\u6784\u7684\u5f71\u54cd\u3002 \u88683 \u4e0d\u540c\u7ed3\u6784\u7684\u68c0\u6d4b\u51c6\u786e\u7387 \u88683\u663e\u793a\uff0c\u5728\u9a8c\u8bc1\u96c6\u4e2dconcatenate\u7684\u6027\u80fd\u8981\u4f18\u4e8epairwise product\uff0c\u6211\u4eec\u63d0\u51fa\u7684mix-2\u7ed3\u6784\u8981\u4f18\u4e8e\u5176\u4ed6\u5f62\u5f0f\u7684\u7279\u5f81\u878d\u5408\u3002\u5728\u6bd4\u8d5b\u5b9e\u9645\u6d4b\u8bd5\u65f6\uff0cmix-1\u548cmix-2\u5747\u8981\u4f18\u4e8e\u5355\u4e00\u7684\u878d\u5408\u65b9\u5f0f\uff0c\u5206\u6790\u6570\u636e\u6211\u4eec\u53d1\u73b0\uff0c\u8bad\u7ec3\u96c6\u4e2d\u6837\u672c\u6709\u4e00\u5b9a\u91cd\u590d\u6027\uff0c\u5373\u6837\u672c\u7684\u6587\u672c\u5185\u5bb9\u662f\u76f8\u540c\u7684\u3002\u56e0\u6b64\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u5206\u5e03\u53ef\u80fd\u5b58\u5728\u4e00\u5b9a\u504f\u5dee\uff0c\u6a21\u578b\u53ef\u80fd\u51fa\u73b0\u8fc7\u62df\u5408\u73b0\u8c61\uff0c\u56e0\u6b64\u5b9e\u9645\u5e94\u7528\u65f6\u53ef\u6839\u636e\u95ee\u9898\u548c\u6570\u636e\u7684\u7279\u70b9\uff0c\u9009\u62e9\u5408\u9002\u7684\u878d\u5408\u7ed3\u6784\u3002\u6700\u540e\u6d4b\u8bd5\u5206\u6570\u7ea7\u7684\u878d\u5408\uff0c\u7ed3\u679c\u5982\u88684\u6240\u793a\u3002 \u88684 \u5206\u6570\u7ea7\u878d\u5408\u7684\u5206\u7c7b\u51c6\u786e\u7387 \u53ef\u4ee5\u770b\u5230\uff0c\u5206\u6570\u7ea7\u7684\u878d\u5408\u6548\u679c\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8981\u4f18\u4e8e\u7279\u5f81\u7ea7\u7684\u878d\u5408\u3002\u4f46\u662f\uff0c\u5728\u5b9e\u9645\u6d4b\u8bd5\u65f6\u540c\u6837\u7ed3\u679c\u4f1a\u4e0b\u964d\uff0c\u5206\u6790\u539f\u56e0\uff0c\u6211\u4eec\u8ba4\u4e3a\u540c\u6837\u53ef\u80fd\u51fa\u73b0\u4e86\u8fc7\u62df\u5408\u7684\u73b0\u8c61\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u95ee\u9898\u4e2d\u53ef\u6839\u636e\u60c5\u51b5\u8fdb\u884c\u9009\u62e9\u3002","title":"5. \u5b9e\u9a8c\u7ed3\u679c"},{"location":"\u865a\u5047\u65b0\u95fb\u68c0\u6d4b/\u865a\u5047\u65b0\u95fb\u68c0\u6d4b.html#bertcnn","text":"","title":"\u57fa\u4e8eBERT\u548cCNN\u7684\u591a\u6a21\u578b\u865a\u5047\u65b0\u95fb\u5206\u7c7b"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html","text":"1.\u6982\u8ff0 CPP\u7684\u7c7b\u522b \u57fa\u4e8e\u5bf9\u8c61 \u5355\u4e00class\u8bbe\u8ba1 class without pointer members e.g.:complex class class with pointer members e.g.:string class \u9762\u5411\u5bf9\u8c61 \u591a\u91cdclass\u8bbe\u8ba1 \u7ee7\u627f \u590d\u5408 \u59d4\u6258 CPP\u6807\u51c6 CPP \u8bed\u8a00 + CPP\u6807\u51c6\u5e93 CPP\u4e66\u7c4d\u63a8\u8350 CPP primer CPP PROGRAMMING LANGUAGE Effective CPP THE CPP STANDARD LIBRARY STL\u6e90\u7801\u89e3\u6790 2.\u5934\u6587\u4ef6\u4e0e\u7c7b\u7684\u58f0\u660e template<typename T> class complex { public: complex (T r = 0, T i = 0) : re(r), im(i) {} complex& operator += (const complex&); T real () const { return re; } T imag () const { return im; } private: T re, im; friend complex& __doapl (complex*, const complex&); }; { complex<double> c1(2, 1); complex<int> c2; } 3.\u6784\u9020\u51fd\u6570 inline\u51fd\u6570\u66f4\u5feb, \u4f46\u5e76\u4e0d\u662f\u5728class\u4e2d\u5b9a\u4e49\u51fd\u6570\u5c31\u4e00\u5b9a\u4f1ainline, \u7f16\u8bd1\u5668\u4f1a\u628a\u7b80\u5355\u7684\u51fd\u6570inline \u4e0a\u9762 1 2\u6548\u679c\u4e00\u6837 \u4e0d\u5141\u8bb8\u540c\u65f6\u5b58\u5728 4.\u53c2\u6570\u4f20\u9012\u4e0e\u8fd4\u56de\u503c \u65e0\u8bba\u4f20\u5165\u8fd8\u662f\u8fd4\u56de\u5c3d\u53ef\u80fd\u7684\u7528by reference friend \u4ee3\u8868\u7740\u8fd9\u4e2a\u51fd\u6570\u91cc\u9762\u53ef\u4ee5\u76f4\u63a5\u5229\u7528private\u7684\u6570\u636e \u5c11\u7528friend \u7834\u574f\u5c01\u88c5\u6027 \u6709\u65f6\u9700\u8981\u5b9a\u4e49\u4e00\u4e9b\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e0d\u662f\u7c7b\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u53c8\u9700\u8981\u9891\u7e41\u5730\u8bbf\u95ee\u7c7b\u7684\u6570\u636e\u6210\u5458\uff0c\u8fd9\u65f6\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u51fd\u6570\u5b9a\u4e49\u4e3a\u8be5\u51fd\u6570\u7684\u53cb\u5143\u51fd\u6570\u3002 \u53cb\u5143\u51fd\u6570\u662f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u6210\u5458\u7684\u975e\u6210\u5458\u51fd\u6570\u3002\u5b83\u662f\u5b9a\u4e49\u5728\u7c7b\u5916\u7684\u666e\u901a\u51fd\u6570\uff0c\u5b83\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\uff0c\u4f46\u9700\u8981\u5728\u7c7b\u7684\u5b9a\u4e49\u4e2d\u52a0\u4ee5\u58f0\u660e\uff0c\u58f0\u660e\u65f6\u53ea\u9700\u5728\u53cb\u5143\u7684\u540d\u79f0\u524d\u52a0\u4e0a\u5173\u952e\u5b57friend 5.\u64cd\u4f5c\u7b26\u91cd\u8f7d\u4e0e\u4e34\u65f6\u5bf9\u8c61 \u8fde\u4e32\u7684\u8d4b\u503c\u8fd8\u9700\u8981\u505a\u66f4\u591a\u7684\u5904\u7406 \u4e34\u65f6\u5bf9\u8c61 \u76f4\u63a5 complex(a, b) \u5728\u4e4b\u540e\u4e0d\u88ab\u4f7f\u7528 6.\u590d\u4e60Complex\u7c7b\u7684\u5b9e\u73b0\u8fc7\u7a0b 7.\u4e09\u5927\u51fd\u6570: \u62f7\u8d1d\u6784\u9020, \u62f7\u8d1d\u590d\u5236, \u6790\u6784 \u9ed8\u8ba4\u7684 \"=\" \u662f\u6d45\u62f7, \u5e26\u6307\u9488\u7684class\u8981\u81ea\u5df1\u5b9a\u4e49\u8fd9\u4e2aoperator 3\u4e2a\u7279\u6b8a\u51fd\u6570 \u7b2c\u4e00\u4e2a\u662f\u7279\u6b8a\u7684\u6784\u9020\u51fd\u6570(\u63a5\u6536\u7684\u662f\u81ea\u5df1, ) \u53eb\u505a\u62f7\u8d1d\u6784\u9020 \u7b2c\u4e8c\u4e2a\u662f\u62f7\u8d1d\u8d4b\u503c\u51fd\u6570(\u53ea\u8981\u662f\u5e26\u6307\u9488\u7684class\u4e00\u5b9a\u8981\u91cd\u5199\u8fd9\u4e2a\u51fd\u6570) \u7b2c3\u4e2a\u662f\u6790\u6784\u51fd\u6570(\u7c7b\u540d\u524d\u52a0~ \u8fd9\u4e2a\u5bf9\u8c61\u9500\u6bc1\u65f6\u6267\u884c\u7684\u51fd\u6570) 8.\u5806\u6808\u4e0e\u5185\u5b58\u7ba1\u7406 \u7b2c\u4e00\u4e2a\u662fdebug\u6a21\u5f0f \u7b2c\u4e8c\u4e2a\u662f\u975e\u8c03\u8bd5\u6a21\u5f0f \u5b9e\u9645cPP\u7684\u57fa\u672c\u7c7b\u578b\u7684\u5185\u5b58\u4e0d\u540c\u4e8e\u8001\u5e08\u6240\u8bb2 \u6307\u9488\u7c7b\u578b\u5360\u75288bytes 10.\u6269\u5c55\u8865\u5145: \u7c7b\u6a21\u677f,\u51fd\u6570\u6a21\u677f\u53ca\u5176\u5b83 adapter\u8bbe\u8ba1\u6a21\u5f0f 11.\u7ec4\u5408\u4e0e\u7ee7\u627f 12.\u865a\u51fd\u6570\u4e0e\u591a\u6001 13.\u59d4\u6258\u76f8\u5173\u8bbe\u8ba1","title":"C++\u7b14\u8bb0"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#1","text":"","title":"1.\u6982\u8ff0"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#cpp","text":"\u57fa\u4e8e\u5bf9\u8c61 \u5355\u4e00class\u8bbe\u8ba1 class without pointer members e.g.:complex class class with pointer members e.g.:string class \u9762\u5411\u5bf9\u8c61 \u591a\u91cdclass\u8bbe\u8ba1 \u7ee7\u627f \u590d\u5408 \u59d4\u6258","title":"CPP\u7684\u7c7b\u522b"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#cpp_1","text":"CPP \u8bed\u8a00 + CPP\u6807\u51c6\u5e93","title":"CPP\u6807\u51c6"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#cpp_2","text":"CPP primer CPP PROGRAMMING LANGUAGE Effective CPP THE CPP STANDARD LIBRARY STL\u6e90\u7801\u89e3\u6790","title":"CPP\u4e66\u7c4d\u63a8\u8350"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#2","text":"template<typename T> class complex { public: complex (T r = 0, T i = 0) : re(r), im(i) {} complex& operator += (const complex&); T real () const { return re; } T imag () const { return im; } private: T re, im; friend complex& __doapl (complex*, const complex&); }; { complex<double> c1(2, 1); complex<int> c2; }","title":"2.\u5934\u6587\u4ef6\u4e0e\u7c7b\u7684\u58f0\u660e"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#3","text":"inline\u51fd\u6570\u66f4\u5feb, \u4f46\u5e76\u4e0d\u662f\u5728class\u4e2d\u5b9a\u4e49\u51fd\u6570\u5c31\u4e00\u5b9a\u4f1ainline, \u7f16\u8bd1\u5668\u4f1a\u628a\u7b80\u5355\u7684\u51fd\u6570inline \u4e0a\u9762 1 2\u6548\u679c\u4e00\u6837 \u4e0d\u5141\u8bb8\u540c\u65f6\u5b58\u5728","title":"3.\u6784\u9020\u51fd\u6570"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#4","text":"\u65e0\u8bba\u4f20\u5165\u8fd8\u662f\u8fd4\u56de\u5c3d\u53ef\u80fd\u7684\u7528by reference friend \u4ee3\u8868\u7740\u8fd9\u4e2a\u51fd\u6570\u91cc\u9762\u53ef\u4ee5\u76f4\u63a5\u5229\u7528private\u7684\u6570\u636e \u5c11\u7528friend \u7834\u574f\u5c01\u88c5\u6027 \u6709\u65f6\u9700\u8981\u5b9a\u4e49\u4e00\u4e9b\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e0d\u662f\u7c7b\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u53c8\u9700\u8981\u9891\u7e41\u5730\u8bbf\u95ee\u7c7b\u7684\u6570\u636e\u6210\u5458\uff0c\u8fd9\u65f6\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u51fd\u6570\u5b9a\u4e49\u4e3a\u8be5\u51fd\u6570\u7684\u53cb\u5143\u51fd\u6570\u3002 \u53cb\u5143\u51fd\u6570\u662f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u6210\u5458\u7684\u975e\u6210\u5458\u51fd\u6570\u3002\u5b83\u662f\u5b9a\u4e49\u5728\u7c7b\u5916\u7684\u666e\u901a\u51fd\u6570\uff0c\u5b83\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\uff0c\u4f46\u9700\u8981\u5728\u7c7b\u7684\u5b9a\u4e49\u4e2d\u52a0\u4ee5\u58f0\u660e\uff0c\u58f0\u660e\u65f6\u53ea\u9700\u5728\u53cb\u5143\u7684\u540d\u79f0\u524d\u52a0\u4e0a\u5173\u952e\u5b57friend","title":"4.\u53c2\u6570\u4f20\u9012\u4e0e\u8fd4\u56de\u503c"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#5","text":"\u8fde\u4e32\u7684\u8d4b\u503c\u8fd8\u9700\u8981\u505a\u66f4\u591a\u7684\u5904\u7406 \u4e34\u65f6\u5bf9\u8c61 \u76f4\u63a5 complex(a, b) \u5728\u4e4b\u540e\u4e0d\u88ab\u4f7f\u7528","title":"5.\u64cd\u4f5c\u7b26\u91cd\u8f7d\u4e0e\u4e34\u65f6\u5bf9\u8c61"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#6complex","text":"","title":"6.\u590d\u4e60Complex\u7c7b\u7684\u5b9e\u73b0\u8fc7\u7a0b"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#7","text":"\u9ed8\u8ba4\u7684 \"=\" \u662f\u6d45\u62f7, \u5e26\u6307\u9488\u7684class\u8981\u81ea\u5df1\u5b9a\u4e49\u8fd9\u4e2aoperator 3\u4e2a\u7279\u6b8a\u51fd\u6570 \u7b2c\u4e00\u4e2a\u662f\u7279\u6b8a\u7684\u6784\u9020\u51fd\u6570(\u63a5\u6536\u7684\u662f\u81ea\u5df1, ) \u53eb\u505a\u62f7\u8d1d\u6784\u9020 \u7b2c\u4e8c\u4e2a\u662f\u62f7\u8d1d\u8d4b\u503c\u51fd\u6570(\u53ea\u8981\u662f\u5e26\u6307\u9488\u7684class\u4e00\u5b9a\u8981\u91cd\u5199\u8fd9\u4e2a\u51fd\u6570) \u7b2c3\u4e2a\u662f\u6790\u6784\u51fd\u6570(\u7c7b\u540d\u524d\u52a0~ \u8fd9\u4e2a\u5bf9\u8c61\u9500\u6bc1\u65f6\u6267\u884c\u7684\u51fd\u6570)","title":"7.\u4e09\u5927\u51fd\u6570: \u62f7\u8d1d\u6784\u9020, \u62f7\u8d1d\u590d\u5236, \u6790\u6784"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#8","text":"\u7b2c\u4e00\u4e2a\u662fdebug\u6a21\u5f0f \u7b2c\u4e8c\u4e2a\u662f\u975e\u8c03\u8bd5\u6a21\u5f0f \u5b9e\u9645cPP\u7684\u57fa\u672c\u7c7b\u578b\u7684\u5185\u5b58\u4e0d\u540c\u4e8e\u8001\u5e08\u6240\u8bb2 \u6307\u9488\u7c7b\u578b\u5360\u75288bytes","title":"8.\u5806\u6808\u4e0e\u5185\u5b58\u7ba1\u7406"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#10","text":"adapter\u8bbe\u8ba1\u6a21\u5f0f","title":"10.\u6269\u5c55\u8865\u5145: \u7c7b\u6a21\u677f,\u51fd\u6570\u6a21\u677f\u53ca\u5176\u5b83"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#11","text":"","title":"11.\u7ec4\u5408\u4e0e\u7ee7\u627f"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#12","text":"","title":"12.\u865a\u51fd\u6570\u4e0e\u591a\u6001"},{"location":"\u8bed\u8a00/CPP\u7b14\u8bb0.html#13","text":"","title":"13.\u59d4\u6258\u76f8\u5173\u8bbe\u8ba1"},{"location":"\u8bed\u8a00/Python\u7b14\u8bb0.html","text":"","title":"Python\u7b14\u8bb0"},{"location":"\u8bed\u8a00/Spark\u5b66\u4e60\u53ca\u8c03\u4f18.html","text":"Spark\u57fa\u7840 job(action\u5207\u5206) --> stage(shuffle\u5207\u5206) --> task(\u5e76\u884c\u6267\u884c) application --> executer(container) --> task spark\u4e2drdd\u7531\u591a\u4e2apartition\u7ec4\u6210\uff0c\u4efb\u52a1\u8fd0\u884c\u4f5c\u7528\u4e8epartition\u3002spark\u6709\u4e24\u79cd\u7c7b\u578b\u7684task\uff1a ShuffleMapTask, \u8d1f\u8d23rdd\u4e4b\u95f4\u7684transform\uff0cmap\u8f93\u51fa\u4e5f\u5c31\u662fshuffle write ResultTask, job\u6700\u540e\u9636\u6bb5\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u4e5f\u5c31\u662faction\uff08\u4e0a\u9762\u4ee3\u7801\u4e2dforeach\u5c31\u662f\u4e00\u4e2aaction\uff0c\u4e00\u4e2aaction\u4f1a\u89e6\u53d1\u751f\u6210\u4e00\u4e2ajob\u5e76\u63d0\u4ea4\uff09\u64cd\u4f5c\u89e6\u53d1\u751f\u6210\u7684task\uff0c\u7528\u6765\u6536\u96c6job\u8fd0\u884c\u7684\u7ed3\u679c\u5e76\u8fd4\u56de\u7ed3\u679c\u5230driver\u7aef\u3002 Spark\u8c03\u4f18 Spark\u8c03\u8bd5 Spark\u76d1\u63a7 Tracking UI Application log \u65e5\u5fd7 yarn logs -applicationId xxx hadoop fs -ls /var/log/hadoop-yarn/apps/peipeidu/logs/ \u6211\u4eec\u8fd9\u4e2a\u5f00\u53d1\u673a\u4e0d\u662fspark\u7684server\u673a\u5427","title":"Spark\u57fa\u7840"},{"location":"\u8bed\u8a00/Spark\u5b66\u4e60\u53ca\u8c03\u4f18.html#spark","text":"job(action\u5207\u5206) --> stage(shuffle\u5207\u5206) --> task(\u5e76\u884c\u6267\u884c) application --> executer(container) --> task spark\u4e2drdd\u7531\u591a\u4e2apartition\u7ec4\u6210\uff0c\u4efb\u52a1\u8fd0\u884c\u4f5c\u7528\u4e8epartition\u3002spark\u6709\u4e24\u79cd\u7c7b\u578b\u7684task\uff1a ShuffleMapTask, \u8d1f\u8d23rdd\u4e4b\u95f4\u7684transform\uff0cmap\u8f93\u51fa\u4e5f\u5c31\u662fshuffle write ResultTask, job\u6700\u540e\u9636\u6bb5\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u4e5f\u5c31\u662faction\uff08\u4e0a\u9762\u4ee3\u7801\u4e2dforeach\u5c31\u662f\u4e00\u4e2aaction\uff0c\u4e00\u4e2aaction\u4f1a\u89e6\u53d1\u751f\u6210\u4e00\u4e2ajob\u5e76\u63d0\u4ea4\uff09\u64cd\u4f5c\u89e6\u53d1\u751f\u6210\u7684task\uff0c\u7528\u6765\u6536\u96c6job\u8fd0\u884c\u7684\u7ed3\u679c\u5e76\u8fd4\u56de\u7ed3\u679c\u5230driver\u7aef\u3002","title":"Spark\u57fa\u7840"},{"location":"\u8bed\u8a00/Spark\u5b66\u4e60\u53ca\u8c03\u4f18.html#spark_1","text":"","title":"Spark\u8c03\u4f18"},{"location":"\u8bed\u8a00/Spark\u5b66\u4e60\u53ca\u8c03\u4f18.html#spark_2","text":"","title":"Spark\u8c03\u8bd5"},{"location":"\u8bed\u8a00/Spark\u5b66\u4e60\u53ca\u8c03\u4f18.html#spark_3","text":"","title":"Spark\u76d1\u63a7"},{"location":"\u8bed\u8a00/Spark\u5b66\u4e60\u53ca\u8c03\u4f18.html#tracking-ui","text":"","title":"Tracking UI"},{"location":"\u8bed\u8a00/Spark\u5b66\u4e60\u53ca\u8c03\u4f18.html#application-log","text":"","title":"Application log"},{"location":"\u8bed\u8a00/Spark\u5b66\u4e60\u53ca\u8c03\u4f18.html#_1","text":"yarn logs -applicationId xxx hadoop fs -ls /var/log/hadoop-yarn/apps/peipeidu/logs/ \u6211\u4eec\u8fd9\u4e2a\u5f00\u53d1\u673a\u4e0d\u662fspark\u7684server\u673a\u5427","title":"\u65e5\u5fd7"},{"location":"\u8bed\u8a00/python\u9ad8\u6548\u7f16\u7a0b.html","text":"1.PYTHON\u8ba1\u7b97\u6548\u7387 2.DATAFRAME vs NUMPY vs LIST \u5904\u7406\u5bf9\u6bd4 1.PYTHON\u8ba1\u7b97\u6548\u7387 2.DATAFRAME vs NUMPY vs LIST \u5904\u7406\u5bf9\u6bd4","title":"Python\u9ad8\u6548\u7f16\u7a0b"},{"location":"\u8bed\u8a00/python\u9ad8\u6548\u7f16\u7a0b.html#1python","text":"","title":"1.PYTHON\u8ba1\u7b97\u6548\u7387"},{"location":"\u8bed\u8a00/python\u9ad8\u6548\u7f16\u7a0b.html#2dataframe-vs-numpy-vs-list","text":"","title":"2.DATAFRAME vs NUMPY vs LIST \u5904\u7406\u5bf9\u6bd4"},{"location":"\u8bed\u8a00/\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b.html","text":"","title":"\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b"},{"location":"\u8bed\u8a00/\u8bbe\u8ba1\u6a21\u5f0f.html","text":"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f \u200b \u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u5f0f\u662f\u4e00\u4e2a\u5341\u5206\u7ecf\u5178\u7684\u591a\u7ebf\u7a0b\u5e76\u53d1\u534f\u4f5c\u7684\u6a21\u5f0f\u3002 \u200b \u6240\u8c13\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\uff0c\u5b9e\u9645\u4e0a\u4e3b\u8981\u662f\u5305\u542b\u4e86\u4e24\u7c7b\u7ebf\u7a0b\uff0c\u4e00\u79cd\u662f\u751f\u4ea7\u8005\u7ebf\u7a0b\u7528\u4e8e\u751f\u4ea7\u6570\u636e\uff0c\u53e6\u4e00\u79cd\u662f\u6d88\u8d39\u8005\u7ebf\u7a0b\u7528\u4e8e\u6d88\u8d39\u6570\u636e\u3002 \u200b \u4e3a\u4e86\u89e3\u8026\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u7684\u5173\u7cfb\uff0c\u901a\u5e38\u4f1a\u91c7\u7528\u5171\u4eab\u7684\u6570\u636e\u533a\u57df\uff0c\u5c31\u50cf\u662f\u4e00\u4e2a\u4ed3\u5e93\uff0c\u751f\u4ea7\u8005\u751f\u4ea7\u6570\u636e\u4e4b\u540e\u76f4\u63a5\u653e\u7f6e\u5728\u5171\u4eab\u6570\u636e\u533a\u4e2d\uff0c\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\u6d88\u8d39\u8005\u7684\u884c\u4e3a\uff1b\u800c\u6d88\u8d39\u8005\u53ea\u9700\u8981\u4ece\u5171\u4eab\u6570\u636e\u533a\u4e2d\u53bb\u83b7\u53d6\u6570\u636e\uff0c\u5c31\u4e0d\u518d\u9700\u8981\u5173\u5fc3\u751f\u4ea7\u8005\u7684\u884c\u4e3a\u3002 \u200b \u4f46\u662f\uff0c\u8fd9\u4e2a\u5171\u4eab\u6570\u636e\u533a\u57df\u4e2d\u5e94\u8be5\u5177\u5907\u8fd9\u6837\u7684\u7ebf\u7a0b\u95f4\u5e76\u53d1\u534f\u4f5c\u7684\u529f\u80fd\uff1a \u5982\u679c\u5171\u4eab\u6570\u636e\u533a\u5df2\u6ee1\u7684\u8bdd\uff0c\u963b\u585e\u751f\u4ea7\u8005\u7ee7\u7eed\u751f\u4ea7\u6570\u636e\u653e\u7f6e\u5165\u5185\uff1b \u5982\u679c\u5171\u4eab\u6570\u636e\u533a\u4e3a\u7a7a\u7684\u8bdd\uff0c\u963b\u585e\u6d88\u8d39\u8005\u7ee7\u7eed\u6d88\u8d39\u6570\u636e\uff1b \u5728\u5b9e\u73b0\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u91c7\u7528\u4e09\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528Object\u7684wait/notify\u7684\u6d88\u606f\u901a\u77e5\u673a\u5236\uff1b \u4f7f\u7528Lock\u7684Condition\u7684await/signal\u7684\u6d88\u606f\u901a\u77e5\u673a\u5236\uff1b \u4f7f\u7528BlockingQueue\u5b9e\u73b0\u3002\u672c\u6587\u4e3b\u8981\u5c06\u8fd9\u4e09\u79cd\u5b9e\u73b0\u65b9\u5f0f\u8fdb\u884c\u603b\u7ed3\u5f52\u7eb3\u3002 http://spaceplayer.oss-cn-beijing.aliyuncs.com/spaceplayer/typora_img/Documents/\u5434\u5f64/\u7b2c\u56db\u8303\u5f0f","title":"\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"\u8bed\u8a00/\u8bbe\u8ba1\u6a21\u5f0f.html#_1","text":"\u200b \u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u5f0f\u662f\u4e00\u4e2a\u5341\u5206\u7ecf\u5178\u7684\u591a\u7ebf\u7a0b\u5e76\u53d1\u534f\u4f5c\u7684\u6a21\u5f0f\u3002 \u200b \u6240\u8c13\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\uff0c\u5b9e\u9645\u4e0a\u4e3b\u8981\u662f\u5305\u542b\u4e86\u4e24\u7c7b\u7ebf\u7a0b\uff0c\u4e00\u79cd\u662f\u751f\u4ea7\u8005\u7ebf\u7a0b\u7528\u4e8e\u751f\u4ea7\u6570\u636e\uff0c\u53e6\u4e00\u79cd\u662f\u6d88\u8d39\u8005\u7ebf\u7a0b\u7528\u4e8e\u6d88\u8d39\u6570\u636e\u3002 \u200b \u4e3a\u4e86\u89e3\u8026\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u7684\u5173\u7cfb\uff0c\u901a\u5e38\u4f1a\u91c7\u7528\u5171\u4eab\u7684\u6570\u636e\u533a\u57df\uff0c\u5c31\u50cf\u662f\u4e00\u4e2a\u4ed3\u5e93\uff0c\u751f\u4ea7\u8005\u751f\u4ea7\u6570\u636e\u4e4b\u540e\u76f4\u63a5\u653e\u7f6e\u5728\u5171\u4eab\u6570\u636e\u533a\u4e2d\uff0c\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\u6d88\u8d39\u8005\u7684\u884c\u4e3a\uff1b\u800c\u6d88\u8d39\u8005\u53ea\u9700\u8981\u4ece\u5171\u4eab\u6570\u636e\u533a\u4e2d\u53bb\u83b7\u53d6\u6570\u636e\uff0c\u5c31\u4e0d\u518d\u9700\u8981\u5173\u5fc3\u751f\u4ea7\u8005\u7684\u884c\u4e3a\u3002 \u200b \u4f46\u662f\uff0c\u8fd9\u4e2a\u5171\u4eab\u6570\u636e\u533a\u57df\u4e2d\u5e94\u8be5\u5177\u5907\u8fd9\u6837\u7684\u7ebf\u7a0b\u95f4\u5e76\u53d1\u534f\u4f5c\u7684\u529f\u80fd\uff1a \u5982\u679c\u5171\u4eab\u6570\u636e\u533a\u5df2\u6ee1\u7684\u8bdd\uff0c\u963b\u585e\u751f\u4ea7\u8005\u7ee7\u7eed\u751f\u4ea7\u6570\u636e\u653e\u7f6e\u5165\u5185\uff1b \u5982\u679c\u5171\u4eab\u6570\u636e\u533a\u4e3a\u7a7a\u7684\u8bdd\uff0c\u963b\u585e\u6d88\u8d39\u8005\u7ee7\u7eed\u6d88\u8d39\u6570\u636e\uff1b \u5728\u5b9e\u73b0\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u91c7\u7528\u4e09\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528Object\u7684wait/notify\u7684\u6d88\u606f\u901a\u77e5\u673a\u5236\uff1b \u4f7f\u7528Lock\u7684Condition\u7684await/signal\u7684\u6d88\u606f\u901a\u77e5\u673a\u5236\uff1b \u4f7f\u7528BlockingQueue\u5b9e\u73b0\u3002\u672c\u6587\u4e3b\u8981\u5c06\u8fd9\u4e09\u79cd\u5b9e\u73b0\u65b9\u5f0f\u8fdb\u884c\u603b\u7ed3\u5f52\u7eb3\u3002 http://spaceplayer.oss-cn-beijing.aliyuncs.com/spaceplayer/typora_img/Documents/\u5434\u5f64/\u7b2c\u56db\u8303\u5f0f","title":"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html","text":"\u9762\u8bd5\u51c6\u5907 gantt dateFormat YYYY-MM-DD title \u9762\u8bd5\u51c6\u5907 section \u9879\u76ee\u7bc7 \u817e\u8baf\u5e7f\u544a\u7b97\u6cd5\u5927\u8d5b : crit, active, des1, 2019-04-05, 2019-04-20 \u7231\u5e93\u5b58\u4e3b\u9875\u63a8\u8350\u9879\u76ee :crit, des2, after des3, 2d \u77e5\u8bc6\u56fe\u8c31\u52a9\u529b\u7535\u5f71\u63a8\u8350 :crit, des3, 2019-04-14, 2019-04-20 section \u673a\u5668\u5b66\u4e60+\u6df1\u5ea6\u5b66\u4e60 GBDT :des4, 2019-04-09, 2019-04-10 LightGBM :des5, 2019-04-09, 2019-04-10 XGBoost :des6, 2019-04-09, 2019-04-10 section \u57fa\u7840\u7b97\u6cd5 LeetCode\u9898\u76ee : des20, 2019-04-14, 2019-05-01 \u52a8\u6001\u89c4\u5212 : des21, 2019-04-09, 2019-04-10 DFS+BFS : des22, 2019-04-09, 2019-04-10 section \u6982\u7387\u7edf\u8ba1\u548c\u77e9\u9635 \u5f20\u5b87\u6982\u7387\u8bba\u590d\u4e60 : des23, 2019-04-09, 2019-04-10 \u5f20\u5b87\u77e9\u9635\u590d\u4e60 : des24, 2019-04-09, 2019-04-10 section \u63a8\u8350\u7b97\u6cd5 \u63a8\u8350\u7cfb\u7edf\u5b9e\u8df5\u590d\u4e60 : des25, 2019-04-09, 2019-04-10 \u63a8\u8350\u7b97\u6cd5\u8bfePPT\u590d\u4e60 : des26, 2019-04-09, 2019-04-10 \u7b80\u5386\u4fee\u6539 3.\u7ed3\u679c\u91cf\u5316 \u4e2a\u4eba\u4fe1\u606f+\u9700\u6c42\u5206\u6790+\u5339\u914d\u5c97\u4f4d\u7684\u7279\u5f81+\u903b\u8f91/\u4e8b\u4f8b\u8bba\u8bc1+\u793c\u8c8c\u81ea\u4fe1+\u53cd\u590d\u7ec3\u4e60=offer \u56e0\u6b64\uff0c \u201c\u9762\u8bd5\u51c6\u5907\u201d\u6700\u79d1\u5b66\u7684\u7b56\u7565\u4e0d\u662f\u201c\u9762\u9762\u4ff1\u5230\u201d\uff0c\u800c\u662f\u53ea\u9700 \u53cd\u590d\u6f14\u7ec3\u81ea\u5df1\u7684\u201c\u6700\u4f73\u4eae\u70b9\u201d \u3001\u4ee5\u53ca \u5982\u4f55\u7ed3\u675f\u9762\u8bd5 \u5c31\u591f\u4e86\uff08\u6240\u4ee5\u90a3\u4e9b\u56de\u7b54\u8bf4\u81ea\u6211\u4ecb\u7ecd\u8981\u600e\u4e48\u7cbe\u4fee\u201c\u5185\u5bb9\u201d\u7684\u90fd\u5f88\u4e0d\u9760\u8c31\uff09\u3002 \u96f6\u3001\u81ea\u6211\u4ecb\u7ecd 1-3\u5206\u949f \u9762\u8bd5\u5b98\u4f60\u597d, \u6211\u53eb\u90d1\u65b0\u5fd7, \u9ed1\u9f99\u6c5f\u4eba, \u73b0\u5728\u662f\u5317\u822a\u8f6f\u4ef6\u5de5\u7a0b\u7814\u7a76\u751f\u4e8c\u5e74\u7ea7. \u672c\u79d1\u6bd5\u4e1a\u540e\u6211\u5728\u4e92\u8054\u7f51\u91d1\u878d\u516c\u53f8\u505a\u8fc7\u4e00\u5e74\u7684Java\u5f00\u53d1\u5de5\u7a0b\u5e08, \u518d\u6b64\u671f\u95f4\u6211\u63a5\u89e6\u5230\u673a\u5668\u5b66\u4e60\u7684\u4e00\u4e9b\u77e5\u8bc6, \u4e4b\u540e\u60f3\u7cfb\u7edf\u7684\u5b66\u4e60\u4e0b\u5173\u4e8e\u7b97\u6cd5\u76f8\u5173\u7684\u5185\u5bb9, \u5c31\u8003\u53d6\u4e86\u5317\u822a\u7814\u7a76\u751f. \u5728\u53bb\u5e747\u6708\u4efd, \u6211\u62a5\u540d\u5e76\u901a\u8fc7\u8003\u6838\u53c2\u52a0\u4e86\u5317\u5927\u7684Deecamp\u8bad\u7ec3\u8425, \u5229\u7528\u7f8e\u56e2\u63d0\u4f9b\u7684\u6570\u636e\u505a\u4e86\u4e00\u4e2a\u5229\u7528\u77e5\u8bc6\u56fe\u8c31\u505a\u7535\u5f71\u63a8\u8350\u7684\u8bfe\u9898, . \u5728\u7814\u4e00\u671f\u95f4 \u6211\u4e3b\u8981\u5728\u521b\u65b0\u5947\u667a\u516c\u53f8\u62c5\u4efb\u7b97\u6cd5\u5b9e\u4e60\u751f, \u4ece0\u52301\u7684\u642d\u5efa\u4e86\u7231\u5e93\u5b58\u6d3b\u52a8\u63a8\u8350\u7cfb\u7edf\u7b97\u6cd5\u7ebf\u4e0b\u90e8\u5206\u7684\u4efb\u52a1. \u6211\u7684\u77ed\u671f\u76ee\u6807\u662f\u627e\u4e00\u4e2a\u5229\u7528\u673a\u5668\u5b66\u4e60\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7b49\u6280\u672f\u53bb\u89e3\u51b3\u6d77\u91cf\u6570\u636e\u505a\u63a8\u8350\u548c\u5e7f\u544a\u7b49\u65b9\u9762\u7684\u5de5\u4f5c.[\u53ef\u9009]\u957f\u671f\u76ee\u6807\u662f\u901a\u8fc7\u4e0d\u65ad\u5730\u5b66\u4e60\u5b9e\u8df5, \u4e0d\u65ad\u5730\u79ef\u7d2f\u81ea\u5df1\u7684\u6280\u672f\u50a8\u5907, \u4e0d\u65ad\u6311\u6218\u65b0\u95ee\u9898, \u5f62\u6210\u81ea\u5df1\u7684\u6280\u672f\u4f53\u7cfb\u6846\u67b6, \u6210\u4e3a\u4e00\u4e2a\u7b97\u6cd5\u6280\u672f\u4e13\u5bb6. \u8fd9\u4e9b\u662f\u6211\u7684\u81ea\u6211\u4ecb\u7ecd, \u8c22\u8c22! \u9879\u76ee\u80cc\u666f \u7231\u5e93\u5b58\u63a8\u8350\u7cfb\u7edf\u9879\u76ee, \u7231\u5e93\u5b58\u4e00\u5bb6B2B2C\u7684\u793e\u4ea4\u7535\u5546\u516c\u53f8\uff0c\u8981\u7ed9\u4ed6\u4eec\u7684app\u505a\u63a8\u8350\u7cfb\u7edf\uff0c\u6211\u4e3b\u8981\u8d1f\u8d23\u5b8c\u6210\u4e3b\u9875\u6d3b\u52a8\u63a8\u8350\u4efb\u52a1\u7684\u7ebf\u4e0b\u6a21\u578b\u5f00\u53d1\uff0c\u4e1a\u52a1\u76ee\u6807\u662f\u63d0\u5347\u6d3b\u52a8\u7684\u8d2d\u4e70\u8f6c\u5316\u7387cvr. \u4e3b\u8981\u67093\u90e8\u5206\u5de5\u4f5c, \u524d\u671f\u68b3\u7406\u4e1a\u52a1\u573a\u666f, \u5b9a\u4e49\u95ee\u9898, \u5148\u6309\u7167\u4e1a\u52a1\u7ecf\u9a8c\u4ece\u5404\u4e2a\u5e93\u8868\u4e2d\u9009\u53d6\u5408\u9002\u7684\u539f\u59cb\u7279\u5f81, \u5b8c\u6210\u4e00\u4e2a\u57fa\u7840\u7684LR baseline, \u4e2d\u671f\u505aEDA, \u6570\u636e\u6e05\u6d17, \u540e\u671f\u7279\u5f81\u5de5\u7a0b\u5206\u6790\u7279\u5f81\u6709\u6548\u6027\u53ca\u6a21\u578b\u8c03\u53c2, \u6700\u7ec8\u7ebf\u4e0b\u6700\u597d\u7684\u5355\u6a21\u578bAUC\u662f0.787 \u8fd9\u662f\u4e2a\u793e\u4ea4\u7535\u5546\u63a8\u8350\u7cfb\u7edf\u7684\u4efb\u52a1, \u548c\u4f20\u7edf\u7684\u7535\u5546\u63a8\u8350\u6709\u4e24\u70b9\u4e0d\u540c, \u7528\u6237\u4e0d\u662f\u7ec8\u7aef\u7528\u6237\u800c\u662f\u5c0fB\u7528\u6237, \u5f85\u63a8\u8350item\u4e0d\u662f\u5546\u54c1\u800c\u662f\u6d3b\u52a8. \u5e26\u6765\u7684\u7528\u6237\u65b9\u9762\u7684\u95ee\u9898\u5c31\u662f\u5c0fB\u7528\u6237\u504f\u597d\u8f83\u5f31, \u6211\u901a\u8fc7\u5c0fB\u5386\u53f2\u4ef7\u683c\u504f\u597d\u548c\u8fc7\u53bbT\u5929\u5185\u5404\u54c1\u724c\u70b9\u51fb\u7387\u548c\u8f6c\u5316\u7387\u7279\u5f81\u6765\u523b\u753b\u5c0fB\u670b\u53cb\u5708\u7684\u504f\u597d, \u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f97%\u7684\u6d3b\u52a8\u751f\u547d\u5468\u671f\u57282-3\u5929, \u5b9e\u65f6\u6d3b\u52a8\u70b9\u51fb\u7387\u8f6c\u5316\u7387, \u6211\u4eec\u7528\u54c1\u724c\u548c\u54c1\u7c7b\u7684\u76f8\u5173\u7279\u5f81\u53bb\u4ee3\u8868\u6d3b\u52a8, \u5e76\u8865\u5145\u5546\u54c1\u96c6\u5408\u7684\u7279\u5f81. \u539f\u59cb\u7279\u5f81\u6765\u6e90\u4e8e\u7528\u6237\u7279\u5f81, \u6d3b\u52a8\u7279\u5f81. \u7279\u5f81\u5de5\u7a0b\u7684\u4e3b\u8981\u5de5\u4f5c, 1.\u7528\u6237\u751f\u6210T\u5929\u5185\u7684\u5404\u54c1\u724c\u54c1\u7c7b\u7684\u5386\u53f2\u70b9\u51fb\u7387\u8f6c\u5316\u7387, \u6d3b\u52a8\u751f\u6210T\u5929\u5185\u7684\u5404\u54c1\u724c\u54c1\u7c7b\u7684\u5386\u53f2\u70b9\u51fb\u7387\u8f6c\u5316\u7387 2.\u65f6\u95f4\u65b9\u9762\u7684\u7279\u5f81, monthOfYear weekOfMonth weekdayOfWeek hourOfDay \u662f\u5426\u8282\u5047\u65e5 \u662f\u5426\u5468\u672b \u7528\u6237\u4e0a\u6b21\u767b\u5f55\u805a\u73b0\u5728\u7684\u65f6\u95f4 \u4e0a\u6b21\u8d2d\u4e70\u8ddd\u73b0\u5728\u65f6\u95f4 \u8ddd\u79bb\u6d3b\u52a8\u4e0a\u7ebf\u65f6\u95f4 3.\u4ef7\u683c\u7279\u5f81\u57fa\u4e8e\u5206\u4f4d\u70b9\u505a\u5206\u6876(\u957f\u5c3e\u5206\u5e03) 4.\u5229\u7528ip\u53bb\u586b\u5145\u5730\u5740\u7f3a\u5931, \u5e76\u5229\u7528ip\u505a\u5c42\u6b21\u7f16\u7801 4.\u7528\u6237\u7279\u5f81\u548c\u6d3b\u52a8\u7279\u5f81\u4e2d\u57fa\u6570\u8f83\u5c0f\u7684\u8fdb\u884c\u4ea4\u53c9\u7279\u5f81\u53ca\u76f8\u5173\u7684\u7edf\u8ba1\u7279\u5f81(ctr cvr), \u4f8b\u5982\u5c45\u4f4f\u5730\u6027\u522b\u548c\u54c1\u724c\u7684\u4ea4\u53c9, \u5e74\u9f84\u548c\u6d3b\u52a8\u8f6c\u5316\u7387\u7684\u4ea4\u53c9, \u65f6\u95f4\u548c\u6d3b\u52a8\u7684\u4ea4\u53c9, \u65f6\u95f4\u548c\u7528\u6237\u7684\u4ea4\u53c9 5.\u7279\u5f81\u503c\u8f83\u591a\u7684\u7279\u5f81\u4f7f\u7528Target\u7f16\u7801\u7f16\u7801, \u7279\u5f81\u503c\u57284\u4e2a\u4ee5\u5185\u7684\u7528onehot\u7f16\u7801, \u9047\u5230\u7684\u95ee\u9898? \u5982\u4f55\u5229\u7528\u77ed\u6587\u672c \u9047\u5230\u7684\u95ee\u9898 \u6587\u672c\u7279\u5f81embedding\u8bad\u7ec3\u4e2aLR\u6a21\u578b \u9884\u6d4b\u4e2actr\u7684\u6982\u7387 \u653e\u5165\u6a21\u578b\u5f53\u505a\u4e00\u7ef4\u7279\u5f81 \u4e3a\u4ec0\u4e48\u4e0d\u5148\u8bad\u7ec3\u6a21\u578b\u7684ctr\u9884\u4f30 \u518d\u8bad\u7ec3cvr\u9884\u4f30? \u8fd9\u4e2a\u662f\u6b63\u5e38\u7684\u601d\u8def \u4f46\u6211\u4eec\u7684\u66dd\u5149\u6570\u636e\u4e00\u76f4\u5728\u57cb\u70b9\u4e2d \u8fd8\u6ca1\u6709\u4e0a\u7ebf \u6240\u4ee5\u96be\u4ee5\u6709\u76d1\u7763\u7684\u5b66\u4e60\u5230ctr \u6837\u672c\u8d1f\u4f8b\u7684\u9009\u53d6? skip-above \u7528\u6237\u70b9\u51fb\u7684item\u4f4d\u7f6e\u4ee5\u4e0a\u7684\u5c55\u73b0\u624d\u53ef\u4ee5\u4f5c\u4e3a\u8d1f\u4f8b \u5982\u4f55\u89e3\u51b3 \u4e0d\u540c\u4e8eCTR\u9884\u4f30\u95ee\u9898\uff0cCVR\u9884\u4f30\u9762\u4e34\u4e24\u4e2a\u5173\u952e\u95ee\u9898\uff1a Sample Selection Bias (SSB) \u8f6c\u5316\u662f\u5728\u70b9\u51fb\u4e4b\u540e\u624d\u201c\u6709\u53ef\u80fd\u201d\u53d1\u751f\u7684\u52a8\u4f5c\uff0c\u4f20\u7edfCVR\u6a21\u578b\u901a\u5e38\u4ee5\u70b9\u51fb\u6570\u636e\u4e3a\u8bad\u7ec3\u96c6\uff0c\u5176\u4e2d\u70b9\u51fb\u672a\u8f6c\u5316\u4e3a\u8d1f\u4f8b\uff0c\u70b9\u51fb\u5e76\u8f6c\u5316\u4e3a\u6b63\u4f8b\u3002\u4f46\u662f\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u5219\u662f\u5bf9\u6574\u4e2a\u7a7a\u95f4\u7684\u6837\u672c\u8fdb\u884c\u9884\u4f30\uff0c\u800c\u975e\u53ea\u5bf9\u70b9\u51fb\u6837\u672c\u8fdb\u884c\u9884\u4f30\u3002\u5373\u662f\u8bf4\uff0c\u8bad\u7ec3\u6570\u636e\u4e0e\u5b9e\u9645\u8981\u9884\u6d4b\u7684\u6570\u636e\u6765\u81ea\u4e0d\u540c\u5206\u5e03\uff0c\u8fd9\u4e2a\u504f\u5dee\u5bf9\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u6784\u6210\u4e86\u5f88\u5927\u6311\u6218\u3002 Data Sparsity (DS) \u4f5c\u4e3aCVR\u8bad\u7ec3\u6570\u636e\u7684\u70b9\u51fb\u6837\u672c\u8fdc\u5c0f\u4e8eCTR\u9884\u4f30\u8bad\u7ec3\u4f7f\u7528\u7684\u66dd\u5149\u6837\u672c\u3002 \u4e00\u4e9b\u7b56\u7565\u53ef\u4ee5\u7f13\u89e3\u8fd9\u4e24\u4e2a\u95ee\u9898\uff0c\u4f8b\u5982\u4ece\u66dd\u5149\u96c6\u4e2d\u5bf9unclicked\u6837\u672c\u62bd\u6837\u505a\u8d1f\u4f8b\u7f13\u89e3SSB\uff0c\u5bf9\u8f6c\u5316\u6837\u672c\u8fc7\u91c7\u6837\u7f13\u89e3DS\u7b49\u3002\u4f46\u65e0\u8bba\u54ea\u79cd\u65b9\u6cd5\uff0c\u90fd\u6ca1\u6709\u5f88elegant\u5730\u4ece\u5b9e\u8d28\u4e0a\u89e3\u51b3\u4e0a\u9762\u4efb\u4e00\u4e2a\u95ee\u9898\u3002 \u7528\u6237\u7684\u5ba2\u6237\u7aef\u7c7b\u578b \u7528\u6237\u6d88\u8d39\u6c34\u5e73 \u6d3b\u52a8\u65b9\u9762 \u6d3b\u52a8\u4ee3\u8868\u7684\u7528\u6237\u7fa4\u7279\u5f81 \u9009\u51fa\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u53d8\u91cf\uff0c\u5e76\u8ba1\u7b97\u4ed6\u4eec\u76f8\u4e92\u4e4b\u95f4\u3001\u4ee5\u53ca\u4e0e\u5176\u5b83\u53d8\u91cf\u4e4b\u95f4\u7684\u4e8c\u9636\u4ea4\u53c9\u4f5c\u7528\u5e76\u653e\u5165\u6a21\u578b\u4e2d\uff0c\u6bd4\u8f83\u7531\u6b64\u4ea7\u751f\u7684\u6a21\u578b\u7ed3\u679c\u4e0e\u6700\u521d\u7684\u7ebf\u6027\u6a21\u578b\u7684\u7ed3\u679c \u6ca1\u6709\u6027\u522b\u7279\u5f81 \u901a\u8fc7\u7279\u5f81\u5b50\u96c6\u5b66\u4e60\u4e00\u4e2a\u6027\u522b\u6982\u7387(\u65e0\u76d1\u7763) \u6211\u662f\u8fd9\u4e48\u601d\u8003\u8fd9\u4e2a\u4efb\u52a1\u7684, 1.\u754c\u5b9a\u95ee\u9898: \u8fd9\u662f\u4e2a\u793e\u4ea4\u7535\u5546\u63a8\u8350\u4efb\u52a1, 2.\u5206\u6790\u95ee\u9898, \u627e\u51fa\u548c\u5176\u4ed6\u7535\u5546\u63a8\u8350\u7cfb\u7edf\u6709\u54ea\u4e9b\u76f8\u540c\u5f02\u540c\u70b9, \u76f8\u540c\u70b9\u53ef\u4ee5\u501f\u9274\u8fc7\u6765, \u5f02\u540c\u70b9\u5355\u72ec\u5206\u6790\u5904\u7406, \u800c\u672c\u4efb\u52a1\u548c\u5e38\u89c1\u7684\u7535\u5546\u63a8\u8350\u4efb\u52a1\u533a\u522b\u4e3b\u8981\u6709\u4e24\u70b9: \u7b2c\u4e00\u70b9\u533a\u522b\u5b83\u7684\u7528\u6237\u4e0d\u662f\u7ec8\u7aef\u6d88\u8d39\u8005, \u800c\u662f\u4e2a\u5c0fB\u5e97\u4e3b(\u4ee3\u8d2d), \u90a3\u4e48\u6211\u4eec\u4e0d\u80fd\u5355\u7eaf\u7684\u53ea\u5206\u6790\u5c0fB\u7684\u504f\u597d, \u66f4\u8981\u7edf\u8ba1\u5c0fB\u670b\u53cb\u5708\u5b50\u7ec8\u7aef\u7528\u6237\u7684\u504f\u597d, \u8fd9\u90e8\u5206\u7fa4\u4f53\u504f\u597d\u8fd9\u90e8\u5206\u6211\u4eec\u5229\u7528\u5c0fB\u7684\u5386\u53f2\u6d88\u8d39\u884c\u4e3a\u751f\u6210\u4ef7\u683c\u5206\u5e03\u7279\u5f81\u548cT\u5929\u5185\u5404\u54c1\u724c\u54c1\u7c7b\u7684\u70b9\u51fb\u7387\u8f6c\u5316\u7387\u7279\u5f81\u6765\u8868\u5f81\u7fa4\u4f53\u7528\u6237\u504f\u597d. \u5c0fB\u7684\u504f\u597d+\u7fa4\u4f53\u504f\u597d\u662f\u6211\u8bbe\u8ba1\u7684\u7528\u6237\u753b\u50cf; \u7b2c\u4e8c\u70b9\u533a\u522b\u6211\u4eec\u63a8\u8350\u7684\u4e0d\u662f\u5546\u54c1, \u800c\u662f\u7231\u5e93\u5b58\u516c\u53f8\u5b9a\u4e49\u7684\u6d3b\u52a8, \u6d3b\u52a8\u7684\u7279\u70b9\u662f\u4e00\u4e2a\u6d3b\u52a8\u662f\u4e00\u4e2a\u54c1\u724c\u5546\u7684\u4e00\u7c7b\u5546\u54c1(\u6216\u8005\u53ef\u4ee5\u8bf4\u662f\u4e00\u7c7b\u5546\u54c1\u96c6\u5408), \u63a5\u8fd198%\u7684\u6d3b\u52a8\u751f\u547d\u5468\u671f\u90fd\u662f\u57282-3\u5929, \u6240\u4ee5\u6240\u6709\u7684\u6d3b\u52a8\u90fd\u9762\u4e34\u7740\u51b7\u542f\u52a8\u7684\u95ee\u9898, \u8fd9\u5bfc\u81f4\u6211\u4eec\u5982\u679c\u4f7f\u7528\u4f20\u7edf\u7684CF\u6a21\u578b\u6548\u679c\u4f1a\u5f88\u5dee, \u6211\u4eec\u9996\u5148\u7528\u6d3b\u52a8\u6700\u663e\u8457\u7684\u54c1\u724c\u548c\u54c1\u7c7b\u7279\u5f81\u8868\u5f81\u6d3b\u52a8, \u5176\u6b21\u4f7f\u7528\u6d3b\u52a8\u672c\u8eab\u7684\u7279\u5f81, \u6700\u540e\u8fd8\u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u4e00\u90e8\u5206\u7279\u5f81, \u5c31\u662f\u5982\u4f55\u523b\u753b\u8fd9\u4e2a\u6d3b\u52a8\u5546\u54c1\u96c6\u5408\u7684\u7279\u70b9\u5e76\u8865\u5145\u5230\u6d3b\u52a8\u4e2d\u53bb, \u4f8b\u5982\u5229\u7528\u5546\u54c1\u96c6\u548c\u7684\u4ef7\u683c\u5206\u5e03\u7279\u5f81, \u5546\u54c1\u7c7b\u522bEmbedding\u96c6\u5408\u53d6\u5747\u503c.\u8fd9\u4e09\u90e8\u5206\u7279\u5f81\u662f\u6d3b\u52a8\u76f8\u5173\u7684\u753b\u50cf. \u6709\u4e86\u7528\u6237\u753b\u50cf,\u6d3b\u52a8\u753b\u50cf, \u518d\u589e\u52a0\u573a\u666f\u65b9\u9762\u7684\u7279\u5f81, \u6708\u4efd, \u5468\u51e0, \u8282\u5047\u65e5\u7279\u5f81\u7b49. AUC\u662f\u4ec0\u4e48 \u4ee3\u8868\u4ec0\u4e48 \u7279\u5f81\u9009\u62e9\u90e8\u5206 \u57fa\u4e8e\u7edf\u8ba1\u7684\u7279\u5f81\u9009\u62e9\u3002\u8bf4\u767d\u4e86\u5c31\u662f\u76f4\u63a5\u901a\u8fc7\u67d0\u4e2a\u6307\u6807\u6765\u5224\u65ad\u4ed6\u5bf9\u9884\u6d4b\u7684\u5171\u73b0\u7a0b\u5ea6\uff0c\u5982pearson\u76f8\u5173\u7cfb\u6570 pearson\u76f8\u5173\u7cfb\u6570 \u8981\u7406\u89e3person,\u9996\u5148\u7406\u89e3\u534f\u65b9\u5dee, \u534f\u65b9\u5dee\u8868\u793a\u8fde\u4e24\u4e2a\u53d8\u91cf\u7684\u76f8\u4e92\u5173\u7cfb COV(X, Y) = SUM((Xi - X_mean)(Yi - Y_mean)) / (n - 1) person\u76f8\u5173\u7cfb\u6570\u662fX, Y\u534f\u9632\u5dee\u9664\u4ee5\u4e24\u4e2a\u53d8\u91cf\u7684\u6807\u51c6\u5dee(\u6d88\u9664\u91cf\u7eb2\u7684\u5dee\u5f02) \u7531\u4e0a\u56fe\u53ef\u4ee5\u603b\u7ed3\uff0c\u5f53\u76f8\u5173\u7cfb\u6570\u4e3a1\u65f6\uff0c\u6210\u4e3a\u5b8c\u5168\u6b63\u76f8\u5173\uff1b\u5f53\u76f8\u5173\u7cfb\u6570\u4e3a-1\u65f6\uff0c\u6210\u4e3a\u5b8c\u5168\u8d1f\u76f8\u5173\uff1b\u76f8\u5173\u7cfb\u6570\u7684\u7edd\u5bf9\u503c\u8d8a\u5927\uff0c\u76f8\u5173\u6027\u8d8a\u5f3a\uff1b\u76f8\u5173\u7cfb\u6570\u8d8a\u63a5\u8fd1\u4e8e0\uff0c\u76f8\u5173\u5ea6\u8d8a\u5f31\u3002 \u51b3\u7b56\u6811\u5982\u4f55\u5904\u7406\u7f3a\u5931\u503c XGboost\u7f3a\u5931\u503c\u5904\u7406 GBDT vs XGBoost \u76f4\u65b9\u56fe\u7b97\u6cd5 \u8fdb\u7a0b\u548c\u7ebf\u7a0b\u533a\u522b \u8d1f\u6837\u672c\u6784\u5efa \u8fd8\u5b58\u5728\u7684\u95ee\u9898 1.EDA\u5f15\u51fa\u7684\u6d3b\u52a8\u4e0a\u7ebf\u6392\u671f\u8bbe\u8ba1\u8f85\u52a9\u63a8\u8350 2.\u4f4d\u7f6e\u504f\u89c1\u5982\u4f55\u89e3\u51b3 3.\u65f6\u95f4\u8870\u51cf\u5982\u4f55\u89e3\u51b3 \u5982\u4f55\u601d\u8003\u53ec\u56de\u6392\u5e8f\u7684 \u65e0\u53ec\u56de\u76f4\u63a5\u6392\u5e8f \u6548\u7387\u4f18\u5316 \u77e9\u9635\u8fd0\u7b97 \u591a\u8fdb\u7a0b \u5e94\u7528\u6280\u672f LR GBDT LightGBM FM word2vec \u8d1d\u53f6\u65af\u4f18\u5316 \u6548\u679c \u7231\u5e93\u5b58\u9879\u76ee \u6570\u636e\u9884\u5904\u7406 - \u5254\u9664\u5355\u4e00\u503c\u3001\u7f3a\u5931\u503c\u6bd4\u4f8b\u8fc7\u5927\u7684\u5b57\u6bb5, \u5254\u9664\u4e1a\u52a1\u4e0a\u5173\u8054\u4e0d\u5927\u7684\u8868\u5b57\u6bb5 target encoding \u4e00\u3001\u9879\u76ee\u7bc7 1.1 \u817e\u8baf\u5e7f\u544a\u7b97\u6cd5\u5927\u8d5b 1.11 \u9898\u76ee\u63cf\u8ff0 [\u76f8\u4f3c\u4eba\u7fa4\u6269\u5c55|Lookalike] \u57fa\u4e8e\u5e7f\u544a\u4e3b\u63d0\u4f9b\u7684\u76ee\u6807\u4eba\u7fa4, \u4ece\u6d77\u91cf\u7684\u4eba\u7fa4\u4e2d\u627e\u51fa\u548c\u76ee\u6807\u4eba\u7fa4\u76f8\u4f3c\u7684\u5176\u4ed6\u4eba\u7fa4. \u6570\u636e\u91cf \u662f\u67d0\u8fde\u7eed30\u5929\u7684\u6570\u636e \u8bc4\u4ef7\u6307\u6807 \u662fm\u4e2a\u79cd\u5b50\u5305\u7684\u5e73\u5747AUC PU learning\u95ee\u9898 \uff1aPositive and unlabeled learning 1.12 \u7b97\u6cd5idea \u6570\u636e\u96c6\u5212\u5206 : \u968f\u673a\u5212\u5206(\u5982\u679c\u6709\u65f6\u95f4\u5bb9\u6613\u9020\u6210\u7279\u5f81\u7a7f\u8d8a)\u548c\u6309\u65f6\u95f4\u5212\u5206 \u6570\u636e\u89c4\u6a21\u5927: \u6570\u636e\u4e0b\u91c7\u6837, \u7279\u5f81\u9009\u62e9, \u6ca1\u9a8c\u8bc1\u51fa\u4e00\u4e2a\u6709\u6548\u7279\u5f81\u5b58\u5230\u786c\u76d8\u4e0a\u9762 \u5355\u6a21\u578b : LightGBM\u76f8\u6bd4XGBoost\u6709\u7740\u7cbe\u5ea6\u76f8\u4f3c, \u8bad\u7ec3\u901f\u5ea6\u5feb\u597d\u51e0\u500d\u7684\u4f18\u70b9 \u6a21\u578b\u878d\u5408 : \u524d\u671f\u7279\u5f81\u5de5\u7a0b, \u540e\u671f\u6a21\u578b\u878d\u5408, \u6700\u597d\u8981\u4e86\u89e3\u6bcf\u4e2a\u6a21\u578b\u9002\u5408\u4ec0\u4e48\u6837\u7684\u7279\u5f81\u5de5\u7a0b, \u800c\u4e0d\u662f\u6240\u6709\u7684\u5355\u6a21\u578b\u5171\u7528\u4e00\u5957\u7279\u5f81 Kaggle \u6570\u636e\u6316\u6398\u6bd4\u8d5b\u7ecf\u9a8c\u5206\u4eab \u6bd4\u8d5b\u540e\u671f\u5927\u62db\u4e4bStacking\u6280\u672f\u5206\u4eab \u65e0\u65f6\u95f4\u7279\u5f81\u65f6\u7edf\u8ba1\u7279\u5f81\u5982\u4f55\u9632\u6b62\u7279\u5f81\u7a7f\u8d8a: k-fold\u7edf\u8ba1\u3002\u5728\u6784\u9020\u548clabel\u6709\u5173\u7684\u7279\u5f81\u65f6\uff0c\u6bd4\u5982\u8f6c\u5316\u7387\uff0c\u4e3a\u4e86\u9632\u6b62\u4fe1\u606f\u6cc4\u9732\uff0c\u53ea\u80fd\u5c06\u6570\u636e\u5206\u6210k\u4efd\uff0c\u7528k-1\u4efd\u6765\u7edf\u8ba1\u5269\u4e0b\u76841\u4efd\uff0c\u91cd\u590dk\u6b21\u3002 \u5185\u5b58: \u5c3d\u53ef\u80fd\u51cf\u5c11Numpy, pandas\u5e93\u4f7f\u7528, \u7528list\u53ef\u5927\u91cf\u51cf\u5c11\u5185\u5b58\u4f9d\u8d56 \u5185\u5b58: \u4f7f\u7528h5\u683c\u5f0f\u5b58\u50a8, \u6570\u636e\u7c7b\u578b\u4e3b\u8981\u4f7f\u7528int8\u548cint16, \u63d0\u9ad8\u8bfb\u5199\u901f\u5ea6 \u5c0f\u7c7b\u522b\u5f52\u4e3a\"\u5176\u4ed6\": \u9632\u6b62\u8fc7\u62df\u5408 \u6a21\u578b(\u7b2c\u4e09\u5468\u5468\u51a0\u519bnju\u5206\u4eab): \u5bf9\u4e8eList\u7c7b\u578b\u7684\u7279\u5f81\uff0c\u6211\u4eec\u76ee\u524d\u662f\u5bf9embedding\u5411\u91cf\u505a\u4e86mean pooling\u3002\u5728\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6211\u4eec\u6ca1\u6709\u4f7f\u7528dropout\u4e5f\u6ca1\u6709\u8fdb\u884c\u6b63\u5219\u5316\u3002\u6211\u4eec\u5728\u6a21\u578b\u4e2d\u52a0\u5165\u4e86batch normalization\u3002\u53c2\u6570\u7684\u9009\u62e9\u65b9\u9762\uff0c\u6211\u4eec\u7684\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u53ea\u8fed\u4ee3\u4e00\u6b21\uff0cbatch size\u901a\u5e38\u8bbe\u4e3a2000\u4ee5\u4e0a\uff0cAdam\u4f18\u5316\u5668\u5b66\u4e60\u7387\u8bbe\u4e3a0.001\u52300.01\u4e4b\u95f4\u3002\u6b64\u5916\uff0c\u5728\u6211\u4eec\u4e4b\u524d\u7684\u5b9e\u9a8c\u4e2d\uff0c\u591a\u6b21\u8bad\u7ec3\u6a21\u578b\u53d6\u5e73\u5747\u4e5f\u80fd\u63d0\u9ad8\u4e0d\u5c11\u6548\u679c\uff0c\u5927\u5bb6\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u3002 \u4f18\u5316\u76ee\u6807: \u7531\u4e8e\u672c\u6b21\u5927\u8d5b\u7684\u8bc4\u4ef7\u6307\u6807\u662fAUC\u6307\u6807\uff0c\u800cAUC\u6307\u6807\u5b9e\u9645\u4e0a\u8ba1\u7b97\u7684\u662f\u4e00\u79cdpairwise\u7684\u635f\u5931\uff0c\u56e0\u6b64\u65e0\u6cd5\u76f4\u63a5\u5bf9\u5176\u6c42\u5bfc\u4f18\u5316\u3002\u5e38\u89c1\u7684\u65b9\u6cd5\u4e2d\uff0c\u4f7f\u7528learning to rank\u4e2dpairwise\u7684\u65b9\u6cd5\u8fdb\u884c\u4f18\u5316\u7684\u6bd4\u8f83\u591a\uff0c\u6548\u679c\u4e5f\u5f88\u597d\u3002\u7136\u800c\u8fd9\u7c7b\u65b9\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u56e0\u6b64\u5728\u6bd4\u8d5b\u4e2d\u6211\u4eec\u4e5f\u5c1d\u8bd5\u4e86\u4e00\u4e9b\u66ff\u4ee3\u7684\u4f18\u5316\u76ee\u6807\u3002\u6700\u7b80\u5355\u7684\u662flog loss\uff0c\u8fd9\u4e5f\u662f\u6548\u679c\u6700\u597d\u4e5f\u6700\u5e38\u7528\u7684\u635f\u5931\u51fd\u6570\u3002\u6211\u4eec\u8fd8\u5c1d\u8bd5\u4e86\u4e00\u4e9b\u5176\u4ed6\u7684\u4f18\u5316\u76ee\u6807\uff0c\u5982hinge loss, \u6b63\u8d1f\u6837\u672c\u5f97\u5206\u5dee\u7b49\uff0c\u6548\u679c\u4e5f\u90fd\u5f88\u597d\u3002\u6211\u4eec\u5728\u7efc\u5408\u4e86\u8fd9\u4e9b\u4f18\u5316\u76ee\u6807\u4e4b\u540e\uff0c\u6548\u679c\u4e5f\u53d6\u5f97\u4e86\u4e00\u5b9a\u7684\u63d0\u5347\u3002 one hot\u4e4b\u540e\u7684categorical features\u7ef4\u5ea6\u5f88\u9ad8\uff0c\u8fd9\u79cd\u9ad8\u7ef4\u5ea6\u7684\u7279\u5f81\u76f4\u63a5\u548c\u4f4e\u7ef4\u5ea6\u7684\u6570\u503c\u7279\u5f81\u4e00\u8d77\u8f93\u5165\u5230\u6a21\u578b\u91cc\u9762\uff0c\u662f\u4e0d\u662f\u4f1a\u5bf9\u8fd9\u4e9b\u4f4e\u7ef4\u5ea6\u7684\u7279\u5f81\u4ea7\u751f\u4e00\u79cd\u7a00\u91ca\u4f5c\u7528\uff0c\u5c06\u4ed6\u4eec\u7684\u91cd\u8981\u6027\u964d\u4f4e\u4e86\u3002\u9762\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6709\u4ec0\u4e48\u597d\u7684\u5904\u7406\u65b9\u6cd5\u5417\uff1f \u7b54\uff1a\u9996\u5148\uff0c\u672a\u5fc5\u8981\u4f7f\u7528one-hot\u8fd9\u79cd\u7f16\u7801\u65b9\u5f0f\u3002one-hot\u5728NLP\u9886\u57df\u4e2d\u6709\u660e\u663e\u5730\u6548\u679c\u63d0\u5347\uff0c\u4f46\u672a\u5fc5\u4f1a\u5728Lookalike\u95ee\u9898\u4e2d\u4f1a\u6709\u540c\u6837\u7684\u660e\u663e\u6548\u679c\u3002\u6240\u4ee5\uff0c\u8fd9\u91cc\u9700\u8981\u5148\u5bf9one-hot\u7f16\u7801\u65b9\u5f0f\u7684\u4f18\u70b9\u7f3a\u70b9\u505a\u4e2a\u8bc4\u4f30\u3002\u5982\u679c\u8981\u4f7f\u7528one-hot\u65b9\u5f0f\uff0c\u8fd8\u9700\u8981\u5e73\u8861\u4f18\u70b9\u548c\u7f3a\u70b9\u54ea\u4e2a\u5f71\u54cd\u66f4\u5927\u3002\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u601d\u8def\u6765\u89e3\u51b3\u7279\u5f81\u7a00\u91ca\u7684\u95ee\u9898\uff0c\u6216\u8bb8\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7feature weighting \u7684\u65b9\u5f0f\u6765\u964d\u4f4e\u7279\u5f81\u7a00\u91ca\u5e26\u6765\u7684\u8d1f\u9762\u6548\u679c\u3002 \u7279\u5f81\u5de5\u7a0b\u5bf9\u83b7\u5f97\u4e00\u4e2a\u597d\u7684\u7ed3\u679c\u5f88\u91cd\u8981\uff0c\u90a3\u5728CTR\u9884\u4f30\u4e2d\uff0c\u6211\u4eec\u662f\u5982\u4f55\u4eba\u5de5\u5730\u53bb\u63d0\u53d6\u4ea4\u53c9\u7279\u5f81\u5462\u3002\u6bd4\u5982\u6211\u77e5\u9053\u5730\u70b9\u548c\u98df\u7269\u8fd9\u4e24\u4e2a\u7279\u5f81\u7684\u4ea4\u53c9\u5f88\u5173\u952e\uff0c\u90a3\u5982\u4f55\u751f\u6210\u5173\u4e8e\u5730\u70b9\u548c\u98df\u7269\u8fd9\u4e24\u4e2a\u7279\u5f81\u7684\u4ea4\u53c9\u7279\u5f81\u5462\uff1f\u662f\u76f4\u63a5\u76f8\u4e58\u4f5c\u4e3a\u65b0\u7684\u7279\u5f81\u5417\uff1f \u7b54\uff1a\u9996\u5148\u8981\u5bf9\u6bcf\u4e2a\u53d8\u91cf\u8fdb\u884c\u72ec\u70ed\u7f16\u7801\uff08one-hot encoding\uff09\uff0c\u5206\u522b\u5f97\u5230\u4e00\u4e2a\u53ea\u67090/1\u503c\u7684\u5411\u91cf\uff0c\u7136\u540e\u5bf9\u4e0d\u540c\u53d8\u91cf\u5bf9\u5e94\u5411\u91cf\u8fdb\u884c\u7b1b\u5361\u5c14\u79ef\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fdb\u884c\u7279\u5f81\u7ec4\u5408\uff0c\u7279\u5f81\u7ec4\u5408\u540e\u5f97\u5230\u7684\u5411\u91cf\u957f\u5ea6\u662f\u4e4b\u524d2\u4e2a\u53d8\u91cf\u7684\u5411\u91cf\u957f\u5ea6\u4e4b\u79ef\u3002 \u6211\u60f3\u8bf7\u95ee\u4e00\u4e0bFFM\u7684\u4e8b\u60c5\uff0c\u5148FFM\u518d\u52a0gbdt\u6ca1\u6709\u6548\u679c\u54e6\uff0cFFM\u90a3\u4e2a\u5f00\u6e90\u4ee3\u7801\u7684\u5e94\u7528\u80fd\u5e2e\u6211\u8bb2\u89e3\u4e00\u4e0b\u5417\uff1f \u7b54\uff1a\u9996\u5148\u662fFFM\u6216\u8005FM\uff0c\u8fd9\u6837\u7684\u6a21\u578b\u9002\u7528\u4e8e\u8f93\u5165\u7279\u5f81\u662f\u9ad8\u7ef4\u7a00\u758f\u53d8\u91cf\uff0c\u800c\u6811\u6a21\u578b\u5bf9\u8f93\u5165\u6570\u636e\u683c\u5f0f\u6ca1\u6709\u8981\u6c42\uff1b\u5176\u6b21\uff0cFM\u7684\u590d\u6742\u5ea6\u662fO(N^2)\uff0c\u800cFFM\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u5f97\u5230O(N^3)\uff0c\u5982\u6b64\u9ad8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6709\u53ef\u80fd\u8bad\u7ec3\u7684\u65f6\u5019\u6ca1\u6709\u5b8c\u5168\u6536\u655b\uff0c\u4f7f\u5f97\u6548\u679c\u6709\u6240\u5f71\u54cd\uff1b\u6700\u540e\uff0c\u5176\u5b9e\u8fd92\u4e2a\u662f\u4e0d\u540c\u4f53\u7cfb\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u8003\u8651\u5206\u522b\u8bad\u7ec3\uff0c\u6700\u7ec8\u505a\u4e00\u4e2a\u6a21\u578b\u7684ensemble\u3002 \u4e00\u822c\u600e\u4e48\u6837\u91cd\u65b0\u7ec4\u5408\u7279\u5f81\u6216\u8005\u5728\u539f\u6709\u7279\u5f81\u7684\u57fa\u7840\u4e0a\u63d0\u53d6\u65b0\u7684\u7279\u5f81\uff1f \u7b54\uff1a\u4e00\u822c\u6709\u4e09\u79cd\u601d\u8def\uff1a1\uff09\u4f7f\u7528\u7279\u5f81\u4ea4\u53c9\uff08cross\uff09\u7684\u65b9\u6cd5\uff0c\u5373\u5148\u5bf9\u6bcf\u4e2a\u53d8\u91cf\u8fdb\u884c\u72ec\u70ed\u7f16\u7801\uff0c\u5206\u522b\u5f97\u5230\u4e00\u4e2a\u53ea\u67090/1\u503c\u7684\u5411\u91cf\uff0c\u7136\u540e\u5bf9\u4e0d\u540c\u53d8\u91cf\u7684\u5411\u91cf\u8fdb\u884c\u7b1b\u5361\u5c14\u79ef\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fdb\u884c\u7279\u5f81\u7ec4\u5408\uff1b2\uff09\u4f7f\u7528\u6811\u6a21\u578b\uff08\u5982GBDT, XGboost\u7b49\uff09\u5bf9\u6570\u636e\u8fdb\u884c\u62df\u5408\uff0c\u81ea\u52a8\u5f97\u5230\u7279\u5f81\u7ec4\u5408\uff08\u4ece\u6839\u90e8\u5230\u53f6\u5b50\u8282\u70b9\u5bf9\u5e94\u8def\u5f84\u7684\u591a\u4e2a\u7279\u5f81\u5c31\u662f\u4e00\u4e2a\u7279\u5f81\u7ec4\u5408\u7ed3\u679c\uff09\uff1b3\uff09\u4f7f\u7528DNN\uff0cFM\u7b49\u5bf9\u539f\u59cb\u7279\u5f81\u8fdb\u884cembedding\uff0c\u51cf\u5c11\u7a00\u758f\u6027\uff0c\u4e5f\u589e\u52a0\u4e86\u7279\u5f81\u8868\u8fbe\u80fd\u529b\u3002 \u6570\u636e\u6b63\u6837\u672c\u3001\u8d1f\u6837\u672c\u662f\u5982\u4f55\u91c7\u6837\u51fa\u6765\u7684\uff1f \u7b54\uff1a\u6211\u4eec\u7684\u8bc4\u4f30\u6307\u6807AUC\u5bf9\u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\u4e5f\u662f\u4e0d\u654f\u611f\u7684\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u9009\u624b\u505a\u9898\u3002 \u5bf9\u4e8e\u6b63\u8d1f\u6837\u672c\u5f88\u4e0d\u5747\u8861\u65f6\uff0c\u6709\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u89e3\u51b3\u529e\u6cd5\u5417\uff1f \u7b54\uff1a\u4e00\u662f\u7528\u964d\u91c7\u6837\u6216\u8fc7\u91c7\u6837\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6b63\u8d1f\u6837\u672c\u6570\u91cf\u6301\u5e73\uff0c\u672c\u9898\u4e2d\u53ef\u4ee5\u5bf9\u8d1f\u4f8b\u8fdb\u884c\u964d\u91c7\u6837\uff0c\u8fd9\u6837\u4e5f\u80fd\u52a0\u901f\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\uff1b\u4e8c\u662f\u4fdd\u6301\u6b63\u8d1f\u6837\u672c\u6570\u91cf\u4e0d\u53d8\uff0c\u8bad\u7ec3\u6a21\u578b\u65f6\u5bf9\u6b63\u8d1f\u6837\u672c\u53d6\u4e0d\u540c\u7684\u6743\u91cd\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u968f\u673a\u79cd\u5b50\u8fdb\u884c\u91c7\u6837\uff0c\u8bad\u7ec3\u76f8\u540c\u7684\u6a21\u578b\uff0c\u7136\u540e\u8fdb\u884c\u6a21\u578b\u7684\u96c6\u6210\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u5347\u6548\u679c\u3002 \u6211\u4f7f\u7528\u4e86CTR\u9884\u4f30\u4e2d\u7ecf\u5e38\u4f7f\u7528Deep FFM\u4ee5\u53ca\u4e00\u4e9b\u53d8\u4f53\uff0c\u53d1\u73b0\u8fd8\u662f\u6ca1\u6709\u6811\u6a21\u578bxgboost\u597d\uff0c\u5e76\u6ca1\u6709\u8bba\u6587\u4e2d\u9610\u8ff0\u7684\u5f88\u4f18\u5f02\u7684\u6027\u80fd\u53d8\u73b0\u3002\u53ef\u80fd\u662f\u6211\u8c03\u53c2\u8fd8\u5b58\u5728\u95ee\u9898\uff0c\u8fd8\u662f\u8bf4\u8fd9\u4e9b\u6a21\u578b\u5b9e\u7528\u573a\u666f\u7684\u5dee\u8ddd\u6bd4\u8f83\u5927\uff1f\u662f\u5426\u6709\u4e2a\u901a\u7528\u7684\u6a21\u578b\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f \u7b54\uff1a\u636e\u6211\u6240\u77e5\uff0cCTR\u91cc\u9762\u786e\u5b9eFFM\u8fd9\u4e9b\u6a21\u578b\u7528\u7684\u66f4\u591a\u4e00\u4e9b\uff0c\u6811\u6a21\u578b\u6bd4\u8f83\u5c11\u5728\u7528\uff0c\u56e0\u4e3a\u5b83\u7684\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\u3002\u4f60\u521a\u8bf4\u6df1\u5ea6\u6a21\u578b\u548c\u6811\u6a21\u578b\u6548\u679c\u5dee\u4e0d\u591a\uff0c\u5176\u5b9e\u5df2\u7ecf\u53ef\u4ee5\u8bf4\u660e\u95ee\u9898\u4e86\u3002\u5728\u5de5\u4e1a\u754c\u548c\u5b66\u672f\u754c\u786e\u5b9e\u5b58\u5728\u4e00\u4e9bgap\uff0c\u5de5\u4e1a\u754c\u9664\u4e86\u8003\u8651AUC\u8fd9\u4e9b\u79bb\u7ebf\u6307\u6807\uff0c\u8fd8\u4f1a\u66f4\u591a\u5730\u8003\u91cf\u7ebf\u4e0a\u5b9e\u65f6\u54cd\u5e94\u901f\u5ea6\uff0c\u4ee5\u53ca\u505a\u7279\u5f81\u662f\u5426\u65b9\u4fbf\u3001\u8bad\u7ec3\u65f6\u95f4\u662f\u5426\u5f88\u5feb\u3001\u6a21\u578b\u8fed\u4ee3\u66f4\u65b0\u7684\u901f\u5ea6\u662f\u5426\u5f88\u5feb\u3001\u8fd9\u4e9b\u7b97\u6cd5\u662f\u5426\u53ef\u4ee5online\uff0c\u4f46\u662f\u6811\u6a21\u578b\u5176\u5b9e\u4e0d\u592a\u597d\u505a\u5230\u8fd9\u4e9b\u3002 \u6211\u5728\u505a\u4e00\u4e2a\u6743\u91cd\u5b66\u4e60\u7684\u7279\u5f81\u62bd\u53d6\u65b9\u6cd5\uff0c\u9700\u8981\u4e00\u5217\u4e00\u5217\u7684\u62bd\u53d6\uff0c\u4f46\u662f\u7528\u4e86one-hot\u540e\u7279\u5f81\u6709\u51e0\u5341\u4e07\u7ef4\uff0c\u6709\u6ca1\u6709\u4e00\u79cd\u964d\u7ef4\u7684\u65b9\u5f0f\u51cf\u5c11\u7279\u5f81\u7ef4\u5ea6\uff1f \u7b54\uff1a\u5173\u4e8e\u7279\u5f81\u91cd\u8981\u7a0b\u5ea6\u7684\u8bc4\u5224\uff0c\u6211\u63d0\u4f9b\u51e0\u4e2a\u601d\u8def\uff1a\u4e00\u662f\u53ef\u4ee5\u5728\u505aone-hot\u4e4b\u524d\u505a\u7279\u5f81\u91cd\u8981\u5ea6\u7684\u5b66\u4e60\uff0c\u4e8c\u662f\u7528sparse coding\u7684\u6570\u636e\u8868\u8fbe\u65b9\u5f0f\uff0c\u5728\u53e6\u4e00\u7ef4\u7a7a\u95f4\u4e2d\u53ef\u4ee5\u63a7\u5236\u7ef4\u5ea6\u5927\u5c0f\uff0c\u505afeature selection\uff0c\u518d\u505adecoding\uff0c\u627e\u5230\u539f\u59cb\u7279\u5f81\u4e2d\u7684\u91cd\u8981\u7a0b\u5ea6\u3002\u53ef\u4ee5\u8bd5\u4e0b\u8fd9\u4e2a\u95ee\u9898\u4e2d\u8fd9\u79cd\u601d\u8def\u662f\u5426\u6709\u6548\u3002 \u6211\u5728\u505a\u7279\u5f81\u9009\u62e9\u7684\u65f6\u5019\uff0c\u5982\u679c\u624b\u52a8\u5220\u9664\u4e00\u5217\u5217\u7279\u5f81\uff0c\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u8fd8\u7528\u4e86\u4e9b\u76f8\u5173\u7cfb\u6570\u7684\u65b9\u6cd5\uff0c\u6548\u679c\u5c31\u66f4\u5dee\u4e86\uff0c\u8bf7\u95ee\u6709\u6ca1\u6709\u4ec0\u4e48\u597d\u7684\u7279\u5f81\u9009\u62e9\u65b9\u5f0f\u5462\uff1f \u7b54\uff1a\u6211\u6240\u4e86\u89e3\u7684\u7279\u5f81\u9009\u62e9\u4e3b\u8981\u5305\u62ec\u4e24\u79cd\u7c7b\u578b\uff0c\u4e00\u79cd\u662ffilter base\uff0c\u4e00\u79cd\u662fwrapper base\uff0c\u6211\u4e86\u89e3\u5b83\u4eec\u591a\u6570\u662f\u7528\u4e00\u4e9brecursive feature elimination\u7684\u65b9\u5f0f\uff0c\u5faa\u73af\u5730\u5220\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u5f81\uff0c\u7136\u540eretrain\u6a21\u578b\u518d\u5220\u9664\uff0c\u8fd9\u79cd\u65b9\u5f0f\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4f46\u662f\u53ef\u80fd\u6bd4\u6a21\u578b\u81ea\u5e26\u7684\u9009\u7279\u5f81\u65b9\u5f0f\u6548\u679c\u4f1a\u597d\u4e9b\u3002\u4e00\u4e9bpaper\u4f1a\u5728RFE\u7684\u6a21\u578b\u4e2d\u505a\u4e00\u4e9b\u7b80\u5316\uff0c\u6bd4\u5982\u5220\u6389\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u5f81\u540e\uff0c\u4e0d\u505aretrain\uff0c\u4e5f\u80fd\u8fbe\u5230\u7c7b\u4f3c\u7684\u6548\u679c\uff0c\u4e0d\u8fc7\u76f8\u6bd4\u4e8eLR\u81ea\u5e26\u7684\u7279\u5f81\u9009\u62e9\u590d\u6742\u5ea6\u8fd8\u662f\u9ad8\u4e9b\uff0c\u8fd9\u8fb9\u662f\u4e00\u4e2atrade-off\u3002 (Filter\u3001Wrapper\u3001Embedded) one hot \u7279\u5f81\u548c\u7edf\u8ba1\u7279\u5f81: \u5728\u521d\u8d5b\u65f6\u5019\u6211\u4eec\u53d1\u73b0one-hot\u7684\u7279\u5f81\u548c\u6211\u4eec\u7684\u7edf\u8ba1\u7279\u5f81\u5dee\u5f02\u6027\u5f88\u5927\uff0c \u6240\u4ee5\u6211\u4eec\u5728\u81ea\u5df1\u8fd1\u767e\u7ef4\u7684\u7edf\u8ba1\u7279\u5f81\u4e0a\u76f4\u63a5\u52a0\u5165\u4e86one-hot\u7684\u7279\u5f81\uff0c\u5e26\u6765\u4e867\u4e2a\u5343\u5de6\u53f3\u7684\u63d0\u9ad8\uff0c\u800c\u6211\u4eec\u7684\u7edf\u8ba1\u7279\u5f81\u4e3a\u4e86\u9632\u6b62\u4fe1\u606f\u6cc4\u9732\u90fd\u662f\u91c7\u75285-fold\u7684\u65b9\u5f0f\u63d0\u53d6\u7684\u3002 \u6a21\u578b: \u521d\u8d5b\u65f6\u6211\u4eec\u4e00\u5171\u8bad\u7ec3\u4e86\u4e09\u79cd\u6a21\u578b\uff0c\u5206\u522b\u662flgb\uff0cdeepfm\uff0cdeepffm\uff0c\u5176\u4e2dlgb\u5206\u6570\u6700\u9ad8\uff0c\u5e76\u901a\u8fc7\u7b80\u5355\u7684\u52a0\u6743\u5e73\u5747\u5f97\u5230\u4e86\u4e0d\u9519\u7684\u5206\u6570 FFM baseline: https://zhuanlan.zhihu.com/p/36302396 \u666e\u901a\u79bb\u6563\u7279\u5f81\u5206\u6876: FFM\u4e0d\u4ec5\u80fd\u4f7f\u7528\u5355\u7eaf\u7684id\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8fde\u7eed\u503c\u7279\u5f81\u5206\u6876\u79bb\u6563\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528\u8fde\u7eed\u503c\u7279\u5f81\u3002\u6211\u4eec\u9009\u7684\u662f\u7b49\u8ddd\u79bb\u5206\u621010\u7ec4\uff0c\u5c06\u90e8\u5206lgb\u6a21\u578b\u7684\u8fde\u7eed\u503c\u7279\u5f81\uff08\u9700\u8981\u4e0e\u5355\u7eaf\u7684id\u76f8\u5173\u6027\u8f83\u4f4e\uff09\uff0c\u8f93\u5165FFM\u4e4b\u540e\uff0cFFM\u521d\u8d5bA\u699c\u8fbe\u5230\u4e86750\u7684\u5206\u6570\u3002 \u7edf\u8ba1\u7279\u5f81\u5206\u6876: \u672c\u6b21\u8d5b\u9898\u5728\u505a\u7279\u5f81\u5de5\u7a0b\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5e7f\u544a\u548c\u7528\u6237\u4e4b\u95f4\u7684\u4ea4\u53c9\u7279\u5f81\u7684\u91cd\u8981\u6027\u9760\u524d\u3002\u867d\u7136FFM\u53ef\u4ee5\u81ea\u52a8\u5b66\u4e60\u7279\u5f81\u4e4b\u95f4\u7684\u4e24\u4e24\u4ea4\u53c9\uff0c\u4f46\u662f\u6211\u4eec\u611f\u89c9\u9700\u8981\u66f4\u663e\u5f0f\u7684\u6307\u51fa\u8fd9\u79cd\u4ea4\u53c9\uff0c\u540c\u65f6\u53ef\u4ee5\u7b49\u540c\u4e8e\u5b9e\u73b0\u4e86\u90e8\u5206\u5f3a\u7279\u5f81\u7684\u4e09\u4ea4\u53c9\u548c\u56db\u4ea4\u53c9\u3002\u4e3a\u6b64\u6211\u4eec\u5c06lgb\u6a21\u578b\u4e2d\u4ea4\u53c9\u8f6c\u5316\u7387\u7279\u5f81\u5206\u6876\u79bb\u6563\u8f93\u5165\u6a21\u578b\uff0c\u505a\u4e86\u8fd9\u90e8\u5206\u7684\u9884\u5904\u7406\u540e\uff0cFFM\u521d\u8d5bA\u699c\u8fbe\u5230\u4e860.7557\u7684\u7ebf\u4e0a\u5206\u6570\u3002 \u6a21\u578b\u878d\u5408: FFM\u6a21\u578b\u7684\u9884\u6d4b\u548clgb\u8fd8\u6709nn\u6a21\u578b\u7684\u9884\u6d4b\u5b58\u5728\u7740\u8f83\u5927\u7684\u5dee\u5f02\u6027\uff0c\u878d\u5408\u6548\u679c\u663e\u8457\u3002 dataframe\u8bfb\u5199\u5229\u5668: \u8fdb\u5165\u590d\u8d5b\u540e\u6570\u636e\u8f83\u5927\uff0c\u4f7f\u7528pickle\u548chdf\u5b58\u50a8\u4e2d\u95f4\u7ed3\u679c\u65f6\u4f1a\u51fa\u73b0\u4e00\u4e9b\u5b58\u50a8\u62a5\u9519\u3002\u8fd9\u91cc\u6211\u4eec\u63a8\u8350\u5927\u5bb6\u4f7f\u7528feather\u8fd9\u4e2a\u5305\uff0c\u5b89\u88c5\u5b8c\u8fd9\u4e2a\u5305\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06dataframe\u5bf9\u8c61\u5b58\u50a8\u4e3afeather\u683c\u5f0f\uff0c\u53c8\u5feb\u53c8\u597d\u3002 \u5317\u5927\u5f00\u6e90\u7684xlearn: \uff0c\u4f18\u70b9\u662f\u540c\u6837\u7684\u9884\u6d4b\u6548\u679c\u4e0b\u901f\u5ea6\u6bd4libffm\u5feb\u4e86\u51e0\u500d\uff0c\u7136\u540e\u53ef\u4ee5\u8bbe\u7f6eauc\u4f5c\u4e3a\u89c2\u6d4b\u6307\u6807\uff0c\u5e76\u4e14\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7python\u8c03\u7528\u3002 FFM\u91cd\u8981\u53c2\u6570: FFM\u6bd4\u8f83\u91cd\u8981\u7684\u53c2\u6570\u6709\u9690\u5c42\u5411\u91cf\u7ef4\u5ea6k\uff0c\u5b66\u4e60\u7387lr\u8fd8\u6709\u6b63\u5219\u7cfb\u6570lambda \u6d41\u5f0f\u5904\u7406: \u7ec4\u5408\u7279\u5f81 \uff1a (creativesize gender) (advertised LBS ) \u5f00\u6e90\u6bd4\u8d5b: kaggle criteo, avazu, avito, pCTR \u7279\u5f81\u5de5\u7a0b\u90e8\u5206\uff0cCTR \u95ee\u9898\u7684\u5e38\u89c1\u7279\u5f81\u3002 ID \u4ea4\u53c9\u7279\u5f81\uff0cID \u7edf\u8ba1\u7279\u5f81\u7b49\uff0c\u5e38\u89c1\u7684\u53ef\u4ee5\u4ece\u53c2\u8003 Kaggle \u4e4b\u524d Criteo, Avazu, Avito \u7684\u70b9\u51fb\u7387\u9884\u4f30\u6bd4\u8d5b\u5f00\u6e90\u65b9\u6848\u3002 2017 \u817e\u8baf\u8d5b \u70b9\u51fb\u7387 vs \u8f6c\u53d1\u7387\u9884\u4f30: \u70b9\u51fb\u8f6c\u5316\u5bf9\u6bd4 \u5bf9\u4e8e\u6b63\u8d1f\u6837\u672c\u5f88\u4e0d\u5747\u65f6\u6bd4\u8f83\u597d\u7684\u89e3\u51b3\u529e\u6cd5\u662f\u4ec0\u4e48\uff0c\u8fd8\u6709\u5c31\u662f\u5bf9\u4e8e\u591a\u4e2a\u7279\u5f81\u7684\u7ec4\u5408\u4e00\u822c\u7528\u4ec0\u4e48\u6837\u7684\u601d\u8def\uff1f \u5728 imbalance \u95ee\u9898\u4e2d\uff0c\u901a\u5e38\u53ef\u4ee5\u5bf9\u6837\u672c\u8f83\u591a\u7684\u8d1f\u4f8b\u8fdb\u884c\u4e0b\u91c7\u6837\uff08\u4fdd\u6301\u6b63\u4f8b\u4e0d\u53d8\uff09\uff0c\u53ef\u4ee5\u52a0\u901f\u6a21\u578b\u7684\u8bad\u7ec3\u3002\u53e6\u5916\uff0c\u4e3a\u4e86\u63d0\u5347\u6548\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u968f\u673a\u79cd\u5b50\u8fdb\u884c\u91c7\u6837\uff0c\u8bad\u7ec3\u76f8\u540c\u7684\u6a21\u578b\uff0c\u7136\u540e\u8fdb\u884c\u6a21\u578b\u7684\u96c6\u6210\u3002\u53ef\u4ee5\u53c2\u8003\u4e0b Avito \u70b9\u51fb\u7387\u9884\u4f30\u6bd4\u8d5b\u4e2d\uff0cOwenzhang \u7684\u5efa\u6a21\u65b9\u5f0f\u3002\u7279\u522b\u9700\u8981\u63d0\u9192\u7684\u662f\uff0c\u672c\u6b21\u6bd4\u8d5b\u7684\u8bc4\u4f30\u6307\u6807\u662f logloss\uff0c\u5176\u5bf9\u6837\u672c\u7684\u6b63\u8d1f\u6bd4\u4f8b\u5206\u5e03\u8f83\u4e3a\u654f\u611f\uff0c\u5728\u8fdb\u884c\u91c7\u6837\uff0c\u6539\u53d8\u4e86\u6837\u672c\u7684\u539f\u59cb\u5206\u5e03\u540e\uff0c\u4e00\u822c\u9700\u8981\u5bf9\u9884\u6d4b\u7ed3\u679c\u8fdb\u884c calibration\uff0c\u4f7f\u5f97\u5176\u63a5\u8fd1\u539f\u59cb\u6570\u636e\u7684\u5206\u5e03\u3002 \u81f3\u4e8e\u7279\u5f81\u7ec4\u5408\u65b9\u9762\uff0c\u9700\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\u3002\u5982\u679c\u662f ID \u7279\u5f81\uff0c\u53ef\u4ee5\u7b80\u5355\u7684\u505a\u7b1b\u5361\u5c14\u4e58\u79ef\u4ea4\u53c9\u3002\u5982\u679c\u662f\u6570\u503c\u578b\u7279\u5f81\uff08\u8b6c\u5982\u67d0\u4e9b\u7edf\u8ba1\u91cf\uff09\uff0c\u53ef\u4ee5\u8fdb\u884c\u52a0\u51cf\u4e58\u9664\u53d8\u6362\u7b49\u3002\u53e6\u5916\uff0c\u63a8\u8350\u5c1d\u8bd5 XGBoost \u548c DNN \u7b49\u6a21\u578b\uff0c\u53ef\u4ee5\u4ece\u6570\u636e\u91cc\u9762\u5b66\u5230\u8f83\u4f18\u7684\u7279\u5f81\u7ec4\u5408\u65b9\u5f0f\u3002 \u4e0d\u540c\u957f\u5ea6\u7684\u591a\u503c\u7279\u5f81\u5904\u7406: \u6570\u636e\u6e05\u6d17\u90e8\u5206\uff0cCTR \u95ee\u9898\u6709\u6ca1\u6709\u4ec0\u4e48\u7ecf\u5178\u7684\u5730\u65b9\uff0c\u9488\u5bf9\u8fd9\u4e2a\u6570\u636e\u96c6\u66f4\u597d \u6bd4\u8f83\u6709\u6311\u6218\u7684\u662f App \u6570\u636e\uff0c\u6bcf\u4e2a\u7528\u6237\u5b89\u88c5\u7684 App \u6570\u76ee\u4e0d\u4e00\u6837\uff0c\u5982\u4f55\u8f6c\u6362\u6210\u7279\u5f81\uff0c\u4e5f\u662f\u4e00\u4e2a\u6311\u6218\u3002\u53ef\u4ee5\u53c2\u8003\u4e0b TalkingData \u5728 Kaggle \u4e0a\u9762\u7684\u6bd4\u8d5b\u3002 FFM vs xgboost FM/FFM \u5bf9\u4e8e\u5927\u91cf\u7a00\u758f ID \u7c7b\u7684\u7279\u5f81\u4f1a\u8f83\u597d\uff0c\u4f46\u53ef\u80fd\u66f4\u4f9d\u8d56\u4e0e\u7279\u5f81\u5de5\u7a0b\uff08\u6837\u672c\u7279\u5f81\u7684\u7ec4\u7ec7\u5f62\u5f0f\uff09\uff1bXGBoost \u51e0\u4e4e\u662f off-the-shelf\uff0c\u8fd0\u884c\u901f\u5ea6\u8f83\u5feb\u3002FFM \u548c XGBoost \u5728\u5177\u4f53\u5e94\u7528\u573a\u666f\u7684\u6548\u679c\u5dee\u5f02\uff0c\u8ddf\u4efb\u52a1\uff0c\u6570\u636e\uff0c\u7279\u5f81\u8fd8\u6709\u4f7f\u7528\u65b9\u5f0f\u6709\u5173\uff0c\u6211\u76ee\u524d\u8fd8\u6ca1\u6709\u770b\u5230\u54ea\u4e00\u4e2a\u662f\u7edd\u5bf9\u901a\u7528\u7684\u597d\u7684\u3002\u5728 Criteo \u548c Avazu \u70b9\u51fb\u7387\u9884\u4f30\u6bd4\u8d5b\u4e2d\uff0c\u524d\u51e0\u540d\u51e0\u4e4e\u90fd\u662f\u7528 FFM\uff0c\u7136\u800c\u5728\u968f\u540e\u7684 Avito \u70b9\u51fb\u7387\u9884\u4f30\u6bd4\u8d5b\u4e2d\uff0c\u51a0\u519b Owenzhang \u7684\u7ecf\u9a8c\u662f\u201c XGBoost \u8981\u6bd4 FFM \u597d\u5f88\u591a\u201d\u3002 \u7c7b\u522b\u7279\u5f81\u662f\u5426onehot \u8fd9\u91cc\u4e0d\u6e05\u695a\u9009\u624b\u4f7f\u7528\u7684\u6a21\u578b\u3002\u5982\u679c LR/DNN\uff0c\u8fdb\u884c One-hot \u662f\u5408\u7406\u7684\u3002\u5982\u679c\u4f7f\u7528 RF/XGBoost \u7b49\u6811\u6a21\u578b\uff0c\u53ef\u4ee5\u4e0d\u7528 One-hot\uff0c\u8ba9\u8fd9\u4e9b\u6a21\u578b\u628a\u8fd9\u4e2a\u7c7b\u522b\u7279\u5f81\u5f53\u4f5c\u6570\u503c\u578b\u7279\u5f81\uff0c\u7136\u540e\u8fdb\u884c\u5206\u88c2\u3002\u5c24\u5176\u662f\u5f53\u7c7b\u522b\u7279\u5f81\u7684\u53d6\u503c\u8f83\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u8b6c\u5982100W\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165 XGBoost\u3002\u5f53\u7136\u4e5f\u6709\u5176\u4ed6\u66f4\u597d\u7684\u7279\u5f81\u8bbe\u8ba1\u7684\u65b9\u6cd5\u3002 \u9488\u5bf9\u672c\u6b21\u6bd4\u8d5b\u7ed9\u51fa\u7684\u65f6\u95f4\u523b\u5ea6\u6211\u4eec\u65e0\u6cd5\u6709\u6548\u5efa\u7acb\u7ebf\u4e0b\u7684\u9a8c\u8bc1\u96c6\uff0c\u95ee\u4e13\u5bb6\u600e\u4e48\u770b\uff1f \u672c\u6b21\u6bd4\u8d5b\u63d0\u4f9b\u7684\u6570\u636e\u662f\u65f6\u5e8f\u6570\u636e\uff0c\u4e00\u822c\u6309\u7167\u65f6\u95f4\u5148\u540e\u5212\u5206\u672c\u5730\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u3002\u8fd9\u4e2a\u95ee\u9898\u5176\u4e2d\u7684\u4e00\u4e2a\u96be\u70b9\u662f\u8bad\u7ec3\u6570\u636e\u6700\u540e\u51e0\u5929 label = 0 \u7684\u6570\u636e\u7531\u4e8e\u56de\u6d41\u5ef6\u8fdf\u53ef\u80fd\u5b58\u5728\u566a\u58f0\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u6709\u6548\u7684\u9a8c\u8bc1\u96c6\u4e5f\u662f\u9009\u624b\u4eec\u9700\u8981\u8003\u8651\u7684\u4e00\u4e2a\u6311\u6218\u3002 \u4e00\u4e2a\u63d0\u793a\uff0c\u6570\u636e\u4e2d\u63d0\u4f9b\u4e86\u56de\u6d41\u65f6\u95f4\uff0c\u53ef\u4ee5\u4e00\u5929\u3001\u4e24\u5929\u5206\u522b\u80fd\u56de\u6d41\u591a\u5c11\u6570\u636e\u3002\u8fd9\u6837\u53ef\u4ee5\u5206\u6790\u51fa\u81ea\u5df1\u6784\u9020\u7684\u9a8c\u8bc1\u96c6\u548c\u771f\u5b9e\u6570\u636e\u7684\u5dee\u5f02\u3002\u53e6\u4e00\u4e2a\u63d0\u793a\u662f\uff0c\u8f6c\u5316\u6570\u636e\u662f\u5e7f\u544a\u4e3b\u63d0\u4f9b\u7684\uff0c\u4e5f\u662f\u4e2a\u7ebf\u7d22\u3002 \u7ebf\u4e0a\u53ca\u7ebf\u4e0b\u7684\u4e00\u81f4: \u5bf9\u4e8e\u8fd9\u79cd\u6bd4\u8d5b\uff0c\u9996\u5148\u4f60\u5fc5\u987b\u505a\u5230CV\u548c\u7ebf\u4e0a\u7684\u6210\u7ee9\u76f8\u5dee\u4e0d\u5927\uff0c\u5176\u6b21 CV \u548c\u7ebf\u4e0a\u7684\u6210\u7ee9\u5e94\u8be5\u662f\u540c\u589e\u540c\u51cf\u7684\u3002\u5426\u5219\u540e\u9762\u4f60\u6240\u505a\u7684\u4e8b\u60c5\u90fd\u662f\u767d\u8d39\u529f\u592b\uff0c\u56e0\u4e3a CV \u6839\u672c\u4f53\u73b0\u4e0d\u51fa\u6765\u7279\u5f81\u7684\u597d\u574f\u3002\u4e3a\u4e86\u540c\u6b65 CV \u548c\u7ebf\u4e0a\u6210\u7ee9\uff0c\u6211\u82b1\u4e86\u4e24\u5929\u7684\u65f6\u95f4\u53bb\u505a\u8fd9\u4ef6\u4e8b\u60c5\u3002 \u6bd4\u8d5b\u521d\u671f\u6700\u91cd\u8981\u7684\u5c31\u662f\u6784\u5efa\u6709\u6548\u7684\u8bad\u7ec3\u96c6\uff0c\u80fd\u591f\u5c3d\u91cf\u4e0e\u7ebf\u4e0a\u60c5\u51b5\u540c\u6b65\uff0c\u6570\u636e\u96c6\u5212\u5206\u65b9\u6848\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003\u817e\u8baf\u5e7f\u544a\u7b97\u6cd5\u5927\u8d5b\u5b98\u65b9\u516c\u4f17\u53f7\u63a8\u8350\u53c2\u8003\u7684\u51e0\u4e2a\u6bd4\u8d5b\u7684\u4fe1\u606f\u3002 \u5982\u4f55\u8bc4\u4ef7\u7279\u5f81\u597d\u574f: \u5176\u5b9e\u4e00\u4e2a\u7279\u5f81\u7684\u597d\u574f\u7a0b\u5ea6\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7 groupby(\u2019feature\u2019,\u2019label\u2019) \u6765\u770b\u51fa\u7279\u5f81\u7684\u597d\u574f\u7a0b\u5ea6\uff0c\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u5728\u4e0d\u540c\u7684\u53d6\u503c\u4e0a\uff0c0\u548c1\u7684\u6bd4\u4f8b\u548c\u5e73\u5747\u6bd4\u4f8b\u76f8\u5dee\u5f88\u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7279\u5f81\u662f\u6709\u6548\u7684\u3002\u53c8\u6216\u8005\u53ef\u4ee5\u770b\u65b9\u5dee\uff0c\u8fd9\u6837\u53ef\u4ee5\u7701\u4e0b\u8bb8\u591a\u65f6\u95f4\u53bb\u6d4b\u8bd5\u7279\u5f81\u7684\u597d\u574f\u3002 \u7279\u5f81\u5206\u5e03\u662f\u5426\u4e00\u81f4 \u7279\u5f81\u5206\u5e03\u4e3b\u8981\u8003\u8651\u7684\u662f\u7ebf\u4e0a\u548c\u7ebf\u4e0b\u7684\u5206\u5e03\u5dee\u5f02\u3002\u7531\u4e8e\u8fd9\u6b21\u6bd4\u8d5b\u7684\u6570\u636e\u5177\u6709\u65f6\u5e8f\u6027\uff0c\u5e76\u4e14\u5f88\u591a\u9009\u624b\u4e5f\u56e0\u4e3a\u5728\u63d0\u53d6\u7279\u5f81\u65f6\u56e0\u4e3a\u4fe1\u606f\u6cc4\u9732\u7684\u539f\u56e0\u5bfc\u81f4\u7ebf\u4e0b\u6210\u7ee9\u63d0\u5347\u800c\u7ebf\u4e0a\u6210\u7ee9\u964d\u4f4e\uff0c\u8fd9\u4e9b\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u7279\u5f81\u503c\u7684\u5206\u5e03\u5dee\u5f02\u6765\u6392\u9664\u6389\uff0c\u5f53\u5206\u5e03\u4e0d\u4e00\u81f4\u7684\u7279\u5f81\uff0c\u6211\u4eec\u5e94\u8be5\u4f18\u5148\u5220\u9664\u3002\u7279\u5f81\u5206\u5e03\u5dee\u5f02\uff0c\u7b80\u5355\u7684\u53ef\u4ee5\u901a\u8fc7\u7ebf\u4e0b\u548c\u7ebf\u4e0a\u7279\u5f81\u503c\u7684\u5747\u503c\u3001\u6807\u51c6\u5dee\u5dee\u5f02\u6765\u8003\u8651\uff0c\u6216\u8005\u57fa\u4e8e\u5176\u5b83\u7684\u7edf\u8ba1\u5b66\u7684\u65b9\u6cd5\u3002(\u5982\u4f55\u5f97\u77e5\u7ebf\u4e0a\u7279\u5f81\u7684\u5747\u503c \u6807\u51c6\u5dee) \u52a0\u5165\u67d0\u4e2a\u7279\u5f81\u7ebf\u4e0blogloss\u4e0b\u964d\u4e86\u5f88\u591a\uff0c\u4f46\u662f\u7ebf\u4e0alogloss\u53cd\u800c\u5347\u9ad8\u4e86\u3002 \u200b 1\uff0e\u8fd9\u4e2a\u7279\u5f81\u662f\u4e0d\u662f\u4fe1\u606f\u6cc4\u9732\u4e86\uff0c\u6bd4\u5982\u4f7f\u7528\u4e86\u672a\u6765\u7684\u6570\u636e\u6765\u9884\u6d4b\u73b0\u5728\u3002\u80fd\u4e0d\u80fd\u91cd\u65b0\u6784\u9020\u7c7b\u4f3c\u7684\u7279\u5f81\u6765\u89c4\u907f\u65f6\u95f4\u3002 \u200b 2.\u6d4b\u8bd5\u96c6\u662f\u4e0d\u662f\u6ca1\u6709\u8fd9\u6837\u7684\u7279\u5f81\u3002\u6bd4\u5982\u8bad\u7ec3\u96c6\u867d\u7136\u4f7f\u7528\u4e86\u70b9\u51fb\u65f6\u95f4\u4e4b\u524d app_action \u7684\u6570\u636e\uff0c\u53ef\u662f\u8bad\u7ec3\u96c6\u6709\u5f53\u5929\u7684action\u4fe1\u606f\uff0c\u800c\u6d4b\u8bd5\u96c6\u6ca1\u6709\u5f53\u5929\u7684 action \u4fe1\u606f\u3002\u56e0\u6b64\u9020\u6210\u4e86\u8bad\u7ec3\u96c6\u6709\u8fd9\u6837\u7684\u7279\u5f81\uff0c\u800c\u6d4b\u8bd5\u96c6\u6ca1\u6709\u3002 \u7279\u5f81\u751f\u6210: \u4e00\u662f\u62cd\u8111\u95e8\uff08\u6bd4\u5982one-hot\u3001\u5404\u79cd\u7684\u8f6c\u5316\u7387\u3001\u70b9\u51fb\u91cf\u7b49\u7279\u5f81\uff09, \u4e00\u65b9\u9762\u662f\u901a\u8fc7\u5176\u5b83\u6a21\u578b\u7684\u7ed3\u679c\u6765\u751f\u6210\u5404\u79cd\u7279\u5f81\uff0c\u5176\u4e2d\u80fd\u5426\u901a\u8fc7\u6df1\u5ea6\u5b66\u4e60\u6765\u4ea7\u751f\u65b0\u7684\u7279\u5f81\uff1fLDA\u6765\u5206\u6790\u7528\u6237\u548capp\u4e4b\u95f4\u7684\u5173\u7cfb\uff1f\u7279\u5f81\u4e4b\u95f4\u4e0d\u65ad\u7684\u7ec4\u5408\u80fd\u5426\u4ea7\u751f\u6bd4\u8f83\u597d\u7684\u7279\u5f81\uff1f\u8fd9\u9700\u8981\u901a\u8fc7\u5bf9\u6570\u636e\u7684\u7406\u89e3\uff0c\u4e0d\u65ad\u7684\u5c1d\u8bd5\u548c\u5206\u6790\u3002\u4e0d\u8fc7\u6211\u7684\u5e76\u4e0d\u5efa\u8bae\u90a3\u4e48\u5feb\u7684\u8003\u8651\u7528\u5176\u5b83\u7684\u6a21\u578b\u6765\u751f\u6210\u7279\u5f81\uff0c\u6bd5\u7adf\u8fd9\u79cd\u65b9\u6cd5\u751f\u6210\u7684\u7279\u5f81\u6709\u65f6\u5019\u5e76\u4e0d\u80fd\u5f88\u597d\u7684\u7406\u89e3\uff0c\u5e76\u4e14\u9700\u8981\u7684\u5de5\u4f5c\u91cf\u4e5f\u6bd4\u8f83\u5927\uff0c\u6709\u65f6\u5019\u751f\u6210\u7684\u7279\u5f81\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u6709\u6548\u679c\u3002 \u7279\u5f81\u5de5\u7a0b\u601d\u8def: \uff081\uff09\u4e0d\u52a0\u6ca1\u7528\u7684\u7279\u5f81\uff1a\u7279\u5f81\u4e4b\u95f4\u5982\u679c\u5b58\u5728\u5f3a\u76f8\u5173\u6027\u4f1a\u7ed9\u6a21\u578b\u9020\u6210\u5e72\u6270\u3002\u9700\u8981\u63a7\u5236\u53d8\u91cf\uff0c\u4fdd\u7559\u6700\u6709\u6548\u3001\u7cbe\u7b80\u7684\u7279\u5f81\u3002\u6211\u4eec\u662f\u4f7f\u7528\u9010\u4e00\u5220\u9664\uff0c\u5bf9\u6bd4\u5b9e\u9a8c\u6765\u9a8c\u8bc1\u7279\u5f81\u6709\u6548\u6027\u3002 \uff082\uff09\u591a\u770b\u6bd4\u8d5b\u7ecf\u9a8c\u3001\u76f8\u5173\u8bba\u6587\uff1a\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\u5206\u6790\u95ee\u9898\uff0c\u5e38\u5e38\u80fd\u591f\u4e8b\u534a\u529f\u500d\u3002\u6211\u4eec\u501f\u9274\u4e86CTR\u9884\u4f30\u7b49\u76f8\u5173\u6bd4\u8d5b\u7684\u7ecf\u9a8c\uff0c\u53c2\u8003\u4e86Kaggle\u7684\u5386\u5c4a\u6bd4\u8d5b\u5206\u4eab\uff0c\u4e5f\u770b\u4e86\u76f8\u5173\u83b7\u5956\u961f\u4f0d\u7684\u4ee3\u7801\uff0c\u53d7\u76ca\u532a\u6d45\u3002\u5bf9\u4e8e\u52a0\u7279\u5f81\u65f6\u9700\u8981\u8003\u8651\u7684\u7ec6\u8282\u53d8\u5f97\u66f4\u52a0\u6e05\u695a\u3002 \uff083\uff09\u89c2\u5bdf\u6570\u636e\uff0c\u56e0\u5730\u5236\u5b9c\u627e\u7279\u5f81\uff1a\u7279\u5f81\u5de5\u7a0b\u7684\u6784\u5efa\u9700\u8981\u7d27\u5bc6\u8054\u7cfb\u6570\u636e\u7279\u70b9\u3002\u5224\u65ad\u67d0\u4e2a\u7279\u5f81\u662f\u5426\u6709\u610f\u4e49\uff0c\u4e0d\u80fd\u53ea\u662f\u7a7a\u60f3\uff0c\u8981\u505a\u7edf\u8ba1\u5206\u6790\u3002\u6211\u4eec\u53ef\u4ee5\u5173\u6ce8\u4e00\u4e2a\u7279\u5f81\u5728\u4e0d\u540c\u6807\u7b7e\u4e2d\u7684\u6bd4\u4f8b\uff0c\u5173\u6ce8\u662f\u5426\u6709\u54ea\u4e9b\u7279\u6b8a\u7684\u60c5\u51b5\u4f1a\u5bf9\u8f6c\u5316\u6709\u5f88\u5927\u7684\u5f71\u54cd\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u5360\u6bd4\u662f\u5426\u5927\uff0c\u662f\u5426\u6709\u52a0\u4e3a\u7279\u5f81\u7684\u5fc5\u8981\u2026\u2026\u8fd9\u4e00\u7cfb\u5217\u7684\u95ee\u9898\u90fd\u9700\u8981\u89c2\u5bdf\u6570\u636e\uff0c\u505a\u6070\u5f53\u7684\u7edf\u8ba1\u8fdb\u884c\u5206\u6790\u3002 \u7279\u5f81\u7684\u7ec4\u5408 \u3002\u6bd4\u5982positionid\u548cconnectiontype\u7684\u7ec4\u5408\u7edf\u8ba1\u662f\u4e00\u4e2a\u5f88\u5f3a\u7684\u7279\u5f81\uff0c\u4f46\u662f\u5355\u7eaf\u7edf\u8ba1positionid\u548cconnectiontype\u5176\u5b9e\u662f\u6ca1\u6709\u529e\u6cd5\u8868\u8fbe\u51fa\u8fd9\u4e2a\u7279\u5f81\u7684\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u505a\u7ec4\u5408\u7279\u5f81\u7684\u7edf\u8ba1\uff0c\u6bd4\u5982\u7edf\u8ba1\u5b83\u4eec\u5171\u540c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8f6c\u6362\u6b21\u6570\uff0c\u8f6c\u6362\u7387\u7b49\u3002\u5bf9\u4e8e\u54ea\u4e9b\u7ec4\u5408\u7279\u5f81\u6bd4\u8f83\u6709\u7528\uff0c \u7528\u6237id\u7684\u8865\u5145: \u5bf9user_app_installed\u548cuser_app_actions\u4e24\u4e2a\u8868\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u5386\u53f2\u7edf\u8ba1\u3002\u56e0\u4e3auserid\u7ef4\u5ea6\u5f88\u9ad8\uff0c\u6240\u4ee5\u5728train.csv\u91cc\u9762\u5f88\u96be\u5f97\u5230\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684userid\u7684\u7279\u5f81\u8868\u8fbe\u7684\u3002\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u90a3\u4e24\u4e2a\u5b89\u88c5\u5217\u8868\uff0c\u7edf\u8ba1\u51fauserid\u7684\u5386\u53f2\u5b89\u88c5\u6b21\u6570\u4f5c\u4e3a\u7279\u5f81\u7684\u8865\u5145\u3002\u540c\u6837\u5730\uff0c\u4e5f\u53ef\u4ee5\u7edf\u8ba1\u51faappid\u7684\u5386\u53f2\u5b89\u88c5\u6b21\u6570\u3002\u901a\u8fc7\u6620\u5c04userid\u548cuser.csv\uff0cappid\u548capp_category.csv\uff0c\u8fd8\u53ef\u4ee5\u5f97\u5230\u5176\u4ed6\u7279\u5f81\u7684\u4e00\u4e9b\u7edf\u8ba1\u503c\u3002\u505a\u5b8c\u8fd9\u4e2a\u6700\u8d77\u7801\u53ef\u4ee5\u6709\u4e07\u5206\u4e4b\u4e94\u7684\u6548\u679c\u63d0\u5347\u3002 \u591a\u6ce8\u610f\u4e00\u4e9b\u91cd\u590d\u7684\u6570\u636e \uff0ctrain.csv\u4e2d\u6709\u5f88\u591a\u6570\u636e\u662f\u91cd\u590d\u51fa\u73b0\u7684\uff0c\u9664\u4e86label\u4e0d\u540c\u4ee5\u5916\uff0c\u5176\u4ed6\u7684\u7279\u5f81\u662f\u5168\u90e8\u4e00\u6837\u7684\u3002\u5f88\u591a\u5c0f\u4f19\u4f34\u5bf9\u8fd9\u4e9b\u6570\u636e\u9009\u62e9\u4e86\u53bb\u91cd\uff0c\u4f46\u662f\u4e0d\u5e78\u7684\u662f\uff0c\u6d4b\u8bd5\u96c6\u4e2d\u4e5f\u6709\u7c7b\u4f3c\u6570\u636e\u7684\u51fa\u73b0\u3002\u53bb\u91cd\u4ee5\u540e\uff0c\u7c7b\u4f3c\u7684\u6570\u636e\u6a21\u578b\u5f97\u4e0d\u5230\u8bad\u7ec3\uff0c\u6700\u540e\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u8868\u73b0\u80af\u5b9a\u662f\u4e0d\u597d\u7684\u3002\u6211\u4eec\u5bf9\u4e8e\u8fd9\u7c7b\u6570\u636e\u505a\u7684\u5904\u7406\u662f\u6dfb\u52a0\u4e00\u4e9b\u7279\u5f81\u53bb\u6807\u8bb0\u5b83\u4eec\u3002\u6bd4\u8f83\u7b80\u5355\u5730\u53ef\u4ee5\u4f7f\u7528\u987a\u5e8f\u6807\u7b7e\uff0c\u6807\u8bb0\u5b83\u662f\u7b2c\u51e0\u6b21\u91cd\u590d\u51fa\u73b0\u7684\u3002\u4f46\u662f\u8fd9\u6837\u5b50\u7b80\u5355\u7684\u4e0d\u4e00\u5b9a\u591f\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u53bb\u6316\u6398\u66f4\u6df1\u7684\u7279\u5f81\u53bb\u8868\u8fbe\u3002 \u7edf\u8ba1\u7279\u5f81\u7684\u6784\u5efa\u6280\u5de7(\u91cd\u8981): \u56e0\u4e3a\u6211\u4eec\u8981\u5bf9\u6bcf\u5929\u8fdb\u884c\u7edf\u8ba1\uff0c\u6240\u4ee5\u6211\u5efa\u8bae\u5927\u5bb6\u628aclicktime\u548cconversiontime\u8f6c\u5316\u4e3a\u8fd9\u79cd\u5f62\u5f0f\uff0c\u65b9\u4fbf\u6211\u4eec\u7edf\u8ba1\u4e00\u4e9b\u65f6\u95f4\u7279\u5f81\uff0c\u4e5f\u65b9\u4fbf\u6211\u4eec\u5212\u5206\u6570\u636e\u96c6\uff1a \u56fe\u6a21\u578b\u7279\u5f81: \u6211\u4eec\u53ef\u4ee5\u628a\u4e1a\u52a1\u8f6c\u5316\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u56fe\u6a21\u578b\uff0c\u7136\u540e\u5728\u56fe\u6a21\u578b\u91cc\u9762\u627e\u4e00\u4e9b\u7edf\u8ba1\u91cf\u6765\u4f5c\u4e3a\u7279\u5f81\uff0c\u901a\u8fc7\u56fe\u6a21\u578b\u4e5f\u53ef\u4ee5\u66f4\u52a0\u6df1\u5165\u7684\u7406\u89e3\u4e1a\u52a1\u573a\u666f\uff0c\u6211\u505a\u4e2a\u7b80\u5355\u7684\u793a\u610f\u56fe\uff1a \u521d\u6b65\u5206\u6790\uff1a\u4e0a\u56fe\u662f\u4e00\u4e2a\u7528\u6237\u5bf9\u4e00\u4e2a\u65f6\u95f4\u7a97\u53e3\u5185\u7684app\u7684\u8003\u5bdf\u8bb0\u5f55\uff0capp\u4e4b\u95f4\u7684\u7bad\u5934\u8868\u793a\u7528\u6237\u70b9\u51fb\u4e4b\u95f4\u7684\u8df3\u8f6c\uff0c\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u6bcf\u4e2aapp\u7684\u5165\u5ea6\uff0c\u8fd9\u6837\u53ef\u4ee5\u627e\u5230\u54ea\u4e2aapp\u66f4\u53d7\u6b64\u7528\u6237\u6b22\u8fce\u3002 \u56fe\u6a21\u578b\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u7684\u5206\u6790\u5de5\u5177\uff0c\u6bd4\u5982\u4f60\u8fd8\u53ef\u4ee5\u52a0\u81ea\u73af\uff0c\u8fd9\u6837\u53ef\u4ee5\u770b\u5230\u7528\u6237\u7684\u91cd\u590d\u70b9\u51fb\u60c5\u51b5\u7b49\u7b49\u3002 \u5927\u5185\u5b58\u6570\u636e\u7684\u5904\u7406\u529e\u6cd5: \u7279\u5f81\u5904\u7406 \u5728\u5904\u7406\u5927\u89c4\u6a21\u539f\u59cb\u6570\u636e\u65f6\uff0c\u9700\u8981\u5145\u5206\u501f\u52a9\u5916\u5b58\uff08\u786c\u76d8\uff09\u7a7a\u95f4\uff0c\u53ea\u628a\u771f\u6b63\u9700\u8981\u5904\u7406\u7684\u6570\u636e\u653e\u8fdb\u5185\u5b58\u3002\u4e00\u822c\u800c\u8a00\uff0c\u91c7\u7528\u6d41\u5f0f\u3001\u5206\u5757\u7684\u65b9\u5f0f\u5904\u7406\u6570\u636e\u53ef\u4ee5\u89e3\u51b3\u5927\u90e8\u5206\u95ee\u9898\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5177\u4f53\u7684\u6280\u5de7\u3002 a\uff09 \u53ea\u52a0\u8f7d\u9700\u8981\u7684\u6570\u636e\u5230\u5185\u5b58\u3002 \u6709\u4e9b\u7279\u5f81\u53ef\u4ee5\u901a\u8fc7\u5355\u6761\u6570\u636e\u76f4\u63a5\u5f97\u5230\uff0c\u5982\u661f\u671f\u7279\u5f81\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528 streaming \u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\uff0c\u6bcf\u6b21\u8bfb\u5165\u82e5\u5e72\u6570\u636e\uff08chunk\uff09\uff0c\u5904\u7406\uff0c\u751f\u6210\u7279\u5f81\uff0c\u7136\u540e\u518d\u5199\u5230\u786c\u76d8\u3002\u4f7f\u7528 pandas \u7684 read_csv\uff0c\u53ef\u4ee5\u8bbe\u7f6e chunksize \u53c2\u6570\uff0c\u8b6c\u5982 for chunk in read_csv ( infile, chunksize=10000 )\uff1b b\uff09 \u53ea\u4fdd\u7559\u9700\u8981\u7684\u6570\u636e\u5728\u5185\u5b58\u3002 \u51b3\u8d5b\u7684\u6570\u636e\u53ef\u4ee5\u76f4\u63a5\u88c5\u5230 16G \u5185\u5b58\u4e2d\uff0c\u6bcf\u6b21\u751f\u6210\u4e00\u6761\u6837\u672c\u7684\u7279\u5f81\uff0c\u5c31\u628a\u7279\u5f81\u76f4\u63a5\u5199\u5165\u786c\u76d8\uff0c\u4e0d\u5728\u5185\u5b58\u4fdd\u7559\u3002\u5982\u679c\u751f\u6210\u7684\u7279\u5f81\u8f83\u591a\uff0c\u53ef\u4ee5\u5206\u591a\u6b21\u751f\u6210\uff0c\u5199\u5230\u5206\u6563\u7684\u7279\u5f81\u6587\u4ef6\uff0c\u6700\u540e\u8fdb\u884c\u4e00\u4e2a merge \u64cd\u4f5c\u3002\u5728 merge \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5bf9\u591a\u4e2a\u7279\u5f81\u6587\u4ef6\u6309\u7167\u7edf\u4e00\u7684 key \u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u540c\u65f6\u626b\u63cf\u591a\u4e2a\u7279\u5f81\u6587\u4ef6\uff0c\u8fdb\u884cmerge\uff0c\u518d\u5199\u5230\u786c\u76d8\uff1b c\uff09 \u5145\u5206\u5229\u7528\u6392\u5e8f\u52a0\u901f\u3002 \u5728\u4e0a\u9762\u7684 streaming \u5904\u7406\u65b9\u5f0f\u4e2d\uff0c\u6709\u65f6\u9884\u5148\u5bf9\u6587\u4ef6\u6309\u7167\u67d0\u4e9b key \u6392\u5e8f\uff0c\u53ef\u4ee5\u52a0\u901f\u5904\u7406\u3002\u8b6c\u5982\u7edf\u8ba1\u67d0\u4e2a user \u5728\u5404\u4e2a clickTime \u4e4b\u524d\u7684\u5e73\u5747\u8f6c\u5316\u7387\uff0c\u53ef\u4ee5\u5bf9 train.csv \u6309\u7167 user & clickTime \uff08\u5f53\u7136\u53ef\u4ee5\u7ed3\u5408\u5176\u4ed6\u7684 key\uff0c\u5982 positionID\uff09\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u626b\u63cf\u6587\u4ef6\u8fdb\u884c\u7edf\u8ba1\u3002\u53c8\u8b6c\u5982\u7edf\u8ba1\u67d0\u4e2a user \u5728 clickTime \u524d\u5b89\u88c5\u7684 app \u6570\u91cf\uff0c\u53ef\u4ee5\u5bf9 train.csv \u548c user_app_actions.csv \u540c\u65f6\u6309\u7167 user & time \u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u4ea4\u66ff\u626b\u9762\u4e24\u4e2a\u6587\u4ef6\uff0c\u751f\u6210\u7edf\u8ba1\u7279\u5f81\u3002\u5bf9\u4e8e\u6392\u5e8f\u64cd\u4f5c\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Linux \u81ea\u5e26\u7684 sort \u547d\u4ee4\uff0c\u5728\u5c0f\u5185\u5b58\u4e0b\u5b8c\u6210\u6392\u5e8f\u64cd\u4f5c\u3002 \u7efc\u4e0a\uff0c\u5728\u5904\u7406\u5927\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u501f\u9274 split-apply-combine \u7684\u601d\u8def\u3002 \u4e0d\u5c11\u5f00\u6e90\u7684\u5de5\u5177\u652f\u6301\u5916\u5b58\u548c\u5728\u7ebf\u5b66\u4e60\uff0c\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\uff0c\u65e0\u9700\u4e00\u6b21\u6027\u628a\u6240\u6709\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u9020\u6210\u5185\u5b58\u74f6\u9888\u3002\u5e38\u7528\u7684\u4e00\u4e9b\u5de5\u5177\u5982\u4e0b\uff1a a) Vowpal Wabbit\uff1a\u652f\u6301 LR + \u9ad8\u9636\u7279\u5f81\u7ec4\u5408\uff0c\u5728\u7ebf\u5b66\u4e60 b) Libffm\uff1a\u652f\u6301\u5916\u5b58\u5b66\u4e60 c) XGBoost\uff1a\u652f\u6301\u5916\u5b58\u5b66\u4e60 d) Keras\uff1a\u901a\u8fc7\u6a21\u578b\u7684 fit_generator \u65b9\u6cd5\uff0c\u652f\u6301\u6279\u91cf\u8bfb\u5165\u6570\u636e\u8fdb\u884c\u8bad\u7ec3 \u95ee\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u7edf\u8ba1\u5386\u53f2\u8f6c\u5316\u7387\u5728\u5168\u96c6\u4e0a\u7edf\u8ba1\uff0c\u548c\u6ed1\u7a97\u7edf\u8ba1\u90fd\u4f1a\u6709\u6548\u679c\uff0c\u5168\u96c6\u4e0a\u7edf\u8ba1\u4e0d\u7b97\u4eba\u4e3a\u6570\u636e\u6cc4\u9732\u4e48\uff1f \u5728\u5168\u96c6\u4e0a\u9762\u7edf\u8ba1\uff0c\u4f7f\u7528\u4e86\u8fc7\u53bb\u548c\u672a\u6765\u4e24\u90e8\u5206\u6570\u636e\uff0c\u4e00\u822c\u6765\u8bf4\u8fd9\u4e24\u90e8\u5206\u6570\u636e\u5b58\u5728\u76f8\u5173\u6027\u3002\u6240\u4ee5\u4f7f\u7528\u6ed1\u7a97\u548c\u5168\u96c6\u7edf\u8ba1\uff0c\u7279\u5f81\u4e5f\u6709\u4e00\u5b9a\u7684\u76f8\u5173\u6027\uff0c\u53ef\u80fd\u90fd\u4f1a\u6709\u6b63\u5411\u6548\u679c\u3002\u4f46\u7531\u4e8e\u6bd5\u7adf\u4f7f\u7528\u4e86\u672a\u6765\u7684\u6570\u636e\uff08\u5b9e\u9645\u4e1a\u52a1\u573a\u666f\u4e2d\u4e0d\u4f1a\u5b58\u5728\u7684\u6570\u636e\uff09\uff0c\u4f1a\u9020\u6210\u6570\u636e\u6cc4\u9732\uff0c\u9ad8\u4f30\u7ed3\u679c\u3002 \u8bf7\u95ee\u4e13\u5bb6\uff0c\u90a3\u4e2a\u8d1d\u53f6\u65af\u5e73\u6ed1\u5904\u7406\u8f6c\u5316\u7387\u6570\u636e\u7684\u8bdd\uff0c\u662f\u6309\u7167\u5212\u7a97\u5904\u7406\u5408\u9002\u8fd8\u662f\u5168\u96c6\u5904\u7406\uff1f\u5168\u96c6\u5904\u7406\u4f1a\u4e0d\u4f1a\u6709\u70b9\u6570\u636e\u6cc4\u9732\uff1f A\uff1a\u8003\u8651\u4e0b\u6d4b\u8bd5\u96c6\u662f\u5426\u4f1a\u6709\u8fd9\u4e2a\u4fe1\u606f\uff1f\u5982\u679c\u4f7f\u7528\u8bad\u7ec3\u96c6\u7684\u5168\u96c6\u7edf\u8ba1\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\u7684\u7edf\u8ba1\u7ed3\u679c\uff0c\u5176\u5b9e\u8fd9\u4efd\u7279\u5f81\u7684\u6784\u5efa\u903b\u8f91\u4e5f\u662f\u4f7f\u7528\u4e86\u8fc7\u53bb\u7684\u6570\u636e\uff0c\u90a3\u4e48\u5728\u672c\u5730\u8bad\u7ec3\u7684\u65f6\u5019\u4e5f\u5e94\u8be5\u4f7f\u7528\u8fd9\u6837\u7684\u7279\u5f81\u62bd\u53d6\u903b\u8f91\u3002 \u7531\u4e8e\u7279\u5f81\u4ea4\u53c9\u7ec4\u5408\u4f1a\u4ea7\u751f\u7ec4\u5408\u7206\u70b8\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ec0\u4e48\u65b9\u6cd5\u53d1\u73b0\u67d0\u4e2a\u7279\u5f81\u548c\u67d0\u4e2a\u7279\u5f81\u7684\u4ea4\u53c9\u7ec4\u5408\u6709\u6548\uff0c\u9664\u4e86groupby A\uff1a\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5e38\u7528\u7684\u7edf\u8ba1\u6307\u6807\uff0c\u6216\u8005 boxplot FM\u65e2\u7136\u53ef\u4ee5\u8bc6\u522b\u591a\u4e2a\u7279\u5f81\u7684\u4ea4\u53c9\u7ec4\u5408\uff0c\u662f\u4e0d\u662f\u628a\u539f\u59cb\u7279\u5f81\u653e\u8fdb\u53bb\u4e0d\u7528\u7279\u5f81\u4ea4\u53c9\u7ec4\u5408\u8fbe\u5230\u7684\u6548\u679c\u548c\u52a0\u4e86\u5404\u79cd\u7279\u5f81\u7ec4\u5408\u7684LR\u4e00\u6837\uff1f\u8fd8\u662f\u8bf4\u4ecd\u7136\u9700\u8981\u7279\u5f81\u4ea4\u53c9\u548c\u7ec4\u5408\u3002 A\uff1a\u4e0d\u7528\u624b\u52a8\u6784\u9020\u4e00\u4e9b\u7b80\u5355\u7684\u4ea4\u53c9\u7279\u5f81\uff0c\u8b6c\u5982 x1 * x2\uff1b\u4f46\u662f\u53ef\u80fd\u4ecd\u7136\u9700\u8981\u624b\u52a8\u62bd\u53d6\u4e00\u4e9b\u590d\u6742\u7684\u7279\u5f81\uff0c\u8b6c\u5982\u67d0\u4e2a userID \u5728\u67d0\u4e2a appID & positionID \u4e0b\u7684\u7edf\u8ba1\u5e73\u5747\u8f6c\u5316\u7387 Vowpal Wabbit\uff1a\u652f\u6301 LR + \u9ad8\u9636\u7279\u5f81\u7ec4\u5408\uff0c\u5728\u7ebf\u5b66\u4e60\u8fd9\u4e2a\u6709\u6ca1\u6709\u76f8\u5173\u7684\u8d44\u6599\u3002 A\uff1ahttps://github.com/JohnLangford/vowpal_wabbit \u8fd9\u4e2a\u662f\u4f7f\u7528 vw+\u9ad8\u9636\u7279\u5f81\u7ec4\u5408\u7684 criteo pctr \u6bd4\u8d5b\u7b2c\u4e09\u540d\u65b9\u6848\uff1ahttps://github.com/songgc/display-advertising-challenge \u5173\u4e8e\u6a21\u578b\u878d\u5408\u7684\u65b9\u6cd5\u548c\u53c2\u6570\u786e\u5b9a\u6709\u6ca1\u6709\u597d\u7684\u8d44\u6599\u53ef\u4ee5\u53c2\u8003\uff1f A\uff1a\u53c2\u8003\u516c\u4f17\u53f7\u4e4b\u524d\u7684 kaggle \u7ecf\u9a8c\u5206\u4eab\uff0chttp://mp.weixin.qq.com/s/BE1mfmKJTsDSwWi16mllNA \u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u597d\u7684 survey\uff1ahttp://mlwave.com/kaggle-ensembling-guide/ stacking\u7684\u8bdd\u6a21\u578b\u6709\u5dee\u7684\uff0c\u52a0\u4e0a\u4f1a\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\uff1f A\uff1astacking \u8981\u6210\u529f\u7684\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6761\u4ef6\u662f\u6a21\u578b\u96c6\u5408\u5c3d\u91cf diverse\uff0c\u540c\u65f6\u6a21\u578b\u7684\u6027\u80fd\u4e0d\u80fd\u76f8\u5dee\u592a\u5927\u3002\u4ee5\u6b63\u786e\u7387\u4e3a\u4f8b\uff0c90%\u878d\u540880%\u53ef\u80fd\u6bd490%\u878d\u540850%\u6548\u679c\u8981\u597d\u3002\u6a21\u578b\u5dee\u90fd\u662f\u76f8\u5bf9\u7684\uff0c\u8ba9\u4f60\u7684 stacker \u6765\u544a\u8bc9\u4f60\u8fd9\u4e2a\u201c\u5dee\u201d\u6a21\u578b\u662f\u5426\u5bf9\u6a21\u578b\u96c6\u6210\u6709\u6548\u679c\u5427 app\u7a20\u5bc6\u7279\u5f81: \u6211\u4eec\u8fd8\u5c1d\u8bd5\u4e86\u7528word embedding\u7684\u601d\u8def\u4eceuser_installapp\u8868\u4e2d\u63d0\u53d6\u76f8\u5173\u7684\u7279\u5f81\uff0c\u7528Wide & Deep Model\u751f\u6210\u7a20\u5bc6\u7279\u5f81\u3002 \u603b\u7ed3 \u5f88\u7b80\u77ed\uff1a\u5efa\u8bae\u5927\u5bb6\u591a\u89c2\u5bdf\u6570\u636e\uff0c\u5c11\u65e0\u8c13\u7f16\u7801\uff0c\u591a\u601d\u8003\u7279\u5f81\uff0c\u5c11\u8c03\u6574\u53c2\u6570\uff0c\u591a\u60f3\uff0c\u5c11\u8bd5\u3002 \u8282\u7701\u5185\u5b58\u7684\u65b9\u6cd5\uff1a \\1. \u6211\u4eec\u662f\u5c06\u6570\u636e\u6309\u5929\u8fdb\u884c\u5212\u5206\u6765\u63d0\u53d6\u7279\u5f81\uff0c\u90a3\u4e48\u5bf9\u5176\u4ed6\u8868merge\u4e4b\u524d\uff0c\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u53ea\u7559\u4e0b\u5728\u8fd9\u4e00\u5929\u4e2d\u51fa\u73b0\u8fc7\u7684app\u3001creativeID\u3001positionID\u7b49\u7b49\uff0c\u8fd9\u6837\u80fd\u5927\u5e45\u51cf\u5c11\u8ba1\u7b97\u91cf\uff1b \\2. \u5bf9\u4e24\u4e2a\u8868merge\u524d\u6211\u4eec\u53ea\u9700\u8981\u7559\u4e0b\u9700\u8981\u7684\u90a3\u4e9b\u5217\uff0c\u6bd4\u5982\u53ea\u8ba1\u7b97positionID\u7684\u7edf\u8ba1\u7279\u5f81\u65f6\uff0c\u5176\u4ed6\u4e0d\u76f8\u5173\u7684\u5217\uff08\u6bd4\u5982connectionType\u3001creativeID\u7b49\u7b49\uff09\u5176\u5b9e\u662f\u53ef\u4ee5\u5220\u6389\u7684\uff1b \\3. \u6211\u4eec\u63d0\u53d6\u7684\u7279\u5f81\u5168\u90e8\u4f7f\u7528scipy\u7684csr_matrix\u6765\u5b58\u50a8\uff0c\u5b83\u8f6c\u5316\u6210pandas\u7684DataFrame\u4e5f\u662f\u975e\u5e38\u5feb\u901f\u7684\uff0c\u63d0\u53d6\u5b8c\u7684\u7279\u5f81\u901a\u8fc7numpy.savez\u4fdd\u5b58\u81f3\u786c\u76d8\uff0c\u8fd9\u6837\u8bfb\u53d6\u65f6\u7684\u6548\u7387\u975e\u5e38\u9ad8\u3002 \u51a0\u519b\u7279\u5f81\u5de5\u7a0b: \u7279\u5f81\u8fd9\u4e00\u5757\u53ef\u4ee5\u8bf4\u662f\u6211\u4eec\u7684\u77ed\u677f, \u81f3\u4eca\u8fd8\u4e0d\u61c2\u7fa4\u91cc\u5404\u4f4d\u5927\u4f6c\u8bf4\u7684trick\u3002 \u6211\u4eec\u7684\u7279\u5f81\u4e3b\u8981\u662f\u4e00\u4e9b\u57fa\u672c\u7684\u7edf\u8ba1\u4fe1\u606f, \u6700\u597d\u7684\u5355\u6a21\u578b\u7528\u5230\u7684\u7279\u5f81\u7b97\u4e0a\u539f\u59cb\u7279\u5f81\u53ea\u670940\u51e0\u7ef4\u3002 \u5173\u4e8e\u7fa4\u91cc\u8ba8\u8bba\u6700\u591a\u7684\u8f6c\u5316\u7387, \u6211\u4eec\u8bd5\u8fc7\u5168\u5c40\u7edf\u8ba1, \u7a97\u53e3\u7edf\u8ba1, \u5e73\u6ed1\u4e0e\u4e0d\u5e73\u6ed1, \u5e76\u6ca1\u6709\u53d1\u73b0\u592a\u591a\u7684\u5dee\u5f02\u6027\u3002 \u76ee\u524d\u6211\u4eec\u91c7\u7528\u7684\u8f6c\u5316\u7387\u662f\u7edf\u8ba1\u70b9\u51fb\u65e5\u4e4b\u524d\u7684\u8f6c\u5316\u7387, \u4e0d\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\u8fc7\u5c11\u7684, \u8fd9\u4e48\u505a\u7eaf\u7cb9\u662f\u56e0\u4e3a\u7b80\u5355, \u901f\u5ea6\u5feb, \u800c\u4e14\u5728\u6211\u4eec\u7684\u5b9e\u9a8c\u91cc\u6548\u679c\u5e76\u4e0d\u5dee\u4e8e\u90a3\u4e9b\u590d\u6742\u7684\u624b\u6bb5, \u53ef\u80fd\u5728\u6211\u4eec\u7684\u6a21\u578b\u91cc\u8f6c\u5316\u7387\u5e76\u4e0d\u91cd\u8981\u3002 \u5176\u6b21, \u6211\u4eec\u4e5f\u5c1d\u8bd5\u8fc7\u4f7f\u7528Word2vec, Doc2vec\u7b49\u601d\u60f3\u4e3auser, app\u5b66\u4e60\u4f4e\u7ef4\u5411\u91cf\u7279\u5f81, \u4f46\u5b9e\u9a8c\u7ed3\u679c\u90fd\u4e0d\u592a\u7406\u60f3, \u6211\u4eec\u5df2\u7ecf\u653e\u5f03\u4e86\u4f7f\u7528\u5b89\u88c5\u5217\u8868\u3002 pandas\u7684iterrows\u4f18\u5316: \u5982\u679c\u4e0d\u5f97\u4e0d\u7528\u8fed\u4ee3\uff0c\u6bd4\u5982\u91cd\u590d\u70b9\u51fb\u7684trick\uff0c\u6211\u60f3\u4e86\u5f88\u591a\u529e\u6cd5\u8ba9\u5b83\u901a\u8fc7\u884c\u64cd\u4f5c\u5b9e\u73b0\uff0c\u7ed3\u679c\u4e00\u76f4\u884c\u4e0d\u901a\u3002\u7f51\u4e0a\u5f88\u591a\u4eba\u4f1a\u5efa\u8bae\u8bf4\u7528iterows\uff0c\u5b9e\u9645\u4e0a\u5373\u4f7f\u662fn\u7ea7\u522b\u7684iterows\u90fd\u633a\u6162\u7684\u3002\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u628aDataframe\u8f6c\u6362\u6210dict\uff0c\u4e00\u4e2a\u752810\u5c0f\u65f6\u624d\u80fditerrows\u5b8c\u7684Dataframe\uff0c\u8f6c\u6362\u6210dict\u53ef\u80fd\u53ea\u89811\uff0c2\u5206\u949f\u53ef\u4ee5\u8fed\u4ee3\u5b8c\u3002 \u6587\u4ef6\u7ba1\u7406: \u8fd9\u4e2a\u662f\u6211\u4e2a\u4eba\u7684\u4e00\u4e2a\u6478\u7d22\u51fa\u6765\u7684\u4e00\u4e2a\u65b9\u5f0f\uff0c\u4e5f\u4e0d\u77e5\u9053\u4e13\u4e0d\u4e13\u4e1a\u3002\u6211\u7684\u6574\u4e2a\u76ee\u5f55\u662f final \u653e\u51b3\u8d5b\u7684\u6570\u636e\u96c6\uff0c\u7136\u540echmod \u2013R 555\uff0c\u5373\u6ca1\u6709\u5199\u5165\u6743\u9650\uff0c\u53ef\u4ee5\u4fdd\u62a4\u6570\u636e\u96c6\u3002\u7136\u540edata\u518d\u6765\u653e\u4e2d\u95f4\u4ea7\u751f\u7684\u6570\u636e\u96c6\uff0c\u7136\u540ecode\u91cc\u9762\u4f1a\u6709\u4ee5\u6570\u636e\u96c6\u547d\u540d\u7684\u4ee3\u7801\u5148\u5bf9\u6bcf\u4e2a\u8868\u505a\u4e00\u4e9b\u7b80\u5355\u5904\u7406\uff0c\u8fd9\u6837\u5728\u4e4b\u540e\u7684\u6d4b\u8bd5\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u7528\u53cd\u590d\u8fd0\u884c\u4e00\u4e9b\u91cd\u590d\u591a\u4f59\u7684\u8fd0\u7b97\u3002\u4f8b\u5982\uff1a ad.py \u8bf7\u7b80\u8981\u63cf\u8ff0\u4f60\u4eec\u7684\u89e3\u9898\u601d\u8def\u53ca\u7b97\u6cd5\u4eae\u70b9\uff0c\u5e76\u5177\u4f53\u8c08\u4e00\u4e0b\u7279\u5f81\u62bd\u53d6\u3001\u8bad\u7ec3\u6a21\u578b\u7684\u5efa\u7acb\uff0c\u4ee5\u53ca\u6a21\u578b\u7684\u8bad\u7ec3\u601d\u60f3\u3002 \u5927\u5bb6\u7684\u89e3\u9898\u601d\u8def\u90fd\u6bd4\u8f83\u76f8\u4f3c\u3002\u6211\u4eec\u89e3\u9898\u6b65\u9aa4\u5206\u4e3a\u6570\u636e\u9884\u5904\u7406\u3001\u6570\u636e\u53bb\u566a\u3001\u7279\u5f81\u63d0\u53d6\u3001\u6a21\u578b\u6784\u5efa\u548c\u6a21\u578b\u878d\u54085\u4e2a\u90e8\u5206\u3002\u7531\u4e8e\u5728\u7279\u5f81\u4e0a\u63d0\u51fa\u4e86\u7a00\u758f\u7279\u5f81\u7684\u8f6c\u5316\u7387\u7f16\u7801\u65b9\u6848\uff0c\u5728\u6a21\u578b\u4e0a\u63d0\u51fa\u4e86nffm\u7cfb\u5217\u6a21\u578b\uff0c\u5e76\u89e3\u51b3\u4e86\u4e00\u7cfb\u5217\u6a21\u578b\u8bad\u7ec3\u4ee5\u53ca\u6a21\u578b\u5b9e\u73b0\u95ee\u9898\uff0c\u6211\u4eec\u624d\u80fd\u53d6\u5f97\u597d\u7684\u6210\u7ee9\u3002\u7279\u5f81\u62bd\u53d6\u5206\u4e3a4\u4e2a\u90e8\u5206\uff0c\u5373\u8f6c\u5316\u7387\u3001\u70b9\u51fb\u7279\u5f81\u3001\u5b89\u88c5\u7279\u5f81\u548c\u65f6\u95f4\u7279\u5f81\u3002\u6a21\u578b\u4e0a\uff0c\u6211\u4eec\u91c7\u7528\u4e864\u79cd\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u5305\u62ec\u4e00\u4e2a\u4f20\u7edf\u7684GBDT\u6a21\u578b\uff0c\u4ee5\u53ca\u53e6\u5916\u4e09\u4e2a\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\uff0c\u5206\u522b\u662fwide&deep\u7f51\u7edc\u3001pnn\u7f51\u7edc\u548cnffm\u7f51\u7edc\u3002GBDT\u6a21\u578b\u6211\u4eec\u4f7f\u7528\u7684\u662flightgbm\uff0c\u800cwide&deep\u7f51\u7edc\u3001pnn\u7f51\u7edc\u548cnffm\u7f51\u7edc\u90fd\u662f\u6211\u4eec\u4f7f\u7528tensorflow\u548ctflearn\u81ea\u5df1\u5b9e\u73b0\u7684\uff0c\u4e5f\u6b63\u57fa\u4e8e\u8fd9\u70b9\uff0c\u4f7f\u5f97\u6211\u4eec\u5f88\u5bb9\u6613\u505a\u6a21\u578b\u6539\u8fdb\u3001\u5fae\u8c03\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u8da3\u7684\u4e8b\u60c5\u3002 \u5173\u4e8e\u7279\u5f81\u7684\u63d0\u53d6 \uff0c\u76f8\u4fe1\u5f88\u591a\u961f\u4f0d\u4e5f\u9047\u5230\u8fc7\u74f6\u9888\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u9009\u62e9\u7684\u65b9\u5f0f\u662f\u591a\u601d\u8003\u8d5b\u9898\u7684\u5b9e\u9645\u610f\u4e49\u3002\u8d5b\u9898\u8981\u6c42\u662f\u9884\u6d4b\u5e7f\u544a\u88ab\u70b9\u51fb\u540e\u53d1\u751f\u6fc0\u6d3b\u7684\u6982\u7387\uff0c\u800c\u7528\u6237\u70b9\u51fb\u5e7f\u544a\u540e\u662f\u5426\u6fc0\u6d3b\u7684\u4e00\u4e2a\u4e3b\u8981\u9a71\u52a8\u529b\u5c31\u662f\u7528\u6237\u5bf9\u5e7f\u544a\u662f\u5426\u6709\u9700\u6c42\uff0c\u4ee5\u53ca\u7528\u6237\u81ea\u8eab\u7684\u5b89\u88c5\u529b\uff0c\u6240\u4ee5\u7528\u6237\u7684\u70b9\u51fb\u3001\u5b89\u88c5\u5386\u53f2\u4ee5\u53ca\u7528\u6237\u9488\u5bf9\u5177\u4f53\u67d0\u4e2aApp\u7684\u70b9\u51fb\u5b89\u88c5\u5386\u53f2\u5c24\u4e3a\u91cd\u8981\u3002\u57fa\u4e8e\u8fd9\u6837\u7684\u601d\u8003\uff0c\u6211\u4eec\u6784\u9020\u51fa\u4e86\u4e00\u7cfb\u5217\u6548\u679c\u663e\u8457\u7684\u7279\u5f81\uff0c\u5305\u62ec\u7528\u6237\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u662f\u5426\u6709\u70b9\u51fb\u3001\u5b89\u88c5\u7684\u8bb0\u5f55\uff1b\u7528\u6237-App\u5bf9\u662f\u5426\u5728\u4e4b\u524d\u51fa\u73b0\u8fc7\u3001\u51fa\u73b0\u8fc7\u591a\u5c11\u6b21\uff1b\u7528\u6237-App\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\u7b49\u3002\u6b64\u5916\uff0c\u5e7f\u544a\u7684\u4f4d\u7f6e\u4fe1\u606f\u4e5f\u5c24\u4e3a\u91cd\u8981\u3002\u4e0d\u540c\u7684\u5e7f\u544a\u4f4d\u53d7\u5230\u7684\u5173\u6ce8\u5ea6\u4e0d\u540c\uff0c\u6240\u53d6\u5f97\u7684\u63a8\u5e7f\u6548\u679c\u4e5f\u4e0d\u540c\u3002 \u57fa\u4e8e\u6b64\uff0c\u6211\u4eec\u6316\u6398\u4e86\u6570\u4e2a\u4e0e\u5e7f\u544a\u4f4d\u76f8\u5173\u7684\u7279\u5f81\uff0c\u5305\u62ec\u8f6c\u5316\u7387\u7279\u5f81\u3001\u5386\u53f2\u70b9\u51fb\u91cf\u7279\u5f81\uff0c\u4ee5\u53ca\u7528\u6237\u3001App\u4e0e\u5e7f\u544a\u4f4d\u7684\u4e00\u4e9b\u7ec4\u5408\u7279\u5f81\u3002\u6b64\u5916\uff0c\u5f88\u591a\u4eba\u90fd\u6ce8\u610f\u5230\u4e86\u8f6c\u5316\u7387\u7279\u5f81\u7684\u91cd\u8981\u6027\uff0c\u4f46\u5f88\u591a\u4eba\u5bb9\u6613\u5ffd\u7565\u7684\u4e00\u70b9\u662f\u7528\u6237\u7684\u8f6c\u5316\u7387\u7279\u5f81\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u5229\u7528\u7528\u6237\u8f6c\u5316\u7387\u65f6\u9700\u8981\u8fdb\u884c\u6070\u5f53\u7684\u5206\u7c7b\uff0c\u4ee5\u514d\u51fa\u73b0\u62df\u5408\u7684\u73b0\u8c61\u3002 \u8bf7\u7b80\u8981\u63cf\u8ff0\u4f60\u4eec\u7684\u89e3\u9898\u601d\u8def\u53ca\u7b97\u6cd5\u4eae\u70b9\uff0c\u5e76\u5177\u4f53\u8c08\u4e00\u4e0b\u7279\u5f81\u62bd\u53d6\u3001\u8bad\u7ec3\u6a21\u578b\u7684\u5efa\u7acb\uff0c\u4ee5\u53ca\u6a21\u578b\u7684\u8bad\u7ec3\u601d\u60f3\u3002 \u6211\u4eec\u7684\u7b97\u6cd5\u6846\u67b6\u4e3a\uff1a\u6570\u636e\u6e05\u6d17\u3001\u6570\u636e\u5212\u5206\u3001\u7279\u5f81\u63d0\u53d6\u3001\u6a21\u578b\u8bad\u7ec3\u3001\u6a21\u578b\u878d\u5408\u3002 \u6570\u636e\u6e05\u6d17\u5e94\u8be5\u7b97\u662f\u6211\u4eec\u7684\u4e00\u4e2a\u4eae\u70b9\u4e86\u3002\u7531\u4e8e\u8f6c\u5316\u56de\u6d41\u65f6\u95f4\u6709\u957f\u6709\u77ed\uff0c\u6240\u4ee5\u6700\u540e\u4e94\u5929\u7684label\u53ef\u80fd\u662f\u4e0d\u51c6\u786e\u7684\uff0c\u5c24\u5176\u662f\u7b2c30\u5929\u3002\u5982\u679c\u5c06\u7b2c30\u5929\u7684\u6570\u636e\u5168\u90e8\u5220\u9664\uff0c\u5c06\u4f1a\u4e22\u5931\u6389\u5927\u91cf\u6709\u7528\u4fe1\u606f\uff1b\u5982\u679c\u5168\u90e8\u4fdd\u7559\uff0c\u53c8\u5f15\u5165\u4e86\u76f8\u5f53\u7a0b\u5ea6\u7684\u566a\u58f0\u3002\u800c\u6211\u4eec\u53d1\u73b0\uff0c\u8f6c\u5316\u56de\u6d41\u65f6\u95f4\u662f\u4e0eApp ID\u6709\u5173\u7684\u3002\u4e8e\u662f\u6211\u4eec\u7edf\u8ba1\u4e86\u6bcf\u4e2aApp ID\u7684\u5e73\u5747\u8f6c\u5316\u56de\u6d41\u65f6\u95f4\uff0c\u5e76\u4e14\u5220\u9664\u6389\u4e86\u7b2c30\u5929\u4e2d\u5e73\u5747\u8f6c\u5316\u56de\u6d41\u65f6\u95f4\u504f\u957f\u7684\u6570\u636e\u3002\u8fd9\u6837\u5904\u7406\u4e4b\u540e\uff0c\u6027\u80fd\u7a0d\u5fae\u6709\u4e86\u4e00\u4e9b\u63d0\u5347\u3002 \u6b64\u5916\uff0c\u6b64\u524d\u4ecb\u7ecd\uff0c\u6211\u4eec\u5bf9\u7279\u5f81\u4e5f\u8fdb\u884c\u4e86\u5145\u5206\u7684\u5206\u6790\u3002\u5bf9\u4e8eposition ID\u7684\u5145\u5206\u6316\u6398\u3001\u5bf9\u4e8e\u7528\u6237\u4ea4\u4e92\u5386\u53f2\u7684\u5145\u5206\u5206\u6790\u90fd\u4e3a\u6211\u4eec\u5e26\u6765\u4e86\u663e\u8457\u7684\u63d0\u5347\u6548\u679c\u3002\u6b64\u5916\u8fd8\u6709\u4ea4\u53c9\u7279\u5f81\u7684\u8f6c\u5316\u7387\u5728\u540e\u671f\u4e5f\u8d77\u5230\u4e86\u4e00\u5b9a\u7684\u6548\u679c\u3002 \u6570\u636e\u5212\u5206\u90e8\u5206\uff0c\u7531\u4e8e\u673a\u5668\u6761\u4ef6\u7684\u9650\u5236\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u7b2c26\u5929-\u7b2c30\u5929\u7684\u6570\u636e\u3002\u5173\u4e8e\u8bad\u7ec3\u96c6\u9a8c\u8bc1\u96c6\u7684\u5212\u5206\uff0c\u6211\u4eec\u91c7\u7528\u7684\u662f5\u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002 \u7279\u5f81\u63d0\u53d6\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u5176\u5206\u4e3a\u56db\u9879\uff1a 1\uff09\u57fa\u7840\u7279\u5f81\uff0c\u5305\u62ec\u7528\u6237\u7684\u57fa\u672c\u7279\u5f81\u3001\u5e7f\u544a\u7684\u57fa\u672c\u7279\u5f81\u3001\u4e0a\u4e0b\u6587\u7279\u5f81\uff1b 2\uff09\u7edf\u8ba1\u7279\u5f81\uff0c\u5bf9\u57fa\u7840\u7279\u5f81\u8fdb\u884c\u4ea4\u53c9\u540e\u518d\u7edf\u8ba1\uff0c\u5305\u62eccount\u64cd\u4f5c\u548cunique\u64cd\u4f5c\uff1b 3\uff09 \u65f6\u95f4\u76f8\u5173\u7279\u5f81\uff0c\u4e3b\u8981\u7edf\u8ba1\u4e86\u7528\u6237\u6216\u7528\u6237-App\u5728\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u70b9\u51fb\u6b21\u6570\u6216\u8005\u5b89\u88c5\u6b21\u6570\uff1b 4\uff09\u6982\u7387\u4f30\u8ba1\u7279\u5f81\uff0c\u5bf9\u5f88\u591aID\u7c7b\u7279\u5f81\uff0c\u5305\u62ec\u4ea4\u53c9ID\u7c7b\u7279\u5f81\u505a\u4e86\u6982\u7387\u4f30\u8ba1\u3002 \u6a21\u578b\u8bad\u7ec3\u90e8\u5206\uff0c\u6211\u4eec\u521a\u5f00\u59cb\u4e00\u76f4\u4f7f\u7528\u7684\u662fLightGBM\uff0c\u8bad\u7ec3\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u5728\u9a8c\u8bc1\u7279\u5f81\u6709\u6548\u6027\u65b9\u9762\u53ef\u4ee5\u5927\u5927\u7f29\u77ed\u65f6\u95f4\u3002\u6211\u4eec\u7684\u6a21\u578b\u878d\u5408\u91c7\u7528\u7684\u662fStacking\u65b9\u6cd5\u3002\u9664\u4e86LightGBM\u4e4b\u5916\uff0c\u6211\u4eec\u53c8\u8bad\u7ec3\u4e86FFM\u3001LR\u3001GBDT\u3001ET\u6a21\u578b\u3002\u6700\u7ec8Stacking\u5e2e\u52a9\u6211\u4eec\u63d0\u9ad8\u4e862.5\u4e2a\u4e07\u5206\u70b9\u5de6\u53f3\u3002 Lookalike\u7b97\u6cd5[\u6269\u5c55] Lookalike\u535a\u6587 \u7b2c\u4e00\u79cd\u5c31\u662f\u663e\u6027\u7684\u5b9a\u4f4d\uff0c\u5e7f\u544a\u4e3b\u6839\u636e\u7528\u6237\u7684\u6807\u7b7e\u76f4\u63a5\u5b9a\u4f4d \u7b2c\u4e8c\u79cd\u505a\u6cd5\uff0c\u901a\u8fc7\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u7684\u6a21\u578b\uff0c\u6765\u5b9a\u4f4d\u5e7f\u544a\u4e3b\u7684\u6f5c\u5728\u7528\u6237 Lookalike\u5165\u6a21\u7279\u5f81 \u884c\u4e3a\u7ed3\u679c\u6570\u636e \u6240\u8c13\u884c\u4e3a\u7ed3\u679c\u6570\u636e\u662f\u5df2\u7ecf\u91c7\u53d6\u4e86\u5177\u4f53\u884c\u52a8\u7684\u6570\u636e\uff0c\u4f8b\u5982\u8d2d\u4e70\u6570\u636e\uff0c\u5165\u8d44\u6570\u636e\u7b49\u3002 \u884c\u4e3a\u610f\u5411\u6570\u636e \u6240\u8c13\u884c\u4e3a\u610f\u5411\u6570\u636e\u662f\u503e\u5411\u4e8e\u91c7\u53d6\u67d0\u79cd\u884c\u4e3a\u7684\u4eba\u7fa4\u6570\u636e\uff0c\u6700\u5178\u578b\u7684\u662f\u641c\u7d22\u5f15\u64ce\u7684\u6570\u636e. \u884c\u4e3a\u504f\u597d\u6570\u636e \u4ece\u4e1a\u52a1\u903b\u8f91\u6765\u8bf4\uff0c\u5177\u6709\u67d0\u79cd\u504f\u597d\u6216\u8005\u5c5e\u4e8e\u67d0\u79cd\u7c7b\u578b\u7684\u4eba\u7fa4\u5f80\u5f80\u4f1a\u66f4\u503e\u5411\u4e8e\u8d2d\u4e70\u67d0\u6b3e\u4ea7\u54c1\uff0c\u662f\u5e7f\u544a\u4e3b\u666e\u904d\u9009\u7528\u7684\u4e00\u79cd\u6570\u636e\u3002 \u884c\u4e3a\u6a21\u5f0f\u6570\u636e \u6240\u8c13\u884c\u4e3a\u6a21\u5f0f\u662f\u6307\u901a\u8fc7\u5206\u6790\u6d88\u8d39\u8005\u7684\u884c\u4e3a\u4e0e\u65f6\u95f4\u3001\u7a7a\u95f4\u7684\u5173\u7cfb\uff0c\u4ee5\u53ca\u4e00\u7cfb\u5217\u884c\u4e3a\u4e4b\u95f4\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5e8f\u5217\u5173\u7cfb\uff0c\u603b\u7ed3\u51fa\u7684\u5177\u6709\u4e00\u5b9a\u4e00\u81f4\u6027\u610f\u4e49\u7684\u884c\u4e3a\u8868\u73b0\uff0c\u901a\u8fc7\u8fd9\u4e9b\u4e00\u81f4\u6027\u6a21\u5f0f\u9884\u6d4b\u76f8\u5173\u884c\u4e3a, \u76ee\u524d\u8fd8\u5904\u5728\u63a2\u7d22\u548c\u4f18\u5316\u9636\u6bb5. Lookalike\u5e94\u7528Trick \u7ed3\u5408\u805a\u7c7b\u7b97\u6cd5\u4e00\u8d77\u4f7f\u7528 \u5229\u7528\u7528\u6237\u753b\u50cf\uff0c\u7ed9\u7528\u6237\u6253\u6807\u7b7e\uff0c\u5229\u7528\u76f8\u540c\u6807\u7b7e\u627e\u5230\u76ee\u6807\u4eba\u7fa4 \u5fae\u4fe1\u670b\u53cb\u5708Lookalike \u5fae\u4fe1\u670b\u53cb\u5708LookalikePPT \u793e\u4ea4\u540c\u8d28\u6027\u548c\u793e\u4ea4\u5f71\u54cd\u529b\u662f\u793e\u4ea4\u5173\u7cfb\u6570\u636e\u7684\u4e24\u4e2a\u6838\u5fc3\u4ef7\u503c, \u670b\u53cb\u5708\u5e7f\u544a\u91cd\u70b9\u4f1a\u6316\u6398\u8fd9\u4e24\u4e2a\u4ef7\u503c word2vec \u2014> node2vec \u5728\u56fe\u7f51\u7edc\u4e0a\u6309\u7167\u4e00\u4e2a\u641c\u7d22\u7684\u65b9\u6cd5\u751f\u6210\u8282\u70b9\u5e8f\u5217\uff0c\u8fd9\u4e2a\u8282\u70b9\u7684\u5e8f\u5217\u53ef\u4ee5\u5bf9\u5e94\u5230\u81ea\u7136\u8bed\u8a00\u7684\u4e00\u4e2a\u53e5\u5b50\uff0c\u540e\u9762\u6211\u4eec\u901a\u8fc7Word2Vec\u7684\u6846\u67b6\uff0c\u5c06\u8282\u70b9embedding\u4e3a\u4e00\u4e2a\u5411\u91cf\u3002 \u6240\u4ee5\u5bf9\u4e8e\u505anetwork embedding\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u751f\u6210\u8282\u70b9\u5e8f\u5217\u7684\u641c\u7d22\u7b56\u7565\u975e\u5e38\u91cd\u8981\u3002\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5c31\u662f\u968f\u673a\u6e38\u8d70\uff0c\u968f\u673a\u6e38\u8d70\u4e00\u65b9\u9762\u751f\u6210\u8282\u70b9\u5e8f\u5217\uff0c\u53e6\u4e00\u65b9\u9762\u4e5f\u662f\u5bf9\u56fe\u7684\u4e00\u79cd\u91c7\u6837\uff0c\u964d\u4f4e\u4e86\u8ba1\u7b97\u91cf\u3002 \u968f\u673a\u6e38\u8d70\u7684\u7b97\u6cd5\u8c03\u6574\u89c1\u4e0a\u9762\u94fe\u63a5 \u7231\u5e93\u5b58\u4e3b\u9875\u63a8\u8350\u9879\u76ee \u793e\u4ea4\u7535\u5546\u662f\u4ec0\u4e48? word2vec\u539f\u7406 \u89e3\u91caauc bandit\u7b97\u6cd5 \u77e5\u8bc6\u56fe\u8c31\u52a9\u529b\u7535\u5f71\u63a8\u8350 \u4e8c\u3001\u673a\u5668\u5b66\u4e60 \u6df1\u5ea6\u5b66\u4e60 GBDT LightGBM XGBoost \u4e09\u3001\u57fa\u7840\u7b97\u6cd5 \u56db\u3001\u6982\u7387\u7edf\u8ba1\u548c\u77e9\u9635 \u4e94\u3001\u63a8\u8350\u7b97\u6cd5 \u516d\u3001CUDA\u7f16\u7a0b","title":"\u9762\u8bd5\u51c6\u5907"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_1","text":"gantt dateFormat YYYY-MM-DD title \u9762\u8bd5\u51c6\u5907 section \u9879\u76ee\u7bc7 \u817e\u8baf\u5e7f\u544a\u7b97\u6cd5\u5927\u8d5b : crit, active, des1, 2019-04-05, 2019-04-20 \u7231\u5e93\u5b58\u4e3b\u9875\u63a8\u8350\u9879\u76ee :crit, des2, after des3, 2d \u77e5\u8bc6\u56fe\u8c31\u52a9\u529b\u7535\u5f71\u63a8\u8350 :crit, des3, 2019-04-14, 2019-04-20 section \u673a\u5668\u5b66\u4e60+\u6df1\u5ea6\u5b66\u4e60 GBDT :des4, 2019-04-09, 2019-04-10 LightGBM :des5, 2019-04-09, 2019-04-10 XGBoost :des6, 2019-04-09, 2019-04-10 section \u57fa\u7840\u7b97\u6cd5 LeetCode\u9898\u76ee : des20, 2019-04-14, 2019-05-01 \u52a8\u6001\u89c4\u5212 : des21, 2019-04-09, 2019-04-10 DFS+BFS : des22, 2019-04-09, 2019-04-10 section \u6982\u7387\u7edf\u8ba1\u548c\u77e9\u9635 \u5f20\u5b87\u6982\u7387\u8bba\u590d\u4e60 : des23, 2019-04-09, 2019-04-10 \u5f20\u5b87\u77e9\u9635\u590d\u4e60 : des24, 2019-04-09, 2019-04-10 section \u63a8\u8350\u7b97\u6cd5 \u63a8\u8350\u7cfb\u7edf\u5b9e\u8df5\u590d\u4e60 : des25, 2019-04-09, 2019-04-10 \u63a8\u8350\u7b97\u6cd5\u8bfePPT\u590d\u4e60 : des26, 2019-04-09, 2019-04-10","title":"\u9762\u8bd5\u51c6\u5907"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_2","text":"3.\u7ed3\u679c\u91cf\u5316 \u4e2a\u4eba\u4fe1\u606f+\u9700\u6c42\u5206\u6790+\u5339\u914d\u5c97\u4f4d\u7684\u7279\u5f81+\u903b\u8f91/\u4e8b\u4f8b\u8bba\u8bc1+\u793c\u8c8c\u81ea\u4fe1+\u53cd\u590d\u7ec3\u4e60=offer \u56e0\u6b64\uff0c \u201c\u9762\u8bd5\u51c6\u5907\u201d\u6700\u79d1\u5b66\u7684\u7b56\u7565\u4e0d\u662f\u201c\u9762\u9762\u4ff1\u5230\u201d\uff0c\u800c\u662f\u53ea\u9700 \u53cd\u590d\u6f14\u7ec3\u81ea\u5df1\u7684\u201c\u6700\u4f73\u4eae\u70b9\u201d \u3001\u4ee5\u53ca \u5982\u4f55\u7ed3\u675f\u9762\u8bd5 \u5c31\u591f\u4e86\uff08\u6240\u4ee5\u90a3\u4e9b\u56de\u7b54\u8bf4\u81ea\u6211\u4ecb\u7ecd\u8981\u600e\u4e48\u7cbe\u4fee\u201c\u5185\u5bb9\u201d\u7684\u90fd\u5f88\u4e0d\u9760\u8c31\uff09\u3002","title":"\u7b80\u5386\u4fee\u6539"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#1-3","text":"\u9762\u8bd5\u5b98\u4f60\u597d, \u6211\u53eb\u90d1\u65b0\u5fd7, \u9ed1\u9f99\u6c5f\u4eba, \u73b0\u5728\u662f\u5317\u822a\u8f6f\u4ef6\u5de5\u7a0b\u7814\u7a76\u751f\u4e8c\u5e74\u7ea7. \u672c\u79d1\u6bd5\u4e1a\u540e\u6211\u5728\u4e92\u8054\u7f51\u91d1\u878d\u516c\u53f8\u505a\u8fc7\u4e00\u5e74\u7684Java\u5f00\u53d1\u5de5\u7a0b\u5e08, \u518d\u6b64\u671f\u95f4\u6211\u63a5\u89e6\u5230\u673a\u5668\u5b66\u4e60\u7684\u4e00\u4e9b\u77e5\u8bc6, \u4e4b\u540e\u60f3\u7cfb\u7edf\u7684\u5b66\u4e60\u4e0b\u5173\u4e8e\u7b97\u6cd5\u76f8\u5173\u7684\u5185\u5bb9, \u5c31\u8003\u53d6\u4e86\u5317\u822a\u7814\u7a76\u751f. \u5728\u53bb\u5e747\u6708\u4efd, \u6211\u62a5\u540d\u5e76\u901a\u8fc7\u8003\u6838\u53c2\u52a0\u4e86\u5317\u5927\u7684Deecamp\u8bad\u7ec3\u8425, \u5229\u7528\u7f8e\u56e2\u63d0\u4f9b\u7684\u6570\u636e\u505a\u4e86\u4e00\u4e2a\u5229\u7528\u77e5\u8bc6\u56fe\u8c31\u505a\u7535\u5f71\u63a8\u8350\u7684\u8bfe\u9898, . \u5728\u7814\u4e00\u671f\u95f4 \u6211\u4e3b\u8981\u5728\u521b\u65b0\u5947\u667a\u516c\u53f8\u62c5\u4efb\u7b97\u6cd5\u5b9e\u4e60\u751f, \u4ece0\u52301\u7684\u642d\u5efa\u4e86\u7231\u5e93\u5b58\u6d3b\u52a8\u63a8\u8350\u7cfb\u7edf\u7b97\u6cd5\u7ebf\u4e0b\u90e8\u5206\u7684\u4efb\u52a1. \u6211\u7684\u77ed\u671f\u76ee\u6807\u662f\u627e\u4e00\u4e2a\u5229\u7528\u673a\u5668\u5b66\u4e60\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7b49\u6280\u672f\u53bb\u89e3\u51b3\u6d77\u91cf\u6570\u636e\u505a\u63a8\u8350\u548c\u5e7f\u544a\u7b49\u65b9\u9762\u7684\u5de5\u4f5c.[\u53ef\u9009]\u957f\u671f\u76ee\u6807\u662f\u901a\u8fc7\u4e0d\u65ad\u5730\u5b66\u4e60\u5b9e\u8df5, \u4e0d\u65ad\u5730\u79ef\u7d2f\u81ea\u5df1\u7684\u6280\u672f\u50a8\u5907, \u4e0d\u65ad\u6311\u6218\u65b0\u95ee\u9898, \u5f62\u6210\u81ea\u5df1\u7684\u6280\u672f\u4f53\u7cfb\u6846\u67b6, \u6210\u4e3a\u4e00\u4e2a\u7b97\u6cd5\u6280\u672f\u4e13\u5bb6. \u8fd9\u4e9b\u662f\u6211\u7684\u81ea\u6211\u4ecb\u7ecd, \u8c22\u8c22!","title":"\u96f6\u3001\u81ea\u6211\u4ecb\u7ecd 1-3\u5206\u949f"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_3","text":"\u7231\u5e93\u5b58\u63a8\u8350\u7cfb\u7edf\u9879\u76ee, \u7231\u5e93\u5b58\u4e00\u5bb6B2B2C\u7684\u793e\u4ea4\u7535\u5546\u516c\u53f8\uff0c\u8981\u7ed9\u4ed6\u4eec\u7684app\u505a\u63a8\u8350\u7cfb\u7edf\uff0c\u6211\u4e3b\u8981\u8d1f\u8d23\u5b8c\u6210\u4e3b\u9875\u6d3b\u52a8\u63a8\u8350\u4efb\u52a1\u7684\u7ebf\u4e0b\u6a21\u578b\u5f00\u53d1\uff0c\u4e1a\u52a1\u76ee\u6807\u662f\u63d0\u5347\u6d3b\u52a8\u7684\u8d2d\u4e70\u8f6c\u5316\u7387cvr. \u4e3b\u8981\u67093\u90e8\u5206\u5de5\u4f5c, \u524d\u671f\u68b3\u7406\u4e1a\u52a1\u573a\u666f, \u5b9a\u4e49\u95ee\u9898, \u5148\u6309\u7167\u4e1a\u52a1\u7ecf\u9a8c\u4ece\u5404\u4e2a\u5e93\u8868\u4e2d\u9009\u53d6\u5408\u9002\u7684\u539f\u59cb\u7279\u5f81, \u5b8c\u6210\u4e00\u4e2a\u57fa\u7840\u7684LR baseline, \u4e2d\u671f\u505aEDA, \u6570\u636e\u6e05\u6d17, \u540e\u671f\u7279\u5f81\u5de5\u7a0b\u5206\u6790\u7279\u5f81\u6709\u6548\u6027\u53ca\u6a21\u578b\u8c03\u53c2, \u6700\u7ec8\u7ebf\u4e0b\u6700\u597d\u7684\u5355\u6a21\u578bAUC\u662f0.787 \u8fd9\u662f\u4e2a\u793e\u4ea4\u7535\u5546\u63a8\u8350\u7cfb\u7edf\u7684\u4efb\u52a1, \u548c\u4f20\u7edf\u7684\u7535\u5546\u63a8\u8350\u6709\u4e24\u70b9\u4e0d\u540c, \u7528\u6237\u4e0d\u662f\u7ec8\u7aef\u7528\u6237\u800c\u662f\u5c0fB\u7528\u6237, \u5f85\u63a8\u8350item\u4e0d\u662f\u5546\u54c1\u800c\u662f\u6d3b\u52a8. \u5e26\u6765\u7684\u7528\u6237\u65b9\u9762\u7684\u95ee\u9898\u5c31\u662f\u5c0fB\u7528\u6237\u504f\u597d\u8f83\u5f31, \u6211\u901a\u8fc7\u5c0fB\u5386\u53f2\u4ef7\u683c\u504f\u597d\u548c\u8fc7\u53bbT\u5929\u5185\u5404\u54c1\u724c\u70b9\u51fb\u7387\u548c\u8f6c\u5316\u7387\u7279\u5f81\u6765\u523b\u753b\u5c0fB\u670b\u53cb\u5708\u7684\u504f\u597d, \u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f97%\u7684\u6d3b\u52a8\u751f\u547d\u5468\u671f\u57282-3\u5929, \u5b9e\u65f6\u6d3b\u52a8\u70b9\u51fb\u7387\u8f6c\u5316\u7387, \u6211\u4eec\u7528\u54c1\u724c\u548c\u54c1\u7c7b\u7684\u76f8\u5173\u7279\u5f81\u53bb\u4ee3\u8868\u6d3b\u52a8, \u5e76\u8865\u5145\u5546\u54c1\u96c6\u5408\u7684\u7279\u5f81. \u539f\u59cb\u7279\u5f81\u6765\u6e90\u4e8e\u7528\u6237\u7279\u5f81, \u6d3b\u52a8\u7279\u5f81. \u7279\u5f81\u5de5\u7a0b\u7684\u4e3b\u8981\u5de5\u4f5c, 1.\u7528\u6237\u751f\u6210T\u5929\u5185\u7684\u5404\u54c1\u724c\u54c1\u7c7b\u7684\u5386\u53f2\u70b9\u51fb\u7387\u8f6c\u5316\u7387, \u6d3b\u52a8\u751f\u6210T\u5929\u5185\u7684\u5404\u54c1\u724c\u54c1\u7c7b\u7684\u5386\u53f2\u70b9\u51fb\u7387\u8f6c\u5316\u7387 2.\u65f6\u95f4\u65b9\u9762\u7684\u7279\u5f81, monthOfYear weekOfMonth weekdayOfWeek hourOfDay \u662f\u5426\u8282\u5047\u65e5 \u662f\u5426\u5468\u672b \u7528\u6237\u4e0a\u6b21\u767b\u5f55\u805a\u73b0\u5728\u7684\u65f6\u95f4 \u4e0a\u6b21\u8d2d\u4e70\u8ddd\u73b0\u5728\u65f6\u95f4 \u8ddd\u79bb\u6d3b\u52a8\u4e0a\u7ebf\u65f6\u95f4 3.\u4ef7\u683c\u7279\u5f81\u57fa\u4e8e\u5206\u4f4d\u70b9\u505a\u5206\u6876(\u957f\u5c3e\u5206\u5e03) 4.\u5229\u7528ip\u53bb\u586b\u5145\u5730\u5740\u7f3a\u5931, \u5e76\u5229\u7528ip\u505a\u5c42\u6b21\u7f16\u7801 4.\u7528\u6237\u7279\u5f81\u548c\u6d3b\u52a8\u7279\u5f81\u4e2d\u57fa\u6570\u8f83\u5c0f\u7684\u8fdb\u884c\u4ea4\u53c9\u7279\u5f81\u53ca\u76f8\u5173\u7684\u7edf\u8ba1\u7279\u5f81(ctr cvr), \u4f8b\u5982\u5c45\u4f4f\u5730\u6027\u522b\u548c\u54c1\u724c\u7684\u4ea4\u53c9, \u5e74\u9f84\u548c\u6d3b\u52a8\u8f6c\u5316\u7387\u7684\u4ea4\u53c9, \u65f6\u95f4\u548c\u6d3b\u52a8\u7684\u4ea4\u53c9, \u65f6\u95f4\u548c\u7528\u6237\u7684\u4ea4\u53c9 5.\u7279\u5f81\u503c\u8f83\u591a\u7684\u7279\u5f81\u4f7f\u7528Target\u7f16\u7801\u7f16\u7801, \u7279\u5f81\u503c\u57284\u4e2a\u4ee5\u5185\u7684\u7528onehot\u7f16\u7801, \u9047\u5230\u7684\u95ee\u9898? \u5982\u4f55\u5229\u7528\u77ed\u6587\u672c \u9047\u5230\u7684\u95ee\u9898 \u6587\u672c\u7279\u5f81embedding\u8bad\u7ec3\u4e2aLR\u6a21\u578b \u9884\u6d4b\u4e2actr\u7684\u6982\u7387 \u653e\u5165\u6a21\u578b\u5f53\u505a\u4e00\u7ef4\u7279\u5f81 \u4e3a\u4ec0\u4e48\u4e0d\u5148\u8bad\u7ec3\u6a21\u578b\u7684ctr\u9884\u4f30 \u518d\u8bad\u7ec3cvr\u9884\u4f30? \u8fd9\u4e2a\u662f\u6b63\u5e38\u7684\u601d\u8def \u4f46\u6211\u4eec\u7684\u66dd\u5149\u6570\u636e\u4e00\u76f4\u5728\u57cb\u70b9\u4e2d \u8fd8\u6ca1\u6709\u4e0a\u7ebf \u6240\u4ee5\u96be\u4ee5\u6709\u76d1\u7763\u7684\u5b66\u4e60\u5230ctr \u6837\u672c\u8d1f\u4f8b\u7684\u9009\u53d6? skip-above \u7528\u6237\u70b9\u51fb\u7684item\u4f4d\u7f6e\u4ee5\u4e0a\u7684\u5c55\u73b0\u624d\u53ef\u4ee5\u4f5c\u4e3a\u8d1f\u4f8b \u5982\u4f55\u89e3\u51b3 \u4e0d\u540c\u4e8eCTR\u9884\u4f30\u95ee\u9898\uff0cCVR\u9884\u4f30\u9762\u4e34\u4e24\u4e2a\u5173\u952e\u95ee\u9898\uff1a Sample Selection Bias (SSB) \u8f6c\u5316\u662f\u5728\u70b9\u51fb\u4e4b\u540e\u624d\u201c\u6709\u53ef\u80fd\u201d\u53d1\u751f\u7684\u52a8\u4f5c\uff0c\u4f20\u7edfCVR\u6a21\u578b\u901a\u5e38\u4ee5\u70b9\u51fb\u6570\u636e\u4e3a\u8bad\u7ec3\u96c6\uff0c\u5176\u4e2d\u70b9\u51fb\u672a\u8f6c\u5316\u4e3a\u8d1f\u4f8b\uff0c\u70b9\u51fb\u5e76\u8f6c\u5316\u4e3a\u6b63\u4f8b\u3002\u4f46\u662f\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u5219\u662f\u5bf9\u6574\u4e2a\u7a7a\u95f4\u7684\u6837\u672c\u8fdb\u884c\u9884\u4f30\uff0c\u800c\u975e\u53ea\u5bf9\u70b9\u51fb\u6837\u672c\u8fdb\u884c\u9884\u4f30\u3002\u5373\u662f\u8bf4\uff0c\u8bad\u7ec3\u6570\u636e\u4e0e\u5b9e\u9645\u8981\u9884\u6d4b\u7684\u6570\u636e\u6765\u81ea\u4e0d\u540c\u5206\u5e03\uff0c\u8fd9\u4e2a\u504f\u5dee\u5bf9\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u6784\u6210\u4e86\u5f88\u5927\u6311\u6218\u3002 Data Sparsity (DS) \u4f5c\u4e3aCVR\u8bad\u7ec3\u6570\u636e\u7684\u70b9\u51fb\u6837\u672c\u8fdc\u5c0f\u4e8eCTR\u9884\u4f30\u8bad\u7ec3\u4f7f\u7528\u7684\u66dd\u5149\u6837\u672c\u3002 \u4e00\u4e9b\u7b56\u7565\u53ef\u4ee5\u7f13\u89e3\u8fd9\u4e24\u4e2a\u95ee\u9898\uff0c\u4f8b\u5982\u4ece\u66dd\u5149\u96c6\u4e2d\u5bf9unclicked\u6837\u672c\u62bd\u6837\u505a\u8d1f\u4f8b\u7f13\u89e3SSB\uff0c\u5bf9\u8f6c\u5316\u6837\u672c\u8fc7\u91c7\u6837\u7f13\u89e3DS\u7b49\u3002\u4f46\u65e0\u8bba\u54ea\u79cd\u65b9\u6cd5\uff0c\u90fd\u6ca1\u6709\u5f88elegant\u5730\u4ece\u5b9e\u8d28\u4e0a\u89e3\u51b3\u4e0a\u9762\u4efb\u4e00\u4e2a\u95ee\u9898\u3002 \u7528\u6237\u7684\u5ba2\u6237\u7aef\u7c7b\u578b \u7528\u6237\u6d88\u8d39\u6c34\u5e73 \u6d3b\u52a8\u65b9\u9762 \u6d3b\u52a8\u4ee3\u8868\u7684\u7528\u6237\u7fa4\u7279\u5f81 \u9009\u51fa\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u53d8\u91cf\uff0c\u5e76\u8ba1\u7b97\u4ed6\u4eec\u76f8\u4e92\u4e4b\u95f4\u3001\u4ee5\u53ca\u4e0e\u5176\u5b83\u53d8\u91cf\u4e4b\u95f4\u7684\u4e8c\u9636\u4ea4\u53c9\u4f5c\u7528\u5e76\u653e\u5165\u6a21\u578b\u4e2d\uff0c\u6bd4\u8f83\u7531\u6b64\u4ea7\u751f\u7684\u6a21\u578b\u7ed3\u679c\u4e0e\u6700\u521d\u7684\u7ebf\u6027\u6a21\u578b\u7684\u7ed3\u679c \u6ca1\u6709\u6027\u522b\u7279\u5f81 \u901a\u8fc7\u7279\u5f81\u5b50\u96c6\u5b66\u4e60\u4e00\u4e2a\u6027\u522b\u6982\u7387(\u65e0\u76d1\u7763) \u6211\u662f\u8fd9\u4e48\u601d\u8003\u8fd9\u4e2a\u4efb\u52a1\u7684, 1.\u754c\u5b9a\u95ee\u9898: \u8fd9\u662f\u4e2a\u793e\u4ea4\u7535\u5546\u63a8\u8350\u4efb\u52a1, 2.\u5206\u6790\u95ee\u9898, \u627e\u51fa\u548c\u5176\u4ed6\u7535\u5546\u63a8\u8350\u7cfb\u7edf\u6709\u54ea\u4e9b\u76f8\u540c\u5f02\u540c\u70b9, \u76f8\u540c\u70b9\u53ef\u4ee5\u501f\u9274\u8fc7\u6765, \u5f02\u540c\u70b9\u5355\u72ec\u5206\u6790\u5904\u7406, \u800c\u672c\u4efb\u52a1\u548c\u5e38\u89c1\u7684\u7535\u5546\u63a8\u8350\u4efb\u52a1\u533a\u522b\u4e3b\u8981\u6709\u4e24\u70b9: \u7b2c\u4e00\u70b9\u533a\u522b\u5b83\u7684\u7528\u6237\u4e0d\u662f\u7ec8\u7aef\u6d88\u8d39\u8005, \u800c\u662f\u4e2a\u5c0fB\u5e97\u4e3b(\u4ee3\u8d2d), \u90a3\u4e48\u6211\u4eec\u4e0d\u80fd\u5355\u7eaf\u7684\u53ea\u5206\u6790\u5c0fB\u7684\u504f\u597d, \u66f4\u8981\u7edf\u8ba1\u5c0fB\u670b\u53cb\u5708\u5b50\u7ec8\u7aef\u7528\u6237\u7684\u504f\u597d, \u8fd9\u90e8\u5206\u7fa4\u4f53\u504f\u597d\u8fd9\u90e8\u5206\u6211\u4eec\u5229\u7528\u5c0fB\u7684\u5386\u53f2\u6d88\u8d39\u884c\u4e3a\u751f\u6210\u4ef7\u683c\u5206\u5e03\u7279\u5f81\u548cT\u5929\u5185\u5404\u54c1\u724c\u54c1\u7c7b\u7684\u70b9\u51fb\u7387\u8f6c\u5316\u7387\u7279\u5f81\u6765\u8868\u5f81\u7fa4\u4f53\u7528\u6237\u504f\u597d. \u5c0fB\u7684\u504f\u597d+\u7fa4\u4f53\u504f\u597d\u662f\u6211\u8bbe\u8ba1\u7684\u7528\u6237\u753b\u50cf; \u7b2c\u4e8c\u70b9\u533a\u522b\u6211\u4eec\u63a8\u8350\u7684\u4e0d\u662f\u5546\u54c1, \u800c\u662f\u7231\u5e93\u5b58\u516c\u53f8\u5b9a\u4e49\u7684\u6d3b\u52a8, \u6d3b\u52a8\u7684\u7279\u70b9\u662f\u4e00\u4e2a\u6d3b\u52a8\u662f\u4e00\u4e2a\u54c1\u724c\u5546\u7684\u4e00\u7c7b\u5546\u54c1(\u6216\u8005\u53ef\u4ee5\u8bf4\u662f\u4e00\u7c7b\u5546\u54c1\u96c6\u5408), \u63a5\u8fd198%\u7684\u6d3b\u52a8\u751f\u547d\u5468\u671f\u90fd\u662f\u57282-3\u5929, \u6240\u4ee5\u6240\u6709\u7684\u6d3b\u52a8\u90fd\u9762\u4e34\u7740\u51b7\u542f\u52a8\u7684\u95ee\u9898, \u8fd9\u5bfc\u81f4\u6211\u4eec\u5982\u679c\u4f7f\u7528\u4f20\u7edf\u7684CF\u6a21\u578b\u6548\u679c\u4f1a\u5f88\u5dee, \u6211\u4eec\u9996\u5148\u7528\u6d3b\u52a8\u6700\u663e\u8457\u7684\u54c1\u724c\u548c\u54c1\u7c7b\u7279\u5f81\u8868\u5f81\u6d3b\u52a8, \u5176\u6b21\u4f7f\u7528\u6d3b\u52a8\u672c\u8eab\u7684\u7279\u5f81, \u6700\u540e\u8fd8\u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u4e00\u90e8\u5206\u7279\u5f81, \u5c31\u662f\u5982\u4f55\u523b\u753b\u8fd9\u4e2a\u6d3b\u52a8\u5546\u54c1\u96c6\u5408\u7684\u7279\u70b9\u5e76\u8865\u5145\u5230\u6d3b\u52a8\u4e2d\u53bb, \u4f8b\u5982\u5229\u7528\u5546\u54c1\u96c6\u548c\u7684\u4ef7\u683c\u5206\u5e03\u7279\u5f81, \u5546\u54c1\u7c7b\u522bEmbedding\u96c6\u5408\u53d6\u5747\u503c.\u8fd9\u4e09\u90e8\u5206\u7279\u5f81\u662f\u6d3b\u52a8\u76f8\u5173\u7684\u753b\u50cf. \u6709\u4e86\u7528\u6237\u753b\u50cf,\u6d3b\u52a8\u753b\u50cf, \u518d\u589e\u52a0\u573a\u666f\u65b9\u9762\u7684\u7279\u5f81, \u6708\u4efd, \u5468\u51e0, \u8282\u5047\u65e5\u7279\u5f81\u7b49. AUC\u662f\u4ec0\u4e48 \u4ee3\u8868\u4ec0\u4e48","title":"\u9879\u76ee\u80cc\u666f"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_4","text":"\u57fa\u4e8e\u7edf\u8ba1\u7684\u7279\u5f81\u9009\u62e9\u3002\u8bf4\u767d\u4e86\u5c31\u662f\u76f4\u63a5\u901a\u8fc7\u67d0\u4e2a\u6307\u6807\u6765\u5224\u65ad\u4ed6\u5bf9\u9884\u6d4b\u7684\u5171\u73b0\u7a0b\u5ea6\uff0c\u5982pearson\u76f8\u5173\u7cfb\u6570","title":"\u7279\u5f81\u9009\u62e9\u90e8\u5206"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#pearson","text":"\u8981\u7406\u89e3person,\u9996\u5148\u7406\u89e3\u534f\u65b9\u5dee, \u534f\u65b9\u5dee\u8868\u793a\u8fde\u4e24\u4e2a\u53d8\u91cf\u7684\u76f8\u4e92\u5173\u7cfb COV(X, Y) = SUM((Xi - X_mean)(Yi - Y_mean)) / (n - 1) person\u76f8\u5173\u7cfb\u6570\u662fX, Y\u534f\u9632\u5dee\u9664\u4ee5\u4e24\u4e2a\u53d8\u91cf\u7684\u6807\u51c6\u5dee(\u6d88\u9664\u91cf\u7eb2\u7684\u5dee\u5f02) \u7531\u4e0a\u56fe\u53ef\u4ee5\u603b\u7ed3\uff0c\u5f53\u76f8\u5173\u7cfb\u6570\u4e3a1\u65f6\uff0c\u6210\u4e3a\u5b8c\u5168\u6b63\u76f8\u5173\uff1b\u5f53\u76f8\u5173\u7cfb\u6570\u4e3a-1\u65f6\uff0c\u6210\u4e3a\u5b8c\u5168\u8d1f\u76f8\u5173\uff1b\u76f8\u5173\u7cfb\u6570\u7684\u7edd\u5bf9\u503c\u8d8a\u5927\uff0c\u76f8\u5173\u6027\u8d8a\u5f3a\uff1b\u76f8\u5173\u7cfb\u6570\u8d8a\u63a5\u8fd1\u4e8e0\uff0c\u76f8\u5173\u5ea6\u8d8a\u5f31\u3002","title":"pearson\u76f8\u5173\u7cfb\u6570"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_5","text":"","title":"\u51b3\u7b56\u6811\u5982\u4f55\u5904\u7406\u7f3a\u5931\u503c"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#xgboost","text":"","title":"XGboost\u7f3a\u5931\u503c\u5904\u7406"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#gbdt-vs-xgboost","text":"","title":"GBDT vs XGBoost"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_6","text":"","title":"\u76f4\u65b9\u56fe\u7b97\u6cd5"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_7","text":"\u8d1f\u6837\u672c\u6784\u5efa","title":"\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u533a\u522b"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_8","text":"1.EDA\u5f15\u51fa\u7684\u6d3b\u52a8\u4e0a\u7ebf\u6392\u671f\u8bbe\u8ba1\u8f85\u52a9\u63a8\u8350 2.\u4f4d\u7f6e\u504f\u89c1\u5982\u4f55\u89e3\u51b3 3.\u65f6\u95f4\u8870\u51cf\u5982\u4f55\u89e3\u51b3 \u5982\u4f55\u601d\u8003\u53ec\u56de\u6392\u5e8f\u7684 \u65e0\u53ec\u56de\u76f4\u63a5\u6392\u5e8f","title":"\u8fd8\u5b58\u5728\u7684\u95ee\u9898"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_9","text":"\u77e9\u9635\u8fd0\u7b97 \u591a\u8fdb\u7a0b","title":"\u6548\u7387\u4f18\u5316"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_10","text":"LR GBDT LightGBM FM word2vec \u8d1d\u53f6\u65af\u4f18\u5316","title":"\u5e94\u7528\u6280\u672f"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_11","text":"","title":"\u6548\u679c"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_13","text":"\u6570\u636e\u9884\u5904\u7406","title":"\u7231\u5e93\u5b58\u9879\u76ee"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#-","text":"target encoding","title":"- \u5254\u9664\u5355\u4e00\u503c\u3001\u7f3a\u5931\u503c\u6bd4\u4f8b\u8fc7\u5927\u7684\u5b57\u6bb5, \u5254\u9664\u4e1a\u52a1\u4e0a\u5173\u8054\u4e0d\u5927\u7684\u8868\u5b57\u6bb5"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_14","text":"","title":"\u4e00\u3001\u9879\u76ee\u7bc7"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#11","text":"","title":"1.1 \u817e\u8baf\u5e7f\u544a\u7b97\u6cd5\u5927\u8d5b"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#111","text":"[\u76f8\u4f3c\u4eba\u7fa4\u6269\u5c55|Lookalike] \u57fa\u4e8e\u5e7f\u544a\u4e3b\u63d0\u4f9b\u7684\u76ee\u6807\u4eba\u7fa4, \u4ece\u6d77\u91cf\u7684\u4eba\u7fa4\u4e2d\u627e\u51fa\u548c\u76ee\u6807\u4eba\u7fa4\u76f8\u4f3c\u7684\u5176\u4ed6\u4eba\u7fa4. \u6570\u636e\u91cf \u662f\u67d0\u8fde\u7eed30\u5929\u7684\u6570\u636e \u8bc4\u4ef7\u6307\u6807 \u662fm\u4e2a\u79cd\u5b50\u5305\u7684\u5e73\u5747AUC PU learning\u95ee\u9898 \uff1aPositive and unlabeled learning","title":"1.11 \u9898\u76ee\u63cf\u8ff0"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#112-idea","text":"\u6570\u636e\u96c6\u5212\u5206 : \u968f\u673a\u5212\u5206(\u5982\u679c\u6709\u65f6\u95f4\u5bb9\u6613\u9020\u6210\u7279\u5f81\u7a7f\u8d8a)\u548c\u6309\u65f6\u95f4\u5212\u5206 \u6570\u636e\u89c4\u6a21\u5927: \u6570\u636e\u4e0b\u91c7\u6837, \u7279\u5f81\u9009\u62e9, \u6ca1\u9a8c\u8bc1\u51fa\u4e00\u4e2a\u6709\u6548\u7279\u5f81\u5b58\u5230\u786c\u76d8\u4e0a\u9762 \u5355\u6a21\u578b : LightGBM\u76f8\u6bd4XGBoost\u6709\u7740\u7cbe\u5ea6\u76f8\u4f3c, \u8bad\u7ec3\u901f\u5ea6\u5feb\u597d\u51e0\u500d\u7684\u4f18\u70b9 \u6a21\u578b\u878d\u5408 : \u524d\u671f\u7279\u5f81\u5de5\u7a0b, \u540e\u671f\u6a21\u578b\u878d\u5408, \u6700\u597d\u8981\u4e86\u89e3\u6bcf\u4e2a\u6a21\u578b\u9002\u5408\u4ec0\u4e48\u6837\u7684\u7279\u5f81\u5de5\u7a0b, \u800c\u4e0d\u662f\u6240\u6709\u7684\u5355\u6a21\u578b\u5171\u7528\u4e00\u5957\u7279\u5f81 Kaggle \u6570\u636e\u6316\u6398\u6bd4\u8d5b\u7ecf\u9a8c\u5206\u4eab \u6bd4\u8d5b\u540e\u671f\u5927\u62db\u4e4bStacking\u6280\u672f\u5206\u4eab \u65e0\u65f6\u95f4\u7279\u5f81\u65f6\u7edf\u8ba1\u7279\u5f81\u5982\u4f55\u9632\u6b62\u7279\u5f81\u7a7f\u8d8a: k-fold\u7edf\u8ba1\u3002\u5728\u6784\u9020\u548clabel\u6709\u5173\u7684\u7279\u5f81\u65f6\uff0c\u6bd4\u5982\u8f6c\u5316\u7387\uff0c\u4e3a\u4e86\u9632\u6b62\u4fe1\u606f\u6cc4\u9732\uff0c\u53ea\u80fd\u5c06\u6570\u636e\u5206\u6210k\u4efd\uff0c\u7528k-1\u4efd\u6765\u7edf\u8ba1\u5269\u4e0b\u76841\u4efd\uff0c\u91cd\u590dk\u6b21\u3002 \u5185\u5b58: \u5c3d\u53ef\u80fd\u51cf\u5c11Numpy, pandas\u5e93\u4f7f\u7528, \u7528list\u53ef\u5927\u91cf\u51cf\u5c11\u5185\u5b58\u4f9d\u8d56 \u5185\u5b58: \u4f7f\u7528h5\u683c\u5f0f\u5b58\u50a8, \u6570\u636e\u7c7b\u578b\u4e3b\u8981\u4f7f\u7528int8\u548cint16, \u63d0\u9ad8\u8bfb\u5199\u901f\u5ea6 \u5c0f\u7c7b\u522b\u5f52\u4e3a\"\u5176\u4ed6\": \u9632\u6b62\u8fc7\u62df\u5408 \u6a21\u578b(\u7b2c\u4e09\u5468\u5468\u51a0\u519bnju\u5206\u4eab): \u5bf9\u4e8eList\u7c7b\u578b\u7684\u7279\u5f81\uff0c\u6211\u4eec\u76ee\u524d\u662f\u5bf9embedding\u5411\u91cf\u505a\u4e86mean pooling\u3002\u5728\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6211\u4eec\u6ca1\u6709\u4f7f\u7528dropout\u4e5f\u6ca1\u6709\u8fdb\u884c\u6b63\u5219\u5316\u3002\u6211\u4eec\u5728\u6a21\u578b\u4e2d\u52a0\u5165\u4e86batch normalization\u3002\u53c2\u6570\u7684\u9009\u62e9\u65b9\u9762\uff0c\u6211\u4eec\u7684\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u53ea\u8fed\u4ee3\u4e00\u6b21\uff0cbatch size\u901a\u5e38\u8bbe\u4e3a2000\u4ee5\u4e0a\uff0cAdam\u4f18\u5316\u5668\u5b66\u4e60\u7387\u8bbe\u4e3a0.001\u52300.01\u4e4b\u95f4\u3002\u6b64\u5916\uff0c\u5728\u6211\u4eec\u4e4b\u524d\u7684\u5b9e\u9a8c\u4e2d\uff0c\u591a\u6b21\u8bad\u7ec3\u6a21\u578b\u53d6\u5e73\u5747\u4e5f\u80fd\u63d0\u9ad8\u4e0d\u5c11\u6548\u679c\uff0c\u5927\u5bb6\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u3002 \u4f18\u5316\u76ee\u6807: \u7531\u4e8e\u672c\u6b21\u5927\u8d5b\u7684\u8bc4\u4ef7\u6307\u6807\u662fAUC\u6307\u6807\uff0c\u800cAUC\u6307\u6807\u5b9e\u9645\u4e0a\u8ba1\u7b97\u7684\u662f\u4e00\u79cdpairwise\u7684\u635f\u5931\uff0c\u56e0\u6b64\u65e0\u6cd5\u76f4\u63a5\u5bf9\u5176\u6c42\u5bfc\u4f18\u5316\u3002\u5e38\u89c1\u7684\u65b9\u6cd5\u4e2d\uff0c\u4f7f\u7528learning to rank\u4e2dpairwise\u7684\u65b9\u6cd5\u8fdb\u884c\u4f18\u5316\u7684\u6bd4\u8f83\u591a\uff0c\u6548\u679c\u4e5f\u5f88\u597d\u3002\u7136\u800c\u8fd9\u7c7b\u65b9\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u56e0\u6b64\u5728\u6bd4\u8d5b\u4e2d\u6211\u4eec\u4e5f\u5c1d\u8bd5\u4e86\u4e00\u4e9b\u66ff\u4ee3\u7684\u4f18\u5316\u76ee\u6807\u3002\u6700\u7b80\u5355\u7684\u662flog loss\uff0c\u8fd9\u4e5f\u662f\u6548\u679c\u6700\u597d\u4e5f\u6700\u5e38\u7528\u7684\u635f\u5931\u51fd\u6570\u3002\u6211\u4eec\u8fd8\u5c1d\u8bd5\u4e86\u4e00\u4e9b\u5176\u4ed6\u7684\u4f18\u5316\u76ee\u6807\uff0c\u5982hinge loss, \u6b63\u8d1f\u6837\u672c\u5f97\u5206\u5dee\u7b49\uff0c\u6548\u679c\u4e5f\u90fd\u5f88\u597d\u3002\u6211\u4eec\u5728\u7efc\u5408\u4e86\u8fd9\u4e9b\u4f18\u5316\u76ee\u6807\u4e4b\u540e\uff0c\u6548\u679c\u4e5f\u53d6\u5f97\u4e86\u4e00\u5b9a\u7684\u63d0\u5347\u3002 one hot\u4e4b\u540e\u7684categorical features\u7ef4\u5ea6\u5f88\u9ad8\uff0c\u8fd9\u79cd\u9ad8\u7ef4\u5ea6\u7684\u7279\u5f81\u76f4\u63a5\u548c\u4f4e\u7ef4\u5ea6\u7684\u6570\u503c\u7279\u5f81\u4e00\u8d77\u8f93\u5165\u5230\u6a21\u578b\u91cc\u9762\uff0c\u662f\u4e0d\u662f\u4f1a\u5bf9\u8fd9\u4e9b\u4f4e\u7ef4\u5ea6\u7684\u7279\u5f81\u4ea7\u751f\u4e00\u79cd\u7a00\u91ca\u4f5c\u7528\uff0c\u5c06\u4ed6\u4eec\u7684\u91cd\u8981\u6027\u964d\u4f4e\u4e86\u3002\u9762\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6709\u4ec0\u4e48\u597d\u7684\u5904\u7406\u65b9\u6cd5\u5417\uff1f \u7b54\uff1a\u9996\u5148\uff0c\u672a\u5fc5\u8981\u4f7f\u7528one-hot\u8fd9\u79cd\u7f16\u7801\u65b9\u5f0f\u3002one-hot\u5728NLP\u9886\u57df\u4e2d\u6709\u660e\u663e\u5730\u6548\u679c\u63d0\u5347\uff0c\u4f46\u672a\u5fc5\u4f1a\u5728Lookalike\u95ee\u9898\u4e2d\u4f1a\u6709\u540c\u6837\u7684\u660e\u663e\u6548\u679c\u3002\u6240\u4ee5\uff0c\u8fd9\u91cc\u9700\u8981\u5148\u5bf9one-hot\u7f16\u7801\u65b9\u5f0f\u7684\u4f18\u70b9\u7f3a\u70b9\u505a\u4e2a\u8bc4\u4f30\u3002\u5982\u679c\u8981\u4f7f\u7528one-hot\u65b9\u5f0f\uff0c\u8fd8\u9700\u8981\u5e73\u8861\u4f18\u70b9\u548c\u7f3a\u70b9\u54ea\u4e2a\u5f71\u54cd\u66f4\u5927\u3002\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u601d\u8def\u6765\u89e3\u51b3\u7279\u5f81\u7a00\u91ca\u7684\u95ee\u9898\uff0c\u6216\u8bb8\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7feature weighting \u7684\u65b9\u5f0f\u6765\u964d\u4f4e\u7279\u5f81\u7a00\u91ca\u5e26\u6765\u7684\u8d1f\u9762\u6548\u679c\u3002 \u7279\u5f81\u5de5\u7a0b\u5bf9\u83b7\u5f97\u4e00\u4e2a\u597d\u7684\u7ed3\u679c\u5f88\u91cd\u8981\uff0c\u90a3\u5728CTR\u9884\u4f30\u4e2d\uff0c\u6211\u4eec\u662f\u5982\u4f55\u4eba\u5de5\u5730\u53bb\u63d0\u53d6\u4ea4\u53c9\u7279\u5f81\u5462\u3002\u6bd4\u5982\u6211\u77e5\u9053\u5730\u70b9\u548c\u98df\u7269\u8fd9\u4e24\u4e2a\u7279\u5f81\u7684\u4ea4\u53c9\u5f88\u5173\u952e\uff0c\u90a3\u5982\u4f55\u751f\u6210\u5173\u4e8e\u5730\u70b9\u548c\u98df\u7269\u8fd9\u4e24\u4e2a\u7279\u5f81\u7684\u4ea4\u53c9\u7279\u5f81\u5462\uff1f\u662f\u76f4\u63a5\u76f8\u4e58\u4f5c\u4e3a\u65b0\u7684\u7279\u5f81\u5417\uff1f \u7b54\uff1a\u9996\u5148\u8981\u5bf9\u6bcf\u4e2a\u53d8\u91cf\u8fdb\u884c\u72ec\u70ed\u7f16\u7801\uff08one-hot encoding\uff09\uff0c\u5206\u522b\u5f97\u5230\u4e00\u4e2a\u53ea\u67090/1\u503c\u7684\u5411\u91cf\uff0c\u7136\u540e\u5bf9\u4e0d\u540c\u53d8\u91cf\u5bf9\u5e94\u5411\u91cf\u8fdb\u884c\u7b1b\u5361\u5c14\u79ef\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fdb\u884c\u7279\u5f81\u7ec4\u5408\uff0c\u7279\u5f81\u7ec4\u5408\u540e\u5f97\u5230\u7684\u5411\u91cf\u957f\u5ea6\u662f\u4e4b\u524d2\u4e2a\u53d8\u91cf\u7684\u5411\u91cf\u957f\u5ea6\u4e4b\u79ef\u3002 \u6211\u60f3\u8bf7\u95ee\u4e00\u4e0bFFM\u7684\u4e8b\u60c5\uff0c\u5148FFM\u518d\u52a0gbdt\u6ca1\u6709\u6548\u679c\u54e6\uff0cFFM\u90a3\u4e2a\u5f00\u6e90\u4ee3\u7801\u7684\u5e94\u7528\u80fd\u5e2e\u6211\u8bb2\u89e3\u4e00\u4e0b\u5417\uff1f \u7b54\uff1a\u9996\u5148\u662fFFM\u6216\u8005FM\uff0c\u8fd9\u6837\u7684\u6a21\u578b\u9002\u7528\u4e8e\u8f93\u5165\u7279\u5f81\u662f\u9ad8\u7ef4\u7a00\u758f\u53d8\u91cf\uff0c\u800c\u6811\u6a21\u578b\u5bf9\u8f93\u5165\u6570\u636e\u683c\u5f0f\u6ca1\u6709\u8981\u6c42\uff1b\u5176\u6b21\uff0cFM\u7684\u590d\u6742\u5ea6\u662fO(N^2)\uff0c\u800cFFM\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u5f97\u5230O(N^3)\uff0c\u5982\u6b64\u9ad8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6709\u53ef\u80fd\u8bad\u7ec3\u7684\u65f6\u5019\u6ca1\u6709\u5b8c\u5168\u6536\u655b\uff0c\u4f7f\u5f97\u6548\u679c\u6709\u6240\u5f71\u54cd\uff1b\u6700\u540e\uff0c\u5176\u5b9e\u8fd92\u4e2a\u662f\u4e0d\u540c\u4f53\u7cfb\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u8003\u8651\u5206\u522b\u8bad\u7ec3\uff0c\u6700\u7ec8\u505a\u4e00\u4e2a\u6a21\u578b\u7684ensemble\u3002 \u4e00\u822c\u600e\u4e48\u6837\u91cd\u65b0\u7ec4\u5408\u7279\u5f81\u6216\u8005\u5728\u539f\u6709\u7279\u5f81\u7684\u57fa\u7840\u4e0a\u63d0\u53d6\u65b0\u7684\u7279\u5f81\uff1f \u7b54\uff1a\u4e00\u822c\u6709\u4e09\u79cd\u601d\u8def\uff1a1\uff09\u4f7f\u7528\u7279\u5f81\u4ea4\u53c9\uff08cross\uff09\u7684\u65b9\u6cd5\uff0c\u5373\u5148\u5bf9\u6bcf\u4e2a\u53d8\u91cf\u8fdb\u884c\u72ec\u70ed\u7f16\u7801\uff0c\u5206\u522b\u5f97\u5230\u4e00\u4e2a\u53ea\u67090/1\u503c\u7684\u5411\u91cf\uff0c\u7136\u540e\u5bf9\u4e0d\u540c\u53d8\u91cf\u7684\u5411\u91cf\u8fdb\u884c\u7b1b\u5361\u5c14\u79ef\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fdb\u884c\u7279\u5f81\u7ec4\u5408\uff1b2\uff09\u4f7f\u7528\u6811\u6a21\u578b\uff08\u5982GBDT, XGboost\u7b49\uff09\u5bf9\u6570\u636e\u8fdb\u884c\u62df\u5408\uff0c\u81ea\u52a8\u5f97\u5230\u7279\u5f81\u7ec4\u5408\uff08\u4ece\u6839\u90e8\u5230\u53f6\u5b50\u8282\u70b9\u5bf9\u5e94\u8def\u5f84\u7684\u591a\u4e2a\u7279\u5f81\u5c31\u662f\u4e00\u4e2a\u7279\u5f81\u7ec4\u5408\u7ed3\u679c\uff09\uff1b3\uff09\u4f7f\u7528DNN\uff0cFM\u7b49\u5bf9\u539f\u59cb\u7279\u5f81\u8fdb\u884cembedding\uff0c\u51cf\u5c11\u7a00\u758f\u6027\uff0c\u4e5f\u589e\u52a0\u4e86\u7279\u5f81\u8868\u8fbe\u80fd\u529b\u3002 \u6570\u636e\u6b63\u6837\u672c\u3001\u8d1f\u6837\u672c\u662f\u5982\u4f55\u91c7\u6837\u51fa\u6765\u7684\uff1f \u7b54\uff1a\u6211\u4eec\u7684\u8bc4\u4f30\u6307\u6807AUC\u5bf9\u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\u4e5f\u662f\u4e0d\u654f\u611f\u7684\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u9009\u624b\u505a\u9898\u3002 \u5bf9\u4e8e\u6b63\u8d1f\u6837\u672c\u5f88\u4e0d\u5747\u8861\u65f6\uff0c\u6709\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u89e3\u51b3\u529e\u6cd5\u5417\uff1f \u7b54\uff1a\u4e00\u662f\u7528\u964d\u91c7\u6837\u6216\u8fc7\u91c7\u6837\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6b63\u8d1f\u6837\u672c\u6570\u91cf\u6301\u5e73\uff0c\u672c\u9898\u4e2d\u53ef\u4ee5\u5bf9\u8d1f\u4f8b\u8fdb\u884c\u964d\u91c7\u6837\uff0c\u8fd9\u6837\u4e5f\u80fd\u52a0\u901f\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\uff1b\u4e8c\u662f\u4fdd\u6301\u6b63\u8d1f\u6837\u672c\u6570\u91cf\u4e0d\u53d8\uff0c\u8bad\u7ec3\u6a21\u578b\u65f6\u5bf9\u6b63\u8d1f\u6837\u672c\u53d6\u4e0d\u540c\u7684\u6743\u91cd\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u968f\u673a\u79cd\u5b50\u8fdb\u884c\u91c7\u6837\uff0c\u8bad\u7ec3\u76f8\u540c\u7684\u6a21\u578b\uff0c\u7136\u540e\u8fdb\u884c\u6a21\u578b\u7684\u96c6\u6210\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u5347\u6548\u679c\u3002 \u6211\u4f7f\u7528\u4e86CTR\u9884\u4f30\u4e2d\u7ecf\u5e38\u4f7f\u7528Deep FFM\u4ee5\u53ca\u4e00\u4e9b\u53d8\u4f53\uff0c\u53d1\u73b0\u8fd8\u662f\u6ca1\u6709\u6811\u6a21\u578bxgboost\u597d\uff0c\u5e76\u6ca1\u6709\u8bba\u6587\u4e2d\u9610\u8ff0\u7684\u5f88\u4f18\u5f02\u7684\u6027\u80fd\u53d8\u73b0\u3002\u53ef\u80fd\u662f\u6211\u8c03\u53c2\u8fd8\u5b58\u5728\u95ee\u9898\uff0c\u8fd8\u662f\u8bf4\u8fd9\u4e9b\u6a21\u578b\u5b9e\u7528\u573a\u666f\u7684\u5dee\u8ddd\u6bd4\u8f83\u5927\uff1f\u662f\u5426\u6709\u4e2a\u901a\u7528\u7684\u6a21\u578b\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f \u7b54\uff1a\u636e\u6211\u6240\u77e5\uff0cCTR\u91cc\u9762\u786e\u5b9eFFM\u8fd9\u4e9b\u6a21\u578b\u7528\u7684\u66f4\u591a\u4e00\u4e9b\uff0c\u6811\u6a21\u578b\u6bd4\u8f83\u5c11\u5728\u7528\uff0c\u56e0\u4e3a\u5b83\u7684\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\u3002\u4f60\u521a\u8bf4\u6df1\u5ea6\u6a21\u578b\u548c\u6811\u6a21\u578b\u6548\u679c\u5dee\u4e0d\u591a\uff0c\u5176\u5b9e\u5df2\u7ecf\u53ef\u4ee5\u8bf4\u660e\u95ee\u9898\u4e86\u3002\u5728\u5de5\u4e1a\u754c\u548c\u5b66\u672f\u754c\u786e\u5b9e\u5b58\u5728\u4e00\u4e9bgap\uff0c\u5de5\u4e1a\u754c\u9664\u4e86\u8003\u8651AUC\u8fd9\u4e9b\u79bb\u7ebf\u6307\u6807\uff0c\u8fd8\u4f1a\u66f4\u591a\u5730\u8003\u91cf\u7ebf\u4e0a\u5b9e\u65f6\u54cd\u5e94\u901f\u5ea6\uff0c\u4ee5\u53ca\u505a\u7279\u5f81\u662f\u5426\u65b9\u4fbf\u3001\u8bad\u7ec3\u65f6\u95f4\u662f\u5426\u5f88\u5feb\u3001\u6a21\u578b\u8fed\u4ee3\u66f4\u65b0\u7684\u901f\u5ea6\u662f\u5426\u5f88\u5feb\u3001\u8fd9\u4e9b\u7b97\u6cd5\u662f\u5426\u53ef\u4ee5online\uff0c\u4f46\u662f\u6811\u6a21\u578b\u5176\u5b9e\u4e0d\u592a\u597d\u505a\u5230\u8fd9\u4e9b\u3002 \u6211\u5728\u505a\u4e00\u4e2a\u6743\u91cd\u5b66\u4e60\u7684\u7279\u5f81\u62bd\u53d6\u65b9\u6cd5\uff0c\u9700\u8981\u4e00\u5217\u4e00\u5217\u7684\u62bd\u53d6\uff0c\u4f46\u662f\u7528\u4e86one-hot\u540e\u7279\u5f81\u6709\u51e0\u5341\u4e07\u7ef4\uff0c\u6709\u6ca1\u6709\u4e00\u79cd\u964d\u7ef4\u7684\u65b9\u5f0f\u51cf\u5c11\u7279\u5f81\u7ef4\u5ea6\uff1f \u7b54\uff1a\u5173\u4e8e\u7279\u5f81\u91cd\u8981\u7a0b\u5ea6\u7684\u8bc4\u5224\uff0c\u6211\u63d0\u4f9b\u51e0\u4e2a\u601d\u8def\uff1a\u4e00\u662f\u53ef\u4ee5\u5728\u505aone-hot\u4e4b\u524d\u505a\u7279\u5f81\u91cd\u8981\u5ea6\u7684\u5b66\u4e60\uff0c\u4e8c\u662f\u7528sparse coding\u7684\u6570\u636e\u8868\u8fbe\u65b9\u5f0f\uff0c\u5728\u53e6\u4e00\u7ef4\u7a7a\u95f4\u4e2d\u53ef\u4ee5\u63a7\u5236\u7ef4\u5ea6\u5927\u5c0f\uff0c\u505afeature selection\uff0c\u518d\u505adecoding\uff0c\u627e\u5230\u539f\u59cb\u7279\u5f81\u4e2d\u7684\u91cd\u8981\u7a0b\u5ea6\u3002\u53ef\u4ee5\u8bd5\u4e0b\u8fd9\u4e2a\u95ee\u9898\u4e2d\u8fd9\u79cd\u601d\u8def\u662f\u5426\u6709\u6548\u3002 \u6211\u5728\u505a\u7279\u5f81\u9009\u62e9\u7684\u65f6\u5019\uff0c\u5982\u679c\u624b\u52a8\u5220\u9664\u4e00\u5217\u5217\u7279\u5f81\uff0c\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u8fd8\u7528\u4e86\u4e9b\u76f8\u5173\u7cfb\u6570\u7684\u65b9\u6cd5\uff0c\u6548\u679c\u5c31\u66f4\u5dee\u4e86\uff0c\u8bf7\u95ee\u6709\u6ca1\u6709\u4ec0\u4e48\u597d\u7684\u7279\u5f81\u9009\u62e9\u65b9\u5f0f\u5462\uff1f \u7b54\uff1a\u6211\u6240\u4e86\u89e3\u7684\u7279\u5f81\u9009\u62e9\u4e3b\u8981\u5305\u62ec\u4e24\u79cd\u7c7b\u578b\uff0c\u4e00\u79cd\u662ffilter base\uff0c\u4e00\u79cd\u662fwrapper base\uff0c\u6211\u4e86\u89e3\u5b83\u4eec\u591a\u6570\u662f\u7528\u4e00\u4e9brecursive feature elimination\u7684\u65b9\u5f0f\uff0c\u5faa\u73af\u5730\u5220\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u5f81\uff0c\u7136\u540eretrain\u6a21\u578b\u518d\u5220\u9664\uff0c\u8fd9\u79cd\u65b9\u5f0f\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4f46\u662f\u53ef\u80fd\u6bd4\u6a21\u578b\u81ea\u5e26\u7684\u9009\u7279\u5f81\u65b9\u5f0f\u6548\u679c\u4f1a\u597d\u4e9b\u3002\u4e00\u4e9bpaper\u4f1a\u5728RFE\u7684\u6a21\u578b\u4e2d\u505a\u4e00\u4e9b\u7b80\u5316\uff0c\u6bd4\u5982\u5220\u6389\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u5f81\u540e\uff0c\u4e0d\u505aretrain\uff0c\u4e5f\u80fd\u8fbe\u5230\u7c7b\u4f3c\u7684\u6548\u679c\uff0c\u4e0d\u8fc7\u76f8\u6bd4\u4e8eLR\u81ea\u5e26\u7684\u7279\u5f81\u9009\u62e9\u590d\u6742\u5ea6\u8fd8\u662f\u9ad8\u4e9b\uff0c\u8fd9\u8fb9\u662f\u4e00\u4e2atrade-off\u3002 (Filter\u3001Wrapper\u3001Embedded) one hot \u7279\u5f81\u548c\u7edf\u8ba1\u7279\u5f81: \u5728\u521d\u8d5b\u65f6\u5019\u6211\u4eec\u53d1\u73b0one-hot\u7684\u7279\u5f81\u548c\u6211\u4eec\u7684\u7edf\u8ba1\u7279\u5f81\u5dee\u5f02\u6027\u5f88\u5927\uff0c \u6240\u4ee5\u6211\u4eec\u5728\u81ea\u5df1\u8fd1\u767e\u7ef4\u7684\u7edf\u8ba1\u7279\u5f81\u4e0a\u76f4\u63a5\u52a0\u5165\u4e86one-hot\u7684\u7279\u5f81\uff0c\u5e26\u6765\u4e867\u4e2a\u5343\u5de6\u53f3\u7684\u63d0\u9ad8\uff0c\u800c\u6211\u4eec\u7684\u7edf\u8ba1\u7279\u5f81\u4e3a\u4e86\u9632\u6b62\u4fe1\u606f\u6cc4\u9732\u90fd\u662f\u91c7\u75285-fold\u7684\u65b9\u5f0f\u63d0\u53d6\u7684\u3002 \u6a21\u578b: \u521d\u8d5b\u65f6\u6211\u4eec\u4e00\u5171\u8bad\u7ec3\u4e86\u4e09\u79cd\u6a21\u578b\uff0c\u5206\u522b\u662flgb\uff0cdeepfm\uff0cdeepffm\uff0c\u5176\u4e2dlgb\u5206\u6570\u6700\u9ad8\uff0c\u5e76\u901a\u8fc7\u7b80\u5355\u7684\u52a0\u6743\u5e73\u5747\u5f97\u5230\u4e86\u4e0d\u9519\u7684\u5206\u6570 FFM baseline: https://zhuanlan.zhihu.com/p/36302396 \u666e\u901a\u79bb\u6563\u7279\u5f81\u5206\u6876: FFM\u4e0d\u4ec5\u80fd\u4f7f\u7528\u5355\u7eaf\u7684id\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8fde\u7eed\u503c\u7279\u5f81\u5206\u6876\u79bb\u6563\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528\u8fde\u7eed\u503c\u7279\u5f81\u3002\u6211\u4eec\u9009\u7684\u662f\u7b49\u8ddd\u79bb\u5206\u621010\u7ec4\uff0c\u5c06\u90e8\u5206lgb\u6a21\u578b\u7684\u8fde\u7eed\u503c\u7279\u5f81\uff08\u9700\u8981\u4e0e\u5355\u7eaf\u7684id\u76f8\u5173\u6027\u8f83\u4f4e\uff09\uff0c\u8f93\u5165FFM\u4e4b\u540e\uff0cFFM\u521d\u8d5bA\u699c\u8fbe\u5230\u4e86750\u7684\u5206\u6570\u3002 \u7edf\u8ba1\u7279\u5f81\u5206\u6876: \u672c\u6b21\u8d5b\u9898\u5728\u505a\u7279\u5f81\u5de5\u7a0b\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5e7f\u544a\u548c\u7528\u6237\u4e4b\u95f4\u7684\u4ea4\u53c9\u7279\u5f81\u7684\u91cd\u8981\u6027\u9760\u524d\u3002\u867d\u7136FFM\u53ef\u4ee5\u81ea\u52a8\u5b66\u4e60\u7279\u5f81\u4e4b\u95f4\u7684\u4e24\u4e24\u4ea4\u53c9\uff0c\u4f46\u662f\u6211\u4eec\u611f\u89c9\u9700\u8981\u66f4\u663e\u5f0f\u7684\u6307\u51fa\u8fd9\u79cd\u4ea4\u53c9\uff0c\u540c\u65f6\u53ef\u4ee5\u7b49\u540c\u4e8e\u5b9e\u73b0\u4e86\u90e8\u5206\u5f3a\u7279\u5f81\u7684\u4e09\u4ea4\u53c9\u548c\u56db\u4ea4\u53c9\u3002\u4e3a\u6b64\u6211\u4eec\u5c06lgb\u6a21\u578b\u4e2d\u4ea4\u53c9\u8f6c\u5316\u7387\u7279\u5f81\u5206\u6876\u79bb\u6563\u8f93\u5165\u6a21\u578b\uff0c\u505a\u4e86\u8fd9\u90e8\u5206\u7684\u9884\u5904\u7406\u540e\uff0cFFM\u521d\u8d5bA\u699c\u8fbe\u5230\u4e860.7557\u7684\u7ebf\u4e0a\u5206\u6570\u3002 \u6a21\u578b\u878d\u5408: FFM\u6a21\u578b\u7684\u9884\u6d4b\u548clgb\u8fd8\u6709nn\u6a21\u578b\u7684\u9884\u6d4b\u5b58\u5728\u7740\u8f83\u5927\u7684\u5dee\u5f02\u6027\uff0c\u878d\u5408\u6548\u679c\u663e\u8457\u3002 dataframe\u8bfb\u5199\u5229\u5668: \u8fdb\u5165\u590d\u8d5b\u540e\u6570\u636e\u8f83\u5927\uff0c\u4f7f\u7528pickle\u548chdf\u5b58\u50a8\u4e2d\u95f4\u7ed3\u679c\u65f6\u4f1a\u51fa\u73b0\u4e00\u4e9b\u5b58\u50a8\u62a5\u9519\u3002\u8fd9\u91cc\u6211\u4eec\u63a8\u8350\u5927\u5bb6\u4f7f\u7528feather\u8fd9\u4e2a\u5305\uff0c\u5b89\u88c5\u5b8c\u8fd9\u4e2a\u5305\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06dataframe\u5bf9\u8c61\u5b58\u50a8\u4e3afeather\u683c\u5f0f\uff0c\u53c8\u5feb\u53c8\u597d\u3002 \u5317\u5927\u5f00\u6e90\u7684xlearn: \uff0c\u4f18\u70b9\u662f\u540c\u6837\u7684\u9884\u6d4b\u6548\u679c\u4e0b\u901f\u5ea6\u6bd4libffm\u5feb\u4e86\u51e0\u500d\uff0c\u7136\u540e\u53ef\u4ee5\u8bbe\u7f6eauc\u4f5c\u4e3a\u89c2\u6d4b\u6307\u6807\uff0c\u5e76\u4e14\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7python\u8c03\u7528\u3002 FFM\u91cd\u8981\u53c2\u6570: FFM\u6bd4\u8f83\u91cd\u8981\u7684\u53c2\u6570\u6709\u9690\u5c42\u5411\u91cf\u7ef4\u5ea6k\uff0c\u5b66\u4e60\u7387lr\u8fd8\u6709\u6b63\u5219\u7cfb\u6570lambda \u6d41\u5f0f\u5904\u7406: \u7ec4\u5408\u7279\u5f81 \uff1a (creativesize gender) (advertised LBS ) \u5f00\u6e90\u6bd4\u8d5b: kaggle criteo, avazu, avito, pCTR \u7279\u5f81\u5de5\u7a0b\u90e8\u5206\uff0cCTR \u95ee\u9898\u7684\u5e38\u89c1\u7279\u5f81\u3002 ID \u4ea4\u53c9\u7279\u5f81\uff0cID \u7edf\u8ba1\u7279\u5f81\u7b49\uff0c\u5e38\u89c1\u7684\u53ef\u4ee5\u4ece\u53c2\u8003 Kaggle \u4e4b\u524d Criteo, Avazu, Avito \u7684\u70b9\u51fb\u7387\u9884\u4f30\u6bd4\u8d5b\u5f00\u6e90\u65b9\u6848\u3002 2017 \u817e\u8baf\u8d5b \u70b9\u51fb\u7387 vs \u8f6c\u53d1\u7387\u9884\u4f30: \u70b9\u51fb\u8f6c\u5316\u5bf9\u6bd4 \u5bf9\u4e8e\u6b63\u8d1f\u6837\u672c\u5f88\u4e0d\u5747\u65f6\u6bd4\u8f83\u597d\u7684\u89e3\u51b3\u529e\u6cd5\u662f\u4ec0\u4e48\uff0c\u8fd8\u6709\u5c31\u662f\u5bf9\u4e8e\u591a\u4e2a\u7279\u5f81\u7684\u7ec4\u5408\u4e00\u822c\u7528\u4ec0\u4e48\u6837\u7684\u601d\u8def\uff1f \u5728 imbalance \u95ee\u9898\u4e2d\uff0c\u901a\u5e38\u53ef\u4ee5\u5bf9\u6837\u672c\u8f83\u591a\u7684\u8d1f\u4f8b\u8fdb\u884c\u4e0b\u91c7\u6837\uff08\u4fdd\u6301\u6b63\u4f8b\u4e0d\u53d8\uff09\uff0c\u53ef\u4ee5\u52a0\u901f\u6a21\u578b\u7684\u8bad\u7ec3\u3002\u53e6\u5916\uff0c\u4e3a\u4e86\u63d0\u5347\u6548\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u968f\u673a\u79cd\u5b50\u8fdb\u884c\u91c7\u6837\uff0c\u8bad\u7ec3\u76f8\u540c\u7684\u6a21\u578b\uff0c\u7136\u540e\u8fdb\u884c\u6a21\u578b\u7684\u96c6\u6210\u3002\u53ef\u4ee5\u53c2\u8003\u4e0b Avito \u70b9\u51fb\u7387\u9884\u4f30\u6bd4\u8d5b\u4e2d\uff0cOwenzhang \u7684\u5efa\u6a21\u65b9\u5f0f\u3002\u7279\u522b\u9700\u8981\u63d0\u9192\u7684\u662f\uff0c\u672c\u6b21\u6bd4\u8d5b\u7684\u8bc4\u4f30\u6307\u6807\u662f logloss\uff0c\u5176\u5bf9\u6837\u672c\u7684\u6b63\u8d1f\u6bd4\u4f8b\u5206\u5e03\u8f83\u4e3a\u654f\u611f\uff0c\u5728\u8fdb\u884c\u91c7\u6837\uff0c\u6539\u53d8\u4e86\u6837\u672c\u7684\u539f\u59cb\u5206\u5e03\u540e\uff0c\u4e00\u822c\u9700\u8981\u5bf9\u9884\u6d4b\u7ed3\u679c\u8fdb\u884c calibration\uff0c\u4f7f\u5f97\u5176\u63a5\u8fd1\u539f\u59cb\u6570\u636e\u7684\u5206\u5e03\u3002 \u81f3\u4e8e\u7279\u5f81\u7ec4\u5408\u65b9\u9762\uff0c\u9700\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\u3002\u5982\u679c\u662f ID \u7279\u5f81\uff0c\u53ef\u4ee5\u7b80\u5355\u7684\u505a\u7b1b\u5361\u5c14\u4e58\u79ef\u4ea4\u53c9\u3002\u5982\u679c\u662f\u6570\u503c\u578b\u7279\u5f81\uff08\u8b6c\u5982\u67d0\u4e9b\u7edf\u8ba1\u91cf\uff09\uff0c\u53ef\u4ee5\u8fdb\u884c\u52a0\u51cf\u4e58\u9664\u53d8\u6362\u7b49\u3002\u53e6\u5916\uff0c\u63a8\u8350\u5c1d\u8bd5 XGBoost \u548c DNN \u7b49\u6a21\u578b\uff0c\u53ef\u4ee5\u4ece\u6570\u636e\u91cc\u9762\u5b66\u5230\u8f83\u4f18\u7684\u7279\u5f81\u7ec4\u5408\u65b9\u5f0f\u3002 \u4e0d\u540c\u957f\u5ea6\u7684\u591a\u503c\u7279\u5f81\u5904\u7406: \u6570\u636e\u6e05\u6d17\u90e8\u5206\uff0cCTR \u95ee\u9898\u6709\u6ca1\u6709\u4ec0\u4e48\u7ecf\u5178\u7684\u5730\u65b9\uff0c\u9488\u5bf9\u8fd9\u4e2a\u6570\u636e\u96c6\u66f4\u597d \u6bd4\u8f83\u6709\u6311\u6218\u7684\u662f App \u6570\u636e\uff0c\u6bcf\u4e2a\u7528\u6237\u5b89\u88c5\u7684 App \u6570\u76ee\u4e0d\u4e00\u6837\uff0c\u5982\u4f55\u8f6c\u6362\u6210\u7279\u5f81\uff0c\u4e5f\u662f\u4e00\u4e2a\u6311\u6218\u3002\u53ef\u4ee5\u53c2\u8003\u4e0b TalkingData \u5728 Kaggle \u4e0a\u9762\u7684\u6bd4\u8d5b\u3002 FFM vs xgboost FM/FFM \u5bf9\u4e8e\u5927\u91cf\u7a00\u758f ID \u7c7b\u7684\u7279\u5f81\u4f1a\u8f83\u597d\uff0c\u4f46\u53ef\u80fd\u66f4\u4f9d\u8d56\u4e0e\u7279\u5f81\u5de5\u7a0b\uff08\u6837\u672c\u7279\u5f81\u7684\u7ec4\u7ec7\u5f62\u5f0f\uff09\uff1bXGBoost \u51e0\u4e4e\u662f off-the-shelf\uff0c\u8fd0\u884c\u901f\u5ea6\u8f83\u5feb\u3002FFM \u548c XGBoost \u5728\u5177\u4f53\u5e94\u7528\u573a\u666f\u7684\u6548\u679c\u5dee\u5f02\uff0c\u8ddf\u4efb\u52a1\uff0c\u6570\u636e\uff0c\u7279\u5f81\u8fd8\u6709\u4f7f\u7528\u65b9\u5f0f\u6709\u5173\uff0c\u6211\u76ee\u524d\u8fd8\u6ca1\u6709\u770b\u5230\u54ea\u4e00\u4e2a\u662f\u7edd\u5bf9\u901a\u7528\u7684\u597d\u7684\u3002\u5728 Criteo \u548c Avazu \u70b9\u51fb\u7387\u9884\u4f30\u6bd4\u8d5b\u4e2d\uff0c\u524d\u51e0\u540d\u51e0\u4e4e\u90fd\u662f\u7528 FFM\uff0c\u7136\u800c\u5728\u968f\u540e\u7684 Avito \u70b9\u51fb\u7387\u9884\u4f30\u6bd4\u8d5b\u4e2d\uff0c\u51a0\u519b Owenzhang \u7684\u7ecf\u9a8c\u662f\u201c XGBoost \u8981\u6bd4 FFM \u597d\u5f88\u591a\u201d\u3002 \u7c7b\u522b\u7279\u5f81\u662f\u5426onehot \u8fd9\u91cc\u4e0d\u6e05\u695a\u9009\u624b\u4f7f\u7528\u7684\u6a21\u578b\u3002\u5982\u679c LR/DNN\uff0c\u8fdb\u884c One-hot \u662f\u5408\u7406\u7684\u3002\u5982\u679c\u4f7f\u7528 RF/XGBoost \u7b49\u6811\u6a21\u578b\uff0c\u53ef\u4ee5\u4e0d\u7528 One-hot\uff0c\u8ba9\u8fd9\u4e9b\u6a21\u578b\u628a\u8fd9\u4e2a\u7c7b\u522b\u7279\u5f81\u5f53\u4f5c\u6570\u503c\u578b\u7279\u5f81\uff0c\u7136\u540e\u8fdb\u884c\u5206\u88c2\u3002\u5c24\u5176\u662f\u5f53\u7c7b\u522b\u7279\u5f81\u7684\u53d6\u503c\u8f83\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u8b6c\u5982100W\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165 XGBoost\u3002\u5f53\u7136\u4e5f\u6709\u5176\u4ed6\u66f4\u597d\u7684\u7279\u5f81\u8bbe\u8ba1\u7684\u65b9\u6cd5\u3002 \u9488\u5bf9\u672c\u6b21\u6bd4\u8d5b\u7ed9\u51fa\u7684\u65f6\u95f4\u523b\u5ea6\u6211\u4eec\u65e0\u6cd5\u6709\u6548\u5efa\u7acb\u7ebf\u4e0b\u7684\u9a8c\u8bc1\u96c6\uff0c\u95ee\u4e13\u5bb6\u600e\u4e48\u770b\uff1f \u672c\u6b21\u6bd4\u8d5b\u63d0\u4f9b\u7684\u6570\u636e\u662f\u65f6\u5e8f\u6570\u636e\uff0c\u4e00\u822c\u6309\u7167\u65f6\u95f4\u5148\u540e\u5212\u5206\u672c\u5730\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u3002\u8fd9\u4e2a\u95ee\u9898\u5176\u4e2d\u7684\u4e00\u4e2a\u96be\u70b9\u662f\u8bad\u7ec3\u6570\u636e\u6700\u540e\u51e0\u5929 label = 0 \u7684\u6570\u636e\u7531\u4e8e\u56de\u6d41\u5ef6\u8fdf\u53ef\u80fd\u5b58\u5728\u566a\u58f0\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u6709\u6548\u7684\u9a8c\u8bc1\u96c6\u4e5f\u662f\u9009\u624b\u4eec\u9700\u8981\u8003\u8651\u7684\u4e00\u4e2a\u6311\u6218\u3002 \u4e00\u4e2a\u63d0\u793a\uff0c\u6570\u636e\u4e2d\u63d0\u4f9b\u4e86\u56de\u6d41\u65f6\u95f4\uff0c\u53ef\u4ee5\u4e00\u5929\u3001\u4e24\u5929\u5206\u522b\u80fd\u56de\u6d41\u591a\u5c11\u6570\u636e\u3002\u8fd9\u6837\u53ef\u4ee5\u5206\u6790\u51fa\u81ea\u5df1\u6784\u9020\u7684\u9a8c\u8bc1\u96c6\u548c\u771f\u5b9e\u6570\u636e\u7684\u5dee\u5f02\u3002\u53e6\u4e00\u4e2a\u63d0\u793a\u662f\uff0c\u8f6c\u5316\u6570\u636e\u662f\u5e7f\u544a\u4e3b\u63d0\u4f9b\u7684\uff0c\u4e5f\u662f\u4e2a\u7ebf\u7d22\u3002 \u7ebf\u4e0a\u53ca\u7ebf\u4e0b\u7684\u4e00\u81f4: \u5bf9\u4e8e\u8fd9\u79cd\u6bd4\u8d5b\uff0c\u9996\u5148\u4f60\u5fc5\u987b\u505a\u5230CV\u548c\u7ebf\u4e0a\u7684\u6210\u7ee9\u76f8\u5dee\u4e0d\u5927\uff0c\u5176\u6b21 CV \u548c\u7ebf\u4e0a\u7684\u6210\u7ee9\u5e94\u8be5\u662f\u540c\u589e\u540c\u51cf\u7684\u3002\u5426\u5219\u540e\u9762\u4f60\u6240\u505a\u7684\u4e8b\u60c5\u90fd\u662f\u767d\u8d39\u529f\u592b\uff0c\u56e0\u4e3a CV \u6839\u672c\u4f53\u73b0\u4e0d\u51fa\u6765\u7279\u5f81\u7684\u597d\u574f\u3002\u4e3a\u4e86\u540c\u6b65 CV \u548c\u7ebf\u4e0a\u6210\u7ee9\uff0c\u6211\u82b1\u4e86\u4e24\u5929\u7684\u65f6\u95f4\u53bb\u505a\u8fd9\u4ef6\u4e8b\u60c5\u3002 \u6bd4\u8d5b\u521d\u671f\u6700\u91cd\u8981\u7684\u5c31\u662f\u6784\u5efa\u6709\u6548\u7684\u8bad\u7ec3\u96c6\uff0c\u80fd\u591f\u5c3d\u91cf\u4e0e\u7ebf\u4e0a\u60c5\u51b5\u540c\u6b65\uff0c\u6570\u636e\u96c6\u5212\u5206\u65b9\u6848\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003\u817e\u8baf\u5e7f\u544a\u7b97\u6cd5\u5927\u8d5b\u5b98\u65b9\u516c\u4f17\u53f7\u63a8\u8350\u53c2\u8003\u7684\u51e0\u4e2a\u6bd4\u8d5b\u7684\u4fe1\u606f\u3002 \u5982\u4f55\u8bc4\u4ef7\u7279\u5f81\u597d\u574f: \u5176\u5b9e\u4e00\u4e2a\u7279\u5f81\u7684\u597d\u574f\u7a0b\u5ea6\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7 groupby(\u2019feature\u2019,\u2019label\u2019) \u6765\u770b\u51fa\u7279\u5f81\u7684\u597d\u574f\u7a0b\u5ea6\uff0c\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u5728\u4e0d\u540c\u7684\u53d6\u503c\u4e0a\uff0c0\u548c1\u7684\u6bd4\u4f8b\u548c\u5e73\u5747\u6bd4\u4f8b\u76f8\u5dee\u5f88\u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7279\u5f81\u662f\u6709\u6548\u7684\u3002\u53c8\u6216\u8005\u53ef\u4ee5\u770b\u65b9\u5dee\uff0c\u8fd9\u6837\u53ef\u4ee5\u7701\u4e0b\u8bb8\u591a\u65f6\u95f4\u53bb\u6d4b\u8bd5\u7279\u5f81\u7684\u597d\u574f\u3002 \u7279\u5f81\u5206\u5e03\u662f\u5426\u4e00\u81f4 \u7279\u5f81\u5206\u5e03\u4e3b\u8981\u8003\u8651\u7684\u662f\u7ebf\u4e0a\u548c\u7ebf\u4e0b\u7684\u5206\u5e03\u5dee\u5f02\u3002\u7531\u4e8e\u8fd9\u6b21\u6bd4\u8d5b\u7684\u6570\u636e\u5177\u6709\u65f6\u5e8f\u6027\uff0c\u5e76\u4e14\u5f88\u591a\u9009\u624b\u4e5f\u56e0\u4e3a\u5728\u63d0\u53d6\u7279\u5f81\u65f6\u56e0\u4e3a\u4fe1\u606f\u6cc4\u9732\u7684\u539f\u56e0\u5bfc\u81f4\u7ebf\u4e0b\u6210\u7ee9\u63d0\u5347\u800c\u7ebf\u4e0a\u6210\u7ee9\u964d\u4f4e\uff0c\u8fd9\u4e9b\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u7279\u5f81\u503c\u7684\u5206\u5e03\u5dee\u5f02\u6765\u6392\u9664\u6389\uff0c\u5f53\u5206\u5e03\u4e0d\u4e00\u81f4\u7684\u7279\u5f81\uff0c\u6211\u4eec\u5e94\u8be5\u4f18\u5148\u5220\u9664\u3002\u7279\u5f81\u5206\u5e03\u5dee\u5f02\uff0c\u7b80\u5355\u7684\u53ef\u4ee5\u901a\u8fc7\u7ebf\u4e0b\u548c\u7ebf\u4e0a\u7279\u5f81\u503c\u7684\u5747\u503c\u3001\u6807\u51c6\u5dee\u5dee\u5f02\u6765\u8003\u8651\uff0c\u6216\u8005\u57fa\u4e8e\u5176\u5b83\u7684\u7edf\u8ba1\u5b66\u7684\u65b9\u6cd5\u3002(\u5982\u4f55\u5f97\u77e5\u7ebf\u4e0a\u7279\u5f81\u7684\u5747\u503c \u6807\u51c6\u5dee) \u52a0\u5165\u67d0\u4e2a\u7279\u5f81\u7ebf\u4e0blogloss\u4e0b\u964d\u4e86\u5f88\u591a\uff0c\u4f46\u662f\u7ebf\u4e0alogloss\u53cd\u800c\u5347\u9ad8\u4e86\u3002 \u200b 1\uff0e\u8fd9\u4e2a\u7279\u5f81\u662f\u4e0d\u662f\u4fe1\u606f\u6cc4\u9732\u4e86\uff0c\u6bd4\u5982\u4f7f\u7528\u4e86\u672a\u6765\u7684\u6570\u636e\u6765\u9884\u6d4b\u73b0\u5728\u3002\u80fd\u4e0d\u80fd\u91cd\u65b0\u6784\u9020\u7c7b\u4f3c\u7684\u7279\u5f81\u6765\u89c4\u907f\u65f6\u95f4\u3002 \u200b 2.\u6d4b\u8bd5\u96c6\u662f\u4e0d\u662f\u6ca1\u6709\u8fd9\u6837\u7684\u7279\u5f81\u3002\u6bd4\u5982\u8bad\u7ec3\u96c6\u867d\u7136\u4f7f\u7528\u4e86\u70b9\u51fb\u65f6\u95f4\u4e4b\u524d app_action \u7684\u6570\u636e\uff0c\u53ef\u662f\u8bad\u7ec3\u96c6\u6709\u5f53\u5929\u7684action\u4fe1\u606f\uff0c\u800c\u6d4b\u8bd5\u96c6\u6ca1\u6709\u5f53\u5929\u7684 action \u4fe1\u606f\u3002\u56e0\u6b64\u9020\u6210\u4e86\u8bad\u7ec3\u96c6\u6709\u8fd9\u6837\u7684\u7279\u5f81\uff0c\u800c\u6d4b\u8bd5\u96c6\u6ca1\u6709\u3002 \u7279\u5f81\u751f\u6210: \u4e00\u662f\u62cd\u8111\u95e8\uff08\u6bd4\u5982one-hot\u3001\u5404\u79cd\u7684\u8f6c\u5316\u7387\u3001\u70b9\u51fb\u91cf\u7b49\u7279\u5f81\uff09, \u4e00\u65b9\u9762\u662f\u901a\u8fc7\u5176\u5b83\u6a21\u578b\u7684\u7ed3\u679c\u6765\u751f\u6210\u5404\u79cd\u7279\u5f81\uff0c\u5176\u4e2d\u80fd\u5426\u901a\u8fc7\u6df1\u5ea6\u5b66\u4e60\u6765\u4ea7\u751f\u65b0\u7684\u7279\u5f81\uff1fLDA\u6765\u5206\u6790\u7528\u6237\u548capp\u4e4b\u95f4\u7684\u5173\u7cfb\uff1f\u7279\u5f81\u4e4b\u95f4\u4e0d\u65ad\u7684\u7ec4\u5408\u80fd\u5426\u4ea7\u751f\u6bd4\u8f83\u597d\u7684\u7279\u5f81\uff1f\u8fd9\u9700\u8981\u901a\u8fc7\u5bf9\u6570\u636e\u7684\u7406\u89e3\uff0c\u4e0d\u65ad\u7684\u5c1d\u8bd5\u548c\u5206\u6790\u3002\u4e0d\u8fc7\u6211\u7684\u5e76\u4e0d\u5efa\u8bae\u90a3\u4e48\u5feb\u7684\u8003\u8651\u7528\u5176\u5b83\u7684\u6a21\u578b\u6765\u751f\u6210\u7279\u5f81\uff0c\u6bd5\u7adf\u8fd9\u79cd\u65b9\u6cd5\u751f\u6210\u7684\u7279\u5f81\u6709\u65f6\u5019\u5e76\u4e0d\u80fd\u5f88\u597d\u7684\u7406\u89e3\uff0c\u5e76\u4e14\u9700\u8981\u7684\u5de5\u4f5c\u91cf\u4e5f\u6bd4\u8f83\u5927\uff0c\u6709\u65f6\u5019\u751f\u6210\u7684\u7279\u5f81\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u6709\u6548\u679c\u3002 \u7279\u5f81\u5de5\u7a0b\u601d\u8def: \uff081\uff09\u4e0d\u52a0\u6ca1\u7528\u7684\u7279\u5f81\uff1a\u7279\u5f81\u4e4b\u95f4\u5982\u679c\u5b58\u5728\u5f3a\u76f8\u5173\u6027\u4f1a\u7ed9\u6a21\u578b\u9020\u6210\u5e72\u6270\u3002\u9700\u8981\u63a7\u5236\u53d8\u91cf\uff0c\u4fdd\u7559\u6700\u6709\u6548\u3001\u7cbe\u7b80\u7684\u7279\u5f81\u3002\u6211\u4eec\u662f\u4f7f\u7528\u9010\u4e00\u5220\u9664\uff0c\u5bf9\u6bd4\u5b9e\u9a8c\u6765\u9a8c\u8bc1\u7279\u5f81\u6709\u6548\u6027\u3002 \uff082\uff09\u591a\u770b\u6bd4\u8d5b\u7ecf\u9a8c\u3001\u76f8\u5173\u8bba\u6587\uff1a\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\u5206\u6790\u95ee\u9898\uff0c\u5e38\u5e38\u80fd\u591f\u4e8b\u534a\u529f\u500d\u3002\u6211\u4eec\u501f\u9274\u4e86CTR\u9884\u4f30\u7b49\u76f8\u5173\u6bd4\u8d5b\u7684\u7ecf\u9a8c\uff0c\u53c2\u8003\u4e86Kaggle\u7684\u5386\u5c4a\u6bd4\u8d5b\u5206\u4eab\uff0c\u4e5f\u770b\u4e86\u76f8\u5173\u83b7\u5956\u961f\u4f0d\u7684\u4ee3\u7801\uff0c\u53d7\u76ca\u532a\u6d45\u3002\u5bf9\u4e8e\u52a0\u7279\u5f81\u65f6\u9700\u8981\u8003\u8651\u7684\u7ec6\u8282\u53d8\u5f97\u66f4\u52a0\u6e05\u695a\u3002 \uff083\uff09\u89c2\u5bdf\u6570\u636e\uff0c\u56e0\u5730\u5236\u5b9c\u627e\u7279\u5f81\uff1a\u7279\u5f81\u5de5\u7a0b\u7684\u6784\u5efa\u9700\u8981\u7d27\u5bc6\u8054\u7cfb\u6570\u636e\u7279\u70b9\u3002\u5224\u65ad\u67d0\u4e2a\u7279\u5f81\u662f\u5426\u6709\u610f\u4e49\uff0c\u4e0d\u80fd\u53ea\u662f\u7a7a\u60f3\uff0c\u8981\u505a\u7edf\u8ba1\u5206\u6790\u3002\u6211\u4eec\u53ef\u4ee5\u5173\u6ce8\u4e00\u4e2a\u7279\u5f81\u5728\u4e0d\u540c\u6807\u7b7e\u4e2d\u7684\u6bd4\u4f8b\uff0c\u5173\u6ce8\u662f\u5426\u6709\u54ea\u4e9b\u7279\u6b8a\u7684\u60c5\u51b5\u4f1a\u5bf9\u8f6c\u5316\u6709\u5f88\u5927\u7684\u5f71\u54cd\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u5360\u6bd4\u662f\u5426\u5927\uff0c\u662f\u5426\u6709\u52a0\u4e3a\u7279\u5f81\u7684\u5fc5\u8981\u2026\u2026\u8fd9\u4e00\u7cfb\u5217\u7684\u95ee\u9898\u90fd\u9700\u8981\u89c2\u5bdf\u6570\u636e\uff0c\u505a\u6070\u5f53\u7684\u7edf\u8ba1\u8fdb\u884c\u5206\u6790\u3002 \u7279\u5f81\u7684\u7ec4\u5408 \u3002\u6bd4\u5982positionid\u548cconnectiontype\u7684\u7ec4\u5408\u7edf\u8ba1\u662f\u4e00\u4e2a\u5f88\u5f3a\u7684\u7279\u5f81\uff0c\u4f46\u662f\u5355\u7eaf\u7edf\u8ba1positionid\u548cconnectiontype\u5176\u5b9e\u662f\u6ca1\u6709\u529e\u6cd5\u8868\u8fbe\u51fa\u8fd9\u4e2a\u7279\u5f81\u7684\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u505a\u7ec4\u5408\u7279\u5f81\u7684\u7edf\u8ba1\uff0c\u6bd4\u5982\u7edf\u8ba1\u5b83\u4eec\u5171\u540c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8f6c\u6362\u6b21\u6570\uff0c\u8f6c\u6362\u7387\u7b49\u3002\u5bf9\u4e8e\u54ea\u4e9b\u7ec4\u5408\u7279\u5f81\u6bd4\u8f83\u6709\u7528\uff0c \u7528\u6237id\u7684\u8865\u5145: \u5bf9user_app_installed\u548cuser_app_actions\u4e24\u4e2a\u8868\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u5386\u53f2\u7edf\u8ba1\u3002\u56e0\u4e3auserid\u7ef4\u5ea6\u5f88\u9ad8\uff0c\u6240\u4ee5\u5728train.csv\u91cc\u9762\u5f88\u96be\u5f97\u5230\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684userid\u7684\u7279\u5f81\u8868\u8fbe\u7684\u3002\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u90a3\u4e24\u4e2a\u5b89\u88c5\u5217\u8868\uff0c\u7edf\u8ba1\u51fauserid\u7684\u5386\u53f2\u5b89\u88c5\u6b21\u6570\u4f5c\u4e3a\u7279\u5f81\u7684\u8865\u5145\u3002\u540c\u6837\u5730\uff0c\u4e5f\u53ef\u4ee5\u7edf\u8ba1\u51faappid\u7684\u5386\u53f2\u5b89\u88c5\u6b21\u6570\u3002\u901a\u8fc7\u6620\u5c04userid\u548cuser.csv\uff0cappid\u548capp_category.csv\uff0c\u8fd8\u53ef\u4ee5\u5f97\u5230\u5176\u4ed6\u7279\u5f81\u7684\u4e00\u4e9b\u7edf\u8ba1\u503c\u3002\u505a\u5b8c\u8fd9\u4e2a\u6700\u8d77\u7801\u53ef\u4ee5\u6709\u4e07\u5206\u4e4b\u4e94\u7684\u6548\u679c\u63d0\u5347\u3002 \u591a\u6ce8\u610f\u4e00\u4e9b\u91cd\u590d\u7684\u6570\u636e \uff0ctrain.csv\u4e2d\u6709\u5f88\u591a\u6570\u636e\u662f\u91cd\u590d\u51fa\u73b0\u7684\uff0c\u9664\u4e86label\u4e0d\u540c\u4ee5\u5916\uff0c\u5176\u4ed6\u7684\u7279\u5f81\u662f\u5168\u90e8\u4e00\u6837\u7684\u3002\u5f88\u591a\u5c0f\u4f19\u4f34\u5bf9\u8fd9\u4e9b\u6570\u636e\u9009\u62e9\u4e86\u53bb\u91cd\uff0c\u4f46\u662f\u4e0d\u5e78\u7684\u662f\uff0c\u6d4b\u8bd5\u96c6\u4e2d\u4e5f\u6709\u7c7b\u4f3c\u6570\u636e\u7684\u51fa\u73b0\u3002\u53bb\u91cd\u4ee5\u540e\uff0c\u7c7b\u4f3c\u7684\u6570\u636e\u6a21\u578b\u5f97\u4e0d\u5230\u8bad\u7ec3\uff0c\u6700\u540e\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u8868\u73b0\u80af\u5b9a\u662f\u4e0d\u597d\u7684\u3002\u6211\u4eec\u5bf9\u4e8e\u8fd9\u7c7b\u6570\u636e\u505a\u7684\u5904\u7406\u662f\u6dfb\u52a0\u4e00\u4e9b\u7279\u5f81\u53bb\u6807\u8bb0\u5b83\u4eec\u3002\u6bd4\u8f83\u7b80\u5355\u5730\u53ef\u4ee5\u4f7f\u7528\u987a\u5e8f\u6807\u7b7e\uff0c\u6807\u8bb0\u5b83\u662f\u7b2c\u51e0\u6b21\u91cd\u590d\u51fa\u73b0\u7684\u3002\u4f46\u662f\u8fd9\u6837\u5b50\u7b80\u5355\u7684\u4e0d\u4e00\u5b9a\u591f\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u53bb\u6316\u6398\u66f4\u6df1\u7684\u7279\u5f81\u53bb\u8868\u8fbe\u3002 \u7edf\u8ba1\u7279\u5f81\u7684\u6784\u5efa\u6280\u5de7(\u91cd\u8981): \u56e0\u4e3a\u6211\u4eec\u8981\u5bf9\u6bcf\u5929\u8fdb\u884c\u7edf\u8ba1\uff0c\u6240\u4ee5\u6211\u5efa\u8bae\u5927\u5bb6\u628aclicktime\u548cconversiontime\u8f6c\u5316\u4e3a\u8fd9\u79cd\u5f62\u5f0f\uff0c\u65b9\u4fbf\u6211\u4eec\u7edf\u8ba1\u4e00\u4e9b\u65f6\u95f4\u7279\u5f81\uff0c\u4e5f\u65b9\u4fbf\u6211\u4eec\u5212\u5206\u6570\u636e\u96c6\uff1a \u56fe\u6a21\u578b\u7279\u5f81: \u6211\u4eec\u53ef\u4ee5\u628a\u4e1a\u52a1\u8f6c\u5316\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u56fe\u6a21\u578b\uff0c\u7136\u540e\u5728\u56fe\u6a21\u578b\u91cc\u9762\u627e\u4e00\u4e9b\u7edf\u8ba1\u91cf\u6765\u4f5c\u4e3a\u7279\u5f81\uff0c\u901a\u8fc7\u56fe\u6a21\u578b\u4e5f\u53ef\u4ee5\u66f4\u52a0\u6df1\u5165\u7684\u7406\u89e3\u4e1a\u52a1\u573a\u666f\uff0c\u6211\u505a\u4e2a\u7b80\u5355\u7684\u793a\u610f\u56fe\uff1a \u521d\u6b65\u5206\u6790\uff1a\u4e0a\u56fe\u662f\u4e00\u4e2a\u7528\u6237\u5bf9\u4e00\u4e2a\u65f6\u95f4\u7a97\u53e3\u5185\u7684app\u7684\u8003\u5bdf\u8bb0\u5f55\uff0capp\u4e4b\u95f4\u7684\u7bad\u5934\u8868\u793a\u7528\u6237\u70b9\u51fb\u4e4b\u95f4\u7684\u8df3\u8f6c\uff0c\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u6bcf\u4e2aapp\u7684\u5165\u5ea6\uff0c\u8fd9\u6837\u53ef\u4ee5\u627e\u5230\u54ea\u4e2aapp\u66f4\u53d7\u6b64\u7528\u6237\u6b22\u8fce\u3002 \u56fe\u6a21\u578b\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u7684\u5206\u6790\u5de5\u5177\uff0c\u6bd4\u5982\u4f60\u8fd8\u53ef\u4ee5\u52a0\u81ea\u73af\uff0c\u8fd9\u6837\u53ef\u4ee5\u770b\u5230\u7528\u6237\u7684\u91cd\u590d\u70b9\u51fb\u60c5\u51b5\u7b49\u7b49\u3002 \u5927\u5185\u5b58\u6570\u636e\u7684\u5904\u7406\u529e\u6cd5: \u7279\u5f81\u5904\u7406 \u5728\u5904\u7406\u5927\u89c4\u6a21\u539f\u59cb\u6570\u636e\u65f6\uff0c\u9700\u8981\u5145\u5206\u501f\u52a9\u5916\u5b58\uff08\u786c\u76d8\uff09\u7a7a\u95f4\uff0c\u53ea\u628a\u771f\u6b63\u9700\u8981\u5904\u7406\u7684\u6570\u636e\u653e\u8fdb\u5185\u5b58\u3002\u4e00\u822c\u800c\u8a00\uff0c\u91c7\u7528\u6d41\u5f0f\u3001\u5206\u5757\u7684\u65b9\u5f0f\u5904\u7406\u6570\u636e\u53ef\u4ee5\u89e3\u51b3\u5927\u90e8\u5206\u95ee\u9898\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5177\u4f53\u7684\u6280\u5de7\u3002 a\uff09 \u53ea\u52a0\u8f7d\u9700\u8981\u7684\u6570\u636e\u5230\u5185\u5b58\u3002 \u6709\u4e9b\u7279\u5f81\u53ef\u4ee5\u901a\u8fc7\u5355\u6761\u6570\u636e\u76f4\u63a5\u5f97\u5230\uff0c\u5982\u661f\u671f\u7279\u5f81\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528 streaming \u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\uff0c\u6bcf\u6b21\u8bfb\u5165\u82e5\u5e72\u6570\u636e\uff08chunk\uff09\uff0c\u5904\u7406\uff0c\u751f\u6210\u7279\u5f81\uff0c\u7136\u540e\u518d\u5199\u5230\u786c\u76d8\u3002\u4f7f\u7528 pandas \u7684 read_csv\uff0c\u53ef\u4ee5\u8bbe\u7f6e chunksize \u53c2\u6570\uff0c\u8b6c\u5982 for chunk in read_csv ( infile, chunksize=10000 )\uff1b b\uff09 \u53ea\u4fdd\u7559\u9700\u8981\u7684\u6570\u636e\u5728\u5185\u5b58\u3002 \u51b3\u8d5b\u7684\u6570\u636e\u53ef\u4ee5\u76f4\u63a5\u88c5\u5230 16G \u5185\u5b58\u4e2d\uff0c\u6bcf\u6b21\u751f\u6210\u4e00\u6761\u6837\u672c\u7684\u7279\u5f81\uff0c\u5c31\u628a\u7279\u5f81\u76f4\u63a5\u5199\u5165\u786c\u76d8\uff0c\u4e0d\u5728\u5185\u5b58\u4fdd\u7559\u3002\u5982\u679c\u751f\u6210\u7684\u7279\u5f81\u8f83\u591a\uff0c\u53ef\u4ee5\u5206\u591a\u6b21\u751f\u6210\uff0c\u5199\u5230\u5206\u6563\u7684\u7279\u5f81\u6587\u4ef6\uff0c\u6700\u540e\u8fdb\u884c\u4e00\u4e2a merge \u64cd\u4f5c\u3002\u5728 merge \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5bf9\u591a\u4e2a\u7279\u5f81\u6587\u4ef6\u6309\u7167\u7edf\u4e00\u7684 key \u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u540c\u65f6\u626b\u63cf\u591a\u4e2a\u7279\u5f81\u6587\u4ef6\uff0c\u8fdb\u884cmerge\uff0c\u518d\u5199\u5230\u786c\u76d8\uff1b c\uff09 \u5145\u5206\u5229\u7528\u6392\u5e8f\u52a0\u901f\u3002 \u5728\u4e0a\u9762\u7684 streaming \u5904\u7406\u65b9\u5f0f\u4e2d\uff0c\u6709\u65f6\u9884\u5148\u5bf9\u6587\u4ef6\u6309\u7167\u67d0\u4e9b key \u6392\u5e8f\uff0c\u53ef\u4ee5\u52a0\u901f\u5904\u7406\u3002\u8b6c\u5982\u7edf\u8ba1\u67d0\u4e2a user \u5728\u5404\u4e2a clickTime \u4e4b\u524d\u7684\u5e73\u5747\u8f6c\u5316\u7387\uff0c\u53ef\u4ee5\u5bf9 train.csv \u6309\u7167 user & clickTime \uff08\u5f53\u7136\u53ef\u4ee5\u7ed3\u5408\u5176\u4ed6\u7684 key\uff0c\u5982 positionID\uff09\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u626b\u63cf\u6587\u4ef6\u8fdb\u884c\u7edf\u8ba1\u3002\u53c8\u8b6c\u5982\u7edf\u8ba1\u67d0\u4e2a user \u5728 clickTime \u524d\u5b89\u88c5\u7684 app \u6570\u91cf\uff0c\u53ef\u4ee5\u5bf9 train.csv \u548c user_app_actions.csv \u540c\u65f6\u6309\u7167 user & time \u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u4ea4\u66ff\u626b\u9762\u4e24\u4e2a\u6587\u4ef6\uff0c\u751f\u6210\u7edf\u8ba1\u7279\u5f81\u3002\u5bf9\u4e8e\u6392\u5e8f\u64cd\u4f5c\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Linux \u81ea\u5e26\u7684 sort \u547d\u4ee4\uff0c\u5728\u5c0f\u5185\u5b58\u4e0b\u5b8c\u6210\u6392\u5e8f\u64cd\u4f5c\u3002 \u7efc\u4e0a\uff0c\u5728\u5904\u7406\u5927\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u501f\u9274 split-apply-combine \u7684\u601d\u8def\u3002 \u4e0d\u5c11\u5f00\u6e90\u7684\u5de5\u5177\u652f\u6301\u5916\u5b58\u548c\u5728\u7ebf\u5b66\u4e60\uff0c\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\uff0c\u65e0\u9700\u4e00\u6b21\u6027\u628a\u6240\u6709\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u9020\u6210\u5185\u5b58\u74f6\u9888\u3002\u5e38\u7528\u7684\u4e00\u4e9b\u5de5\u5177\u5982\u4e0b\uff1a a) Vowpal Wabbit\uff1a\u652f\u6301 LR + \u9ad8\u9636\u7279\u5f81\u7ec4\u5408\uff0c\u5728\u7ebf\u5b66\u4e60 b) Libffm\uff1a\u652f\u6301\u5916\u5b58\u5b66\u4e60 c) XGBoost\uff1a\u652f\u6301\u5916\u5b58\u5b66\u4e60 d) Keras\uff1a\u901a\u8fc7\u6a21\u578b\u7684 fit_generator \u65b9\u6cd5\uff0c\u652f\u6301\u6279\u91cf\u8bfb\u5165\u6570\u636e\u8fdb\u884c\u8bad\u7ec3 \u95ee\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u7edf\u8ba1\u5386\u53f2\u8f6c\u5316\u7387\u5728\u5168\u96c6\u4e0a\u7edf\u8ba1\uff0c\u548c\u6ed1\u7a97\u7edf\u8ba1\u90fd\u4f1a\u6709\u6548\u679c\uff0c\u5168\u96c6\u4e0a\u7edf\u8ba1\u4e0d\u7b97\u4eba\u4e3a\u6570\u636e\u6cc4\u9732\u4e48\uff1f \u5728\u5168\u96c6\u4e0a\u9762\u7edf\u8ba1\uff0c\u4f7f\u7528\u4e86\u8fc7\u53bb\u548c\u672a\u6765\u4e24\u90e8\u5206\u6570\u636e\uff0c\u4e00\u822c\u6765\u8bf4\u8fd9\u4e24\u90e8\u5206\u6570\u636e\u5b58\u5728\u76f8\u5173\u6027\u3002\u6240\u4ee5\u4f7f\u7528\u6ed1\u7a97\u548c\u5168\u96c6\u7edf\u8ba1\uff0c\u7279\u5f81\u4e5f\u6709\u4e00\u5b9a\u7684\u76f8\u5173\u6027\uff0c\u53ef\u80fd\u90fd\u4f1a\u6709\u6b63\u5411\u6548\u679c\u3002\u4f46\u7531\u4e8e\u6bd5\u7adf\u4f7f\u7528\u4e86\u672a\u6765\u7684\u6570\u636e\uff08\u5b9e\u9645\u4e1a\u52a1\u573a\u666f\u4e2d\u4e0d\u4f1a\u5b58\u5728\u7684\u6570\u636e\uff09\uff0c\u4f1a\u9020\u6210\u6570\u636e\u6cc4\u9732\uff0c\u9ad8\u4f30\u7ed3\u679c\u3002 \u8bf7\u95ee\u4e13\u5bb6\uff0c\u90a3\u4e2a\u8d1d\u53f6\u65af\u5e73\u6ed1\u5904\u7406\u8f6c\u5316\u7387\u6570\u636e\u7684\u8bdd\uff0c\u662f\u6309\u7167\u5212\u7a97\u5904\u7406\u5408\u9002\u8fd8\u662f\u5168\u96c6\u5904\u7406\uff1f\u5168\u96c6\u5904\u7406\u4f1a\u4e0d\u4f1a\u6709\u70b9\u6570\u636e\u6cc4\u9732\uff1f A\uff1a\u8003\u8651\u4e0b\u6d4b\u8bd5\u96c6\u662f\u5426\u4f1a\u6709\u8fd9\u4e2a\u4fe1\u606f\uff1f\u5982\u679c\u4f7f\u7528\u8bad\u7ec3\u96c6\u7684\u5168\u96c6\u7edf\u8ba1\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\u7684\u7edf\u8ba1\u7ed3\u679c\uff0c\u5176\u5b9e\u8fd9\u4efd\u7279\u5f81\u7684\u6784\u5efa\u903b\u8f91\u4e5f\u662f\u4f7f\u7528\u4e86\u8fc7\u53bb\u7684\u6570\u636e\uff0c\u90a3\u4e48\u5728\u672c\u5730\u8bad\u7ec3\u7684\u65f6\u5019\u4e5f\u5e94\u8be5\u4f7f\u7528\u8fd9\u6837\u7684\u7279\u5f81\u62bd\u53d6\u903b\u8f91\u3002 \u7531\u4e8e\u7279\u5f81\u4ea4\u53c9\u7ec4\u5408\u4f1a\u4ea7\u751f\u7ec4\u5408\u7206\u70b8\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ec0\u4e48\u65b9\u6cd5\u53d1\u73b0\u67d0\u4e2a\u7279\u5f81\u548c\u67d0\u4e2a\u7279\u5f81\u7684\u4ea4\u53c9\u7ec4\u5408\u6709\u6548\uff0c\u9664\u4e86groupby A\uff1a\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5e38\u7528\u7684\u7edf\u8ba1\u6307\u6807\uff0c\u6216\u8005 boxplot FM\u65e2\u7136\u53ef\u4ee5\u8bc6\u522b\u591a\u4e2a\u7279\u5f81\u7684\u4ea4\u53c9\u7ec4\u5408\uff0c\u662f\u4e0d\u662f\u628a\u539f\u59cb\u7279\u5f81\u653e\u8fdb\u53bb\u4e0d\u7528\u7279\u5f81\u4ea4\u53c9\u7ec4\u5408\u8fbe\u5230\u7684\u6548\u679c\u548c\u52a0\u4e86\u5404\u79cd\u7279\u5f81\u7ec4\u5408\u7684LR\u4e00\u6837\uff1f\u8fd8\u662f\u8bf4\u4ecd\u7136\u9700\u8981\u7279\u5f81\u4ea4\u53c9\u548c\u7ec4\u5408\u3002 A\uff1a\u4e0d\u7528\u624b\u52a8\u6784\u9020\u4e00\u4e9b\u7b80\u5355\u7684\u4ea4\u53c9\u7279\u5f81\uff0c\u8b6c\u5982 x1 * x2\uff1b\u4f46\u662f\u53ef\u80fd\u4ecd\u7136\u9700\u8981\u624b\u52a8\u62bd\u53d6\u4e00\u4e9b\u590d\u6742\u7684\u7279\u5f81\uff0c\u8b6c\u5982\u67d0\u4e2a userID \u5728\u67d0\u4e2a appID & positionID \u4e0b\u7684\u7edf\u8ba1\u5e73\u5747\u8f6c\u5316\u7387 Vowpal Wabbit\uff1a\u652f\u6301 LR + \u9ad8\u9636\u7279\u5f81\u7ec4\u5408\uff0c\u5728\u7ebf\u5b66\u4e60\u8fd9\u4e2a\u6709\u6ca1\u6709\u76f8\u5173\u7684\u8d44\u6599\u3002 A\uff1ahttps://github.com/JohnLangford/vowpal_wabbit \u8fd9\u4e2a\u662f\u4f7f\u7528 vw+\u9ad8\u9636\u7279\u5f81\u7ec4\u5408\u7684 criteo pctr \u6bd4\u8d5b\u7b2c\u4e09\u540d\u65b9\u6848\uff1ahttps://github.com/songgc/display-advertising-challenge \u5173\u4e8e\u6a21\u578b\u878d\u5408\u7684\u65b9\u6cd5\u548c\u53c2\u6570\u786e\u5b9a\u6709\u6ca1\u6709\u597d\u7684\u8d44\u6599\u53ef\u4ee5\u53c2\u8003\uff1f A\uff1a\u53c2\u8003\u516c\u4f17\u53f7\u4e4b\u524d\u7684 kaggle \u7ecf\u9a8c\u5206\u4eab\uff0chttp://mp.weixin.qq.com/s/BE1mfmKJTsDSwWi16mllNA \u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u597d\u7684 survey\uff1ahttp://mlwave.com/kaggle-ensembling-guide/ stacking\u7684\u8bdd\u6a21\u578b\u6709\u5dee\u7684\uff0c\u52a0\u4e0a\u4f1a\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\uff1f A\uff1astacking \u8981\u6210\u529f\u7684\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6761\u4ef6\u662f\u6a21\u578b\u96c6\u5408\u5c3d\u91cf diverse\uff0c\u540c\u65f6\u6a21\u578b\u7684\u6027\u80fd\u4e0d\u80fd\u76f8\u5dee\u592a\u5927\u3002\u4ee5\u6b63\u786e\u7387\u4e3a\u4f8b\uff0c90%\u878d\u540880%\u53ef\u80fd\u6bd490%\u878d\u540850%\u6548\u679c\u8981\u597d\u3002\u6a21\u578b\u5dee\u90fd\u662f\u76f8\u5bf9\u7684\uff0c\u8ba9\u4f60\u7684 stacker \u6765\u544a\u8bc9\u4f60\u8fd9\u4e2a\u201c\u5dee\u201d\u6a21\u578b\u662f\u5426\u5bf9\u6a21\u578b\u96c6\u6210\u6709\u6548\u679c\u5427 app\u7a20\u5bc6\u7279\u5f81: \u6211\u4eec\u8fd8\u5c1d\u8bd5\u4e86\u7528word embedding\u7684\u601d\u8def\u4eceuser_installapp\u8868\u4e2d\u63d0\u53d6\u76f8\u5173\u7684\u7279\u5f81\uff0c\u7528Wide & Deep Model\u751f\u6210\u7a20\u5bc6\u7279\u5f81\u3002 \u603b\u7ed3 \u5f88\u7b80\u77ed\uff1a\u5efa\u8bae\u5927\u5bb6\u591a\u89c2\u5bdf\u6570\u636e\uff0c\u5c11\u65e0\u8c13\u7f16\u7801\uff0c\u591a\u601d\u8003\u7279\u5f81\uff0c\u5c11\u8c03\u6574\u53c2\u6570\uff0c\u591a\u60f3\uff0c\u5c11\u8bd5\u3002 \u8282\u7701\u5185\u5b58\u7684\u65b9\u6cd5\uff1a \\1. \u6211\u4eec\u662f\u5c06\u6570\u636e\u6309\u5929\u8fdb\u884c\u5212\u5206\u6765\u63d0\u53d6\u7279\u5f81\uff0c\u90a3\u4e48\u5bf9\u5176\u4ed6\u8868merge\u4e4b\u524d\uff0c\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u53ea\u7559\u4e0b\u5728\u8fd9\u4e00\u5929\u4e2d\u51fa\u73b0\u8fc7\u7684app\u3001creativeID\u3001positionID\u7b49\u7b49\uff0c\u8fd9\u6837\u80fd\u5927\u5e45\u51cf\u5c11\u8ba1\u7b97\u91cf\uff1b \\2. \u5bf9\u4e24\u4e2a\u8868merge\u524d\u6211\u4eec\u53ea\u9700\u8981\u7559\u4e0b\u9700\u8981\u7684\u90a3\u4e9b\u5217\uff0c\u6bd4\u5982\u53ea\u8ba1\u7b97positionID\u7684\u7edf\u8ba1\u7279\u5f81\u65f6\uff0c\u5176\u4ed6\u4e0d\u76f8\u5173\u7684\u5217\uff08\u6bd4\u5982connectionType\u3001creativeID\u7b49\u7b49\uff09\u5176\u5b9e\u662f\u53ef\u4ee5\u5220\u6389\u7684\uff1b \\3. \u6211\u4eec\u63d0\u53d6\u7684\u7279\u5f81\u5168\u90e8\u4f7f\u7528scipy\u7684csr_matrix\u6765\u5b58\u50a8\uff0c\u5b83\u8f6c\u5316\u6210pandas\u7684DataFrame\u4e5f\u662f\u975e\u5e38\u5feb\u901f\u7684\uff0c\u63d0\u53d6\u5b8c\u7684\u7279\u5f81\u901a\u8fc7numpy.savez\u4fdd\u5b58\u81f3\u786c\u76d8\uff0c\u8fd9\u6837\u8bfb\u53d6\u65f6\u7684\u6548\u7387\u975e\u5e38\u9ad8\u3002 \u51a0\u519b\u7279\u5f81\u5de5\u7a0b: \u7279\u5f81\u8fd9\u4e00\u5757\u53ef\u4ee5\u8bf4\u662f\u6211\u4eec\u7684\u77ed\u677f, \u81f3\u4eca\u8fd8\u4e0d\u61c2\u7fa4\u91cc\u5404\u4f4d\u5927\u4f6c\u8bf4\u7684trick\u3002 \u6211\u4eec\u7684\u7279\u5f81\u4e3b\u8981\u662f\u4e00\u4e9b\u57fa\u672c\u7684\u7edf\u8ba1\u4fe1\u606f, \u6700\u597d\u7684\u5355\u6a21\u578b\u7528\u5230\u7684\u7279\u5f81\u7b97\u4e0a\u539f\u59cb\u7279\u5f81\u53ea\u670940\u51e0\u7ef4\u3002 \u5173\u4e8e\u7fa4\u91cc\u8ba8\u8bba\u6700\u591a\u7684\u8f6c\u5316\u7387, \u6211\u4eec\u8bd5\u8fc7\u5168\u5c40\u7edf\u8ba1, \u7a97\u53e3\u7edf\u8ba1, \u5e73\u6ed1\u4e0e\u4e0d\u5e73\u6ed1, \u5e76\u6ca1\u6709\u53d1\u73b0\u592a\u591a\u7684\u5dee\u5f02\u6027\u3002 \u76ee\u524d\u6211\u4eec\u91c7\u7528\u7684\u8f6c\u5316\u7387\u662f\u7edf\u8ba1\u70b9\u51fb\u65e5\u4e4b\u524d\u7684\u8f6c\u5316\u7387, \u4e0d\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\u8fc7\u5c11\u7684, \u8fd9\u4e48\u505a\u7eaf\u7cb9\u662f\u56e0\u4e3a\u7b80\u5355, \u901f\u5ea6\u5feb, \u800c\u4e14\u5728\u6211\u4eec\u7684\u5b9e\u9a8c\u91cc\u6548\u679c\u5e76\u4e0d\u5dee\u4e8e\u90a3\u4e9b\u590d\u6742\u7684\u624b\u6bb5, \u53ef\u80fd\u5728\u6211\u4eec\u7684\u6a21\u578b\u91cc\u8f6c\u5316\u7387\u5e76\u4e0d\u91cd\u8981\u3002 \u5176\u6b21, \u6211\u4eec\u4e5f\u5c1d\u8bd5\u8fc7\u4f7f\u7528Word2vec, Doc2vec\u7b49\u601d\u60f3\u4e3auser, app\u5b66\u4e60\u4f4e\u7ef4\u5411\u91cf\u7279\u5f81, \u4f46\u5b9e\u9a8c\u7ed3\u679c\u90fd\u4e0d\u592a\u7406\u60f3, \u6211\u4eec\u5df2\u7ecf\u653e\u5f03\u4e86\u4f7f\u7528\u5b89\u88c5\u5217\u8868\u3002 pandas\u7684iterrows\u4f18\u5316: \u5982\u679c\u4e0d\u5f97\u4e0d\u7528\u8fed\u4ee3\uff0c\u6bd4\u5982\u91cd\u590d\u70b9\u51fb\u7684trick\uff0c\u6211\u60f3\u4e86\u5f88\u591a\u529e\u6cd5\u8ba9\u5b83\u901a\u8fc7\u884c\u64cd\u4f5c\u5b9e\u73b0\uff0c\u7ed3\u679c\u4e00\u76f4\u884c\u4e0d\u901a\u3002\u7f51\u4e0a\u5f88\u591a\u4eba\u4f1a\u5efa\u8bae\u8bf4\u7528iterows\uff0c\u5b9e\u9645\u4e0a\u5373\u4f7f\u662fn\u7ea7\u522b\u7684iterows\u90fd\u633a\u6162\u7684\u3002\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u628aDataframe\u8f6c\u6362\u6210dict\uff0c\u4e00\u4e2a\u752810\u5c0f\u65f6\u624d\u80fditerrows\u5b8c\u7684Dataframe\uff0c\u8f6c\u6362\u6210dict\u53ef\u80fd\u53ea\u89811\uff0c2\u5206\u949f\u53ef\u4ee5\u8fed\u4ee3\u5b8c\u3002 \u6587\u4ef6\u7ba1\u7406: \u8fd9\u4e2a\u662f\u6211\u4e2a\u4eba\u7684\u4e00\u4e2a\u6478\u7d22\u51fa\u6765\u7684\u4e00\u4e2a\u65b9\u5f0f\uff0c\u4e5f\u4e0d\u77e5\u9053\u4e13\u4e0d\u4e13\u4e1a\u3002\u6211\u7684\u6574\u4e2a\u76ee\u5f55\u662f final \u653e\u51b3\u8d5b\u7684\u6570\u636e\u96c6\uff0c\u7136\u540echmod \u2013R 555\uff0c\u5373\u6ca1\u6709\u5199\u5165\u6743\u9650\uff0c\u53ef\u4ee5\u4fdd\u62a4\u6570\u636e\u96c6\u3002\u7136\u540edata\u518d\u6765\u653e\u4e2d\u95f4\u4ea7\u751f\u7684\u6570\u636e\u96c6\uff0c\u7136\u540ecode\u91cc\u9762\u4f1a\u6709\u4ee5\u6570\u636e\u96c6\u547d\u540d\u7684\u4ee3\u7801\u5148\u5bf9\u6bcf\u4e2a\u8868\u505a\u4e00\u4e9b\u7b80\u5355\u5904\u7406\uff0c\u8fd9\u6837\u5728\u4e4b\u540e\u7684\u6d4b\u8bd5\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u7528\u53cd\u590d\u8fd0\u884c\u4e00\u4e9b\u91cd\u590d\u591a\u4f59\u7684\u8fd0\u7b97\u3002\u4f8b\u5982\uff1a ad.py \u8bf7\u7b80\u8981\u63cf\u8ff0\u4f60\u4eec\u7684\u89e3\u9898\u601d\u8def\u53ca\u7b97\u6cd5\u4eae\u70b9\uff0c\u5e76\u5177\u4f53\u8c08\u4e00\u4e0b\u7279\u5f81\u62bd\u53d6\u3001\u8bad\u7ec3\u6a21\u578b\u7684\u5efa\u7acb\uff0c\u4ee5\u53ca\u6a21\u578b\u7684\u8bad\u7ec3\u601d\u60f3\u3002 \u5927\u5bb6\u7684\u89e3\u9898\u601d\u8def\u90fd\u6bd4\u8f83\u76f8\u4f3c\u3002\u6211\u4eec\u89e3\u9898\u6b65\u9aa4\u5206\u4e3a\u6570\u636e\u9884\u5904\u7406\u3001\u6570\u636e\u53bb\u566a\u3001\u7279\u5f81\u63d0\u53d6\u3001\u6a21\u578b\u6784\u5efa\u548c\u6a21\u578b\u878d\u54085\u4e2a\u90e8\u5206\u3002\u7531\u4e8e\u5728\u7279\u5f81\u4e0a\u63d0\u51fa\u4e86\u7a00\u758f\u7279\u5f81\u7684\u8f6c\u5316\u7387\u7f16\u7801\u65b9\u6848\uff0c\u5728\u6a21\u578b\u4e0a\u63d0\u51fa\u4e86nffm\u7cfb\u5217\u6a21\u578b\uff0c\u5e76\u89e3\u51b3\u4e86\u4e00\u7cfb\u5217\u6a21\u578b\u8bad\u7ec3\u4ee5\u53ca\u6a21\u578b\u5b9e\u73b0\u95ee\u9898\uff0c\u6211\u4eec\u624d\u80fd\u53d6\u5f97\u597d\u7684\u6210\u7ee9\u3002\u7279\u5f81\u62bd\u53d6\u5206\u4e3a4\u4e2a\u90e8\u5206\uff0c\u5373\u8f6c\u5316\u7387\u3001\u70b9\u51fb\u7279\u5f81\u3001\u5b89\u88c5\u7279\u5f81\u548c\u65f6\u95f4\u7279\u5f81\u3002\u6a21\u578b\u4e0a\uff0c\u6211\u4eec\u91c7\u7528\u4e864\u79cd\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u5305\u62ec\u4e00\u4e2a\u4f20\u7edf\u7684GBDT\u6a21\u578b\uff0c\u4ee5\u53ca\u53e6\u5916\u4e09\u4e2a\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\uff0c\u5206\u522b\u662fwide&deep\u7f51\u7edc\u3001pnn\u7f51\u7edc\u548cnffm\u7f51\u7edc\u3002GBDT\u6a21\u578b\u6211\u4eec\u4f7f\u7528\u7684\u662flightgbm\uff0c\u800cwide&deep\u7f51\u7edc\u3001pnn\u7f51\u7edc\u548cnffm\u7f51\u7edc\u90fd\u662f\u6211\u4eec\u4f7f\u7528tensorflow\u548ctflearn\u81ea\u5df1\u5b9e\u73b0\u7684\uff0c\u4e5f\u6b63\u57fa\u4e8e\u8fd9\u70b9\uff0c\u4f7f\u5f97\u6211\u4eec\u5f88\u5bb9\u6613\u505a\u6a21\u578b\u6539\u8fdb\u3001\u5fae\u8c03\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u8da3\u7684\u4e8b\u60c5\u3002 \u5173\u4e8e\u7279\u5f81\u7684\u63d0\u53d6 \uff0c\u76f8\u4fe1\u5f88\u591a\u961f\u4f0d\u4e5f\u9047\u5230\u8fc7\u74f6\u9888\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u9009\u62e9\u7684\u65b9\u5f0f\u662f\u591a\u601d\u8003\u8d5b\u9898\u7684\u5b9e\u9645\u610f\u4e49\u3002\u8d5b\u9898\u8981\u6c42\u662f\u9884\u6d4b\u5e7f\u544a\u88ab\u70b9\u51fb\u540e\u53d1\u751f\u6fc0\u6d3b\u7684\u6982\u7387\uff0c\u800c\u7528\u6237\u70b9\u51fb\u5e7f\u544a\u540e\u662f\u5426\u6fc0\u6d3b\u7684\u4e00\u4e2a\u4e3b\u8981\u9a71\u52a8\u529b\u5c31\u662f\u7528\u6237\u5bf9\u5e7f\u544a\u662f\u5426\u6709\u9700\u6c42\uff0c\u4ee5\u53ca\u7528\u6237\u81ea\u8eab\u7684\u5b89\u88c5\u529b\uff0c\u6240\u4ee5\u7528\u6237\u7684\u70b9\u51fb\u3001\u5b89\u88c5\u5386\u53f2\u4ee5\u53ca\u7528\u6237\u9488\u5bf9\u5177\u4f53\u67d0\u4e2aApp\u7684\u70b9\u51fb\u5b89\u88c5\u5386\u53f2\u5c24\u4e3a\u91cd\u8981\u3002\u57fa\u4e8e\u8fd9\u6837\u7684\u601d\u8003\uff0c\u6211\u4eec\u6784\u9020\u51fa\u4e86\u4e00\u7cfb\u5217\u6548\u679c\u663e\u8457\u7684\u7279\u5f81\uff0c\u5305\u62ec\u7528\u6237\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u662f\u5426\u6709\u70b9\u51fb\u3001\u5b89\u88c5\u7684\u8bb0\u5f55\uff1b\u7528\u6237-App\u5bf9\u662f\u5426\u5728\u4e4b\u524d\u51fa\u73b0\u8fc7\u3001\u51fa\u73b0\u8fc7\u591a\u5c11\u6b21\uff1b\u7528\u6237-App\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\u7b49\u3002\u6b64\u5916\uff0c\u5e7f\u544a\u7684\u4f4d\u7f6e\u4fe1\u606f\u4e5f\u5c24\u4e3a\u91cd\u8981\u3002\u4e0d\u540c\u7684\u5e7f\u544a\u4f4d\u53d7\u5230\u7684\u5173\u6ce8\u5ea6\u4e0d\u540c\uff0c\u6240\u53d6\u5f97\u7684\u63a8\u5e7f\u6548\u679c\u4e5f\u4e0d\u540c\u3002 \u57fa\u4e8e\u6b64\uff0c\u6211\u4eec\u6316\u6398\u4e86\u6570\u4e2a\u4e0e\u5e7f\u544a\u4f4d\u76f8\u5173\u7684\u7279\u5f81\uff0c\u5305\u62ec\u8f6c\u5316\u7387\u7279\u5f81\u3001\u5386\u53f2\u70b9\u51fb\u91cf\u7279\u5f81\uff0c\u4ee5\u53ca\u7528\u6237\u3001App\u4e0e\u5e7f\u544a\u4f4d\u7684\u4e00\u4e9b\u7ec4\u5408\u7279\u5f81\u3002\u6b64\u5916\uff0c\u5f88\u591a\u4eba\u90fd\u6ce8\u610f\u5230\u4e86\u8f6c\u5316\u7387\u7279\u5f81\u7684\u91cd\u8981\u6027\uff0c\u4f46\u5f88\u591a\u4eba\u5bb9\u6613\u5ffd\u7565\u7684\u4e00\u70b9\u662f\u7528\u6237\u7684\u8f6c\u5316\u7387\u7279\u5f81\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u5229\u7528\u7528\u6237\u8f6c\u5316\u7387\u65f6\u9700\u8981\u8fdb\u884c\u6070\u5f53\u7684\u5206\u7c7b\uff0c\u4ee5\u514d\u51fa\u73b0\u62df\u5408\u7684\u73b0\u8c61\u3002 \u8bf7\u7b80\u8981\u63cf\u8ff0\u4f60\u4eec\u7684\u89e3\u9898\u601d\u8def\u53ca\u7b97\u6cd5\u4eae\u70b9\uff0c\u5e76\u5177\u4f53\u8c08\u4e00\u4e0b\u7279\u5f81\u62bd\u53d6\u3001\u8bad\u7ec3\u6a21\u578b\u7684\u5efa\u7acb\uff0c\u4ee5\u53ca\u6a21\u578b\u7684\u8bad\u7ec3\u601d\u60f3\u3002 \u6211\u4eec\u7684\u7b97\u6cd5\u6846\u67b6\u4e3a\uff1a\u6570\u636e\u6e05\u6d17\u3001\u6570\u636e\u5212\u5206\u3001\u7279\u5f81\u63d0\u53d6\u3001\u6a21\u578b\u8bad\u7ec3\u3001\u6a21\u578b\u878d\u5408\u3002 \u6570\u636e\u6e05\u6d17\u5e94\u8be5\u7b97\u662f\u6211\u4eec\u7684\u4e00\u4e2a\u4eae\u70b9\u4e86\u3002\u7531\u4e8e\u8f6c\u5316\u56de\u6d41\u65f6\u95f4\u6709\u957f\u6709\u77ed\uff0c\u6240\u4ee5\u6700\u540e\u4e94\u5929\u7684label\u53ef\u80fd\u662f\u4e0d\u51c6\u786e\u7684\uff0c\u5c24\u5176\u662f\u7b2c30\u5929\u3002\u5982\u679c\u5c06\u7b2c30\u5929\u7684\u6570\u636e\u5168\u90e8\u5220\u9664\uff0c\u5c06\u4f1a\u4e22\u5931\u6389\u5927\u91cf\u6709\u7528\u4fe1\u606f\uff1b\u5982\u679c\u5168\u90e8\u4fdd\u7559\uff0c\u53c8\u5f15\u5165\u4e86\u76f8\u5f53\u7a0b\u5ea6\u7684\u566a\u58f0\u3002\u800c\u6211\u4eec\u53d1\u73b0\uff0c\u8f6c\u5316\u56de\u6d41\u65f6\u95f4\u662f\u4e0eApp ID\u6709\u5173\u7684\u3002\u4e8e\u662f\u6211\u4eec\u7edf\u8ba1\u4e86\u6bcf\u4e2aApp ID\u7684\u5e73\u5747\u8f6c\u5316\u56de\u6d41\u65f6\u95f4\uff0c\u5e76\u4e14\u5220\u9664\u6389\u4e86\u7b2c30\u5929\u4e2d\u5e73\u5747\u8f6c\u5316\u56de\u6d41\u65f6\u95f4\u504f\u957f\u7684\u6570\u636e\u3002\u8fd9\u6837\u5904\u7406\u4e4b\u540e\uff0c\u6027\u80fd\u7a0d\u5fae\u6709\u4e86\u4e00\u4e9b\u63d0\u5347\u3002 \u6b64\u5916\uff0c\u6b64\u524d\u4ecb\u7ecd\uff0c\u6211\u4eec\u5bf9\u7279\u5f81\u4e5f\u8fdb\u884c\u4e86\u5145\u5206\u7684\u5206\u6790\u3002\u5bf9\u4e8eposition ID\u7684\u5145\u5206\u6316\u6398\u3001\u5bf9\u4e8e\u7528\u6237\u4ea4\u4e92\u5386\u53f2\u7684\u5145\u5206\u5206\u6790\u90fd\u4e3a\u6211\u4eec\u5e26\u6765\u4e86\u663e\u8457\u7684\u63d0\u5347\u6548\u679c\u3002\u6b64\u5916\u8fd8\u6709\u4ea4\u53c9\u7279\u5f81\u7684\u8f6c\u5316\u7387\u5728\u540e\u671f\u4e5f\u8d77\u5230\u4e86\u4e00\u5b9a\u7684\u6548\u679c\u3002 \u6570\u636e\u5212\u5206\u90e8\u5206\uff0c\u7531\u4e8e\u673a\u5668\u6761\u4ef6\u7684\u9650\u5236\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u7b2c26\u5929-\u7b2c30\u5929\u7684\u6570\u636e\u3002\u5173\u4e8e\u8bad\u7ec3\u96c6\u9a8c\u8bc1\u96c6\u7684\u5212\u5206\uff0c\u6211\u4eec\u91c7\u7528\u7684\u662f5\u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002 \u7279\u5f81\u63d0\u53d6\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u5176\u5206\u4e3a\u56db\u9879\uff1a 1\uff09\u57fa\u7840\u7279\u5f81\uff0c\u5305\u62ec\u7528\u6237\u7684\u57fa\u672c\u7279\u5f81\u3001\u5e7f\u544a\u7684\u57fa\u672c\u7279\u5f81\u3001\u4e0a\u4e0b\u6587\u7279\u5f81\uff1b 2\uff09\u7edf\u8ba1\u7279\u5f81\uff0c\u5bf9\u57fa\u7840\u7279\u5f81\u8fdb\u884c\u4ea4\u53c9\u540e\u518d\u7edf\u8ba1\uff0c\u5305\u62eccount\u64cd\u4f5c\u548cunique\u64cd\u4f5c\uff1b 3\uff09 \u65f6\u95f4\u76f8\u5173\u7279\u5f81\uff0c\u4e3b\u8981\u7edf\u8ba1\u4e86\u7528\u6237\u6216\u7528\u6237-App\u5728\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u70b9\u51fb\u6b21\u6570\u6216\u8005\u5b89\u88c5\u6b21\u6570\uff1b 4\uff09\u6982\u7387\u4f30\u8ba1\u7279\u5f81\uff0c\u5bf9\u5f88\u591aID\u7c7b\u7279\u5f81\uff0c\u5305\u62ec\u4ea4\u53c9ID\u7c7b\u7279\u5f81\u505a\u4e86\u6982\u7387\u4f30\u8ba1\u3002 \u6a21\u578b\u8bad\u7ec3\u90e8\u5206\uff0c\u6211\u4eec\u521a\u5f00\u59cb\u4e00\u76f4\u4f7f\u7528\u7684\u662fLightGBM\uff0c\u8bad\u7ec3\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u5728\u9a8c\u8bc1\u7279\u5f81\u6709\u6548\u6027\u65b9\u9762\u53ef\u4ee5\u5927\u5927\u7f29\u77ed\u65f6\u95f4\u3002\u6211\u4eec\u7684\u6a21\u578b\u878d\u5408\u91c7\u7528\u7684\u662fStacking\u65b9\u6cd5\u3002\u9664\u4e86LightGBM\u4e4b\u5916\uff0c\u6211\u4eec\u53c8\u8bad\u7ec3\u4e86FFM\u3001LR\u3001GBDT\u3001ET\u6a21\u578b\u3002\u6700\u7ec8Stacking\u5e2e\u52a9\u6211\u4eec\u63d0\u9ad8\u4e862.5\u4e2a\u4e07\u5206\u70b9\u5de6\u53f3\u3002","title":"1.12 \u7b97\u6cd5idea"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#lookalike","text":"Lookalike\u535a\u6587 \u7b2c\u4e00\u79cd\u5c31\u662f\u663e\u6027\u7684\u5b9a\u4f4d\uff0c\u5e7f\u544a\u4e3b\u6839\u636e\u7528\u6237\u7684\u6807\u7b7e\u76f4\u63a5\u5b9a\u4f4d \u7b2c\u4e8c\u79cd\u505a\u6cd5\uff0c\u901a\u8fc7\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u7684\u6a21\u578b\uff0c\u6765\u5b9a\u4f4d\u5e7f\u544a\u4e3b\u7684\u6f5c\u5728\u7528\u6237","title":"Lookalike\u7b97\u6cd5[\u6269\u5c55]"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#lookalike_1","text":"","title":"Lookalike\u5165\u6a21\u7279\u5f81"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_15","text":"\u6240\u8c13\u884c\u4e3a\u7ed3\u679c\u6570\u636e\u662f\u5df2\u7ecf\u91c7\u53d6\u4e86\u5177\u4f53\u884c\u52a8\u7684\u6570\u636e\uff0c\u4f8b\u5982\u8d2d\u4e70\u6570\u636e\uff0c\u5165\u8d44\u6570\u636e\u7b49\u3002","title":"\u884c\u4e3a\u7ed3\u679c\u6570\u636e"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_16","text":"\u6240\u8c13\u884c\u4e3a\u610f\u5411\u6570\u636e\u662f\u503e\u5411\u4e8e\u91c7\u53d6\u67d0\u79cd\u884c\u4e3a\u7684\u4eba\u7fa4\u6570\u636e\uff0c\u6700\u5178\u578b\u7684\u662f\u641c\u7d22\u5f15\u64ce\u7684\u6570\u636e.","title":"\u884c\u4e3a\u610f\u5411\u6570\u636e"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_17","text":"\u4ece\u4e1a\u52a1\u903b\u8f91\u6765\u8bf4\uff0c\u5177\u6709\u67d0\u79cd\u504f\u597d\u6216\u8005\u5c5e\u4e8e\u67d0\u79cd\u7c7b\u578b\u7684\u4eba\u7fa4\u5f80\u5f80\u4f1a\u66f4\u503e\u5411\u4e8e\u8d2d\u4e70\u67d0\u6b3e\u4ea7\u54c1\uff0c\u662f\u5e7f\u544a\u4e3b\u666e\u904d\u9009\u7528\u7684\u4e00\u79cd\u6570\u636e\u3002","title":"\u884c\u4e3a\u504f\u597d\u6570\u636e"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_18","text":"\u6240\u8c13\u884c\u4e3a\u6a21\u5f0f\u662f\u6307\u901a\u8fc7\u5206\u6790\u6d88\u8d39\u8005\u7684\u884c\u4e3a\u4e0e\u65f6\u95f4\u3001\u7a7a\u95f4\u7684\u5173\u7cfb\uff0c\u4ee5\u53ca\u4e00\u7cfb\u5217\u884c\u4e3a\u4e4b\u95f4\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5e8f\u5217\u5173\u7cfb\uff0c\u603b\u7ed3\u51fa\u7684\u5177\u6709\u4e00\u5b9a\u4e00\u81f4\u6027\u610f\u4e49\u7684\u884c\u4e3a\u8868\u73b0\uff0c\u901a\u8fc7\u8fd9\u4e9b\u4e00\u81f4\u6027\u6a21\u5f0f\u9884\u6d4b\u76f8\u5173\u884c\u4e3a, \u76ee\u524d\u8fd8\u5904\u5728\u63a2\u7d22\u548c\u4f18\u5316\u9636\u6bb5.","title":"\u884c\u4e3a\u6a21\u5f0f\u6570\u636e"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#lookaliketrick","text":"","title":"Lookalike\u5e94\u7528Trick"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_19","text":"","title":"\u7ed3\u5408\u805a\u7c7b\u7b97\u6cd5\u4e00\u8d77\u4f7f\u7528"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_20","text":"\u5fae\u4fe1\u670b\u53cb\u5708Lookalike \u5fae\u4fe1\u670b\u53cb\u5708LookalikePPT \u793e\u4ea4\u540c\u8d28\u6027\u548c\u793e\u4ea4\u5f71\u54cd\u529b\u662f\u793e\u4ea4\u5173\u7cfb\u6570\u636e\u7684\u4e24\u4e2a\u6838\u5fc3\u4ef7\u503c, \u670b\u53cb\u5708\u5e7f\u544a\u91cd\u70b9\u4f1a\u6316\u6398\u8fd9\u4e24\u4e2a\u4ef7\u503c word2vec \u2014> node2vec \u5728\u56fe\u7f51\u7edc\u4e0a\u6309\u7167\u4e00\u4e2a\u641c\u7d22\u7684\u65b9\u6cd5\u751f\u6210\u8282\u70b9\u5e8f\u5217\uff0c\u8fd9\u4e2a\u8282\u70b9\u7684\u5e8f\u5217\u53ef\u4ee5\u5bf9\u5e94\u5230\u81ea\u7136\u8bed\u8a00\u7684\u4e00\u4e2a\u53e5\u5b50\uff0c\u540e\u9762\u6211\u4eec\u901a\u8fc7Word2Vec\u7684\u6846\u67b6\uff0c\u5c06\u8282\u70b9embedding\u4e3a\u4e00\u4e2a\u5411\u91cf\u3002 \u6240\u4ee5\u5bf9\u4e8e\u505anetwork embedding\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u751f\u6210\u8282\u70b9\u5e8f\u5217\u7684\u641c\u7d22\u7b56\u7565\u975e\u5e38\u91cd\u8981\u3002\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5c31\u662f\u968f\u673a\u6e38\u8d70\uff0c\u968f\u673a\u6e38\u8d70\u4e00\u65b9\u9762\u751f\u6210\u8282\u70b9\u5e8f\u5217\uff0c\u53e6\u4e00\u65b9\u9762\u4e5f\u662f\u5bf9\u56fe\u7684\u4e00\u79cd\u91c7\u6837\uff0c\u964d\u4f4e\u4e86\u8ba1\u7b97\u91cf\u3002 \u968f\u673a\u6e38\u8d70\u7684\u7b97\u6cd5\u8c03\u6574\u89c1\u4e0a\u9762\u94fe\u63a5","title":"\u5229\u7528\u7528\u6237\u753b\u50cf\uff0c\u7ed9\u7528\u6237\u6253\u6807\u7b7e\uff0c\u5229\u7528\u76f8\u540c\u6807\u7b7e\u627e\u5230\u76ee\u6807\u4eba\u7fa4"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_21","text":"\u793e\u4ea4\u7535\u5546\u662f\u4ec0\u4e48? word2vec\u539f\u7406 \u89e3\u91caauc bandit\u7b97\u6cd5","title":"\u7231\u5e93\u5b58\u4e3b\u9875\u63a8\u8350\u9879\u76ee"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_22","text":"","title":"\u77e5\u8bc6\u56fe\u8c31\u52a9\u529b\u7535\u5f71\u63a8\u8350"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_23","text":"","title":"\u4e8c\u3001\u673a\u5668\u5b66\u4e60 \u6df1\u5ea6\u5b66\u4e60"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#gbdt","text":"","title":"GBDT"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#lightgbm","text":"","title":"LightGBM"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#xgboost_1","text":"","title":"XGBoost"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_24","text":"","title":"\u4e09\u3001\u57fa\u7840\u7b97\u6cd5"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_25","text":"","title":"\u56db\u3001\u6982\u7387\u7edf\u8ba1\u548c\u77e9\u9635"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#_26","text":"","title":"\u4e94\u3001\u63a8\u8350\u7b97\u6cd5"},{"location":"\u9762\u8bd5/\u9762\u8bd5\u51c6\u5907.html#cuda","text":"","title":"\u516d\u3001CUDA\u7f16\u7a0b"}]}